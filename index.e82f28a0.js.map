{"mappings":"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IACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACC;AAEM,MAAM,OAAO;IAClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAC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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-3b42695967ccd6bd.js","src/js/script.js","src/js/Entities/Skeleton.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/js/DTWCalculator.ts","src/js/Entities/DTWMatrix.ts","src/js/Entities/DTWMatrixCell.ts","src/js/Entities/DTWMatrixCellWindow.ts","src/js/Entities/WarpingStep.ts","src/js/TestData/Sequence.ts","src/js/Entities/PaintedSkeleton.ts","node_modules/three/build/three.module.js","src/js/PaintUtils.ts","src/js/ThresholdDefinitions.ts","src/js/Entities/JointThresholdSettings.ts","src/js/SkeletonPainter.ts","src/js/Entities/BodyParts.ts","node_modules/bootstrap/dist/js/bootstrap.esm.js","node_modules/bootstrap/js/src/util/index.js","node_modules/bootstrap/js/src/dom/event-handler.js","node_modules/bootstrap/js/src/dom/data.js","node_modules/bootstrap/js/src/dom/manipulator.js","node_modules/bootstrap/js/src/util/config.js","node_modules/bootstrap/js/src/base-component.js","node_modules/bootstrap/js/src/dom/selector-engine.js","node_modules/bootstrap/js/src/util/component-functions.js","node_modules/bootstrap/js/src/alert.js","node_modules/bootstrap/js/src/button.js","node_modules/bootstrap/js/src/util/swipe.js","node_modules/bootstrap/js/src/carousel.js","node_modules/bootstrap/js/src/collapse.js","node_modules/bootstrap/js/src/dropdown.js","node_modules/bootstrap/js/src/util/scrollbar.js","node_modules/bootstrap/js/src/util/backdrop.js","node_modules/bootstrap/js/src/util/focustrap.js","node_modules/bootstrap/js/src/modal.js","node_modules/bootstrap/js/src/offcanvas.js","node_modules/bootstrap/js/src/util/sanitizer.js","node_modules/bootstrap/js/src/util/template-factory.js","node_modules/bootstrap/js/src/tooltip.js","node_modules/bootstrap/js/src/popover.js","node_modules/bootstrap/js/src/scrollspy.js","node_modules/bootstrap/js/src/tab.js","node_modules/bootstrap/js/src/toast.js","node_modules/@popperjs/core/lib/index.js","node_modules/@popperjs/core/lib/enums.js","node_modules/@popperjs/core/lib/modifiers/index.js","node_modules/@popperjs/core/lib/modifiers/applyStyles.js","node_modules/@popperjs/core/lib/dom-utils/getNodeName.js","node_modules/@popperjs/core/lib/dom-utils/instanceOf.js","node_modules/@popperjs/core/lib/dom-utils/getWindow.js","node_modules/@popperjs/core/lib/modifiers/arrow.js","node_modules/@popperjs/core/lib/utils/getBasePlacement.js","node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js","node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js","node_modules/@popperjs/core/lib/utils/math.js","node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js","node_modules/@popperjs/core/lib/utils/userAgent.js","node_modules/@popperjs/core/lib/dom-utils/contains.js","node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js","node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js","node_modules/@popperjs/core/lib/dom-utils/isTableElement.js","node_modules/@popperjs/core/lib/dom-utils/getParentNode.js","node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js","node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js","node_modules/@popperjs/core/lib/utils/within.js","node_modules/@popperjs/core/lib/utils/mergePaddingObject.js","node_modules/@popperjs/core/lib/utils/getFreshSideObject.js","node_modules/@popperjs/core/lib/utils/expandToHashMap.js","node_modules/@popperjs/core/lib/modifiers/computeStyles.js","node_modules/@popperjs/core/lib/utils/getVariation.js","node_modules/@popperjs/core/lib/modifiers/eventListeners.js","node_modules/@popperjs/core/lib/modifiers/flip.js","node_modules/@popperjs/core/lib/utils/getOppositePlacement.js","node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js","node_modules/@popperjs/core/lib/utils/detectOverflow.js","node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js","node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js","node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js","node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js","node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js","node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js","node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js","node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js","node_modules/@popperjs/core/lib/utils/rectToClientRect.js","node_modules/@popperjs/core/lib/utils/computeOffsets.js","node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js","node_modules/@popperjs/core/lib/modifiers/hide.js","node_modules/@popperjs/core/lib/modifiers/offset.js","node_modules/@popperjs/core/lib/modifiers/popperOffsets.js","node_modules/@popperjs/core/lib/modifiers/preventOverflow.js","node_modules/@popperjs/core/lib/utils/getAltAxis.js","node_modules/@popperjs/core/lib/createPopper.js","node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js","node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js","node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js","node_modules/@popperjs/core/lib/utils/orderModifiers.js","node_modules/@popperjs/core/lib/utils/debounce.js","node_modules/@popperjs/core/lib/utils/validateModifiers.js","node_modules/@popperjs/core/lib/utils/format.js","node_modules/@popperjs/core/lib/utils/uniqueBy.js","node_modules/@popperjs/core/lib/utils/mergeByName.js","node_modules/@popperjs/core/lib/popper.js","node_modules/@popperjs/core/lib/popper-lite.js","src/js/CanvasScene.ts","node_modules/three/examples/jsm/controls/OrbitControls.js","src/js/AnimationSlider.ts","src/js/AnimationUtils.ts","src/js/Entities/ApplicationState.ts","src/js/SkeletonAction.ts","src/js/SkeletonLoader.ts","src/js/SequenceParser.ts","src/js/Entities/Pose.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"207a8fdfe82f28a0\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\n\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, assetsToDispose\n/*: Array<[ParcelRequire, string]> */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // Web extension context\n\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n\n  var supportsSourceURL = false;\n\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  } // $FlowFixMe\n\n\n  ws.onmessage = async function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH); // Handle HMR Update\n\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n\n        await hmrApplyUpdates(assets); // Dispose all old assets.\n\n        let processedAssets = {}\n        /*: {|[string]: boolean|} */\n        ;\n\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        } // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n\n\n        processedAssets = {};\n\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n\n      return new Promise((resolve, reject) => {\n        var _document$head;\n\n        script.onload = () => resolve(script);\n\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\n\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      } // $FlowFixMe\n\n\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push(...p);\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\n\nfunction hmrDispose(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n\n  delete bundle.cache[id];\n}\n\nfunction hmrAccept(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  // Execute the module.\n  bundle(id); // Run the accept callbacks in the new version of the module.\n\n  var cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        }); // $FlowFixMe[method-unbinding]\n\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import { seq6, seq7} from './TestData/Sequence';\nimport * as bootstrap from 'bootstrap'\nimport { CanvasScene } from './CanvasScene';\nimport { SkeletonLoader } from './SkeletonLoader';\nimport { Skeleton } from './Entities/Skeleton';\nimport { PaintedSkeleton } from './Entities/PaintedSkeleton';\n\nconst dotsEffect = () => {\n    const dots = document.getElementById(\"loading-dots\")\n    const length = (dots.innerText.length + 1) % 4;\n    dots.innerText = \".\".repeat(length);\n  }\nconst interval = setInterval(dotsEffect, 500);\n\n\nconst canvasScene = new CanvasScene();\n\nconst loader = new SkeletonLoader();\nconst skeletons = loader.createPaintedSkeleton();\n\nskeletons.then(res => {\n    canvasScene.init(res[1], res[0])\n    canvasScene.setLoaded();\n    clearInterval(interval)\n    canvasScene.start();\n})\n\n// const skel1 = loader.loadDummyPose(seq6);\n// const skel2 = loader.loadDummyPose(seq7);\n\n// const mentorSkeleton = new Skeleton(skel2, false);\n// const pupilSkeleton = new Skeleton(skel1, true);\n// pupilSkeleton.calculateDeltaFromMentor(mentorSkeleton);\n\n// const mentor = new PaintedSkeleton(mentorSkeleton);\n// const pupil = new PaintedSkeleton(pupilSkeleton);\n// canvasScene.init(pupil, mentor)\n// canvasScene.setLoaded();\n// clearInterval(interval)\n// canvasScene.start();","import { Vector3} from \"three\";\nimport { calculateDTW, calculateDTWOnPoses, calculateWarpingPathDeltas } from \"../DTWCalculator\";\nimport { BodyParts } from \"./BodyParts\";\nimport { Pose } from \"./Pose\";\nimport { WarpingStep } from \"./WarpingStep\";\n\nexport class Skeleton {\n\n  private poses: Array<Pose>;\n  private limbNormalizedPoses : Array<Pose>;\n  deltaList : number[][];\n  deltaListNormalized: number[][];\n  activeDeltaList: number[][];\n  isPupil : boolean;\n  warpingPaths : WarpingStep[][];\n  \n  constructor(poses: Pose[], isPupil: boolean) {\n    this.poses = poses;\n    this.limbNormalizedPoses = [];\n    this.deltaList = [];\n    this.deltaListNormalized = [];\n    this.activeDeltaList = this.deltaList;\n    this.isPupil = isPupil;\n    this.warpingPaths = []\n  }\n\n\n  setPoses(poses: Array<Pose>) : void {\n    this.poses = poses;\n  }\n\n  getJointTimeSequence(index: number) : Vector3[]{\n    return this.poses.map(pose => pose.getJointByIndex(index));\n  }\n\n  getPoses() {\n    return this.poses;\n  }\n\n  getPose(index : number) {\n    return this.poses[index];\n  }\n\n  /**\n   * TODO: refactor this\n   * \n   */\n  translateSkeleton(x, y, z) {\n    this.poses.map(pose => pose.translatePose(x,y,z))\n\n  }\n\n  getJointDelta(jointIndex : number) {\n    return this.activeDeltaList[jointIndex];\n\n  }\n\n  getFrameJointDelta(jointIndex : number, frame : number) {\n\n    return this.activeDeltaList[jointIndex][frame];\n\n  }\n\n  calculateDeltaFromMentor(mentor: Skeleton) {\n    this.warpingPaths = calculateDTW(mentor, this);\n    this.deltaList = calculateWarpingPathDeltas(this.warpingPaths);\n    this.activeDeltaList = this.deltaList;\n  }\n\n  setDeltaListToNormalizedLimbs(mentor: Skeleton) {\n    if (this.deltaListNormalized.length == 0) {\n      this.limbNormalizedPoses = this.poses.map(pose => pose.normalizePoseToLimbParts());\n      const mentorNormalizedPoses = mentor.poses.map(pose => pose.normalizePoseToLimbParts());\n  \n      this.deltaListNormalized = calculateWarpingPathDeltas(calculateDTWOnPoses(mentorNormalizedPoses, this.limbNormalizedPoses));\n      \n    }\n    this.activeDeltaList = this.deltaListNormalized;\n\n  }\n\n  setDeltaListToDefault() {\n    this.activeDeltaList = this.deltaList;\n  }\n\n  getSwitchNormalizedLimbsFunction() {\n    return this.setDeltaListToNormalizedLimbs.bind(this);\n  }\n\n}","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import { DTWMatrix } from \"./Entities/DTWMatrix\";\nimport { Pose } from \"./Entities/Pose\";\nimport { Skeleton } from \"./Entities/Skeleton\";\nimport { WarpingStep } from \"./Entities/WarpingStep\";\n\n\nexport const calculateDTW = (mentorSkeleton: Skeleton, pupilSkeleton : Skeleton) => {\n\n  return calculateDTWOnPoses(mentorSkeleton.getPoses(), pupilSkeleton.getPoses())\n}\n\nexport const calculateDTWOnPoses = (mentorPoses: Pose[], pupilPoses: Pose[]) => {\n  const warpingPaths : WarpingStep[][] = []\n\n  for (let index = 0; index < 31; index++) {\n    \n    const mentorJointTimeSequence = mentorPoses.map(pose => pose.getJointByIndex(index));\n    const pupilJointTimeSequence = pupilPoses.map(pose => pose.getJointByIndex(index));\n\n    const matrix = new DTWMatrix(mentorJointTimeSequence, pupilJointTimeSequence);\n    warpingPaths.push(matrix.calculateWarpingDistance())\n\n  }\n\n  return warpingPaths;\n\n}\n\n/**\n * \n * @param warpingPaths \n * \n * \n * @returns list of deltas - every nth elements represents one joint, every value in list corresponds to one frame\n */\nexport const calculateWarpingPathDeltas = (warpingPaths : WarpingStep[][]) => {\n  const warpingPathDeltas : number[][] = []\n\n  warpingPaths.map(warpingPath => warpingPathDeltas.push(calculateWarpingPathDelta(warpingPath)));\n\n  return warpingPathDeltas;\n}\n\nconst calculateWarpingPathDelta = (warpingPath : WarpingStep[]) => {\n  const maxFrames = warpingPath[warpingPath.length - 1].pupilFrame;\n  \n  const deltaList = Array(maxFrames + 1)\n  const poseCount = Array(maxFrames + 1)\n\n  for (let i = 0; i <= maxFrames; i++) {\n    deltaList[i] = 0;\n    poseCount[i] = 0;\n  }\n\n  for (let i = 0; i < warpingPath.length; i++ ) {\n    const warpingStep = warpingPath[i];\n    const pupilFrame = warpingStep.pupilFrame;\n    deltaList[pupilFrame] += warpingStep.distance\n    poseCount[pupilFrame] += 1;\n  }\n\n  for (let i = 1  ; i <= maxFrames; i++) {\n    deltaList[i] = deltaList[i] / poseCount[i];\n  }\n\n  return deltaList;\n\n}\n\nexport const getJointFrameTracking = (warpingPath: WarpingStep[]) => {\n  const maxFrames = warpingPath[warpingPath.length - 1].pupilFrame;\n  \n  const frameList : number[] = Array(maxFrames + 1);\n\n  for (let i = 0; i <= maxFrames; i++) {\n    frameList[i] = 0;\n  }\n\n  warpingPath.map(warpingStep => {\n    frameList[warpingStep.pupilFrame] = warpingStep.mentorFrame;\n  })\n\n  return frameList;\n  \n};","import {Vector3} from 'three';\nimport { DTWMatrixCell } from './DTWMatrixCell';\nimport { DTWMatrixCellWindow } from './DTWMatrixCellWindow';\nimport { WarpingStep } from './WarpingStep';\n/**\n * Represents a DTW matrix\n * \n * [\n *    [a1, ..., an],\n *    ...\n *    [e1, ..., en]\n * ]\n * \n * \n * \n */\nexport class DTWMatrix {\n\n  mentorSequence: Vector3[];\n  pupilSequence: Vector3[];\n  matrix: DTWMatrixCell[][]\n\n  constructor(mentorSequence : Vector3[], pupilSequence : Vector3[]) {\n    this.mentorSequence = mentorSequence;\n    this.pupilSequence = pupilSequence;\n    const mentorSequenceLength = mentorSequence.length + 1;\n    const pupilSequenceLength = pupilSequence.length + 1;\n    \n    this.matrix = new Array(mentorSequenceLength);\n    \n    for (let i = 0; i < mentorSequenceLength; i++) {\n      this.matrix[i] = new Array(pupilSequenceLength);\n    }\n\n    for (let i = 0; i < mentorSequenceLength; i++) {\n      this.matrix[i][0] = new DTWMatrixCell(Infinity);\n    }\n\n    for (let i = 0; i < pupilSequenceLength; i++) {\n      this.matrix[0][i] = new DTWMatrixCell(Infinity);\n    }\n\n    this.matrix[0][0].distanceValue = 0;\n\n    this.calculateDTW();\n  }\n\n  calculateDTW() {\n    for (let i = 1; i < this.mentorSequence.length + 1; i++) {\n      for (let j = 1; j < this.pupilSequence.length + 1; j++) {\n        this.calculateDTWMatrixCell(i , j);\n      } \n    }\n  }\n\n\n\n  calculateDTWMatrixCell(i: number, j: number) {\n    const jointEuclidDistance = this.calculateJointDistance(this.pupilSequence[j - 1], this.mentorSequence[i - 1]);\n  \n    const matrixCellWindow = new DTWMatrixCellWindow(\n      this.matrix[i - 1][j - 1], \n      this.matrix[i][j - 1], \n      this.matrix[i - 1][j],\n      [i,j]);\n\n    const cellWindowMinimumResult = matrixCellWindow.findMinimalValue();\n       \n    const finalDistance = cellWindowMinimumResult[0] + jointEuclidDistance;\n    \n    const computedCell = new DTWMatrixCell(finalDistance);\n    computedCell.absoluteJointDistance = jointEuclidDistance;\n    computedCell.setPreviousWarping(cellWindowMinimumResult[1]);\n    this.matrix[i][j] = computedCell;\n  }\n\n\n  calculateJointDistance(joint1 : Vector3, joint2: Vector3) {\n      return Math.sqrt(Math.pow(joint1.x - joint2.x, 2) + Math.pow(joint1.y - joint2.y, 2) + Math.pow(joint1.z - joint2.z, 2));\n  }\n\n  /**\n   * \n   * @returns warping path\n   * \n   */\n  calculateWarpingDistance() : WarpingStep[] {\n    const warpingPath : WarpingStep[] = []\n    let i = this.mentorSequence.length;\n    let j = this.pupilSequence.length;  \n\n    do {\n      const currentCell = this.matrix[i][j];\n      const warpingStep = new WarpingStep(j - 1, i - 1, currentCell.absoluteJointDistance);\n      const indexes = currentCell.previousWarping;\n      warpingPath.push(warpingStep)\n      i = indexes[0];\n      j = indexes[1];\n\n    } while (i !== 0 && j !== 0)\n\n    return warpingPath.reverse();\n  }\n\n}","\n/**\n * Represents a single cell in DTW matrix calculation\n * \n */\nexport class DTWMatrixCell {\n\n  distanceValue : number;\n  previousWarping : [number, number];\n  absoluteJointDistance : number\n\n  constructor(distanceValue) {\n    this.distanceValue = distanceValue;\n    this.previousWarping = [-1, -1];\n    this.absoluteJointDistance = 0;\n  }\n\n  setPreviousWarping(index: [number, number]) {\n    this.previousWarping = [index[0], index[1]];\n  }\n\n}","import { DTWMatrixCell } from \"./DTWMatrixCell\";\n\nexport class DTWMatrixCellWindow {\n  leftUpper : DTWMatrixCell;\n  leftBottom : DTWMatrixCell;\n  rightUpper : DTWMatrixCell;\n  cellIndex : [number, number]\n\n  constructor(cell1, cell2, cell3, cellIndex) {\n      this.leftUpper = cell1;\n      this.leftBottom = cell2;\n      this.rightUpper = cell3;\n      this.cellIndex = cellIndex;\n  }\n\n  /**\n   * Computes minimal value of cell window\n   * \n   * @returns tuple - at first position the minimal cell, at second tuple of indexes\n   * \n   */\n  findMinimalValue() : [number, [number, number]] {\n    const minPreviousValue = Math.min(this.leftBottom.distanceValue, this.leftUpper.distanceValue, this.rightUpper.distanceValue);\n\n    const i = this.cellIndex[0];\n    const j = this.cellIndex[1];\n    if (minPreviousValue === this.leftUpper.distanceValue) {\n      return [this.leftUpper.distanceValue, [ i - 1, j - 1]];\n    }\n    \n    if (minPreviousValue === this.leftBottom.distanceValue) {\n        return [this.leftBottom.distanceValue, [ i , j - 1]];\n    } else \n\n    return [this.rightUpper.distanceValue, [ i - 1, j]];\n  }\n\n\n}","export class WarpingStep {\n\n  pupilFrame : number;\n  mentorFrame : number;\n  distance : number;\n\n  constructor(pupilFrame : number, mentorFrame : number, distance : number) {\n    this.distance = distance;\n    this.mentorFrame = mentorFrame;\n    this.pupilFrame = pupilFrame;\n  }\n\n}","export const seq1 = [\n  \"0.0, 0.0, 0.0; 1.3196042, -1.9361438, 0.9896419; 1.6738738, -8.990025, 2.7741618; 2.5750217, -16.384193, 1.0633717; 1.8688039, -17.829922, 3.111283; 1.4298456, -17.554525, 4.269519; -1.6263283, -1.6648564, 0.9470694; -1.5868261, -8.820924, 1.891408; -0.7740273, -16.029102, -0.8558862; -2.1413271, -17.210587, 1.0418658; -2.837081, -17.314205, 2.1093907; -0.103834495, 2.488555, 0.23479207; -0.34361604, 4.91786, 0.8522922; -0.604733, 7.3408093, 1.5964198; -0.7262408, 8.863613, 2.0480928; -0.49984485, 10.432776, 1.9868846; -0.671891, 12.03174, 1.7047648; 3.2883973, 9.017949, 1.4445848; 4.2963767, 4.1905127, 1.9766765; 3.860541, 0.9816413, 2.8270407; 3.641881, -0.62266374, 3.2523706; 3.6167645, -1.2050753, 4.258589; 3.6020033, -1.7716029, 5.0054708; 3.294019, -1.7179652, 3.9502149; -4.7227826, 7.6918507, 1.4408923; -5.674539, 3.2186508, -0.41530955; -4.3296204, 0.41962934, 0.43168098; -3.6571617, -0.97987974, 0.85517555; -4.106847, -2.1573567, 0.8771699; -4.3526335, -3.142249, 0.92736715; -3.6234314, -2.3280334, 1.4072275\",\n  \"0.0, 0.0, 0.0; 1.3234019, -1.933392, 0.9899502; 1.7136891, -8.990113, 2.7556262; 2.6134489, -16.374195, 1.0011036; 1.9309403, -17.830297, 3.0497053; 1.5031965, -17.5599, 4.213303; -1.6230558, -1.6678792, 0.9473644; -1.5422529, -8.827109, 1.8647144; -0.7586409, -16.033112, -0.8967366; -2.1033542, -17.210129, 1.0198357; -2.7862377, -17.31785, 2.0952358; -0.11857268, 2.488507, 0.22822514; -0.3637495, 4.9195175, 0.836831; -0.6127158, 7.346008, 1.5735483; -0.7357646, 8.871719, 2.0148735; -0.51538455, 10.4413395, 1.9441603; -0.6937467, 12.039547, 1.6616747; 3.2731981, 9.028668, 1.3272897; 4.3899155, 4.196555, 1.4104158; 4.133462, 0.92138577, 2.0565002; 4.004669, -0.7161294, 2.3797169; 4.1366196, -1.3855838, 3.3213797; 4.2418585, -2.0159476, 4.007361; 3.7869422, -1.8812943, 3.0142767; -4.7337966, 7.6894717, 1.5066197; -5.674366, 3.2233057, -0.37208652; -4.3093705, 0.4322741, 0.46913165; -3.6268733, -0.96324027, 0.88973993; -4.0695643, -2.143427, 0.9080929; -4.3095946, -3.1298702, 0.95561814; -3.5866504, -2.3122778, 1.4391913\",\n  \"0.0, 0.0, 0.0; 1.3263812, -1.9313028, 0.99004143; 1.7519047, -8.9900055, 2.7395842; 2.6472135, -16.363989, 0.94086576; 1.9808385, -17.83076, 2.9871662; 1.5613387, -17.561642, 4.154057; -1.6204832, -1.6703298, 0.94745207; -1.4979924, -8.833259, 1.8306766; -0.73996675, -16.034807, -0.9494672; -2.0679383, -17.206268, 0.98212373; -2.7408502, -17.320143, 2.063161; -0.13284756, 2.4887197, 0.21780841; -0.38490236, 4.9220285, 0.81429684; -0.62499714, 7.3518333, 1.5429921; -0.7493248, 8.88065, 1.9730728; -0.53498083, 10.450693, 1.8937386; -0.7199399, 12.048156, 1.6112814; 3.2507455, 9.042686, 1.2084017; 4.460934, 4.244151, 0.8725678; 4.370853, 0.9250467, 1.3030992; 4.325556, -0.73449993, 1.518425; 4.611244, -1.476625, 2.3669188; 4.8312516, -2.1590316, 2.9710064; 4.2294006, -1.9558649, 2.0722322; -4.7474527, 7.6848083, 1.5584613; -5.674935, 3.2266326, -0.3455596; -4.290771, 0.44388962, 0.4917897; -3.598689, -0.94747937, 0.9104643; -4.0350447, -2.1300845, 0.9243078; -4.2699814, -3.117892, 0.96885943; -3.5544786, -2.29713, 1.4580982\",\n  \"0.0, 0.0, 0.0; 1.3289282, -1.9291373, 0.9908467; 1.7891427, -8.989312, 2.7256052; 2.6794262, -16.353062, 0.8829979; 2.0267591, -17.832325, 2.9247193; 1.6138775, -17.573711, 4.0963364; -1.6182747, -1.6720322, 0.9482226; -1.4559302, -8.838807, 1.7929869; -0.7216831, -16.034618, -1.0083172; -2.0352063, -17.19933, 0.9371848; -2.6992033, -17.319075, 2.0230894; -0.1464297, 2.4891024, 0.20430924; -0.4054315, 4.9253554, 0.78561175; -0.6375493, 7.3589373, 1.504216; -0.7635693, 8.890205, 1.9249792; -0.55615926, 10.460817, 1.838763; -0.7486995, 12.05754, 1.5571892; 3.2260156, 9.057919, 1.0815517; 4.5370603, 4.3324738, 0.33682537; 4.5942874, 0.9925518, 0.5639232; 4.6229553, -0.67742896, 0.6773036; 5.0542474, -1.4718878, 1.4088303; 5.381003, -2.1904595, 1.9146854; 4.6411777, -1.9399215, 1.1393237; -4.7597666, 7.681131, 1.6004976; -5.6800613, 3.2313395, -0.32648456; -4.2763696, 0.45684004, 0.5056946; -3.574524, -0.9304074, 0.9217847; -4.0050035, -2.1152096, 0.9309513; -4.2352257, -3.1042635, 0.9723492; -3.5267081, -2.2808247, 1.4672232\",\n  \"0.0, 0.0, 0.0; 1.3325301, -1.9264854, 0.9911691; 1.820991, -8.987931, 2.7129827; 2.7106936, -16.341236, 0.828851; 2.0709329, -17.834051, 2.864785; 1.6634086, -17.592213, 4.041847; -1.6151478, -1.6748784, 0.9485313; -1.4154152, -8.844846, 1.7574286; -0.70700127, -16.035614, -1.0634072; -2.0071352, -17.194191, 0.8947114; -2.6627233, -17.318544, 1.9851974; -0.15837868, 2.4895475, 0.18942925; -0.42407662, 4.9290667, 0.7537632; -0.6508495, 7.3664575, 1.4610755; -0.7793555, 8.898977, 1.8764954; -0.57926136, 10.470244, 1.7850872; -0.7797054, 12.066249, 1.504961; 3.1959999, 9.077715, 0.9456534; 4.599493, 4.454486, -0.17650753; 4.801184, 1.1125662, -0.1478613; 4.9023643, -0.5583869, -0.13404487; 5.468131, -1.3805373, 0.46285212; 5.892643, -2.1165771, 0.85913354; 5.0319653, -1.846565, 0.22855937; -4.7713885, 7.6731257, 1.6423557; -5.692224, 3.2315116, -0.30314553; -4.2662215, 0.4653983, 0.5189584; -3.553222, -0.917657, 0.93000966; -3.9780605, -2.1045206, 0.9344702; -4.2036576, -3.094784, 0.97225654; -3.5002937, -2.26951, 1.4714063\",\n  \"0.0, 0.0, 0.0; 1.3355225, -1.924071, 0.99183154; 1.8471906, -8.986596, 2.7024398; 2.7417219, -16.32903, 0.7786138; 2.1153083, -17.838707, 2.806247; 1.7119241, -17.63135, 3.9912882; -1.6125404, -1.6770304, 0.9491646; -1.3811241, -8.849737, 1.7246413; -0.69917554, -16.036028, -1.1140697; -1.9859006, -17.18776, 0.8569019; -2.6330926, -17.31692, 1.9518356; -0.17232355, 2.4899004, 0.17179887; -0.44546953, 4.9330635, 0.7164718; -0.66434824, 7.3748007, 1.4111674; -0.7962129, 8.906804, 1.8274379; -0.6047218, 10.478986, 1.7333549; -0.8139193, 12.074324, 1.4558477; 3.161745, 9.09671, 0.7879878; 4.644149, 4.591063, -0.66284215; 5.004599, 1.2669916, -0.83763367; 5.1853666, -0.39494562, -0.92595255; 5.8719273, -1.2175255, -0.4739499; 6.3841214, -1.9507989, -0.19293174; 5.4248805, -1.6922581, -0.66654557; -4.780326, 7.66721, 1.6921935; -5.7034593, 3.2333941, -0.26993394; -4.253313, 0.4745853, 0.5342868; -3.5282407, -0.90481746, 0.9363961; -3.9467552, -2.0939333, 0.937605; -4.167072, -3.0854855, 0.9726576; -3.4680226, -2.2578785, 1.4740021\",\n  \"0.0, 0.0, 0.0; 1.3385879, -1.9213896, 0.99289656; 1.8677802, -8.985133, 2.6931138; 2.766552, -16.31707, 0.7316042; 2.153777, -17.84248, 2.751617; 1.7551394, -17.670208, 3.9438624; -1.609864, -1.6790236, 0.9501843; -1.3540049, -8.853893, 1.6974607; -0.6965944, -16.036427, -1.1565058; -1.9707563, -17.18328, 0.8254403; -2.6100764, -17.312765, 1.9249507; -0.18861349, 2.4899113, 0.15355851; -0.47113466, 4.9365625, 0.6773946; -0.68194723, 7.3830004, 1.3579023; -0.8154192, 8.913204, 1.7802359; -0.6325951, 10.486383, 1.6855875; -0.8512778, 12.081114, 1.4119238; 3.1164837, 9.117201, 0.611722; 4.687675, 4.751416, -1.1417222; 5.2117095, 1.4649265, -1.508191; 5.474352, -0.17807746, -1.692769; 6.265883, -0.9736202, -1.3879752; 6.8547864, -1.6840408, -1.2221457; 5.8227034, -1.4672866, -1.5369759; -4.7896204, 7.6588264, 1.753745; -5.7230597, 3.2330413, -0.22159362; -4.2462897, 0.48098445, 0.556901; -3.5079048, -0.8950416, 0.9461483; -3.9198048, -2.0864644, 0.9445455; -4.134453, -3.0793586, 0.97665834; -3.4376867, -2.2498667, 1.4780655\",\n  \"0.0, 0.0, 0.0; 1.3415283, -1.9191504, 0.9932586; 1.880508, -8.984251, 2.6847363; 2.7828727, -16.305958, 0.68699896; 2.180911, -17.843159, 2.7013164; 1.7866051, -17.69099, 3.8977304; -1.60729, -1.6812919, 0.9505308; -1.3319321, -8.858095, 1.6718596; -0.6974176, -16.03745, -1.1952573; -1.9605196, -17.180191, 0.7961229; -2.5930023, -17.312098, 1.8992935; -0.2072979, 2.4894307, 0.13629372; -0.5017769, 4.939246, 0.6382976; -0.7056761, 7.3909807, 1.3016329; -0.8368722, 8.918677, 1.733647; -0.6619258, 10.492797, 1.6397513; -0.89086014, 12.086759, 1.3700234; 3.0582721, 9.138397, 0.42325658; 4.7293797, 4.9319496, -1.6056559; 5.426197, 1.7021894, -2.14697; 5.7751865, 0.087714195, -2.4193454; 6.6557593, -0.6542607, -2.2569447; 7.310868, -1.3226341, -2.201144; 6.232345, -1.1754526, -2.3636937; -4.8008666, 7.6484036, 1.8201885; -5.749569, 3.229836, -0.16401827; -4.242901, 0.48456597, 0.58040476; -3.489568, -0.88806725, 0.95261586; -3.8943763, -2.0819077, 0.94738954; -4.1027703, -3.076265, 0.9751206; -3.4056592, -2.245945, 1.4746741\",\n  \"0.0, 0.0, 0.0; 1.3444185, -1.9162414, 0.9949653; 1.8911958, -8.982991, 2.67703; 2.7957964, -16.294067, 0.64172935; 2.2045293, -17.841572, 2.651319; 1.8149848, -17.70355, 3.851004; -1.60475, -1.6827931, 0.9521636; -1.3109543, -8.861443, 1.6473746; -0.69845444, -16.037304, -1.2332458; -1.9507077, -17.17444, 0.76816773; -2.5764844, -17.310167, 1.8746942; -0.22735953, 2.4885802, 0.11870391; -0.53484905, 4.9412613, 0.5984198; -0.73136055, 7.398508, 1.2433342; -0.856389, 8.923529, 1.6864873; -0.68827605, 10.498483, 1.594109; -0.9276689, 12.091726, 1.3292608; 2.9900298, 9.15856, 0.22069836; 4.7786045, 5.1228623, -2.0414758; 5.6599584, 1.969944, -2.7430794; 6.101085, 0.3940636, -3.0959537; 7.0551767, -0.27014786, -3.0669382; 7.7666636, -0.878948, -3.1133356; 6.6676464, -0.8245868, -3.1357346; -4.8082576, 7.6375065, 1.8971996; -5.779552, 3.226122, -0.09205139; -4.2409663, 0.48768425, 0.61110675; -3.4716759, -0.88153374, 0.9626859; -3.8691242, -2.0778282, 0.9544811; -4.070919, -3.0736592, 0.97778666; -3.37149, -2.2427382, 1.4730828\",\n  \"0.0, 0.0, 0.0; 1.3469222, -1.9140828, 0.99573433; 1.8992515, -8.982451, 2.6691606; 2.8017054, -16.283047, 0.59563756; 2.218873, -17.83826, 2.6017363; 1.8338788, -17.70424, 3.8033423; -1.6025491, -1.684473, 0.9529; -1.2973459, -8.86525, 1.6206877; -0.70245755, -16.037958, -1.2714539; -1.9448496, -17.172483, 0.73757315; -2.5646834, -17.308865, 1.8473595; -0.24754249, 2.487416, 0.10148464; -0.5703069, 4.942769, 0.5568838; -0.763447, 7.406076, 1.1793045; -0.8797342, 8.928495, 1.633642; -0.7171053, 10.504152, 1.5434706; -0.96661603, 12.096792, 1.2843965; 2.9061327, 9.181234, 0.006566763; 4.825186, 5.324501, -2.4523208; 5.907769, 2.2701082, -3.2941194; 6.449279, 0.7436154, -3.717321; 7.460719, 0.17712837, -3.8089223; 8.218341, -0.35755748, -3.9472117; 7.1238146, -0.41232812, -3.845679; -4.816816, 7.6226935, 1.9724183; -5.816868, 3.2180414, -0.017502308; -4.244767, 0.48684144, 0.6380653; -3.458718, -0.878757, 0.96584857; -3.848267, -2.0776262, 0.95505595; -4.0429497, -3.074968, 0.97380877; -3.3399863, -2.2433846, 1.4629511\",\n  \"0.0, 0.0, 0.0; 1.3497776, -1.911552, 0.9967292; 1.9054692, -8.981312, 2.6631482; 2.8026161, -16.27206, 0.5530019; 2.2243896, -17.833471, 2.5556178; 1.8426163, -17.701788, 3.7585092; -1.6000313, -1.6863269, 0.95385194; -1.2872338, -8.869372, 1.5931141; -0.7091468, -16.039652, -1.3084412; -1.9441576, -17.17217, 0.7062614; -2.5594633, -17.3107, 1.8182989; -0.26665592, 2.4860263, 0.08592105; -0.60719895, 4.9436026, 0.51565933; -0.80413395, 7.413533, 1.1100094; -0.9110265, 8.934167, 1.5725584; -0.75384414, 10.510506, 1.484665; -1.0143006, 12.102614, 1.2332067; 2.8032799, 9.208159, -0.2159617; 4.8645873, 5.5448565, -2.8493068; 6.1646113, 2.6117017, -3.8066297; 6.8145533, 1.1458536, -4.287647; 7.8673463, 0.69290197, -4.4845505; 8.66103, 0.24412724, -4.70289; 7.593999, 0.07044543, -4.4965506; -4.829226, 7.601115, 2.0423157; -5.862006, 3.2024384, 0.05589831; -4.257144, 0.47890615, 0.66212493; -3.4547138, -0.88285804, 0.9652387; -3.8360655, -2.084332, 0.9516977; -4.0233903, -3.0831625, 0.9655077; -3.3163207, -2.2509284, 1.4475738\",\n  \"0.0, 0.0, 0.0; 1.3520246, -1.9093837, 0.99783903; 1.9104896, -8.980441, 2.6578112; 2.799054, -16.261997, 0.51258135; 2.2235458, -17.828348, 2.5121198; 1.8445759, -17.693335, 3.7155282; -1.5980443, -1.6876093, 0.9549143; -1.2805918, -8.873046, 1.5643151; -0.71675277, -16.041, -1.3457754; -1.9466304, -17.171013, 0.67346907; -2.5584908, -17.309608, 1.7873979; -0.2849639, 2.484458, 0.07126393; -0.64464176, 4.9438787, 0.47401103; -0.8489978, 7.4207706, 1.0360043; -0.9488217, 8.94034, 1.5036038; -0.7982957, 10.517442, 1.4177747; -1.0702112, 12.109117, 1.175886; 2.6878095, 9.233492, -0.44634283; 4.906429, 5.7805157, -3.2316556; 6.433097, 2.9926884, -4.2839055; 7.1960917, 1.5994526, -4.812342; 8.274245, 1.2713976, -5.099176; 9.093652, 0.91756105, -5.386189; 8.07432, 0.6215272, -5.095288; -4.8402543, 7.5788927, 2.1086736; -5.9082074, 3.184925, 0.13044858; -4.271795, 0.468951, 0.68394387; -3.4535892, -0.8890344, 0.96069115; -3.8270082, -2.0929694, 0.94483626; -4.0072355, -3.0931587, 0.9539541; -3.295678, -2.260181, 1.4280666\",\n  \"0.0, 0.0, 0.0; 1.3536776, -1.9074999, 0.99919987; 1.9152889, -8.979553, 2.6538634; 2.7939367, -16.253067, 0.47749543; 2.218476, -17.82261, 2.4745421; 1.8413175, -17.68146, 3.6778154; -1.5965781, -1.6882594, 0.95621634; -1.274355, -8.875881, 1.5366518; -0.7228084, -16.041859, -1.380652; -1.9491794, -17.170874, 0.6412809; -2.5584903, -17.307777, 1.7568154; -0.30020323, 2.4830263, 0.057206992; -0.6791116, 4.9438267, 0.43298918; -0.89575195, 7.427047, 0.96145356; -0.98851866, 8.945973, 1.4325819; -0.84466195, 10.523833, 1.3492861; -1.1282952, 12.115099, 1.1184105; 2.564176, 9.258099, -0.672088; 4.9540443, 6.036461, -3.5897703; 6.7085514, 3.417981, -4.719015; 7.585245, 2.1093273, -5.2858887; 8.672926, 1.9120289, -5.646906; 9.507402, 1.6581166, -5.9906807; 8.553025, 1.2428951, -5.632838; -4.8492928, 7.554003, 2.1694062; -5.9547706, 3.1631231, 0.20498753; -4.2884727, 0.45480943, 0.70419663; -3.455324, -0.8993453, 0.95380056; -3.8213124, -2.105546, 0.9369355; -3.9949217, -3.1069317, 0.9424269; -3.2786915, -2.2728229, 1.4074275\",\n  \"0.0, 0.0, 0.0; 1.3558041, -1.9052718, 1.0005671; 1.9214091, -8.977787, 2.6518917; 2.7897875, -16.245337, 0.45160604; 2.2115693, -17.817263, 2.4459805; 1.8348517, -17.669312, 3.6485748; -1.5946935, -1.6892989, 0.95752513; -1.266712, -8.878683, 1.5123441; -0.726134, -16.042706, -1.4118087; -1.9513545, -17.167595, 0.6131191; -2.5593846, -17.307034, 1.7290385; -0.30969998, 2.4820845, 0.04643934; -0.70654345, 4.943701, 0.39755842; -0.9427177, 7.432173, 0.8918459; -1.0287156, 8.950859, 1.3650277; -0.89136493, 10.529431, 1.2842939; -1.1869087, 12.120169, 1.0650046; 2.4348602, 9.284509, -0.8838615; 5.013775, 6.3388343, -3.929429; 6.9886675, 3.9002912, -5.0970054; 7.975365, 2.681532, -5.6831503; 9.057802, 2.6169393, -6.103229; 9.897178, 2.465282, -6.4923983; 9.021626, 1.9382415, -6.083822; -4.856433, 7.5231028, 2.2261302; -5.9996395, 3.1351628, 0.2767936; -4.3069334, 0.4339466, 0.7227707; -3.460581, -0.91665983, 0.94575936; -3.8193889, -2.1250234, 0.9294091; -3.98668, -3.1274934, 0.932762; -3.266581, -2.291442, 1.3882008\",\n  \"0.0, 0.0, 0.0; 1.3565924, -1.904006, 1.0019066; 1.9279594, -8.976706, 2.6504562; 2.7840624, -16.240404, 0.43271613; 2.2015803, -17.813755, 2.424725; 1.824745, -17.660501, 3.6266184; -1.5939912, -1.6892349, 0.95880634; -1.2560914, -8.879895, 1.490664; -0.7263649, -16.041489, -1.4414163; -1.9532766, -17.161047, 0.5854418; -2.5611517, -17.300018, 1.7015038; -0.3159827, 2.481481, 0.034940645; -0.7306074, 4.9433956, 0.3626411; -0.99038446, 7.435385, 0.82642484; -1.0713716, 8.954372, 1.299526; -0.94085175, 10.533648, 1.2212442; -1.2480576, 12.123903, 1.0148706; 2.3017888, 9.310882, -1.0805163; 5.080181, 6.6807995, -4.2374916; 7.2705507, 4.4342294, -5.405879; 8.364805, 3.3113892, -5.992691; 9.429023, 3.3773425, -6.456803; 10.264338, 3.327071, -6.8795633; 9.478327, 2.6996264, -6.4325767; -4.86229, 7.4877043, 2.279478; -6.042306, 3.0987048, 0.3546151; -4.3263197, 0.4037285, 0.7460412; -3.468327, -0.9437579, 0.9417529; -3.8214989, -2.1538086, 0.92761177; -3.983851, -3.1570914, 0.93061274; -3.2602794, -2.3189232, 1.3765582\",\n  \"0.0, 0.0, 0.0; 1.3586371, -1.9022286, 1.0025121; 1.9304702, -8.97548, 2.6485286; 2.7767205, -16.237144, 0.42036605; 2.1871638, -17.809357, 2.4111924; 1.8088645, -17.64354, 3.6109562; -1.5921756, -1.6906176, 0.9593859; -1.2469505, -8.882303, 1.4723309; -0.72574866, -16.041035, -1.4682499; -1.9568588, -17.15417, 0.5596; -2.5657554, -17.29156, 1.6753008; -0.3198138, 2.481126, 0.023384798; -0.7511892, 4.943074, 0.32842293; -1.0376294, 7.4372826, 0.7637015; -1.1161238, 8.957256, 1.234045; -0.99307925, 10.537264, 1.158484; -1.3117808, 12.127017, 0.966151; 2.171048, 9.3352585, -1.2597594; 5.1379805, 7.033737, -4.500684; 7.54093, 5.005796, -5.6509943; 8.741327, 3.9921458, -6.2289824; 9.776704, 4.185342, -6.7219124; 10.600845, 4.234935, -7.166136; 9.912034, 3.5197043, -6.6914983; -4.868698, 7.451085, 2.3220587; -6.0811205, 3.0569692, 0.42927647; -4.346428, 0.36672354, 0.76712203; -3.4790833, -0.9783982, 0.93604374; -3.8282306, -2.1896515, 0.9253709; -3.9870217, -3.1935017, 0.9290825; -3.2590716, -2.3536558, 1.364624\",\n  \"0.0, 0.0, 0.0; 1.3602698, -1.9001223, 1.0042909; 1.9294741, -8.9740305, 2.6483965; 2.765525, -16.234755, 0.41333222; 2.166749, -17.80395, 2.403788; 1.7861935, -17.626827, 3.6012201; -1.59072, -1.6910205, 0.9610888; -1.2351027, -8.883521, 1.4551642; -0.72576857, -16.039253, -1.494786; -1.9629521, -17.14251, 0.53476477; -2.5737097, -17.282484, 1.6491264; -0.32248637, 2.4808629, 0.011714622; -0.76902246, 4.9426413, 0.29557675; -1.0808403, 7.438245, 0.7046267; -1.160306, 8.959264, 1.1714139; -1.0446646, 10.539992, 1.099304; -1.3729274, 12.129477, 0.921367; 2.0518343, 9.353471, -1.4191839; 5.1862984, 7.3780746, -4.717097; 7.7920904, 5.601366, -5.8409653; 9.093823, 4.713149, -6.405832; 10.090998, 5.028233, -6.9144335; 10.897553, 5.174785, -7.3693995; 10.310723, 4.386005, -6.874675; -4.8739944, 7.4194293, 2.353074; -6.127357, 3.0173068, 0.506119; -4.3694487, 0.33577347, 0.78871065; -3.4904947, -1.0049909, 0.9300057; -3.8367207, -2.217122, 0.9257222; -3.9929347, -3.2213573, 0.9329749; -3.2613142, -2.3790786, 1.3575298\",\n  \"0.0, 0.0, 0.0; 1.3618703, -1.898212, 1.0057337; 1.9218545, -8.973131, 2.6486495; 2.7490485, -16.234081, 0.4110253; 2.138348, -17.798075, 2.4019518; 1.7544644, -17.605164, 3.5958767; -1.5892926, -1.6915773, 0.96246916; -1.2207662, -8.884646, 1.4384812; -0.72629935, -16.0374, -1.5212053; -1.9737849, -17.126358, 0.50976074; -2.58812, -17.26861, 1.6218652; -0.32418472, 2.4806688, -7.617861E-4; -0.78504014, 4.9420843, 0.2626198; -1.122664, 7.4380517, 0.64829797; -1.2035984, 8.959738, 1.1126542; -1.0949417, 10.54115, 1.0448103; -1.4323692, 12.130121, 0.87991756; 1.9460187, 9.368877, -1.5533867; 5.235774, 7.7077155, -4.873227; 8.027712, 6.218719, -5.9677114; 9.422521, 5.4741435, -6.517829; 10.374229, 5.904787, -7.0288134; 11.157915, 6.1450033, -7.483936; 10.673228, 5.296237, -6.9780006; -4.885315, 7.3890924, 2.364635; -6.1729884, 2.9791145, 0.5605173; -4.394632, 0.30708742, 0.80225885; -3.5054548, -1.0289248, 0.9231284; -3.8503854, -2.2414265, 0.92703795; -4.0053964, -3.245798, 0.93939006; -3.2692723, -2.4014459, 1.3518704\",\n  \"0.0, 0.0, 0.0; 1.3617214, -1.8976287, 1.0070347; 1.9070114, -8.973059, 2.6526966; 2.7263923, -16.235954, 0.41851854; 2.0970201, -17.792465, 2.409494; 1.7072079, -17.573973, 3.597074; -1.5894231, -1.6907454, 0.9637145; -1.2021655, -8.884246, 1.4178318; -0.72237515, -16.033243, -1.5533215; -1.9853482, -17.100609, 0.47953427; -2.605365, -17.243687, 1.5883749; -0.33023918, 2.4798107, -0.017183207; -0.80287373, 4.9412756, 0.22391915; -1.1535573, 7.438556, 0.5888883; -1.2380207, 8.960216, 1.0527025; -1.1369597, 10.542362, 0.99046105; -1.482661, 12.130641, 0.83638805; 1.8784678, 9.3684635, -1.6637987; 5.3265944, 8.036183, -4.9711742; 8.278917, 6.8541293, -6.0182977; 9.753983, 6.2628446, -6.5446796; 10.654771, 6.801967, -7.0449166; 11.41117, 7.132038, -7.4897957; 11.025158, 6.2352734, -6.9817557; -4.8975244, 7.3809404, 2.3453462; -6.194494, 2.9607458, 0.57317245; -4.4050746, 0.2946148, 0.7977743; -3.5103664, -1.0384493, 0.91007483; -3.8552566, -2.2508886, 0.92401046; -4.010154, -3.255166, 0.9434316; -3.2701504, -2.408573, 1.3442111\",\n  \"0.0, 0.0, 0.0; 1.3633032, -1.8960762, 1.0078183; 1.8861237, -8.971903, 2.659059; 2.7044985, -16.237768, 0.4341848; 2.0471082, -17.786238, 2.4223747; 1.6461518, -17.550314, 3.6028883; -1.5880119, -1.6916436, 0.9644642; -1.1818852, -8.885735, 1.3919582; -0.70760816, -16.029776, -1.5919747; -1.9955382, -17.072353, 0.43808484; -2.6260905, -17.21625, 1.540862; -0.3304321, 2.4795473, -0.03839139; -0.810839, 4.9419165, 0.17671347; -1.1778402, 7.4397707, 0.5211338; -1.2662888, 8.960674, 0.98668045; -1.170609, 10.543393, 0.9308066; -1.5228729, 12.130816, 0.782905; 1.8378019, 9.370969, -1.7523416; 5.4431615, 8.38883, -5.014254; 8.523764, 7.5227437, -5.9989924; 10.063076, 7.0893097, -6.494134; 10.909555, 7.728726, -6.9705043; 11.635146, 8.143844, -7.395004; 11.340728, 7.2083583, -6.895523; -4.9187675, 7.3717647, 2.2836852; -6.2140136, 2.9385743, 0.54299235; -4.416604, 0.27768517, 0.7659474; -3.517899, -1.052757, 0.8774246; -3.8635213, -2.264801, 0.9028637; -4.0189776, -3.268786, 0.9309905; -3.2758906, -2.4196744, 1.3205798\",\n  \"0.0, 0.0, 0.0; 1.3639977, -1.8948697, 1.009147; 1.8620794, -8.970651, 2.668208; 2.6816711, -16.24096, 0.45834947; 1.990531, -17.781782, 2.4410272; 1.5752072, -17.534597, 3.6142468; -1.5873904, -1.6915017, 0.9657355; -1.161748, -8.886224, 1.3625238; -0.6840584, -16.02407, -1.6356516; -2.002843, -17.038347, 0.3889284; -2.6470838, -17.183977, 1.4835356; -0.32619828, 2.4796298, -0.062003344; -0.8119334, 4.9432273, 0.12527177; -1.1974932, 7.441087, 0.44874045; -1.2902219, 8.960972, 0.91677225; -1.198349, 10.544163, 0.86837506; -1.5561074, 12.130696, 0.7241633; 1.8195821, 9.375265, -1.820297; 5.5692744, 8.764414, -5.0093336; 8.744314, 8.215767, -5.9192967; 10.3309765, 7.9409714, -6.377013; 11.117928, 8.673137, -6.820804; 11.807297, 9.168726, -7.2185035; 11.600094, 8.201178, -6.736619; -4.948867, 7.361416, 2.1884525; -6.232411, 2.9125924, 0.47926128; -4.4314055, 0.25517154, 0.7142397; -3.5309038, -1.0735372, 0.83172905; -3.87738, -2.2850204, 0.86934733; -4.0335107, -3.288592, 0.9069041; -3.2877836, -2.4367933, 1.2854265\",\n  \"0.0, 0.0, 0.0; 1.364752, -1.8939806, 1.0097961; 1.8358523, -8.9698305, 2.6764266; 2.658675, -16.246014, 0.4872012; 1.9311516, -17.782368, 2.4603062; 1.4986626, -17.537579, 3.6278121; -1.5867157, -1.69178, 0.96635664; -1.1467628, -8.887207, 1.3336529; -0.65961224, -16.018105, -1.679504; -2.011032, -17.001553, 0.33875453; -2.669879, -17.147167, 1.4246352; -0.31772864, 2.4799454, -0.08794445; -0.8062227, 4.945038, 0.070216045; -1.212504, 7.442051, 0.37427795; -1.3139279, 8.960963, 0.84366417; -1.2242215, 10.544483, 0.8025196; -1.5839703, 12.130726, 0.66007125; 1.8203038, 9.383516, -1.867397; 5.689385, 9.189145, -4.965092; 8.925911, 8.939357, -5.7851124; 10.543418, 8.81397, -6.1979814; 11.265783, 9.629999, -6.6036835; 11.913319, 10.200002, -6.970834; 11.789935, 9.206235, -6.5142155; -4.9851394, 7.3470545, 2.0665984; -6.2549925, 2.882348, 0.38888633; -4.452983, 0.22766829, 0.6460979; -3.5519805, -1.0996708, 0.7747045; -3.8996527, -2.3103442, 0.8251605; -4.0567584, -3.3133237, 0.87305; -3.3092537, -2.4586136, 1.2413654\",\n  \"0.0, 0.0, 0.0; 1.3653986, -1.8929946, 1.0107704; 1.8104796, -8.968963, 2.6840386; 2.632792, -16.252792, 0.5201969; 1.8698257, -17.785275, 2.4828997; 1.4202565, -17.548416, 3.6455796; -1.586136, -1.6917907, 0.96728945; -1.1402317, -8.888081, 1.3096684; -0.6312365, -16.011618, -1.7172531; -2.01918, -16.971592, 0.28747523; -2.6951404, -17.11561, 1.3630012; -0.30571494, 2.4804285, -0.11326184; -0.79476297, 4.9470596, 0.01669208; -1.2233677, 7.4425573, 0.3019643; -1.3329616, 8.961451, 0.76957256; -1.2440357, 10.545167, 0.7348018; -1.6048378, 12.131221, 0.5929096; 1.8355033, 9.39476, -1.8945165; 5.7937202, 9.628941, -4.87461; 9.061602, 9.67398, -5.6018295; 10.69489, 9.696015, -5.9684286; 11.346106, 10.58715, -6.334636; 11.945231, 11.225349, -6.670424; 11.905771, 10.212262, -6.2421803; -5.0247393, 7.3291936, 1.9275322; -6.279825, 2.8484054, 0.28188848; -4.480317, 0.19518709, 0.5698507; -3.5805645, -1.1314209, 0.7138319; -3.929283, -2.3411024, 0.77878344; -4.0872474, -3.3433113, 0.8385161; -3.3384862, -2.4850812, 1.1959324\",\n  \"0.0, 0.0, 0.0; 1.3661577, -1.8924326, 1.0107974; 1.7869676, -8.969273, 2.6866565; 2.603767, -16.261616, 0.5495596; 1.8110557, -17.79071, 2.5030947; 1.3469079, -17.566772, 3.662602; -1.5854561, -1.6924132, 0.9673146; -1.1431684, -8.889707, 1.2928661; -0.60509485, -16.006018, -1.7460004; -2.0272977, -16.950668, 0.24192572; -2.7198882, -17.09402, 1.3069084; -0.29306415, 2.4808407, -0.13548878; -0.78145546, 4.948832, -0.03149426; -1.2311954, 7.4426403, 0.23542422; -1.3491516, 8.962012, 0.6994294; -1.26025, 10.545831, 0.6696058; -1.6209376, 12.131842, 0.52694535; 1.8576772, 9.405737, -1.9087384; 5.8602324, 10.059029, -4.764617; 9.130627, 10.399284, -5.3960247; 10.765289, 10.568954, -5.714774; 11.338063, 11.52643, -6.0426145; 11.881805, 12.226478, -6.3480344; 11.9281645, 11.202057, -5.9483976; -5.0628, 7.311414, 1.7869844; -6.304821, 2.8152833, 0.17358959; -4.510955, 0.1621511, 0.49554217; -3.6140246, -1.1644146, 0.6565181; -3.964221, -2.3727705, 0.736462; -4.123411, -3.373968, 0.8086147; -3.3735995, -2.5122874, 1.1553679\",\n  \"0.0, 0.0, 0.0; 1.3660738, -1.8921611, 1.0114183; 1.7620173, -8.970757, 2.6859255; 2.5720117, -16.271866, 0.5763507; 1.7555163, -17.799486, 2.521223; 1.2784824, -17.599255, 3.6798363; -1.5855324, -1.6920018, 0.9679092; -1.151963, -8.890264, 1.2836413; -0.58508414, -15.9994335, -1.7666824; -2.0390308, -16.93165, 0.20407546; -2.747124, -17.074501, 1.2588822; -0.2814054, 2.4810953, -0.15424457; -0.77027416, 4.9498134, -0.07201824; -1.2414428, 7.441291, 0.17924508; -1.366309, 8.961583, 0.63840115; -1.2756157, 10.545369, 0.6124904; -1.6345242, 12.131664, 0.46851343; 1.8772889, 9.419158, -1.9073471; 5.8637066, 10.499933, -4.653924; 9.11287, 11.116464, -5.1761794; 10.737021, 11.424321, -5.440505; 11.225544, 12.437792, -5.734668; 11.708054, 13.191759, -6.013453; 11.841153, 12.165273, -5.639413; -5.1026416, 7.2889285, 1.6535858; -6.32981, 2.7764406, 0.07486427; -4.546019, 0.12082505, 0.43055665; -3.6541243, -1.2069808, 0.608402; -4.0064445, -2.413564, 0.7042156; -4.1673837, -3.4134653, 0.78930175; -3.4153862, -2.5488825, 1.1238843\",\n  \"0.0, 0.0, 0.0; 1.3670083, -1.8917867, 1.010856; 1.7402785, -8.972883, 2.6799843; 2.5373201, -16.28283, 0.59623504; 1.706622, -17.807291, 2.537569; 1.22245, -17.624311, 3.6960745; -1.5846957, -1.6930927, 0.9673712; -1.1635919, -8.892126, 1.2823764; -0.5758259, -15.996256, -1.7757262; -2.054976, -16.921318, 0.17958736; -2.7753367, -17.062513, 1.2262791; -0.27162167, 2.481366, -0.16691206; -0.7611917, 4.9504395, -0.10119948; -1.2519076, 7.439482, 0.13640268; -1.3820218, 8.960808, 0.59065163; -1.289389, 10.544519, 0.5671422; -1.6467037, 12.13099, 0.4211467; 1.893605, 9.432337, -1.8950003; 5.8091025, 10.930132, -4.5461836; 9.013247, 11.810771, -4.9558935; 10.614988, 12.25074, -5.1641297; 11.014035, 13.309762, -5.431606; 11.43018, 14.109515, -5.6889424; 11.650462, 13.091417, -5.333627; -5.139161, 7.266523, 1.5382211; -6.347542, 2.7376528, -0.007740736; -4.578968, 0.07649064, 0.38095284; -3.6946814, -1.2540884, 0.5752994; -4.049205, -2.4585176, 0.6885078; -4.2119594, -3.4568176, 0.7877636; -3.4576147, -2.5891857, 1.1088991\",\n  \"0.0, 0.0, 0.0; 1.366146, -1.892634, 1.010436; 1.721117, -8.976559, 2.6715384; 2.5029125, -16.294804, 0.61127496; 1.6703327, -17.816303, 2.554125; 1.1849122, -17.653906, 3.7151732; -1.585467, -1.6926006, 0.9669692; -1.1783124, -8.892178, 1.2878308; -0.5784927, -15.994263, -1.7726791; -2.0742278, -16.91731, 0.17093408; -2.8028135, -17.058048, 1.2119795; -0.26397413, 2.4817696, -0.1730641; -0.75635624, 4.950514, -0.11660888; -1.2661152, 7.436589, 0.11179785; -1.4001286, 8.959497, 0.5595633; -1.305405, 10.5431, 0.5371408; -1.6612642, 12.12981, 0.39018935; 1.8996162, 9.447929, -1.8693557; 5.703716, 11.337388, -4.431007; 8.837321, 12.478306, -4.7289147; 10.403902, 13.048469, -4.8814; 10.709123, 14.142596, -5.1304665; 11.054562, 14.97992, -5.3724666; 11.361464, 13.980911, -5.0273747; -5.1744366, 7.2403097, 1.4505476; -6.3651543, 2.6947455, -0.059711218; -4.6147184, 0.025659084, 0.3558257; -3.7395031, -1.3088838, 0.5635929; -4.0969987, -2.5106337, 0.6945388; -4.2621884, -3.5070505, 0.80771804; -3.5033114, -2.637678, 1.1130805\",\n  \"0.0, 0.0, 0.0; 1.3669164, -1.8922285, 1.0101538; 1.7076087, -8.979624, 2.6593988; 2.469379, -16.305225, 0.6178608; 1.6422427, -17.819403, 2.5687394; 1.1610762, -17.665195, 3.7326713; -1.5847796, -1.6933982, 0.9666992; -1.1927572, -8.893338, 1.2980926; -0.5899057, -15.996059, -1.7603452; -2.0962343, -16.91844, 0.17538762; -2.8299189, -17.057283, 1.2131009; -0.25649312, 2.4824612, -0.1743893; -0.7507542, 4.9509296, -0.12249797; -1.2784045, 7.433938, 0.09851644; -1.4169278, 8.958308, 0.5398907; -1.3196856, 10.5417595, 0.5174827; -1.6729083, 12.128945, 0.36932302; 1.9044173, 9.464112, -1.8354821; 5.566592, 11.718615, -4.307117; 8.6042, 13.114386, -4.49337; 10.122903, 13.812013, -4.590168; 10.331709, 14.930658, -4.829628; 10.603689, 15.797152, -5.0624785; 10.994322, 14.828022, -4.716805; -5.2048717, 7.2145414, 1.379325; -6.381124, 2.6524262, -0.09185982; -4.645933, -0.023443699, 0.34351727; -3.7783387, -1.3613769, 0.5612055; -4.1394715, -2.5600019, 0.70964247; -4.307641, -3.5543141, 0.8361548; -3.5425706, -2.6845124, 1.1243577\",\n  \"0.0, 0.0, 0.0; 1.3669487, -1.8923882, 1.0098106; 1.6993077, -8.98297, 2.6470127; 2.4427178, -16.315218, 0.622643; 1.6246977, -17.819511, 2.5849795; 1.1500351, -17.668547, 3.7520032; -1.5847514, -1.6936122, 0.96637094; -1.2002786, -8.893527, 1.3070294; -0.59864134, -15.9975605, -1.7485977; -2.112924, -16.917776, 0.18195319; -2.8503451, -17.055656, 1.2171434; -0.24671267, 2.48345, -0.17442645; -0.74080116, 4.9520073, -0.12520625; -1.2852911, 7.431864, 0.09027915; -1.4277854, 8.958044, 0.52406776; -1.3284998, 10.541359, 0.50099915; -1.6798756, 12.128836, 0.35156047; 1.9154285, 9.481445, -1.7930489; 5.414971, 12.0771, -4.1635056; 8.332229, 13.718734, -4.231127; 9.790899, 14.539329, -4.268758; 9.904283, 15.672296, -4.505062; 10.103102, 16.559828, -4.732576; 10.570265, 15.629758, -4.3747697; -5.229513, 7.189701, 1.311025; -6.395699, 2.6122012, -0.119832754; -4.671918, -0.068439245, 0.33123922; -3.810029, -1.4087584, 0.5567748; -4.176479, -2.6037402, 0.72074395; -4.34903, -3.595798, 0.8585532; -3.5753465, -2.7280304, 1.12937\",\n  \"0.0, 0.0, 0.0; 1.3661447, -1.8937025, 1.0084336; 1.6934177, -8.987854, 2.6311316; 2.420148, -16.326143, 0.6226554; 1.6159902, -17.816511, 2.6012793; 1.1514175, -17.651085, 3.770401; -1.5854725, -1.6936891, 0.9650527; -1.2049836, -8.8933115, 1.3161956; -0.6075404, -15.999437, -1.7353863; -2.127471, -16.915716, 0.1925968; -2.867453, -17.053413, 1.2259822; -0.23519072, 2.4846022, -0.17393082; -0.72847676, 4.9533505, -0.12624732; -1.2907186, 7.4295254, 0.085963905; -1.4371909, 8.957618, 0.51162064; -1.3349454, 10.540725, 0.4872805; -1.683374, 12.128695, 0.33619326; 1.9275985, 9.501833, -1.7416825; 5.254648, 12.404086, -4.0024242; 8.0250845, 14.283145, -3.9411895; 9.410529, 15.222476, -3.9145012; 9.428646, 16.3598, -4.156319; 9.553786, 17.260542, -4.3843694; 10.090799, 16.378798, -4.0030046; -5.2523875, 7.16182, 1.2432289; -6.4112635, 2.569448, -0.14528704; -4.6975203, -0.11552501, 0.31809577; -3.8406496, -1.4580097, 0.5497873; -4.213727, -2.648929, 0.7277676; -4.391774, -3.6386144, 0.8753004; -3.6076741, -2.7748961, 1.1285334\",\n  \"0.0, 0.0, 0.0; 1.3661666, -1.8942409, 1.0073924; 1.6917042, -8.991901, 2.6150267; 2.4004426, -16.336023, 0.62149477; 1.6183925, -17.811243, 2.6202304; 1.168494, -17.624012, 3.7917995; -1.5854535, -1.6942736, 0.96405643; -1.2080617, -8.893519, 1.3261054; -0.6159386, -16.002674, -1.7194517; -2.140255, -16.91831, 0.20537174; -2.8822043, -17.054432, 1.2375546; -0.22251353, 2.4859667, -0.17108777; -0.7130108, 4.9552536, -0.12252952; -1.2913754, 7.427914, 0.087314025; -1.4424549, 8.957991, 0.50414073; -1.3368284, 10.540848, 0.4780171; -1.6812406, 12.129516, 0.32507128; 1.9451828, 9.521774, -1.682646; 5.102044, 12.694524, -3.8206763; 7.6969357, 14.800951, -3.6221101; 8.994837, 15.853984, -3.5267885; 8.91904, 16.98642, -3.780077; 8.970884, 17.893303, -4.012195; 9.568909, 17.067715, -3.597386; -5.2697153, 7.136696, 1.1799046; -6.4237175, 2.530261, -0.16541505; -4.7173405, -0.15798378, 0.30611274; -3.8641536, -1.5021049, 0.54187703; -4.2442236, -2.6888466, 0.73251694; -4.428121, -3.6762443, 0.8879882; -3.6315732, -2.8184934, 1.1219201\",\n  \"0.0, 0.0, 0.0; 1.3660783, -1.8948704, 1.0063277; 1.6947919, -8.996593, 2.5952678; 2.3876762, -16.345657, 0.6144171; 1.634872, -17.805803, 2.6353276; 1.2027171, -17.597372, 3.8099923; -1.585535, -1.694777, 0.9630379; -1.2065718, -8.893368, 1.3363063; -0.62320954, -16.00499, -1.7051809; -2.149028, -16.916132, 0.22058427; -2.8913789, -17.05204, 1.2525067; -0.20722753, 2.4874825, -0.16822799; -0.6933485, 4.957606, -0.11822237; -1.2886717, 7.426342, 0.09040278; -1.4427998, 8.958326, 0.4990269; -1.3337182, 10.540907, 0.47047156; -1.6748964, 12.129985, 0.3145698; 1.9654958, 9.543931, -1.6179667; 4.952628, 12.959871, -3.6208837; 7.34929, 15.272552, -3.278176; 8.548337, 16.428743, -3.1107905; 8.38085, 17.54746, -3.3804748; 8.360196, 18.45375, -3.6196694; 9.009407, 17.690582, -3.164263; -5.283059, 7.109721, 1.1152792; -6.434431, 2.4902468, -0.18689013; -4.733655, -0.20030022, 0.29168782; -3.8832698, -1.5455734, 0.5309769; -4.271392, -2.7279725, 0.73208857; -4.4620967, -3.7131474, 0.89335203; -3.6516743, -2.8634148, 1.1081054\",\n  \"0.0, 0.0, 0.0; 1.3647429, -1.8967122, 1.0046685; 1.7015046, -9.003179, 2.5705433; 2.3845544, -16.3555, 0.598377; 1.665362, -17.80292, 2.6405714; 1.2516196, -17.580847, 3.8193588; -1.5867316, -1.6945589, 0.96144944; -1.202472, -8.892188, 1.3476167; -0.63174754, -16.006556, -1.6898439; -2.157791, -16.911966, 0.23844445; -2.8997207, -17.046955, 1.2707901; -0.19092767, 2.4890554, -0.16420795; -0.67210543, 4.9600945, -0.1116915; -1.2839789, 7.4248195, 0.09647197; -1.4411405, 8.958734, 0.49661225; -1.327863, 10.540962, 0.4650716; -1.6647661, 12.130609, 0.30570143; 1.9872804, 9.566262, -1.5483385; 4.8004904, 13.203493, -3.408362; 6.981981, 15.695037, -2.9151723; 8.073723, 16.940725, -2.6725397; 7.8185, 18.037746, -2.9618778; 7.7272778, 18.937162, -3.2103415; 8.417307, 18.240007, -2.7112112; -5.293369, 7.083154, 1.0524052; -6.442621, 2.4510145, -0.20590639; -4.7466884, -0.24194431, 0.2762803; -3.8987217, -1.5884212, 0.517375; -4.2946553, -2.7664921, 0.7284154; -4.4920726, -3.7495117, 0.89467645; -3.6673574, -2.908673, 1.0890578\",\n  \"0.0, 0.0, 0.0; 1.3640165, -1.8987926, 1.0017209; 1.7087084, -9.01104, 2.539374; 2.3885012, -16.36529, 0.57328784; 1.705985, -17.801105, 2.6361556; 1.3108779, -17.57023, 3.819636; -1.5873847, -1.6955447, 0.9586289; -1.2016497, -8.89213, 1.362388; -0.6418565, -16.009567, -1.6699072; -2.1669555, -16.914598, 0.2593069; -2.9080975, -17.048025, 1.2924213; -0.17510621, 2.4904776, -0.16023171; -0.65140766, 4.9623833, -0.10417808; -1.2796297, 7.4227624, 0.106685035; -1.4390311, 8.95874, 0.49792236; -1.3216567, 10.540599, 0.46295935; -1.6547672, 12.130689, 0.3000832; 2.0073943, 9.589867, -1.4717464; 4.638476, 13.4331665, -3.1775432; 6.5952983, 16.071417, -2.5291524; 7.574995, 17.390568, -2.2089233; 7.2372394, 18.45914, -2.5193784; 7.0783057, 19.346127, -2.7782252; 7.799068, 18.716003, -2.235323; -5.3026047, 7.055258, 0.9934564; -6.449824, 2.4102726, -0.21850425; -4.759677, -0.28586626, 0.26622126; -3.914604, -1.6339338, 0.508584; -4.318186, -2.8079045, 0.72782606; -4.5223, -3.7889853, 0.8974186; -3.6832306, -2.9579537, 1.0714827\",\n  \"0.0, 0.0, 0.0; 1.3625822, -1.9016094, 0.9983237; 1.717568, -9.020371, 2.5031374; 2.3994322, -16.374844, 0.5385982; 1.7549127, -17.801533, 2.6199365; 1.3777381, -17.57152, 3.8094206; -1.5886685, -1.6961771, 0.95537823; -1.2039635, -8.891619, 1.3799521; -0.6564066, -16.012386, -1.6467544; -2.178922, -16.916815, 0.28478158; -2.9186225, -17.050804, 1.3188559; -0.1608495, 2.4918838, -0.15315606; -0.63286936, 4.9644856, -0.091829814; -1.2757125, 7.4209485, 0.1206189; -1.4375043, 8.959258, 0.5015806; -1.316153, 10.540724, 0.4626505; -1.6453154, 12.131277, 0.2963108; 2.0269754, 9.6105585, -1.3927139; 4.4748545, 13.641634, -2.9294648; 6.1986914, 16.395744, -2.1212664; 7.0621753, 17.772978, -1.7210957; 6.6493235, 18.808186, -2.0530684; 6.427459, 19.678183, -2.3230388; 7.1696844, 19.113052, -1.7390649; -5.3110495, 7.03102, 0.9390118; -6.4548874, 2.3733635, -0.22662735; -4.7702217, -0.32585382, 0.26004443; -3.9278889, -1.6754601, 0.5033797; -4.3387575, -2.8455806, 0.7295605; -4.549356, -3.8248646, 0.90159124; -3.6970332, -3.003617, 1.0566621\",\n  \"0.0, 0.0, 0.0; 1.3617821, -1.9045445, 0.9938106; 1.7269293, -9.030267, 2.462821; 2.4175968, -16.384094, 0.49894357; 1.8113947, -17.803133, 2.5969584; 1.4511497, -17.580418, 3.7930603; -1.5893887, -1.6979287, 0.9510587; -1.2061594, -8.891898, 1.401151; -0.670719, -16.01612, -1.6195891; -2.1907005, -16.92301, 0.31278872; -2.9287398, -17.05341, 1.3485075; -0.14660817, 2.493253, -0.14494781; -0.6138114, 4.9665985, -0.077091776; -1.270661, 7.419079, 0.13850155; -1.4345285, 8.95975, 0.5088869; -1.3094363, 10.540798, 0.46515054; -1.6350546, 12.131595, 0.29422423; 2.0476818, 9.631214, -1.3062729; 4.3073034, 13.835452, -2.6560054; 5.7922077, 16.673798, -1.6819497; 6.536479, 18.093346, -1.1987785; 6.0577188, 19.092878, -1.5509591; 5.7794, 19.943117, -1.8313801; 6.5341845, 19.437796, -1.2098933; -5.317524, 7.0075355, 0.88635397; -6.4543405, 2.3375726, -0.23611724; -4.778245, -0.3663664, 0.25392097; -3.9401984, -1.7183343, 0.49894047; -4.357807, -2.8847642, 0.7317423; -4.5744534, -3.8622508, 0.9064648; -3.7108421, -3.049844, 1.044739\",\n  \"0.0, 0.0, 0.0; 1.3603033, -1.9076842, 0.9898056; 1.7387114, -9.040355, 2.421265; 2.4386802, -16.393116, 0.45669377; 1.8687552, -17.803774, 2.5704694; 1.5247579, -17.583672, 3.7718267; -1.5907134, -1.6988304, 0.9472266; -1.2115052, -8.891151, 1.4261405; -0.6869278, -16.018833, -1.5883412; -2.202594, -16.928804, 0.34597588; -2.9385064, -17.059607, 1.3831563; -0.13315533, 2.4946043, -0.13428728; -0.596197, 4.968485, -0.057934113; -1.2667028, 7.4170165, 0.16048121; -1.430307, 8.960289, 0.51999205; -1.3006676, 10.54081, 0.47077632; -1.622768, 12.131716, 0.29429433; 2.066111, 9.650771, -1.2161121; 4.1491313, 14.005672, -2.355915; 5.3810434, 16.902887, -1.216414; 5.999031, 18.352077, -0.65032965; 5.4646125, 19.315733, -1.0219126; 5.1374063, 20.145025, -1.3121077; 5.8951607, 19.69255, -0.65455794; -5.3237486, 6.9848437, 0.83824044; -6.4472666, 2.3034506, -0.24947065; -4.783944, -0.4068408, 0.24892685; -3.952284, -1.7619851, 0.49812484; -4.376473, -2.9250875, 0.7356317; -4.5990176, -3.9009604, 0.91195285; -3.7256532, -3.0968504, 1.036817\",\n  \"0.0, 0.0, 0.0; 1.3582329, -1.9112458, 0.9857693; 1.7513978, -9.051328, 2.3756998; 2.4645746, -16.401878, 0.4076121; 1.9285576, -17.805597, 2.5348344; 1.5992476, -17.587484, 3.740662; -1.5925614, -1.6992486, 0.9433634; -1.2190397, -8.889723, 1.45346; -0.7053165, -16.020575, -1.5553846; -2.2153168, -16.937386, 0.38013375; -2.9484763, -17.067665, 1.4193277; -0.122274265, 2.4958856, -0.120077506; -0.58141756, 4.9701676, -0.033829667; -1.2617049, 7.416006, 0.18451288; -1.423694, 8.96172, 0.534127; -1.2899395, 10.541694, 0.4787206; -1.6093314, 12.132295, 0.29472; 2.0884845, 9.664312, -1.1245574; 4.021912, 14.142954, -2.0228367; 4.9798274, 17.07816, -0.7278855; 5.460942, 18.54652, -0.08371258; 4.8824134, 19.47765, -0.47180012; 4.515068, 20.287537, -0.76868933; 5.2645144, 19.876568, -0.0753423; -5.3286247, 6.970778, 0.7908852; -6.4360805, 2.2789974, -0.2681638; -4.786477, -0.43747687, 0.24202639; -3.961675, -1.7957116, 0.49712196; -4.3922157, -2.955781, 0.73800904; -4.6203346, -3.9300983, 0.91580445; -3.7396724, -3.1327329, 1.0323867\",\n  \"0.0, 0.0, 0.0; 1.3575591, -1.9139757, 0.9813919; 1.7651465, -9.061289, 2.32937; 2.4910913, -16.40968, 0.35787845; 1.9831614, -17.805647, 2.4970603; 1.6661848, -17.576628, 3.7041702; -1.5931672, -1.7010003, 0.93917394; -1.2277728, -8.889342, 1.4840326; -0.7237766, -16.02359, -1.5184026; -2.227738, -16.947674, 0.41835856; -2.9579847, -17.076994, 1.459721; -0.11196592, 2.49712, -0.103296675; -0.5662671, 4.9718637, -0.005436085; -1.2546285, 7.4154882, 0.21238768; -1.41446, 8.963758, 0.5515301; -1.2762102, 10.543095, 0.48941576; -1.5924783, 12.133317, 0.2969432; 2.114861, 9.675648, -1.0247597; 3.92293, 14.253917, -1.6360061; 4.5900145, 17.203167, -0.19835031; 4.925758, 18.67867, 0.5176659; 4.315215, 19.583317, 0.11621547; 3.9166844, 20.37745, -0.18299574; 4.64291, 19.992706, 0.5490315; -5.3311014, 6.960638, 0.7427023; -6.423291, 2.2600312, -0.29279822; -4.7868567, -0.46171117, 0.23152971; -3.9686403, -1.8225808, 0.49369273; -4.405602, -2.9797516, 0.7369481; -4.639198, -3.952486, 0.91629285; -3.7532072, -3.1605303, 1.0293213\",\n  \"0.0, 0.0, 0.0; 1.3560961, -1.9167222, 0.97804826; 1.7793581, -9.071357, 2.281622; 2.5190046, -16.416735, 0.30400777; 2.0325978, -17.803347, 2.4542477; 1.7252843, -17.542477, 3.6573868; -1.5944717, -1.7015411, 0.93597496; -1.241256, -8.887702, 1.5164706; -0.7426263, -16.025084, -1.4794053; -2.2412114, -16.96245, 0.45513904; -2.969211, -17.09074, 1.4982007; -0.10262529, 2.49819, -0.08561469; -0.55233145, 4.9732275, 0.025186554; -1.2472032, 7.4150124, 0.24296996; -1.4056835, 8.965716, 0.5714601; -1.2631068, 10.5443735, 0.50225556; -1.5758513, 12.134183, 0.30082297; 2.141644, 9.684861, -0.9214264; 3.8425841, 14.336603, -1.1886046; 4.202524, 17.275557, 0.37438047; 4.3846245, 18.745953, 1.1536658; 3.7532456, 19.632132, 0.74335396; 3.3314574, 20.415445, 0.44751844; 4.0192084, 20.038166, 1.2194993; -5.332105, 6.9533567, 0.697065; -6.411877, 2.2459111, -0.32023454; -4.786698, -0.479388, 0.22037226; -3.9741087, -1.8420354, 0.4906759; -4.419316, -2.996, 0.7342099; -4.6597686, -3.966942, 0.9142027; -3.7690108, -3.1805866, 1.0288515\",\n  \"0.0, 0.0, 0.0; 1.3553077, -1.9193957, 0.9738891; 1.7975991, -9.080733, 2.2335982; 2.5483847, -16.423473, 0.25039828; 2.0795505, -17.79999, 2.4110036; 1.7806268, -17.492987, 3.6053371; -1.5951786, -1.7030629, 0.93199414; -1.2569478, -8.886705, 1.5512807; -0.7601548, -16.027279, -1.4372852; -2.2528458, -16.979774, 0.49442375; -2.9786487, -17.108074, 1.539014; -0.09236182, 2.4991825, -0.06611725; -0.5367551, 4.974537, 0.05821652; -1.238693, 7.4144077, 0.27478728; -1.3964096, 8.967234, 0.59347236; -1.249524, 10.545143, 0.51666164; -1.5585084, 12.134335, 0.3048216; 2.168575, 9.693911, -0.8145739; 3.7683482, 14.386887, -0.67318076; 3.808551, 17.289454, 0.9951754; 3.8305683, 18.741606, 1.8278122; 3.1884947, 19.61876, 1.4147112; 2.7502835, 20.396805, 1.1290169; 3.3850844, 20.005331, 1.9383821; -5.330825, 6.9457364, 0.6496999; -6.3988113, 2.231686, -0.349289; -4.783125, -0.49621606, 0.20643324; -3.9752815, -1.8601648, 0.48429355; -4.4280343, -3.0111442, 0.72804314; -4.674619, -3.9802878, 0.9094269; -3.7812738, -3.1976418, 1.0292103\",\n  \"0.0, 0.0, 0.0; 1.3538381, -1.9224839, 0.96983325; 1.8176134, -9.089796, 2.1871262; 2.5759625, -16.430296, 0.19851577; 2.1235323, -17.79762, 2.368435; 1.8328809, -17.441776, 3.5512009; -1.5964897, -1.7039536, 0.9281129; -1.276643, -8.884862, 1.5875795; -0.77934307, -16.028488, -1.3935981; -2.2651432, -16.99644, 0.535738; -2.9884768, -17.125835, 1.5819048; -0.08233797, 2.499965, -0.04700153; -0.52158177, 4.975505, 0.09116426; -1.230144, 7.4134703, 0.30762485; -1.3868878, 8.968199, 0.6173921; -1.2359573, 10.54532, 0.53262305; -1.5415729, 12.133601, 0.3093787; 2.1952646, 9.702209, -0.7026049; 3.6846972, 14.39487, -0.09943259; 3.4057345, 17.236898, 1.6484177; 3.2678118, 18.658634, 2.5214348; 2.6237566, 19.535994, 2.1118696; 2.1746998, 20.313679, 1.8425021; 2.7445157, 19.886702, 2.6817265; -5.328295, 6.938877, 0.60031784; -6.3867254, 2.2190537, -0.38143504; -4.779065, -0.5101979, 0.19069558; -3.9752347, -1.8748215, 0.4767597; -4.4363384, -3.0229557, 0.71826357; -4.6896524, -3.9903831, 0.8995353; -3.7944484, -3.2113354, 1.0285425\",\n  \"0.0, 0.0, 0.0; 1.3523865, -1.9252532, 0.96635914; 1.8385214, -9.098162, 2.1412253; 2.6030874, -16.436043, 0.14534605; 2.1672392, -17.79566, 2.3234863; 1.884952, -17.393913, 3.4935088; -1.5977811, -1.7045511, 0.9247878; -1.2993215, -8.882388, 1.6263725; -0.7983867, -16.02895, -1.3471519; -2.2770865, -17.016762, 0.5775684; -2.9977686, -17.142496, 1.6260089; -0.07303638, 2.5005476, -0.027240578; -0.50674075, 4.976178, 0.12598492; -1.2199767, 7.4126973, 0.34337682; -1.3769326, 8.969298, 0.6434791; -1.2227142, 10.54563, 0.5503694; -1.5250973, 12.132905, 0.31584522; 2.2232926, 9.707968, -0.5882609; 3.5790415, 14.350558, 0.5124593; 3.006045, 17.114748, 2.3126965; 2.7206302, 18.497334, 3.2124236; 2.0803635, 19.383005, 2.8149908; 1.6241515, 20.164131, 2.5685859; 2.1240826, 19.683651, 3.4232812; -5.3227997, 6.9356656, 0.55559003; -6.3703074, 2.2105756, -0.41245055; -4.770567, -0.52000546, 0.17532444; -3.9706988, -1.8852948, 0.4692117; -4.4409285, -3.0305367, 0.7068205; -4.701651, -3.99627, 0.88661647; -3.8042176, -3.2215881, 1.0260079\",\n  \"0.0, 0.0, 0.0; 1.3523165, -1.9261445, 0.96467966; 1.8595175, -9.104619, 2.0958288; 2.6333547, -16.438595, 0.08919191; 2.2140243, -17.79153, 2.2747226; 1.939385, -17.351624, 3.4327786; -1.5978464, -1.7053607, 0.9231812; -1.3262846, -8.879964, 1.6674687; -0.8155958, -16.028482, -1.299683; -2.2876594, -17.037558, 0.6190847; -3.0065174, -17.163073, 1.668803; -0.06329912, 2.5009487, -0.00799613; -0.49078682, 4.9766636, 0.1605704; -1.209123, 7.411602, 0.37887692; -1.3665922, 8.969892, 0.6698089; -1.2087245, 10.545362, 0.56860316; -1.5072753, 12.131637, 0.32267952; 2.251193, 9.713495, -0.46954376; 3.4313877, 14.2581625, 1.1293383; 2.6048543, 16.925451, 2.9765906; 2.1922174, 18.259361, 3.900131; 1.5588827, 19.159107, 3.5237632; 1.0978357, 19.9459, 3.3060546; 1.5297699, 19.400389, 4.1587834; -5.315186, 6.9322414, 0.5062075; -6.356113, 2.2033687, -0.45039034; -4.763226, -0.5277109, 0.15346038; -3.966782, -1.8932483, 0.45538568; -4.445603, -3.035869, 0.68841296; -4.713245, -4.000002, 0.86662245; -3.8151054, -3.228544, 1.018765\",\n  \"0.0, 0.0, 0.0; 1.3510742, -1.9274796, 0.96375287; 1.8761811, -9.111639, 2.0497384; 2.6610188, -16.440376, 0.028292656; 2.2629616, -17.785145, 2.2228236; 1.9979203, -17.30093, 3.3653326; -1.598949, -1.7048074, 0.9222938; -1.3572454, -8.87571, 1.7112024; -0.83380175, -16.025265, -1.2512264; -2.2977386, -17.056929, 0.6617384; -3.0140893, -17.180237, 1.7134305; -0.05531314, 2.501131, 0.009940354; -0.47695988, 4.976712, 0.19442615; -1.1974409, 7.410679, 0.41647607; -1.3554149, 8.970408, 0.69930434; -1.1947442, 10.544996, 0.5891489; -1.4902031, 12.12988, 0.33083415; 2.279704, 9.715481, -0.3514223; 3.2547634, 14.119095, 1.7127304; 2.2116876, 16.66515, 3.6204853; 1.6904297, 17.938269, 4.5744085; 1.0619954, 18.853537, 4.228483; 0.59511185, 19.645552, 4.0448093; 0.96939415, 19.031685, 4.878102; -5.3055086, 6.9339776, 0.46425492; -6.3455434, 2.2020946, -0.47832483; -4.7609534, -0.5301347, 0.14193207; -3.9686599, -1.896248, 0.4520598; -4.456376, -3.0364127, 0.6785767; -4.731264, -3.9991338, 0.85335696; -3.8318725, -3.231832, 1.018557\",\n  \"0.0, 0.0, 0.0; 1.351014, -1.9277135, 0.9633695; 1.8911436, -9.117479, 2.0039349; 2.689228, -16.439335, -0.037169695; 2.31808, -17.778372, 2.165567; 2.0637012, -17.261908, 3.2963166; -1.5990003, -1.7049574, 0.92192686; -1.3909297, -8.87188, 1.7553396; -0.84999233, -16.02158, -1.2035959; -2.3061085, -17.075289, 0.70331144; -3.0205054, -17.198736, 1.7563155; -0.046289712, 2.501193, 0.026532343; -0.46061218, 4.976841, 0.2260994; -1.1828387, 7.409952, 0.45181793; -1.3436737, 8.970963, 0.72582936; -1.1808126, 10.544729, 0.6074747; -1.4727603, 12.12839, 0.33791575; 2.3112068, 9.716251, -0.23004991; 3.0726314, 13.956337, 2.228646; 1.8431098, 16.349371, 4.221531; 1.2284994, 17.545916, 5.2180495; 0.5990235, 18.474089, 4.910537; 0.12250623, 19.26831, 4.7651215; 0.45353124, 18.588442, 5.5648074; -5.2915363, 6.9377465, 0.41474262; -6.335223, 2.2041802, -0.51526463; -4.7599463, -0.5296316, 0.12152135; -3.9723103, -1.896537, 0.439913; -4.4684024, -3.0345697, 0.65883476; -4.7501345, -3.9960988, 0.8292243; -3.849863, -3.2328665, 1.0079336\",\n  \"0.0, 0.0, 0.0; 1.3502767, -1.9288905, 0.9620466; 1.9066457, -9.123222, 1.9616971; 2.711483, -16.438353, -0.10075688; 2.37203, -17.774767, 2.108674; 2.1299136, -17.24104, 3.2340865; -1.5996553, -1.7050271, 0.92066115; -1.4271504, -8.867542, 1.7988746; -0.86523765, -16.017544, -1.1554198; -2.313901, -17.093904, 0.74450076; -3.0265815, -17.214527, 1.7989942; -0.03774723, 2.5011332, 0.041509442; -0.44501054, 4.976794, 0.2549684; -1.1683493, 7.409156, 0.48515812; -1.332054, 8.971056, 0.75231445; -1.1673113, 10.544041, 0.62640476; -1.4560812, 12.126326, 0.3455759; 2.3420773, 9.715386, -0.10689142; 2.9000776, 13.774589, 2.6886046; 1.5099088, 15.987861, 4.7811584; 0.8149866, 17.094528, 5.8275247; 0.17489904, 18.029142, 5.5646687; -0.31779754, 18.819983, 5.460621; -0.012668461, 18.080215, 6.216224; -5.2760773, 6.943581, 0.3604132; -6.3259006, 2.2095337, -0.5601917; -4.761345, -0.5261414, 0.094765365; -3.9790685, -1.8939775, 0.42224368; -4.4833217, -3.0301418, 0.63203424; -4.7717395, -3.9906552, 0.7968766; -3.871198, -3.2314177, 0.9906087\",\n  \"0.0, 0.0, 0.0; 1.3494227, -1.9291888, 0.96264637; 1.9211268, -9.127098, 1.9272797; 2.7278187, -16.436172, -0.15581203; 2.4230845, -17.773909, 2.057877; 2.1940002, -17.2414, 3.1865907; -1.6004101, -1.7040085, 0.9212349; -1.4612707, -8.861916, 1.8419117; -0.88005847, -16.011799, -1.1089317; -2.3211238, -17.107702, 0.78558636; -3.031879, -17.225796, 1.8416642; -0.029246425, 2.501031, 0.05294908; -0.42952004, 4.9767084, 0.27905577; -1.1540025, 7.4081373, 0.51542825; -1.3206682, 8.970561, 0.7776502; -1.1542962, 10.542789, 0.64464116; -1.4401612, 12.1235485, 0.35247925; 2.3711104, 9.713814, 0.01568076; 2.7350986, 13.562196, 3.1238568; 1.2130545, 15.587522, 5.3127756; 0.4521827, 16.600208, 6.4073315; -0.20859694, 17.532703, 6.192546; -0.72451866, 18.31312, 6.1310654; -0.42866844, 17.521194, 6.83578; -5.2589507, 6.950195, 0.30225614; -6.3117456, 2.2162333, -0.615394; -4.7603483, -0.52256155, 0.057576478; -3.9846494, -1.8919568, 0.3940607; -4.4958744, -3.026709, 0.59440684; -4.7900143, -3.9864855, 0.7533236; -3.8898659, -3.2306786, 0.96174043\",\n  \"0.0, 0.0, 0.0; 1.3486838, -1.9295188, 0.9630203; 1.9334261, -9.129464, 1.9043572; 2.7366695, -16.434391, -0.1945591; 2.4649894, -17.774164, 2.022199; 2.2487528, -17.254204, 3.159266; -1.6010607, -1.7032033, 0.9215932; -1.496775, -8.856493, 1.881916; -0.89515036, -16.006546, -1.0644193; -2.328205, -17.121698, 0.82493615; -3.0368998, -17.236187, 1.8827941; -0.021200342, 2.50087, 0.06334869; -0.4141285, 4.9766297, 0.30113947; -1.1383083, 7.4075537, 0.5435543; -1.3073896, 8.970338, 0.80205333; -1.1398017, 10.541868, 0.6624743; -1.4233695, 12.120936, 0.35914326; 2.4006987, 9.709682, 0.1337376; 2.580613, 13.317538, 3.5328982; 0.9559593, 15.152943, 5.8136253; 0.1437313, 16.070633, 6.954082; -0.54673797, 16.991789, 6.7896695; -1.0921481, 17.754152, 6.7713985; -0.79087764, 16.917507, 7.419902; -5.239092, 6.9603443, 0.24466962; -6.290641, 2.2269697, -0.67742497; -4.7546797, -0.51582026, 0.0144189; -3.9867005, -1.8872141, 0.36033943; -4.504665, -3.0207386, 0.5500436; -4.8043637, -3.97992, 0.70201635; -3.9048824, -3.2277243, 0.9258105\",\n  \"0.0, 0.0, 0.0; 1.3487304, -1.9291964, 0.9636009; 1.9448493, -9.129843, 1.89235; 2.7402153, -16.432182, -0.2185309; 2.500729, -17.774273, 2.0005367; 2.2977622, -17.273582, 3.1486444; -1.6010178, -1.702943, 0.92214876; -1.5288755, -8.851652, 1.9188423; -0.90868056, -16.001778, -1.0234663; -2.3334026, -17.133326, 0.8624393; -3.039825, -17.245861, 1.9220254; -0.013779748, 2.5006673, 0.072715; -0.39914054, 4.9764524, 0.32233137; -1.1220549, 7.4069552, 0.57261467; -1.2921828, 8.970137, 0.82800925; -1.1233871, 10.540869, 0.6810957; -1.4052004, 12.117849, 0.36551493; 2.429638, 9.703613, 0.25143364; 2.438327, 13.038166, 3.9234855; 0.7356111, 14.685845, 6.289038; -0.11575633, 15.509607, 7.471875; -0.8407114, 16.412012, 7.360449; -1.4184215, 17.149967, 7.3864627; -1.1011121, 16.274647, 7.973341; -5.217395, 6.9728956, 0.19112125; -6.2652955, 2.2403102, -0.73914194; -4.7467093, -0.50696206, -0.027025044; -3.987417, -1.8805965, 0.32903317; -4.510912, -3.0132294, 0.50861025; -4.815176, -3.97197, 0.6541541; -3.9174895, -3.2223272, 0.8932011\",\n  \"0.0, 0.0, 0.0; 1.3471844, -1.9297416, 0.96467096; 1.9549366, -9.130151, 1.887711; 2.7403507, -16.430117, -0.23507237; 2.5295072, -17.775606, 1.9848428; 2.3390985, -17.301706, 3.146394; -1.6023799, -1.7011062, 0.9231729; -1.5638679, -8.845138, 1.9546635; -0.9224125, -15.995679, -0.9820707; -2.338684, -17.142965, 0.9006883; -3.0429068, -17.252811, 1.9620192; -0.007172545, 2.5003872, 0.082618915; -0.38527107, 4.976053, 0.34423533; -1.1049099, 7.406784, 0.6016472; -1.2763755, 8.970598, 0.85222316; -1.1077858, 10.540668, 0.6981632; -1.3892672, 12.115485, 0.37167275; 2.4588993, 9.694473, 0.36069992; 2.3144858, 12.726589, 4.2835436; 0.5530788, 14.18779, 6.7273655; -0.3277787, 14.918224, 7.949277; -1.0870216, 15.797393, 7.8952184; -1.6954896, 16.506943, 7.9680886; -1.3555318, 15.5979595, 8.487198; -5.194332, 6.9890366, 0.14572531; -6.2327332, 2.2578616, -0.80219555; -4.7345085, -0.4939897, -0.06506729; -3.9853978, -1.869914, 0.3034961; -4.513852, -3.0016928, 0.4736897; -4.822227, -3.9599683, 0.6135347; -3.92711, -3.2122095, 0.86764324\",\n  \"0.0, 0.0, 0.0; 1.3464789, -1.9297354, 0.9656678; 1.9648713, -9.129312, 1.8881382; 2.7376206, -16.426983, -0.24715006; 2.5532496, -17.775274, 1.973421; 2.3754692, -17.331718, 3.1488748; -1.6030004, -1.700003, 0.9241268; -1.5987488, -8.839291, 1.9886448; -0.9342682, -15.989525, -0.9437132; -2.3426733, -17.151249, 0.9360913; -3.0447042, -17.25443, 1.9995413; -8.227577E-5, 2.5001023, 0.09112542; -0.37022313, 4.9756746, 0.3647334; -1.0864402, 7.406398, 0.631582; -1.260053, 8.970848, 0.87665176; -1.0914302, 10.540085, 0.7143593; -1.3717735, 12.112646, 0.3762227; 2.487924, 9.684514, 0.46903506; 2.2078204, 12.379671, 4.623666; 0.40349948, 13.65775, 7.1377993; -0.49900043, 14.296521, 8.394771; -1.2870663, 15.151626, 8.402407; -1.9206326, 15.831803, 8.524699; -1.5578433, 14.892947, 8.969929; -5.169112, 7.005907, 0.105133235; -6.198537, 2.277381, -0.8655225; -4.720279, -0.47744894, -0.09976417; -3.9811516, -1.8548623, 0.28311497; -4.5140414, -2.9857502, 0.44520685; -4.82612, -3.9434714, 0.5805616; -3.9343972, -3.1967633, 0.8492743\",\n  \"0.0, 0.0, 0.0; 1.3449225, -1.9301552, 0.96699727; 1.9731411, -9.128277, 1.8941628; 2.7337298, -16.422884, -0.2559091; 2.5720012, -17.774147, 1.9646205; 2.4057472, -17.362713, 3.1533675; -1.6043679, -1.69802, 0.9253993; -1.6339656, -8.832499, 2.0212898; -0.9463662, -15.982252, -0.9069083; -2.3464518, -17.157637, 0.9706187; -3.0462072, -17.25572, 2.036049; 0.0062145228, 2.4998019, 0.09882348; -0.3567513, 4.9751377, 0.38394165; -1.069157, 7.4059105, 0.66037166; -1.2458866, 8.970779, 0.90049076; -1.0777, 10.539291, 0.73091006; -1.3569369, 12.109766, 0.38231957; 2.514624, 9.6733055, 0.57234544; 2.118171, 11.997705, 4.9362054; 0.2806573, 13.092508, 7.5120306; -0.6386526, 13.639537, 8.799719; -1.4450576, 14.473928, 8.875945; -2.0937884, 15.127418, 9.052308; -1.7129948, 14.161381, 9.417089; -5.1444793, 7.0235977, 0.06763595; -6.1615105, 2.298377, -0.9317586; -4.7033744, -0.45836258, -0.13492286; -3.9743073, -1.8367306, 0.26349425; -4.5106497, -2.9671478, 0.4172685; -4.82564, -3.9245753, 0.5478721; -3.9378998, -3.1784177, 0.83091784\",\n  \"0.0, 0.0, 0.0; 1.344818, -1.9292157, 0.96901524; 1.9792506, -9.125922, 1.9029084; 2.7283926, -16.417315, -0.26203597; 2.5828726, -17.770735, 1.958301; 2.4256659, -17.386974, 3.1574888; -1.6044565, -1.6968825, 0.9273302; -1.6713198, -8.826527, 2.0526483; -0.95705235, -15.97477, -0.8728547; -2.3489418, -17.16239, 1.0030651; -3.0466537, -17.256691, 2.0701754; 0.011387649, 2.4995313, 0.105016895; -0.34446043, 4.9746246, 0.40100265; -1.0523639, 7.4055305, 0.6876388; -1.2329412, 8.970701, 0.922875; -1.0652103, 10.538492, 0.7463128; -1.342874, 12.107005, 0.38777727; 2.540319, 9.660466, 0.6730442; 2.0401537, 11.58774, 5.216032; 0.1744976, 12.4921, 7.844984; -0.75907815, 12.94384, 9.159092; -1.5718722, 13.761793, 9.309518; -2.2250614, 14.392298, 9.543636; -1.8347285, 13.401909, 9.823039; -5.1196194, 7.043226, 0.030433774; -6.1233253, 2.3220139, -1.0008671; -4.6848583, -0.43524098, -0.17076015; -3.9656253, -1.8138669, 0.24429208; -4.505191, -2.9436243, 0.39149868; -4.822939, -3.900564, 0.51895845; -3.9398317, -3.1541708, 0.81555253\",\n  \"0.0, 0.0, 0.0; 1.3423811, -1.9300745, 0.97068226; 1.9833902, -9.125062, 1.9132881; 2.7215588, -16.412891, -0.26736426; 2.589548, -17.768791, 1.9523044; 2.4403543, -17.411436, 3.1606412; -1.6065931, -1.6939855, 0.9289256; -1.7103623, -8.818824, 2.0815551; -0.9660814, -15.965527, -0.8402238; -2.3499188, -17.166897, 1.0328958; -3.046016, -17.25704, 2.1014194; 0.016092557, 2.4992797, 0.11025345; -0.3340506, 4.9739037, 0.4167797; -1.0378399, 7.4046316, 0.71483266; -1.2213378, 8.970567, 0.94260645; -1.053441, 10.537466, 0.7584556; -1.329165, 12.104194, 0.39073455; 2.5622096, 9.6471195, 0.77144134; 1.9731648, 11.162999, 5.4574227; 0.08280325, 11.857895, 8.13204; -0.86322635, 12.204895, 9.468876; -1.6701392, 13.010045, 9.698952; -2.3173268, 13.620686, 9.994367; -1.9283435, 12.60859, 10.183184; -5.0964823, 7.0622573, -0.0034667253; -6.08115, 2.3451467, -1.0712417; -4.6646, -0.4131391, -0.20754898; -3.9563253, -1.7922801, 0.22429666; -4.4988465, -2.9213023, 0.36618406; -4.81917, -3.8776503, 0.49162406; -3.94122, -3.130388, 0.80106187\",\n  \"0.0, 0.0, 0.0; 1.341695, -1.9295496, 0.9726725; 1.9874291, -9.123014, 1.923643; 2.716045, -16.407267, -0.2721225; 2.5948005, -17.76625, 1.9462734; 2.452615, -17.44025, 3.1642826; -1.6071901, -1.6923732, 0.93083006; -1.7461094, -8.812456, 2.1088634; -0.97491825, -15.957299, -0.8104851; -2.3498468, -17.169914, 1.0619498; -3.043548, -17.25521, 2.1324277; 0.019268487, 2.4990861, 0.114067666; -0.32489377, 4.973279, 0.4306809; -1.0226045, 7.4041758, 0.74137586; -1.2104542, 8.970371, 0.9637458; -1.0431931, 10.536531, 0.7728494; -1.3171062, 12.101592, 0.39677292; 2.5854461, 9.631142, 0.8634706; 1.930957, 10.7433815, 5.652818; 0.011769652, 11.200632, 8.357919; -0.94860905, 11.428876, 9.709988; -1.7401488, 12.221444, 10.022413; -2.3735967, 12.812667, 10.380468; -1.9955887, 11.783397, 10.475385; -5.073147, 7.084976, -0.03126216; -6.028188, 2.371006, -1.1390663; -4.63874, -0.38942766, -0.23897791; -3.9440174, -1.7696434, 0.2110652; -4.489534, -2.897778, 0.34845766; -4.812529, -3.8533583, 0.47289395; -3.940832, -3.104423, 0.7956769\",\n  \"0.0, 0.0, 0.0; 1.34032, -1.9294327, 0.97479796; 1.9895284, -9.12146, 1.934238; 2.7092817, -16.401522, -0.27828407; 2.5979347, -17.763113, 1.9390318; 2.4622016, -17.46224, 3.1642222; -1.6083909, -1.6901108, 0.9328639; -1.7769837, -8.805961, 2.1324062; -0.98279214, -15.948741, -0.7858243; -2.3483725, -17.169313, 1.08828; -3.038995, -17.249443, 2.1611447; 0.020607896, 2.498932, 0.11716759; -0.3187048, 4.972513, 0.4436407; -1.0091492, 7.403746, 0.7676523; -1.2053255, 8.969254, 0.98766625; -1.0398068, 10.534882, 0.79097503; -1.3112952, 12.098433, 0.40694156; 2.6071858, 9.612777, 0.9537231; 1.9244742, 10.335354, 5.813257; -0.026610017, 10.53051, 8.527131; -1.0027217, 10.62781, 9.88369; -1.774281, 11.403193, 10.278387; -2.3907132, 11.971395, 10.698104; -2.0300522, 10.93158, 10.69609; -5.0513453, 7.1102514, -0.057126343; -5.970821, 2.3994293, -1.2075906; -4.60915, -0.36270618, -0.2710116; -3.9283164, -1.7437725, 0.19727823; -4.476821, -2.8709257, 0.33077353; -4.8025565, -3.825608, 0.4549574; -3.9380744, -3.07432, 0.79138803\",\n  \"0.0, 0.0, 0.0; 1.3393651, -1.9291173, 0.9767325; 1.9902589, -9.119894, 1.9443728; 2.703594, -16.395521, -0.28475225; 2.6032991, -17.75902, 1.9319187; 2.4741616, -17.479282, 3.1628165; -1.6092231, -1.6882948, 0.9347154; -1.8007947, -8.800098, 2.1546295; -0.9901285, -15.941248, -0.7630615; -2.3458347, -17.167759, 1.1143317; -3.0327067, -17.243435, 2.1899242; 0.021193335, 2.4988022, 0.11980491; -0.3132767, 4.971656, 0.45662677; -0.9954613, 7.4031363, 0.795918; -1.1997137, 8.968016, 1.0130334; -1.0365013, 10.533146, 0.8105388; -1.3063442, 12.095199, 0.41931605; 2.629286, 9.5922, 1.0439569; 1.9545665, 9.942715, 5.945505; -0.025078058, 9.85396, 8.644218; -1.015131, 9.809422, 9.993412; -1.7671691, 10.558679, 10.468135; -2.3674638, 11.09681, 10.946741; -2.0254653, 10.055603, 10.845644; -5.0294013, 7.1376667, -0.0773561; -5.9086695, 2.4309635, -1.2751361; -4.5764413, -0.3326497, -0.30131257; -3.910329, -1.714455, 0.18559882; -4.4617243, -2.8406274, 0.31541228; -4.790206, -3.7943525, 0.43971792; -3.933876, -3.0401254, 0.7901316\",\n  \"0.0, 0.0, 0.0; 1.3379436, -1.9289161, 0.9790753; 1.9912901, -9.118566, 1.9534149; 2.696712, -16.388554, -0.29653; 2.6098878, -17.753, 1.9201264; 2.487915, -17.478813, 3.1530023; -1.6104605, -1.6858705, 0.9369576; -1.8238125, -8.794227, 2.1732383; -0.99802893, -15.934562, -0.7422068; -2.3421884, -17.166481, 1.139943; -3.0246396, -17.23998, 2.2184963; 0.018958118, 2.4986794, 0.12270424; -0.31197312, 4.970435, 0.47088376; -0.983603, 7.40245, 0.82698476; -1.1932049, 8.967105, 1.0405903; -1.0315435, 10.53158, 0.8318804; -1.2998767, 12.092144, 0.4337431; 2.650943, 9.567705, 1.1336844; 2.0076532, 9.536671, 6.0518656; 0.016085982, 9.175534, 8.718918; -0.97964257, 8.994885, 10.052485; -1.7170408, 9.705764, 10.603126; -2.3057208, 10.204066, 11.136187; -1.9795332, 9.172638, 10.933568; -5.0097747, 7.1691628, -0.09022248; -5.8499155, 2.467701, -1.3357211; -4.543701, -0.29563618, -0.32651794; -3.8905966, -1.6773041, 0.17808276; -4.445429, -2.8021994, 0.30427396; -4.7772274, -3.7547228, 0.42898208; -3.9297256, -2.997405, 0.79389274\",\n  \"0.0, 0.0, 0.0; 1.3362561, -1.9289353, 0.9813396; 1.9921448, -9.117472, 1.9621572; 2.6925437, -16.38143, -0.308738; 2.622282, -17.745138, 1.9089594; 2.5079403, -17.465282, 3.141293; -1.611928, -1.68326, 0.93912464; -1.8431083, -8.788478, 2.1901543; -1.0041931, -15.9290695, -0.7209096; -2.334196, -17.167282, 1.1671568; -3.0108666, -17.235796, 2.2496736; 0.016227545, 2.498473, 0.12721592; -0.31181616, 4.968819, 0.4879089; -0.9731066, 7.401156, 0.8607689; -1.186308, 8.965804, 1.0708326; -1.0263265, 10.529547, 0.8554469; -1.2942697, 12.088396, 0.4503883; 2.6705036, 9.54298, 1.219942; 2.069244, 9.0955715, 6.123165; 0.08972514, 8.498997, 8.756704; -0.8998646, 8.20064, 10.073598; -1.6294768, 8.85989, 10.694375; -2.2125957, 9.307905, 11.275974; -1.8972603, 8.298879, 10.96983; -4.9921637, 7.1990623, -0.094264746; -5.8000383, 2.5056438, -1.3904147; -4.5154943, -0.25617337, -0.34972644; -3.8732224, -1.6370795, 0.17061824; -4.4302106, -2.7612138, 0.29406482; -4.7643385, -3.7127607, 0.42000347; -3.927154, -2.9508061, 0.798813\",\n  \"0.0, 0.0, 0.0; 1.3347878, -1.9288967, 0.98341125; 1.994571, -9.116709, 1.9669245; 2.6925507, -16.37311, -0.32874072; 2.6392922, -17.736355, 1.8897151; 2.5327017, -17.456, 3.1226294; -1.6132027, -1.6809304, 0.9411068; -1.8594067, -8.783595, 2.2037168; -1.0108898, -15.925068, -0.70239854; -2.3259463, -17.168047, 1.1929914; -2.9963958, -17.23453, 2.279498; 0.011294544, 2.498255, 0.13194181; -0.31493396, 4.96688, 0.5058255; -0.9644996, 7.3995266, 0.89683014; -1.1782851, 8.964698, 1.1023531; -1.0195606, 10.527499, 0.87934375; -1.287967, 12.084476, 0.46744737; 2.6890516, 9.516302, 1.300737; 2.144018, 8.6359825, 6.1516404; 0.19778574, 7.8321066, 8.754694; -0.7751821, 7.430087, 10.056318; -1.5043375, 8.02244, 10.741708; -2.0876918, 8.408323, 11.366044; -1.7752447, 7.4363847, 10.954938; -4.9780264, 7.23012, -0.087373555; -5.7583165, 2.5458827, -1.4327047; -4.490212, -0.2133739, -0.36540234; -3.8561604, -1.5930008, 0.16824752; -4.415604, -2.7162354, 0.28874314; -4.752396, -3.666716, 0.41563457; -3.9253383, -2.900496, 0.8078479\",\n  \"0.0, 0.0, 0.0; 1.3340589, -1.9284106, 0.98535204; 2.0010927, -9.115863, 1.9665995; 2.6984239, -16.363783, -0.35589314; 2.6637402, -17.726492, 1.8632596; 2.5653565, -17.445984, 3.0968213; -1.6138337, -1.6792828, 0.942964; -1.868846, -8.78007, 2.2143514; -1.0146159, -15.922047, -0.6888504; -2.3116045, -17.168564, 1.2166383; -2.9742723, -17.237543, 2.3077538; 0.0063676736, 2.4980335, 0.13639429; -0.3172307, 4.965142, 0.5223786; -0.95372516, 7.398532, 0.9299059; -1.1661307, 8.964577, 1.1301409; -1.0086428, 10.526408, 0.8995894; -1.2783391, 12.08157, 0.48172104; 2.7107496, 9.48926, 1.3689945; 2.243894, 8.180003, 6.1304207; 0.3511771, 7.1853886, 8.706909; -0.59515816, 6.6879916, 9.995148; -1.3290076, 7.199356, 10.738304; -1.91589, 7.5127416, 11.398882; -1.5976319, 6.5924425, 10.88599; -4.9632673, 7.261998, -0.07542181; -5.720966, 2.5888944, -1.4714322; -4.4652734, -0.1670456, -0.38113296; -3.8374286, -1.5450139, 0.16401702; -4.397851, -2.6681166, 0.28114757; -4.736126, -3.618003, 0.408544; -3.9202166, -2.8466604, 0.81384873\",\n  \"0.0, 0.0, 0.0; 1.3317708, -1.9291403, 0.98701763; 2.009194, -9.11668, 1.9604764; 2.7062247, -16.35538, -0.39069104; 2.6926525, -17.718214, 1.8286138; 2.6036215, -17.440197, 3.0634494; -1.6158189, -1.6764756, 0.94455814; -1.8735248, -8.775701, 2.224105; -1.018483, -15.918812, -0.6760664; -2.293817, -17.16918, 1.2414783; -2.9465048, -17.236298, 2.338708; 0.0016471286, 2.4977622, 0.1414046; -0.32014623, 4.963067, 0.54020536; -0.9442216, 7.396678, 0.96524787; -1.1543226, 8.963861, 1.1588932; -0.9977511, 10.524577, 0.9202986; -1.268903, 12.078146, 0.49747753; 2.730647, 9.463759, 1.4287459; 2.3721843, 7.7555084, 6.0716615; 0.55227816, 6.571435, 8.620356; -0.35780025, 5.9793177, 9.8945875; -1.0981228, 6.397073, 10.688131; -1.6887071, 6.629039, 11.378353; -1.3576757, 5.7739353, 10.769656; -4.9521627, 7.2899995, -0.050025344; -5.685687, 2.6286993, -1.4974629; -4.4422154, -0.1253469, -0.38853192; -3.8204803, -1.5023686, 0.1659323; -4.38139, -2.6254725, 0.2806935; -4.720703, -3.5748749, 0.40893316; -3.9147785, -2.7986755, 0.82480437\",\n  \"0.0, 0.0, 0.0; 1.3311334, -1.9290285, 0.9880947; 2.0197816, -9.117037, 1.9501526; 2.7095528, -16.347225, -0.42917562; 2.722583, -17.70966, 1.7903788; 2.645206, -17.42176, 3.023734; -1.6163692, -1.6753634, 0.9455889; -1.875288, -8.773127, 2.2329743; -1.021375, -15.917902, -0.6634252; -2.2733972, -17.171726, 1.2671808; -2.9153802, -17.23959, 2.3706627; -0.0022656182, 2.4973402, 0.14866346; -0.32275188, 4.9607787, 0.5598602; -0.9376298, 7.3943243, 0.99846196; -1.1429076, 8.963016, 1.1849384; -0.98690546, 10.522547, 0.9383588; -1.2607046, 12.074545, 0.511493; 2.7450585, 9.445179, 1.471869; 2.5260327, 7.3698854, 5.971699; 0.7945218, 5.9903965, 8.483433; -0.07150811, 5.3005943, 9.739091; -0.81573546, 5.616578, 10.574907; -1.4064995, 5.7620955, 11.288228; -1.0592284, 4.9820156, 10.593841; -4.946306, 7.3080916, -0.015849471; -5.658513, 2.6599422, -1.515287; -4.4254227, -0.09224582, -0.39026678; -3.8088794, -1.4683384, 0.17224318; -4.369093, -2.5921319, 0.28360453; -4.70844, -3.541564, 0.4115342; -3.9125242, -2.7605982, 0.8376321\",\n  \"0.0, 0.0, 0.0; 1.329489, -1.9296724, 0.98905104; 2.0300415, -9.118497, 1.9363022; 2.7123256, -16.339748, -0.4721434; 2.7551768, -17.70348, 1.7462387; 2.6905296, -17.40462, 2.9777184; -1.6177933, -1.673471, 0.94650424; -1.8730781, -8.7701645, 2.2404957; -1.0249104, -15.916714, -0.65321255; -2.2499404, -17.17313, 1.2929616; -2.8790898, -17.241295, 2.403792; -0.007256669, 2.4968019, 0.15729606; -0.32699007, 4.9581356, 0.5814792; -0.931196, 7.3920016, 1.0329468; -1.1309608, 8.962269, 1.2119966; -0.9753231, 10.52054, 0.9573582; -1.2516936, 12.071118, 0.5270035; 2.7606719, 9.425919, 1.5079312; 2.7045803, 6.9956512, 5.83158; 1.0807925, 5.4262733, 8.30348; 0.26838756, 4.64157, 9.539098; -0.47421318, 4.8527374, 10.4087305; -1.0596943, 4.9108734, 11.138687; -0.697285, 4.211606, 10.369934; -4.9423923, 7.3265285, 0.027081013; -5.6312184, 2.690906, -1.521263; -4.4069843, -0.060495615, -0.38470733; -3.7948658, -1.4361941, 0.18356979; -4.3532033, -2.5612283, 0.29178235; -4.6914587, -3.5111532, 0.4189425; -3.9040198, -2.7259483, 0.8529265\",\n  \"0.0, 0.0, 0.0; 1.3288097, -1.9296259, 0.99005395; 2.0403042, -9.119745, 1.9191457; 2.7138548, -16.332176, -0.5180193; 2.7887313, -17.696943, 1.6988748; 2.737567, -17.385298, 2.9278166; -1.6183801, -1.6723603, 0.9474639; -1.8671446, -8.768182, 2.247493; -1.0286331, -15.916721, -0.6441152; -2.2253547, -17.17664, 1.3173478; -2.8410254, -17.247334, 2.4355478; -0.013323949, 2.4961848, 0.16642603; -0.33249378, 4.9551573, 0.60450137; -0.92522305, 7.389193, 1.0700467; -1.1187057, 8.961179, 1.2407238; -0.9634683, 10.518121, 0.97784114; -1.2427815, 12.067479, 0.545002; 2.776563, 9.40626, 1.5396607; 2.8913767, 6.6209264, 5.6423454; 1.3981476, 4.871047, 8.075063; 0.65065205, 3.9961722, 9.290939; -0.08285707, 4.1049547, 10.186729; -0.6568712, 4.07896, 10.927564; -0.28567928, 3.4625182, 10.0947895; -4.9407015, 7.344336, 0.08026266; -5.605657, 2.7208033, -1.5139855; -4.3899527, -0.030751944, -0.36867845; -3.7821014, -1.4065276, 0.2039749; -4.337302, -2.5335135, 0.307933; -4.673295, -3.4845304, 0.43290854; -3.8934627, -2.695725, 0.87403893\",\n  \"0.0, 0.0, 0.0; 1.328086, -1.9297322, 0.9908177; 2.0495355, -9.121569, 1.8987; 2.7123241, -16.324898, -0.56815076; 2.8228323, -17.690683, 1.6466262; 2.7867827, -17.367414, 2.8730993; -1.6190044, -1.6713418, 0.9481945; -1.8577213, -8.766492, 2.2537577; -1.0323821, -15.9182, -0.6338031; -2.1986408, -17.180405, 1.3444668; -2.799507, -17.25251, 2.470602; -0.021565238, 2.4954224, 0.17668235; -0.3404274, 4.9518776, 0.6288761; -0.9185121, 7.3868866, 1.1075637; -1.1046133, 8.960587, 1.2704747; -0.9501152, 10.516223, 0.99954945; -1.233053, 12.064436, 0.5649686; 2.7957985, 9.3842745, 1.5621544; 3.0895128, 6.255968, 5.400216; 1.7477146, 4.325035, 7.783701; 1.0755007, 3.3597355, 8.974851; 0.36101162, 3.3727922, 9.892262; -0.1938963, 3.2690835, 10.640812; 0.17495, 2.7338805, 9.752665; -4.9401827, 7.3652205, 0.14245051; -5.585834, 2.7536354, -1.4937849; -4.3744965, 0.0014531612, -0.34536278; -3.7688289, -1.3746367, 0.22884727; -4.3196177, -2.5042043, 0.3281506; -4.6521797, -3.4568038, 0.4502166; -3.8794086, -2.6645803, 0.8976041\",\n  \"0.0, 0.0, 0.0; 1.3280414, -1.9295988, 0.99113756; 2.057866, -9.123533, 1.8753905; 2.7095103, -16.318096, -0.61984944; 2.8564422, -17.685297, 1.5919349; 2.8358414, -17.352566, 2.8162322; -1.6190428, -1.6711309, 0.9485008; -1.845015, -8.765772, 2.2590928; -1.037375, -15.9211235, -0.62444234; -2.1733103, -17.185364, 1.3701053; -2.7590523, -17.256624, 2.5042338; -0.03054501, 2.4945235, 0.18770704; -0.34990516, 4.94826, 0.6540868; -0.914191, 7.384019, 1.1452599; -1.0925909, 8.959395, 1.300397; -0.9388431, 10.513747, 1.0217795; -1.2256206, 12.060961, 0.5861588; 2.8117476, 9.36437, 1.5787406; 3.2817152, 5.916101, 5.113122; 2.1074164, 3.7991233, 7.425989; 1.5185413, 2.7409048, 8.581806; 0.8332987, 2.666081, 9.518371; 0.3048122, 2.491736, 10.272897; 0.65737003, 2.0352554, 9.3355465; -4.943015, 7.3823695, 0.21020544; -5.5710287, 2.7823524, -1.4649935; -4.3621554, 0.028944492, -0.31691265; -3.757718, -1.3477577, 0.2571264; -4.303569, -2.4801655, 0.351212; -4.6322107, -3.4345756, 0.46970245; -3.8661392, -2.6392975, 0.92315125\",\n  \"0.0, 0.0, 0.0; 1.327129, -1.9297601, 0.9920453; 2.0659094, -9.12567, 1.8524737; 2.7064445, -16.311935, -0.6694095; 2.888815, -17.680874, 1.5386584; 2.8832989, -17.341114, 2.7611852; -1.6198304, -1.6698738, 0.9493696; -1.8278432, -8.764823, 2.2612658; -1.040878, -15.923228, -0.6204059; -2.1463354, -17.189707, 1.389786; -2.7167554, -17.262228, 2.5316184; -0.041221887, 2.493477, 0.19921537; -0.36133432, 4.944471, 0.6792996; -0.9089476, 7.381897, 1.1809604; -1.0832582, 8.957954, 1.3338121; -0.93131554, 10.511472, 1.0496063; -1.2211428, 12.057925, 0.61330366; 2.8306313, 9.342378, 1.5863993; 3.477434, 5.6096144, 4.788182; 2.4760544, 3.2995045, 6.995116; 1.9733665, 2.1447854, 8.098041; 1.3299376, 1.9905018, 9.054338; 0.8368889, 1.7528894, 9.815553; 1.1562169, 1.3711896, 8.833905; -4.9457335, 7.4027886, 0.28114343; -5.5598717, 2.813748, -1.4289403; -4.3496695, 0.059307814, -0.28474152; -3.7445679, -1.3179101, 0.28735733; -4.2844496, -2.45379, 0.37371248; -4.6082163, -3.4105885, 0.48620838; -3.8483963, -2.613302, 0.94659597\",\n  \"0.0, 0.0, 0.0; 1.3279449, -1.9290041, 0.9924238; 2.0751412, -9.127134, 1.8266072; 2.7047641, -16.305037, -0.7217035; 2.9207826, -17.67636, 1.4818454; 2.9298432, -17.333487, 2.7034817; -1.6191231, -1.670354, 0.94973177; -1.808865, -8.76626, 2.2592168; -1.0421612, -15.926627, -0.6230426; -2.1192584, -17.194633, 1.4015303; -2.6752653, -17.269022, 2.5503306; -0.052015897, 2.4925227, 0.20842202; -0.37255326, 4.9412403, 0.69970715; -0.90377307, 7.380362, 1.2106686; -1.076113, 8.956402, 1.3659141; -0.9267247, 10.5094595, 1.0778704; -1.2194915, 12.055174, 0.6409123; 2.8487837, 9.322113, 1.5851498; 3.6637225, 5.338753, 4.426276; 2.8341196, 2.8372664, 6.491282; 2.4171953, 1.5868847, 7.523383; 1.8286576, 1.359854, 8.500312; 1.3801455, 1.0648352, 9.2689495; 1.6477638, 0.75523496, 8.2472725; -4.9485083, 7.422276, 0.3480491; -5.5486655, 2.843388, -1.3939157; -4.3354874, 0.08752847, -0.2563058; -3.7288985, -1.2903998, 0.3124978; -4.262309, -2.429905, 0.39094105; -4.5808406, -3.3891408, 0.4974668; -3.8283308, -2.589331, 0.9654217\",\n  \"0.0, 0.0, 0.0; 1.3280115, -1.9287326, 0.99286216; 2.0875506, -9.128569, 1.8007672; 2.7078483, -16.297808, -0.77408385; 2.9548483, -17.673838, 1.4232674; 2.9768138, -17.326038, 2.643346; -1.6190643, -1.6701722, 0.9501515; -1.786942, -8.767666, 2.2540052; -1.0389582, -15.929176, -0.63033295; -2.0898197, -17.198942, 1.4068854; -2.6324272, -17.274105, 2.5620246; -0.061753396, 2.4916875, 0.21562357; -0.38188037, 4.9387236, 0.7154801; -0.89608526, 7.380018, 1.233424; -1.0657275, 8.956208, 1.3901095; -0.91841125, 10.508856, 1.0988033; -1.2136669, 12.054136, 0.6619841; 2.8694732, 9.302769, 1.57389; 3.8603692, 5.1176434, 4.04495; 3.190424, 2.4318898, 5.928518; 2.8534842, 1.08933, 6.870068; 2.335783, 0.79482174, 7.868847; 1.9432238, 0.44706315, 8.645999; 2.138827, 0.20684576, 7.5899067; -4.9485526, 7.4427757, 0.4092136; -5.5368676, 2.8735976, -1.3620417; -4.3183475, 0.11696243, -0.23204613; -3.709087, -1.2613531, 0.3329513; -4.2363377, -2.404355, 0.40154824; -4.549896, -3.3660421, 0.50045633; -3.8043857, -2.564895, 0.97724426\",\n  \"0.0, 0.0, 0.0; 1.3287851, -1.928041, 0.9931702; 2.0993757, -9.129913, 1.7719332; 2.709359, -16.289654, -0.8316463; 2.9869323, -17.67002, 1.359327; 3.02183, -17.318846, 2.578137; -1.6183925, -1.6706555, 0.95044607; -1.766696, -8.770035, 2.246384; -1.0364292, -15.931884, -0.6416502; -2.0614781, -17.202744, 1.4080002; -2.5908515, -17.278913, 2.5691986; -0.07142092, 2.4910545, 0.219913; -0.3911975, 4.936899, 0.7257872; -0.88894045, 7.38024, 1.2501237; -1.0556954, 8.956392, 1.410247; -0.9103458, 10.508844, 1.11692; -1.2080343, 12.053966, 0.6811912; 2.8885832, 9.286033, 1.5510991; 4.061469, 4.9433284, 3.6412048; 3.535802, 2.0900035, 5.312174; 3.2713838, 0.66356766, 6.1475635; 2.8432934, 0.30361336, 7.167113; 2.5205975, -0.09476149, 7.952077; 2.6236084, -0.2671359, 6.869962; -4.9496546, 7.4614234, 0.46925312; -5.5298963, 2.902093, -1.3298216; -4.302427, 0.14518261, -0.21023047; -3.6886933, -1.233271, 0.34956425; -4.2099566, -2.3795795, 0.40798795; -4.518602, -3.3436584, 0.4987275; -3.7788606, -2.5421162, 0.98376554\",\n  \"0.0, 0.0, 0.0; 1.329544, -1.927704, 0.99280846; 2.1146488, -9.131126, 1.7421851; 2.7125573, -16.281244, -0.89048004; 3.0196545, -17.66714, 1.293051; 3.0672543, -17.313381, 2.5106835; -1.6177362, -1.6714878, 0.95009995; -1.7425655, -8.773411, 2.2345233; -1.0328524, -15.934307, -0.6609893; -2.0318587, -17.206118, 1.4008932; -2.5477314, -17.286581, 2.5678637; -0.08224506, 2.4905658, 0.2216578; -0.40194348, 4.9358587, 0.73024267; -0.8816508, 7.381919, 1.2586946; -1.0456102, 8.957892, 1.4234068; -0.9019921, 10.510302, 1.1290022; -1.2014312, 12.0555935, 0.695083; 2.9081635, 9.270512, 1.5093734; 4.2454967, 4.8021827, 3.1972294; 3.8486736, 1.8062611, 4.638379; 3.6491458, 0.30843353, 5.358944; 3.3292723, -0.11707097, 6.3928375; 3.0904222, -0.5656111, 7.1807246; 3.0830114, -0.67119426, 6.0852365; -4.9516473, 7.4811816, 0.5299791; -5.522382, 2.9307399, -1.2944641; -4.2849417, 0.1729908, -0.1879909; -3.6662233, -1.2058824, 0.36524522; -4.1814327, -2.3553932, 0.41358426; -4.4850845, -3.3217893, 0.49615112; -3.750823, -2.5200493, 0.98912364\",\n  \"0.0, 0.0, 0.0; 1.3310487, -1.9268169, 0.99251413; 2.1295826, -9.1318245, 1.7118508; 2.71827, -16.27165, -0.9506568; 3.0500798, -17.663841, 1.2252392; 3.107982, -17.307724, 2.4417367; -1.6164308, -1.6729101, 0.94981813; -1.7166802, -8.777812, 2.2198415; -1.0278789, -15.936989, -0.6849587; -2.005176, -17.209135, 1.3870959; -2.5093403, -17.290432, 2.559115; -0.09553572, 2.4902384, 0.21999931; -0.41651946, 4.935537, 0.7277471; -0.8773393, 7.38476, 1.2583537; -1.0379028, 8.960424, 1.4292514; -0.89545214, 10.512953, 1.1349103; -1.1959512, 12.058778, 0.7036298; 2.9242008, 9.256772, 1.4485576; 4.4079337, 4.698819, 2.724053; 4.1183767, 1.5869005, 3.9249048; 3.9730425, 0.030981183, 4.5253263; 3.7789285, -0.46064544, 5.5611506; 3.6369667, -0.95925844, 6.3423266; 3.5035062, -0.99917006, 5.250589; -4.957291, 7.5008984, 0.5903307; -5.5201616, 2.959714, -1.2594442; -4.269851, 0.20220613, -0.1669265; -3.644696, -1.1765461, 0.37933087; -4.1548347, -2.328701, 0.41741303; -4.454348, -3.2970562, 0.49173516; -3.7251554, -2.4957964, 0.9929436\",\n  \"0.0, 0.0, 0.0; 1.3325119, -1.9263567, 0.991444; 2.1451972, -9.13252, 1.6828268; 2.7261593, -16.262564, -1.0074437; 3.0791037, -17.662289, 1.1602788; 3.1458097, -17.305237, 2.3760514; -1.6151625, -1.6747152, 0.94879407; -1.6915387, -8.78335, 2.1994414; -1.0200298, -15.939325, -0.7172704; -1.9785494, -17.211489, 1.3635259; -2.4725375, -17.29418, 2.539773; -0.1111347, 2.4901166, 0.21397033; -0.4351335, 4.936017, 0.716882; -0.8766564, 7.3885007, 1.2488334; -1.0313432, 8.963857, 1.4278057; -0.8893047, 10.516564, 1.1342114; -1.1909006, 12.062893, 0.70550954; 2.9353962, 9.2447815, 1.3704444; 4.4421287, 4.594089, 2.2095513; 4.307587, 1.3965275, 3.1931295; 4.239942, -0.20224404, 3.6849287; 4.1853843, -0.7610082, 4.703317; 4.1505456, -1.3098783, 5.462614; 3.8810725, -1.2855499, 4.3958015; -4.9667172, 7.520337, 0.64902127; -5.5232096, 2.988668, -1.2258482; -4.2591543, 0.2316289, -0.14806414; -3.6271274, -1.146889, 0.39082772; -4.132445, -2.301465, 0.41841233; -4.428047, -3.2716284, 0.48433816; -3.7039373, -2.4711332, 0.99406505\",\n  \"0.0, 0.0, 0.0; 1.3340228, -1.9259975, 0.990109; 2.1618233, -9.133046, 1.6537693; 2.7342641, -16.253267, -1.0642016; 3.1069572, -17.661972, 1.0943787; 3.1816103, -17.301744, 2.3087516; -1.6138523, -1.6767007, 0.9475167; -1.6630777, -8.789365, 2.1764317; -1.0118586, -15.941629, -0.7539499; -1.9530077, -17.214592, 1.3342745; -2.4373617, -17.29986, 2.514338; -0.12725767, 2.490042, 0.20569363; -0.4547832, 4.937023, 0.7010024; -0.8770328, 7.3930387, 1.232306; -1.0263008, 8.967993, 1.419236; -0.8843515, 10.52117, 1.1280913; -1.1862252, 12.068761, 0.70416725; 2.9436665, 9.234939, 1.2767854; 4.454767, 4.528194, 1.6847248; 4.4540453, 1.2694085, 2.4529977; 4.4534597, -0.35999465, 2.83713; 4.5468545, -0.98420256, 3.8138342; 4.6247654, -1.5813806, 4.532383; 4.2139063, -1.4961715, 3.5149202; -4.976963, 7.538642, 0.70778406; -5.5301824, 3.0166059, -1.1911583; -4.248705, 0.26098728, -0.13045037; -3.6079674, -1.1168207, 0.39990288; -4.108657, -2.273582, 0.41901943; -4.4004345, -3.2453475, 0.47802255; -3.6803184, -2.445365, 0.994171\",\n  \"0.0, 0.0, 0.0; 1.3371465, -1.9245977, 0.9886161; 2.1788363, -9.132389, 1.6262279; 2.741602, -16.242868, -1.1191266; 3.133058, -17.661818, 1.0293992; 3.2151008, -17.296797, 2.2418628; -1.6111331, -1.6801188, 0.9460877; -1.6335816, -8.796987, 2.1512175; -1.0039749, -15.945208, -0.7937181; -1.9296188, -17.21733, 1.301934; -2.4049983, -17.304867, 2.485476; -0.14337592, 2.4899867, 0.19551054; -0.47380507, 4.938584, 0.6808063; -0.8763994, 7.398452, 1.2095406; -1.0219984, 8.972523, 1.4065362; -0.8807928, 10.526302, 1.1182578; -1.1827638, 12.075099, 0.69882864; 2.951038, 9.2263975, 1.1688341; 4.4495325, 4.498001, 1.1605896; 4.563641, 1.1989341, 1.7201078; 4.6205897, -0.45062006, 1.9998223; 4.864519, -1.1372117, 2.9061332; 5.056025, -1.7796035, 3.5616193; 4.5036283, -1.6376125, 2.6203473; -4.9855185, 7.5569, 0.767061; -5.5385528, 3.043706, -1.1528549; -4.2372284, 0.2902856, -0.110764384; -3.5865674, -1.0864229, 0.41028088; -4.0829225, -2.2451577, 0.42115736; -4.371086, -3.2183917, 0.47332412; -3.6543152, -2.4192586, 0.995411\",\n  \"0.0, 0.0, 0.0; 1.3400531, -1.923317, 0.9871718; 2.1950006, -9.131635, 1.6007446; 2.7491722, -16.23236, -1.1714684; 3.156142, -17.662436, 0.9667736; 3.2441478, -17.293165, 2.1775308; -1.6085962, -1.6833242, 0.9447058; -1.604449, -8.804265, 2.1257334; -0.9967925, -15.948602, -0.8332062; -1.9088105, -17.220802, 1.2683654; -2.376114, -17.309357, 2.4550438; -0.15776792, 2.4899704, 0.1843119; -0.4912384, 4.940291, 0.6587071; -0.8768839, 7.403484, 1.1845868; -1.0209336, 8.976311, 1.3923646; -0.88056433, 10.530855, 1.1078236; -1.1818619, 12.08124, 0.6938125; 2.9530027, 9.222086, 1.0543089; 4.4191623, 4.501008, 0.64800286; 4.6374426, 1.1796284, 1.0095546; 4.746522, -0.48108184, 1.1902624; 5.135721, -1.2211313, 1.9984454; 5.4354825, -1.9012365, 2.5699382; 4.7486353, -1.7120275, 1.7310479; -4.994096, 7.5697303, 0.82866806; -5.5496607, 3.0655947, -1.1116805; -4.2262745, 0.31513906, -0.08974028; -3.5645814, -1.0600866, 0.42122954; -4.0564995, -2.2207525, 0.42608154; -4.3409886, -3.195317, 0.47334242; -3.6279082, -2.3959007, 1.0000287\",\n  \"0.0, 0.0, 0.0; 1.3432307, -1.922082, 0.9852565; 2.2113478, -9.130648, 1.5770415; 2.7553506, -16.221283, -1.2228771; 3.1783116, -17.66363, 0.9039885; 3.2725284, -17.289673, 2.1128383; -1.605814, -1.6870047, 0.94287264; -1.575062, -8.812043, 2.0985231; -0.99127924, -15.952431, -0.87471986; -1.8898175, -17.224371, 1.2328076; -2.349071, -17.31631, 2.4223676; -0.16910541, 2.4900646, 0.17261547; -0.5044242, 4.942518, 0.6345203; -0.8755473, 7.409021, 1.1553125; -1.0206926, 8.980314, 1.3736544; -0.88239497, 10.535831, 1.0934477; -1.1834903, 12.087927, 0.685748; 2.9527073, 9.221916, 0.9312722; 4.3721256, 4.53322, 0.15367281; 4.6902905, 1.2048328, 0.3284247; 4.8493166, -0.45937908, 0.4157278; 5.3720293, -1.240007, 1.1010748; 5.769153, -1.9475995, 1.5707655; 4.959024, -1.7235007, 0.8602959; -4.999371, 7.578688, 0.88877267; -5.5611916, 3.0840282, -1.0716448; -4.2134213, 0.33731222, -0.07175088; -3.539537, -1.0360441, 0.42819503; -4.0261574, -2.1989512, 0.42743203; -4.3061323, -3.1750479, 0.46977928; -3.5958748, -2.3752873, 0.9997473\",\n  \"0.0, 0.0, 0.0; 1.3477592, -1.9199044, 0.9833166; 2.2288125, -9.128323, 1.5575173; 2.7619836, -16.20887, -1.2698808; 3.198477, -17.664904, 0.8448906; 3.297801, -17.285313, 2.0515735; -1.6018366, -1.6918156, 0.9410163; -1.5445721, -8.821011, 2.069709; -0.9850472, -15.957087, -0.91851234; -1.872611, -17.227777, 1.1944125; -2.324824, -17.321177, 2.3865533; -0.18119629, 2.4901364, 0.15875143; -0.51841575, 4.9451113, 0.60563266; -0.8746323, 7.4152527, 1.1195418; -1.0222168, 8.984633, 1.3496864; -0.8862381, 10.541353, 1.0750831; -1.1865654, 12.09553, 0.6748099; 2.9490962, 9.222264, 0.793774; 4.315316, 4.586965, -0.32458508; 4.734325, 1.2651658, -0.3274485; 4.94375, -0.39575303, -0.3289247; 5.583749, -1.1989609, 0.21657309; 6.064733, -1.9203516, 0.5732993; 5.149721, -1.6802115, 0.010820627; -5.003428, 7.5880356, 0.94940495; -5.571624, 3.1033173, -1.0318329; -4.197257, 0.36178803, -0.05415541; -3.510075, -1.0089755, 0.43468207; -3.991353, -2.174096, 0.43039984; -4.2668195, -3.151601, 0.46971795; -3.5599203, -2.3503253, 1.0018828\",\n  \"0.0, 0.0, 0.0; 1.3515034, -1.9184648, 0.98098457; 2.243576, -9.126483, 1.5430604; 2.766892, -16.197239, -1.3105627; 3.2149847, -17.666988, 0.79226124; 3.3178735, -17.277874, 1.9956079; -1.5985354, -1.6961721, 0.9387846; -1.5167878, -8.829096, 2.042121; -0.98095274, -15.962208, -0.9574964; -1.8585116, -17.231411, 1.160495; -2.3042665, -17.326384, 2.3549414; -0.19522564, 2.489867, 0.14582095; -0.5370439, 4.9468293, 0.5780468; -0.8799427, 7.4203253, 1.0848294; -1.0304903, 8.987485, 1.3278334; -0.89626926, 10.545361, 1.0589797; -1.1947627, 12.101854, 0.66641486; 2.933323, 9.225279, 0.64498496; 4.2697473, 4.6620817, -0.7672776; 4.790903, 1.359247, -0.93933964; 5.0514555, -0.29217565, -1.0255232; 5.791345, -1.0969709, -0.62906706; 6.3422585, -1.8168492, -0.38974822; 5.343759, -1.5830832, -0.7893088; -5.011848, 7.591806, 1.0239255; -5.5893393, 3.1168222, -0.9765427; -4.1863155, 0.38087702, -0.024256945; -3.4848042, -0.98709416, 0.4518841; -3.9601026, -2.1546571, 0.4455141; -4.230499, -3.133652, 0.4829116; -3.5270247, -2.329995, 1.0160238\",\n  \"0.0, 0.0, 0.0; 1.3559217, -1.9160728, 0.979561; 2.255644, -9.123594, 1.53578; 2.769134, -16.185093, -1.3424428; 3.226606, -17.66941, 0.74809265; 3.3326778, -17.27391, 1.9490783; -1.5946244, -1.7006013, 0.9374223; -1.4900999, -8.837003, 2.0160766; -0.9811239, -15.968395, -0.9922955; -1.8508383, -17.234648, 1.1306922; -2.2910783, -17.333954, 2.3268304; -0.20962404, 2.4891713, 0.13747558; -0.5595975, 4.9473057, 0.55630183; -0.89624363, 7.424151, 1.0507687; -1.0469573, 8.98926, 1.3065519; -0.9135645, 10.548253, 1.0438327; -1.2109342, 12.107004, 0.659459; 2.8965857, 9.237156, 0.48528355; 4.241315, 4.760636, -1.1747642; 4.870066, 1.4890282, -1.5082026; 5.1845055, -0.1467272, -1.6753689; 6.0065904, -0.9311735, -1.4281253; 6.614547, -1.6339709, -1.3037531; 5.5580726, -1.4307249, -1.5358078; -5.0287533, 7.581989, 1.1073604; -5.621763, 3.1175847, -0.9121158; -4.1890383, 0.38776398, 0.013140559; -3.4726768, -0.9771445, 0.47576883; -3.9411063, -2.14748, 0.46939567; -4.205745, -3.1280465, 0.5067984; -3.507026, -2.3202624, 1.0399262\",\n  \"0.0, 0.0, 0.0; 1.3607873, -1.9135131, 0.9778159; 2.270186, -9.119993, 1.5317816; 2.7743766, -16.1712, -1.3731941; 3.2385776, -17.669863, 0.70559084; 3.346908, -17.269516, 1.9047676; -1.5902987, -1.7055641, 0.93575233; -1.4602398, -8.845705, 1.9865212; -0.9802982, -15.975877, -1.029506; -1.8421943, -17.240498, 1.0976393; -2.2769504, -17.34479, 2.295358; -0.2221622, 2.4885206, 0.12931992; -0.58118707, 4.9479456, 0.5326232; -0.9163132, 7.4282775, 1.0103624; -1.0681877, 8.991045, 1.2794254; -0.9350315, 10.55117, 1.0233953; -1.2302042, 12.112491, 0.6478578; 2.8461168, 9.255468, 0.30480665; 4.2099934, 4.871372, -1.5721126; 4.9555006, 1.6440601, -2.060581; 5.3283205, 0.030522108, -2.3055565; 6.217381, -0.7119443, -2.202481; 6.8723974, -1.3825545, -2.1870096; 5.784039, -1.2333449, -2.254159; -5.045794, 7.5642643, 1.1965052; -5.657936, 3.1113682, -0.8425745; -4.1934843, 0.38869834, 0.05362308; -3.4612596, -0.97263503, 0.50172174; -3.92415, -2.1451766, 0.49614576; -4.1841583, -3.1269548, 0.53423876; -3.4893653, -2.315475, 1.066885\",\n  \"0.0, 0.0, 0.0; 1.3659377, -1.9108727, 0.9757963; 2.2863414, -9.115713, 1.5329173; 2.784, -16.155956, -1.399643; 3.2515318, -17.668577, 0.668257; 3.3606417, -17.264889, 1.8662425; -1.5857012, -1.7108957, 0.9338197; -1.4272563, -8.855048, 1.9529507; -0.97822666, -15.984605, -1.0692868; -1.8347614, -17.244879, 1.0625985; -2.264986, -17.353853, 2.261536; -0.23353112, 2.4878507, 0.121973045; -0.6035231, 4.9483285, 0.508596; -0.9429585, 7.431882, 0.96612954; -1.0936636, 8.99261, 1.247414; -0.9591955, 10.553732, 0.9982316; -1.2516938, 12.117779, 0.6320634; 2.7789931, 9.279081, 0.113342404; 4.17984, 4.993635, -1.9544748; 5.052856, 1.8249156, -2.5924296; 5.4893475, 0.24074042, -2.9123924; 6.4308963, -0.44111717, -2.9418113; 7.1243067, -1.0666553, -3.0248055; 6.02973, -0.99009156, -2.9391537; -5.0649977, 7.538154, 1.287453; -5.701053, 3.0961642, -0.76802886; -4.203108, 0.38149357, 0.09651899; -3.4541364, -0.97584033, 0.52879167; -3.9111366, -2.1506982, 0.52531004; -4.1662307, -3.1336932, 0.56520087; -3.4757092, -2.3177147, 1.0965278\",\n  \"0.0, 0.0, 0.0; 1.3712283, -1.907902, 0.9741877; 2.303944, -9.110678, 1.5374959; 2.7964058, -16.139284, -1.4237139; 3.263226, -17.66728, 0.6330128; 3.3714714, -17.26115, 1.8302516; -1.5809559, -1.7161189, 0.93228024; -1.3934574, -8.864587, 1.9155886; -0.97408736, -15.993795, -1.111727; -1.8271184, -17.250143, 1.0238764; -2.2538037, -17.362917, 2.2237267; -0.244915, 2.4871604, 0.11342187; -0.6271332, 4.948457, 0.48254496; -0.97344315, 7.434718, 0.91976756; -1.1219687, 8.993595, 1.2122544; -0.9856315, 10.555596, 0.96968377; -1.2753365, 12.122362, 0.61304265; 2.7008028, 9.30272, -0.081634104; 4.1567845, 5.1152263, -2.3061113; 5.169521, 2.021714, -3.0899954; 5.675732, 0.47517312, -3.4830272; 6.657174, -0.13070518, -3.631325; 7.3821216, -0.7001991, -3.8020055; 6.3037796, -0.70949376, -3.582033; -5.083118, 7.5096054, 1.3788055; -5.7419734, 3.0789237, -0.6938294; -4.210325, 0.37230825, 0.13623339; -3.4445014, -0.9809979, 0.5512644; -3.8967404, -2.157702, 0.5506943; -4.1478415, -3.1416242, 0.5929922; -3.4605145, -2.3215883, 1.12221\",\n  \"0.0, 0.0, 0.0; 1.3756436, -1.9053692, 0.9729189; 2.3224187, -9.105508, 1.5463938; 2.8116589, -16.122166, -1.4435452; 3.2757783, -17.664553, 0.6030258; 3.3828793, -17.260408, 1.8010386; -1.5769782, -1.7204323, 0.9310657; -1.359577, -8.873154, 1.8765581; -0.9705473, -16.002487, -1.1545076; -1.8210807, -17.25265, 0.98571706; -2.2447066, -17.370861, 2.1861281; -0.2610814, 2.485862, 0.10555287; -0.6578244, 4.9473677, 0.45755792; -1.0073515, 7.436746, 0.87399226; -1.1519809, 8.9940815, 1.1764737; -1.0133755, 10.556786, 0.9397886; -1.2999887, 12.126223, 0.5925185; 2.6148734, 9.317284, -0.28159434; 4.1591144, 5.2428303, -2.651707; 5.3178363, 2.2383993, -3.568595; 5.896888, 0.7364129, -4.028213; 6.906546, 0.2179159, -4.2813144; 7.656579, -0.28713363, -4.5290627; 6.613114, -0.38924542, -4.1943245; -5.098674, 7.48848, 1.477446; -5.7840223, 3.0676866, -0.60767496; -4.2137756, 0.37087297, 0.18114817; -3.4286542, -0.97753286, 0.5755583; -3.8768258, -2.1557894, 0.5780358; -4.1244006, -3.1405094, 0.62250215; -3.4383323, -2.3173409, 1.1484804\",\n  \"0.0, 0.0, 0.0; 1.381666, -1.9016604, 0.9716406; 2.340845, -9.099195, 1.557074; 2.8290694, -16.103886, -1.4609627; 3.2870605, -17.661299, 0.5755857; 3.391286, -17.258448, 1.7742877; -1.571528, -1.7260717, 0.9298427; -1.3262223, -8.882818, 1.8372791; -0.9646407, -16.012184, -1.1971095; -1.8154835, -17.256353, 0.94648147; -2.2376986, -17.381533, 2.1466832; -0.2784808, 2.4843793, 0.09550815; -0.6900634, 4.9459524, 0.42954382; -1.042551, 7.4380474, 0.82679164; -1.18176, 8.993923, 1.1391656; -1.0403825, 10.557292, 0.90858936; -1.3238336, 12.129422, 0.571038; 2.522508, 9.328117, -0.48099577; 4.187398, 5.3823023, -2.9833884; 5.497539, 2.4790003, -4.0150347; 6.152136, 1.0275816, -4.5321407; 7.1789503, 0.60398567, -4.876419; 7.9476237, 0.16935307, -5.1914425; 6.9536443, -0.027199447, -4.7617116; -5.1100516, 7.469769, 1.5752467; -5.8333817, 3.0552564, -0.5103525; -4.218172, 0.37135553, 0.23025101; -3.4105682, -0.97059333, 0.6005528; -3.855374, -2.150116, 0.6057389; -4.0998564, -3.135543, 0.65162116; -3.4126244, -2.3105505, 1.1732032\",\n  \"0.0, 0.0, 0.0; 1.3867747, -1.8984532, 0.9706338; 2.363217, -9.092381, 1.571642; 2.848844, -16.0874, -1.4691588; 3.2986069, -17.661715, 0.55619705; 3.400083, -17.263723, 1.756757; -1.5668802, -1.7308093, 0.928879; -1.2930472, -8.891174, 1.7988391; -0.9570317, -16.020163, -1.2393746; -1.8101954, -17.257738, 0.90710974; -2.2319443, -17.387386, 2.1070008; -0.29609004, 2.4827425, 0.08446554; -0.72370076, 4.9441004, 0.39940774; -1.0806011, 7.4386997, 0.7764822; -1.2133601, 8.993044, 1.0991184; -1.0686861, 10.556931, 0.87416524; -1.3488151, 12.131506, 0.54535174; 2.4217052, 9.336304, -0.68134654; 4.2304306, 5.5537076, -3.3315854; 5.7111416, 2.758221, -4.428251; 6.450842, 1.3606889, -4.978033; 7.48361, 1.0359004, -5.4025455; 8.26376, 0.67514294, -5.7770114; 7.3316145, 0.3870313, -5.2677045; -5.1192145, 7.4517217, 1.668215; -5.8941927, 3.037756, -0.39991522; -4.22928, 0.37034965, 0.28836423; -3.3968258, -0.9633527, 0.6325031; -3.8376145, -2.1443732, 0.6394586; -4.0782137, -3.1307635, 0.685175; -3.3870451, -2.3052034, 1.2006221\",\n  \"0.0, 0.0, 0.0; 1.392297, -1.8946675, 0.97012526; 2.3891802, -9.084545, 1.585861; 2.8706965, -16.071093, -1.4750049; 3.3107362, -17.663383, 0.538399; 3.4100347, -17.275747, 1.7425237; -1.5618336, -1.7356251, 0.9283921; -1.2610221, -8.899344, 1.7610294; -0.94849765, -16.027435, -1.2817923; -1.8056064, -17.257082, 0.86767423; -2.2277198, -17.390612, 2.0670114; -0.31230703, 2.4811397, 0.072278425; -0.75529385, 4.942327, 0.36662793; -1.1178119, 7.439334, 0.7217744; -1.242641, 8.9919, 1.0559285; -1.0950618, 10.556382, 0.8370836; -1.3731532, 12.133068, 0.51676184; 2.31748, 9.341285, -0.88249165; 4.286043, 5.730209, -3.6552472; 5.9589157, 3.0656354, -4.8004417; 6.7945437, 1.73348, -5.37455; 7.822814, 1.5117917, -5.8703566; 8.607744, 1.2288756, -6.297963; 7.748956, 0.85242504, -5.7217126; -5.123131, 7.4361005, 1.752872; -5.9585676, 3.0193849, -0.28563547; -4.2421746, 0.37089062, 0.34697437; -3.3839788, -0.95335484, 0.6632782; -3.82026, -2.1360397, 0.6715185; -4.0562925, -3.123605, 0.71564555; -3.357532, -2.2988758, 1.2221082\",\n  \"0.0, 0.0, 0.0; 1.3975695, -1.8908801, 0.9699336; 2.4156203, -9.076311, 1.602704; 2.896382, -16.05593, -1.4740477; 3.322664, -17.665985, 0.5281565; 3.4182498, -17.29169, 1.7367945; -1.5569947, -1.740065, 0.9282094; -1.2325511, -8.906997, 1.7234864; -0.9377874, -16.034454, -1.3225865; -1.8015106, -17.256388, 0.8286307; -2.2257895, -17.395992, 2.0265112; -0.3272958, 2.4795759, 0.058267802; -0.7860811, 4.940267, 0.331832; -1.157092, 7.438758, 0.6672207; -1.2734402, 8.989631, 1.0121268; -1.1225508, 10.554575, 0.79891825; -1.39873, 12.133156, 0.48637405; 2.2090511, 9.34633, -1.071332; 4.3472347, 5.923003, -3.9544365; 6.224001, 3.4092321, -5.124322; 7.1614237, 2.152363, -5.710864; 8.174158, 2.0354824, -6.270344; 8.956529, 1.8324606, -6.7454047; 8.182369, 1.3744875, -6.111185; -5.1268215, 7.41799, 1.827638; -6.021651, 2.996389, -0.17475355; -4.2545004, 0.3686881, 0.40238428; -3.3709273, -0.9451616, 0.69095224; -3.801523, -2.1299214, 0.7000966; -4.031818, -3.1189632, 0.7413801; -3.322846, -2.2957416, 1.2359645\",\n  \"0.0, 0.0, 0.0; 1.4026579, -1.8872384, 0.9696811; 2.4404974, -9.067959, 1.6234305; 2.9259224, -16.042137, -1.4649017; 3.3338552, -17.669228, 0.5273304; 3.4228456, -17.306208, 1.7399044; -1.5523014, -1.7443819, 0.9279672; -1.20353, -8.914522, 1.6830133; -0.92387754, -16.041016, -1.3667418; -1.7984204, -17.25171, 0.7864572; -2.2269948, -17.39858, 1.9819372; -0.33997238, 2.4781811, 0.0430183; -0.813528, 4.938464, 0.2941685; -1.1949493, 7.4381514, 0.60829014; -1.3020296, 8.987376, 0.9634516; -1.1478531, 10.552792, 0.7561363; -1.4230624, 12.132867, 0.45035735; 2.1063209, 9.348844, -1.2472923; 4.425433, 6.134012, -4.22888; 6.5107393, 3.789713, -5.3975058; 7.552254, 2.6174297, -5.983604; 8.539188, 2.6073382, -6.5985584; 9.312286, 2.4867947, -7.1150784; 8.632552, 1.9546692, -6.4323635; -5.130625, 7.4020605, 1.87908; -6.0755615, 2.974206, -0.08612919; -4.2639694, 0.36606908, 0.43967992; -3.3581736, -0.93799734, 0.70258385; -3.782302, -2.1250782, 0.71292394; -4.0061293, -3.1157398, 0.7508; -3.2848666, -2.2942898, 1.2303298\",\n  \"0.0, 0.0, 0.0; 1.407076, -1.8837379, 0.970086; 2.4648123, -9.059254, 1.6486235; 2.9618177, -16.028963, -1.4479446; 3.346851, -17.671604, 0.5360652; 3.4263318, -17.31915, 1.7524116; -1.5482084, -1.7478104, 0.92835426; -1.1722417, -8.921063, 1.6394997; -0.9035803, -16.046097, -1.4146514; -1.7948048, -17.24449, 0.7385905; -2.2306573, -17.397991, 1.9306011; -0.34947458, 2.4771047, 0.025183091; -0.8366202, 4.9370737, 0.2522618; -1.2311844, 7.4372935, 0.5451966; -1.330977, 8.984609, 0.91065943; -1.1728976, 10.550413, 0.70930785; -1.446071, 12.131822, 0.40863857; 2.012169, 9.351337, -1.4065745; 4.5168886, 6.3620157, -4.471476; 6.8101015, 4.2125053, -5.6250386; 7.955403, 3.1374154, -6.2038116; 8.908233, 3.2337394, -6.863467; 9.666957, 3.1966221, -7.4129786; 9.088393, 2.6013837, -6.690309; -5.137042, 7.3856373, 1.9043727; -6.131194, 2.949072, -0.016407251; -4.276858, 0.36101484, 0.4570037; -3.349691, -0.933012, 0.6937094; -3.765891, -2.1228614, 0.70742726; -3.9821153, -3.1152844, 0.74330556; -3.2486746, -2.2940512, 1.20438\",\n  \"0.0, 0.0, 0.0; 1.4115436, -1.8801277, 0.97059965; 2.4883065, -9.049799, 1.6802814; 2.9998987, -16.016901, -1.4197793; 3.3565307, -17.672474, 0.55878377; 3.4236548, -17.32891, 1.778414; -1.5440552, -1.7512194, 0.92884636; -1.141919, -8.927238, 1.5964355; -0.8808458, -16.051638, -1.4598515; -1.7933393, -17.234993, 0.6927984; -2.2387156, -17.392956, 1.8806986; -0.3573743, 2.4760923, 0.007962522; -0.8565783, 4.93567, 0.2119165; -1.2643365, 7.436079, 0.48445982; -1.3587879, 8.981789, 0.8580458; -1.1970689, 10.547985, 0.66272; -1.4680678, 12.130664, 0.36680418; 1.9308916, 9.351654, -1.5436935; 4.6314764, 6.6169305, -4.679202; 7.126126, 4.6829166, -5.795554; 8.371979, 3.715322, -6.356022; 9.283259, 3.915667, -7.0500956; 10.022642, 3.9617474, -7.6247206; 9.548014, 3.3156404, -6.8706846; -5.1457705, 7.371504, 1.9113622; -6.191786, 2.9225254, 0.047684193; -4.2941895, 0.35593128, 0.46294424; -3.345392, -0.927364, 0.6705743; -3.75235, -2.120308, 0.69113314; -3.9600177, -3.1145344, 0.72762376; -3.2150345, -2.291428, 1.1663091\",\n  \"0.0, 0.0, 0.0; 1.4160289, -1.876336, 0.9714035; 2.5075388, -9.039997, 1.7182691; 3.037008, -16.006342, -1.3804886; 3.3613818, -17.673378, 0.593997; 3.4143941, -17.340954, 1.817403; -1.5398695, -1.7544941, 0.929615; -1.1134893, -8.932778, 1.5565696; -0.8588998, -16.057318, -1.4999375; -1.7954607, -17.222713, 0.6521733; -2.2519636, -17.38847, 1.834776; -0.3637152, 2.47517, -0.00773292; -0.8747239, 4.9339333, 0.17578027; -1.2982777, 7.4335694, 0.430755; -1.3887557, 8.977862, 0.81112057; -1.2233698, 10.544344, 0.6212317; -1.4922187, 12.128052, 0.32888085; 1.8569196, 9.354668, -1.6540531; 4.7639704, 6.908244, -4.842681; 7.4429636, 5.2039347, -5.9048724; 8.78084, 4.3508935, -6.43865; 9.647072, 4.6496363, -7.154683; 10.36457, 4.7762666, -7.7447386; 9.989264, 4.09241, -6.9683485; -5.1612267, 7.352661, 1.9061632; -6.261637, 2.8898125, 0.1081295; -4.3234296, 0.3446095, 0.46311337; -3.3543272, -0.92799044, 0.64060575; -3.7505631, -2.1242723, 0.6731509; -3.9486575, -3.1202555, 0.7146231; -3.1942134, -2.2922206, 1.1270808\",\n  \"0.0, 0.0, 0.0; 1.4197476, -1.8723016, 0.97375673; 2.5252154, -9.029359, 1.7622476; 3.072722, -15.996684, -1.3311677; 3.3624592, -17.672945, 0.6408919; 3.399749, -17.347168, 1.8666642; -1.5363871, -1.756351, 0.93186826; -1.0874369, -8.936399, 1.5217767; -0.8367603, -16.060963, -1.5349977; -1.7994977, -17.206478, 0.6162362; -2.2680454, -17.376616, 1.793494; -0.369599, 2.4741993, -0.023438392; -0.8916931, 4.931938, 0.14166518; -1.3304249, 7.430397, 0.3820973; -1.418498, 8.973637, 0.7672698; -1.2496548, 10.540414, 0.58294386; -1.5163018, 12.125147, 0.29415557; 1.7972332, 9.357985, -1.7379203; 4.913362, 7.2101088, -4.9441104; 7.755604, 5.753415, -5.948915; 9.175064, 5.023883, -6.454312; 9.9943905, 5.413128, -7.181981; 10.687852, 5.615709, -7.779539; 10.403245, 4.9055123, -6.9883904; -5.1824813, 7.3338585, 1.8847926; -6.3347573, 2.856946, 0.15552616; -4.3623724, 0.33073306, 0.45329553; -3.376182, -0.93237245, 0.6021805; -3.761183, -2.131697, 0.65265656; -3.949508, -3.129091, 0.7044507; -3.1879878, -2.2934327, 1.0874798\",\n  \"0.0, 0.0, 0.0; 1.4239007, -1.8673294, 0.97723407; 2.5416455, -9.017827, 1.8068638; 3.1091194, -15.987057, -1.278651; 3.3627958, -17.670918, 0.69190216; 3.3837507, -17.354532, 1.9205192; -1.5324825, -1.7579926, 0.93519527; -1.0678867, -8.939586, 1.4933283; -0.8129984, -16.063185, -1.5653424; -1.8038838, -17.19139, 0.58225536; -2.2859385, -17.366858, 1.7532609; -0.3772461, 2.4728448, -0.039219875; -0.90959156, 4.929436, 0.10940835; -1.3597325, 7.426926, 0.33855325; -1.4450368, 8.969624, 0.72651124; -1.2726921, 10.536581, 0.5470232; -1.537195, 12.122231, 0.26131245; 1.751206, 9.358844, -1.8020239; 5.069721, 7.511162, -4.992135; 8.051543, 6.320821, -5.941741; 9.54088, 5.724213, -6.4197035; 10.313695, 6.1963186, -7.149212; 10.982164, 6.4700627, -7.7468886; 10.776864, 5.740739, -6.948619; -5.2061276, 7.3193073, 1.8549361; -6.3999734, 2.8280091, 0.1924622; -4.403258, 0.31546712, 0.4394033; -3.4049015, -0.9408026, 0.56287265; -3.7793887, -2.1422267, 0.6369825; -3.958713, -3.140382, 0.70385706; -3.1903636, -2.2962008, 1.0530646\",\n  \"0.0, 0.0, 0.0; 1.4273487, -1.8623444, 0.9817065; 2.5575874, -9.00653, 1.8479807; 3.1452007, -15.977534, -1.2297461; 3.3614414, -17.667805, 0.7397834; 3.3652499, -17.360117, 1.9707798; -1.5292313, -1.7585418, 0.9394754; -1.0526911, -8.941428, 1.4702325; -0.78819394, -16.063377, -1.5914693; -1.8070904, -17.173971, 0.55219746; -2.302647, -17.352348, 1.7171115; -0.38548413, 2.471233, -0.056778032; -0.92728543, 4.926639, 0.076468885; -1.3860041, 7.4231925, 0.29870605; -1.4694189, 8.965641, 0.68806446; -1.2931923, 10.532608, 0.5124706; -1.554519, 12.119197, 0.2290588; 1.71536, 9.359707, -1.8515887; 5.225705, 7.8175178, -4.998399; 8.320988, 6.908039, -5.8939457; 9.867235, 6.451688, -6.344918; 10.594643, 6.998318, -7.0690603; 11.23717, 7.3372774, -7.6617393; 11.099778, 6.5923405, -6.863311; -5.230083, 7.3064775, 1.8202798; -6.4549665, 2.8011904, 0.21937597; -4.444719, 0.29589033, 0.4269739; -3.439596, -0.9567579, 0.53077376; -3.8031602, -2.1595194, 0.63245183; -3.9733133, -3.1578374, 0.71820116; -3.200664, -2.3038735, 1.0323788\",\n  \"0.0, 0.0, 0.0; 1.4316024, -1.8565601, 0.9864575; 2.574132, -8.994971, 1.8836489; 3.1853385, -15.967576, -1.185847; 3.3619707, -17.66338, 0.7828764; 3.3472393, -17.365747, 2.0162606; -1.5252073, -1.759601, 0.9440225; -1.0379521, -8.943579, 1.4496799; -0.75990593, -16.061895, -1.6192579; -1.8069843, -17.155003, 0.51981187; -2.3163266, -17.338118, 1.6780254; -0.3894634, 2.4700649, -0.07689446; -0.9378917, 4.9248466, 0.03970769; -1.4071159, 7.4199486, 0.2562377; -1.4890211, 8.96253, 0.6453898; -1.3089716, 10.52957, 0.47438452; -1.5675786, 12.117162, 0.19411322; 1.6924024, 9.364946, -1.8890553; 5.3774014, 8.1422, -4.975956; 8.558853, 7.515587, -5.810012; 10.148408, 7.200567, -6.2302384; 10.831755, 7.814479, -6.9433007; 11.447691, 8.213139, -7.5269933; 11.368872, 7.453748, -6.73427; -5.2548428, 7.2906637, 1.7675412; -6.498883, 2.7720742, 0.21978092; -4.4852905, 0.26733756, 0.39995247; -3.4784956, -0.9850292, 0.49003845; -3.832251, -2.1876762, 0.62289053; -3.9942808, -3.1852088, 0.7306803; -3.2175996, -2.3220289, 1.0075121\",\n  \"0.0, 0.0, 0.0; 1.4344423, -1.8516153, 0.99161214; 2.588202, -8.984845, 1.9152579; 3.226837, -15.959362, -1.1442952; 3.3622777, -17.660374, 0.8231988; 3.3278105, -17.374767, 2.0590303; -1.5225123, -1.7592816, 0.94895524; -1.0221968, -8.943869, 1.4327229; -0.7305982, -16.057457, -1.6459032; -1.8065104, -17.13188, 0.48831904; -2.3296263, -17.315962, 1.640223; -0.390087, 2.4692068, -0.09830613; -0.943, 4.92373, 0.0013256744; -1.4229784, 7.417184, 0.213225; -1.5064428, 8.959875, 0.6016109; -1.3225803, 10.526979, 0.43531263; -1.5772215, 12.115713, 0.1578914; 1.681926, 9.37243, -1.9148959; 5.5143623, 8.497972, -4.939965; 8.756461, 8.141026, -5.695815; 10.3765545, 7.9607806, -6.0770254; 11.016773, 8.63642, -6.77412; 11.605387, 9.090373, -7.3454905; 11.578416, 8.315993, -6.5638866; -5.2791667, 7.274349, 1.7015676; -6.5397944, 2.7436337, 0.20347428; -4.5294886, 0.23502374, 0.3655426; -3.5243363, -1.0192792, 0.4465764; -3.8688068, -2.2208521, 0.6100243; -4.023261, -3.2170215, 0.7393859; -3.2427106, -2.3462048, 0.97890264\",\n  \"0.0, 0.0, 0.0; 1.4373344, -1.8471425, 0.99575794; 2.6010838, -8.975645, 1.943061; 3.2670681, -15.953442, -1.1031526; 3.362547, -17.658323, 0.8633362; 3.3086233, -17.383888, 2.1010017; -1.5197603, -1.7595168, 0.9529222; -1.0094353, -8.944454, 1.420772; -0.70221055, -16.053623, -1.6665312; -1.8055639, -17.11054, 0.4624151; -2.342073, -17.298174, 1.6075664; -0.38700902, 2.4687684, -0.11925038; -0.94261366, 4.9232755, -0.035451606; -1.4359604, 7.414315, 0.17412592; -1.5250862, 8.957228, 0.560367; -1.3378233, 10.52445, 0.39905804; -1.5874863, 12.114605, 0.12527716; 1.6805211, 9.385729, -1.9219153; 5.625909, 8.885072, -4.8861256; 8.906155, 8.780734, -5.5487194; 10.545522, 8.726759, -5.883496; 11.14074, 9.460723, -6.561228; 11.699542, 9.967385, -7.1180387; 11.722404, 9.177648, -6.3518224; -5.305718, 7.252516, 1.6248323; -6.581031, 2.7107944, 0.17321503; -4.5775566, 0.1961534, 0.3261565; -3.5758202, -1.0611653, 0.40262613; -3.9121442, -2.2607338, 0.5951731; -4.06007, -3.255029, 0.7449684; -3.275569, -2.3785696, 0.9482564\",\n  \"0.0, 0.0, 0.0; 1.4407096, -1.8420897, 1.0002303; 2.6106625, -8.967165, 1.9655037; 3.2984154, -15.948786, -1.0670815; 3.359072, -17.655405, 0.8992827; 3.2877088, -17.381315, 2.1361418; -1.5165428, -1.7599697, 0.95720273; -1.0013416, -8.945042, 1.4175885; -0.68191254, -16.051771, -1.6740904; -1.8081526, -17.095234, 0.4495015; -2.355834, -17.285051, 1.58899; -0.3829331, 2.4685218, -0.13629855; -0.9406811, 4.9229107, -0.064083956; -1.4483634, 7.4110727, 0.14543808; -1.545843, 8.954118, 0.529122; -1.3555408, 10.521474, 0.37274003; -1.5993681, 12.113337, 0.10366917; 1.6800722, 9.402029, -1.9140023; 5.694416, 9.280426, -4.824937; 8.990105, 9.419211, -5.398614; 10.637386, 9.486801, -5.6891403; 11.18308, 10.276849, -6.345153; 11.707879, 10.834816, -6.885766; 11.782096, 10.031021, -6.1376343; -5.3321657, 7.2273865, 1.5554352; -6.624773, 2.6760488, 0.14996779; -4.6298914, 0.15419745, 0.29637182; -3.6324525, -1.1067272, 0.3695725; -3.961032, -2.3037295, 0.58951205; -4.1028805, -3.2958837, 0.75819147; -3.3142183, -2.415566, 0.92552817\",\n  \"0.0, 0.0, 0.0; 1.4435016, -1.8380754, 1.0035843; 2.6182497, -8.960258, 1.984268; 3.3278065, -15.946277, -1.0331254; 3.3557072, -17.653675, 0.9333013; 3.2677722, -17.380182, 2.1692252; -1.513872, -1.7605206, 0.960412; -0.9986111, -8.9457445, 1.4183549; -0.66439444, -16.050179, -1.6770333; -1.8115401, -17.081802, 0.44114578; -2.3696158, -17.274496, 1.5750947; -0.37825033, 2.4683495, -0.15163057; -0.9376792, 4.922639, -0.08977987; -1.4593601, 7.407857, 0.120294794; -1.560482, 8.950973, 0.5027512; -1.3665849, 10.518354, 0.35111952; -1.6062763, 12.111413, 0.08543089; 1.682791, 9.418701, -1.8985441; 5.7225666, 9.673418, -4.765358; 9.01371, 10.048552, -5.2527795; 10.658911, 10.234339, -5.500385; 11.150034, 11.078349, -6.131855; 11.636573, 11.686636, -6.6536508; 11.7638445, 10.872624, -5.923936; -5.357953, 7.202419, 1.485769; -6.662064, 2.640933, 0.124521494; -4.6781588, 0.11051369, 0.27222806; -3.6862078, -1.1546949, 0.34608072; -4.008879, -2.348822, 0.5891769; -4.146222, -3.3387856, 0.7737107; -3.3536484, -2.4566066, 0.90985906\",\n  \"0.0, 0.0, 0.0; 1.4463546, -1.8341326, 1.0066849; 2.6243663, -8.954065, 1.9997101; 3.3557203, -15.944888, -1.0013092; 3.3503196, -17.652382, 0.96522486; 3.2451673, -17.372568, 2.198386; -1.5111344, -1.761251, 0.96337926; -0.99898094, -8.946606, 1.4227432; -0.64510727, -16.048399, -1.6765181; -1.8128916, -17.070122, 0.43517196; -2.3815272, -17.267302, 1.5630875; -0.37141934, 2.4684525, -0.16614689; -0.9307542, 4.922986, -0.1138784; -1.4664488, 7.405135, 0.097206384; -1.5687525, 8.948059, 0.48012015; -1.370493, 10.515337, 0.3331275; -1.6064843, 12.109146, 0.06863159; 1.6931283, 9.436663, -1.8731451; 5.7316456, 10.055225, -4.6858034; 8.998741, 10.6685095, -5.0856733; 10.632122, 10.973425, -5.2896495; 11.064422, 11.868101, -5.8937855; 11.50908, 12.524849, -6.39375; 11.689483, 11.705944, -5.680907; -5.3818893, 7.177724, 1.409976; -6.691222, 2.6053853, 0.090803385; -4.7180157, 0.06722069, 0.24858764; -3.7314143, -1.2018607, 0.32747978; -4.049624, -2.3932486, 0.5891859; -4.183617, -3.38117, 0.7866714; -3.3884192, -2.4979267, 0.8984324\",\n  \"0.0, 0.0, 0.0; 1.4477797, -1.8324317, 1.0077332; 2.6272302, -8.951122, 2.0079293; 3.3785303, -15.946512, -0.9774797; 3.3500805, -17.653122, 0.98962307; 3.232033, -17.362593, 2.2191334; -1.5097651, -1.761876, 0.9643825; -1.0045626, -8.947104, 1.4333224; -0.6325748, -16.04901, -1.6635609; -1.8177369, -17.065939, 0.44074893; -2.3953283, -17.264175, 1.5639186; -0.36657944, 2.4685142, -0.17570148; -0.92698014, 4.9229245, -0.12939145; -1.4747493, 7.402258, 0.08379257; -1.5762428, 8.945135, 0.46711287; -1.3733556, 10.512159, 0.32377517; -1.6058817, 12.106623, 0.06015584; 1.7001212, 9.452689, -1.8418882; 5.7098293, 10.422354, -4.5960274; 8.932571, 11.273906, -4.9102173; 10.543983, 11.698007, -5.0714655; 10.912819, 12.637871, -5.6484623; 11.311563, 13.339466, -6.125717; 11.544765, 12.523197, -5.425276; -5.404597, 7.155301, 1.3491237; -6.716964, 2.5715284, 0.07336247; -4.751951, 0.027794123, 0.2432457; -3.7694454, -1.2440711, 0.328187; -4.084537, -2.433007, 0.6044141; -4.2162223, -3.4191308, 0.8121697; -3.4192097, -2.5353818, 0.9054827\",\n  \"0.0, 0.0, 0.0; 1.449267, -1.8310624, 1.0080842; 2.6274586, -8.949694, 2.0101848; 3.3961196, -15.949717, -0.9599061; 3.3593848, -17.655458, 1.0078119; 3.2353637, -17.363405, 2.236373; -1.5083333, -1.7629178, 0.9647188; -1.0126096, -8.947845, 1.4481565; -0.6223541, -16.051586, -1.6422633; -1.8213513, -17.067728, 0.45457613; -2.4064012, -17.267576, 1.5735921; -0.3599731, 2.4691885, -0.17983778; -0.9204227, 4.92362, -0.135296; -1.4810848, 7.399852, 0.080408975; -1.5807091, 8.942881, 0.46360958; -1.3731666, 10.509579, 0.32340717; -1.6027223, 12.10464, 0.06080365; 1.7074134, 9.470533, -1.8005676; 5.6658096, 10.777899, -4.488537; 8.823522, 11.867695, -4.7146482; 10.402634, 12.410984, -4.8319325; 10.706377, 13.3888445, -5.3831477; 11.057242, 14.12991, -5.8378105; 11.339797, 13.32281, -5.1449556; -5.4243793, 7.1318855, 1.2987578; -6.7389016, 2.538424, 0.060618877; -4.781714, -0.010172129, 0.24715483; -3.803122, -1.2844691, 0.34042186; -4.1164074, -2.4712286, 0.6278349; -4.246742, -3.4557242, 0.8439945; -3.4490716, -2.5713716, 0.92518383\",\n  \"0.0, 0.0, 0.0; 1.4507647, -1.8302075, 1.0074828; 2.6226983, -8.950215, 2.0071359; 3.4152882, -15.953936, -0.947911; 3.3795328, -17.659594, 1.0198972; 3.2525964, -17.370785, 2.2489274; -1.5068915, -1.7644655, 0.9641431; -1.0213711, -8.948808, 1.4662828; -0.61040676, -16.055716, -1.614152; -1.82366, -17.076365, 0.4722724; -2.416659, -17.277605, 1.5868459; -0.35318166, 2.4700265, -0.18178624; -0.9121406, 4.9248013, -0.137414; -1.4829214, 7.3984575, 0.08127941; -1.581368, 8.941602, 0.46431732; -1.3692747, 10.507909, 0.32657653; -1.5953944, 12.103444, 0.06386918; 1.7225716, 9.486249, -1.7512758; 5.62051, 11.107539, -4.355268; 8.688215, 12.442427, -4.486348; 10.222562, 13.108333, -4.5560846; 10.461903, 14.116147, -5.0846066; 10.76468, 14.890424, -5.5179944; 11.090553, 14.098966, -4.8261147; -5.4403057, 7.113826, 1.2491164; -6.7501626, 2.5110087, 0.04114628; -4.7995105, -0.04075551, 0.25132883; -3.8241863, -1.3166366, 0.35642025; -4.1375914, -2.501501, 0.65142095; -4.268018, -3.4845731, 0.8739114; -3.470339, -2.59974, 0.9495941\",\n  \"0.0, 0.0, 0.0; 1.4515461, -1.8297514, 1.0071858; 2.6159334, -8.952058, 1.9992566; 3.4343405, -15.959348, -0.9402497; 3.4069445, -17.662361, 1.029982; 3.2796128, -17.370022, 2.2581363; -1.5061377, -1.7652642, 0.96385854; -1.0287402, -8.948734, 1.4858651; -0.5990571, -16.058722, -1.584894; -1.8235544, -17.081083, 0.49410963; -2.422854, -17.28298, 1.605189; -0.3440769, 2.4713812, -0.1808332; -0.90038216, 4.9267225, -0.13447979; -1.482202, 7.3975863, 0.08667129; -1.5788636, 8.941314, 0.46780893; -1.3618929, 10.507147, 0.33228597; -1.5845722, 12.103191, 0.06973413; 1.7408547, 9.503353, -1.6937685; 5.5685315, 11.423086, -4.1971264; 8.5210495, 13.001664, -4.2227345; 9.998052, 13.789504, -4.239649; 10.174919, 14.819283, -4.7501235; 10.430231, 15.620221, -5.165235; 10.79318, 14.849207, -4.4687433; -5.4540367, 7.0952897, 1.1997292; -6.755374, 2.4840636, 0.0148380995; -4.8116236, -0.070430756, 0.25382012; -3.8397512, -1.3476776, 0.3733108; -4.1549873, -2.530991, 0.67255646; -4.286776, -3.51286, 0.899512; -3.4898999, -2.6273832, 0.9761171\",\n  \"0.0, 0.0, 0.0; 1.4521563, -1.83002, 1.005817; 2.6091557, -8.95545, 1.9840047; 3.4569135, -15.965258, -0.941144; 3.4426434, -17.66609, 1.0311096; 3.3166695, -17.375463, 2.2598104; -1.5055485, -1.7664809, 0.9625487; -1.0347862, -8.948702, 1.5072658; -0.5870812, -16.061798, -1.5537062; -1.8224316, -17.085674, 0.5181191; -2.4278507, -17.28888, 1.6256366; -0.33388174, 2.4729877, -0.17795809; -0.88589746, 4.929238, -0.12859769; -1.4770627, 7.3976793, 0.09480709; -1.572716, 8.942087, 0.47343427; -1.3511983, 10.507426, 0.3395729; -1.5703143, 12.10388, 0.07651365; 1.7655928, 9.51906, -1.6306624; 5.511199, 11.726433, -4.0183854; 8.32407, 13.539949, -3.9243824; 9.731509, 14.445366, -3.8813834; 9.848247, 15.489758, -4.3793073; 10.057047, 16.311216, -4.780072; 10.451151, 15.564609, -4.0739884; -5.463519, 7.080766, 1.1500249; -6.7516136, 2.4610877, -0.016262412; -4.814521, -0.09520841, 0.25528768; -3.8459764, -1.3733557, 0.3910625; -4.1644616, -2.5554714, 0.69159925; -4.298705, -3.5364044, 0.9211489; -3.5029578, -2.6504133, 1.0033382\",\n  \"0.0, 0.0, 0.0; 1.4522634, -1.8308253, 1.0041953; 2.603547, -8.9600525, 1.961232; 3.4834058, -15.970348, -0.95324874; 3.4836094, -17.66869, 1.0212026; 3.3597875, -17.387362, 2.252284; -1.5054449, -1.7674141, 0.9609968; -1.038769, -8.947903, 1.5314727; -0.5757017, -16.064547, -1.5189495; -1.8211781, -17.092064, 0.544996; -2.4323502, -17.296112, 1.6491936; -0.32244024, 2.4749036, -0.17233278; -0.8689163, 4.932301, -0.11861454; -1.4686213, 7.398616, 0.1055235; -1.5641698, 8.943801, 0.48099288; -1.3386734, 10.508678, 0.3483867; -1.5544716, 12.105412, 0.08428118; 1.7954626, 9.533502, -1.5619107; 5.446101, 12.020126, -3.8186388; 8.09646, 14.053547, -3.5934286; 9.422912, 15.069037, -3.48472; 9.481282, 16.121502, -3.9758637; 9.644121, 16.957977, -4.366754; 10.064798, 16.239185, -3.6472647; -5.4700127, 7.069327, 1.0985935; -6.7439237, 2.441461, -0.050691485; -4.8125315, -0.11552715, 0.25304493; -3.8468368, -1.3940198, 0.40491375; -4.169857, -2.5753522, 0.7036854; -4.307645, -3.5557885, 0.9332565; -3.5120487, -2.6704063, 1.0231127\",\n  \"0.0, 0.0, 0.0; 1.452227, -1.8316213, 1.0027958; 2.5986404, -8.964891, 1.9352384; 3.507385, -15.975944, -0.96854067; 3.5251608, -17.669485, 1.0099487; 3.404795, -17.388483, 2.2414474; -1.5054795, -1.768112, 0.95965797; -1.0399485, -8.946507, 1.5567892; -0.5635097, -16.06562, -1.4857991; -1.8179512, -17.09263, 0.57296324; -2.4341247, -17.299103, 1.6739262; -0.3097872, 2.4769878, -0.16546068; -0.8494447, 4.9357605, -0.10604286; -1.4570274, 7.40003, 0.119364575; -1.5527723, 8.946138, 0.49096364; -1.3229585, 10.51046, 0.35920593; -1.5347906, 12.107464, 0.09352979; 1.830317, 9.5479, -1.4844862; 5.373088, 12.306124, -3.592628; 7.8422737, 14.537876, -3.22886; 9.078403, 15.652677, -3.0507731; 9.078954, 16.708294, -3.538607; 9.195458, 17.555765, -3.9223046; 9.639066, 16.867044, -3.1873405; -5.4736247, 7.059585, 1.0449988; -6.729299, 2.4235196, -0.09123516; -4.804413, -0.13423944, 0.24551752; -3.8419702, -1.4131168, 0.4138943; -4.1710052, -2.5938144, 0.7085831; -4.313558, -3.5739632, 0.93646574; -3.5175908, -2.690015, 1.0365704\",\n  \"0.0, 0.0, 0.0; 1.4524634, -1.8327057, 1.0004696; 2.5943196, -8.970121, 1.9064031; 3.5257504, -15.98296, -0.9858527; 3.5559323, -17.669416, 0.99852896; 3.4372816, -17.38106, 2.2284927; -1.5052538, -1.7695106, 0.95743126; -1.0392886, -8.945403, 1.5835998; -0.55147827, -16.067106, -1.4511168; -1.8136728, -17.095127, 0.6023953; -2.43407, -17.300045, 1.7012744; -0.29640785, 2.4791687, -0.1571005; -0.82779205, 4.9395947, -0.0918451; -1.4416122, 7.402335, 0.13337862; -1.5381838, 8.949513, 0.500282; -1.304793, 10.513351, 0.36908388; -1.5131195, 12.110519, 0.10162938; 1.869535, 9.559897, -1.4072537; 5.2906895, 12.581276, -3.3489695; 7.56449, 14.986148, -2.8426604; 8.70318, 16.187675, -2.5932121; 8.645282, 17.241896, -3.080629; 8.714191, 18.096594, -3.4597678; 9.1793375, 17.439678, -2.7091708; -5.4726024, 7.054201, 0.99109346; -6.7104573, 2.4102688, -0.13249785; -4.7924237, -0.14848185, 0.23446435; -3.8334088, -1.4278562, 0.41794524; -4.1695795, -2.6079612, 0.70689857; -4.3178835, -3.5880342, 0.931413; -3.5200248, -2.7070007, 1.0416421\",\n  \"0.0, 0.0, 0.0; 1.4518452, -1.8344866, 0.99809974; 2.5882618, -8.976199, 1.8765924; 3.539127, -15.991751, -1.0027299; 3.584583, -17.668442, 0.9896203; 3.469171, -17.370087, 2.2175057; -1.5058484, -1.7702298, 0.95516396; -1.0374292, -8.943346, 1.6106179; -0.5402173, -16.067421, -1.4169981; -1.807587, -17.094215, 0.63393855; -2.4309218, -17.300373, 1.7309216; -0.28232256, 2.4814124, -0.14730845; -0.8050946, 4.9434824, -0.07489092; -1.4249835, 7.4046793, 0.15058532; -1.5234139, 8.95289, 0.5126064; -1.2859869, 10.51616, 0.38187128; -1.4895933, 12.113634, 0.11261439; 1.9092326, 9.571816, -1.3255036; 5.1901846, 12.845508, -3.0923042; 7.2618423, 15.3947525, -2.4446063; 8.299696, 16.668657, -2.1243875; 8.180435, 17.717915, -2.6113632; 8.198711, 18.577, -2.9863856; 8.686278, 17.952648, -2.2223434; -5.469347, 7.0492263, 0.93959; -6.6915445, 2.3988004, -0.1742413; -4.7800627, -0.16065145, 0.22093421; -3.824324, -1.4403764, 0.4185218; -4.167794, -2.6202507, 0.699728; -4.3220353, -3.6006117, 0.9189206; -3.5215302, -2.7233527, 1.0395721\",\n  \"0.0, 0.0, 0.0; 1.4511586, -1.8363012, 0.99575895; 2.583704, -8.982085, 1.8456769; 3.5522883, -16.00164, -1.0179367; 3.6119587, -17.667887, 0.98278356; 3.4997272, -17.361351, 2.2089477; -1.5065111, -1.7708735, 0.95292306; -1.0351405, -8.940958, 1.6387365; -0.52950925, -16.067402, -1.3818974; -1.802957, -17.09227, 0.6662357; -2.4294567, -17.296316, 1.7618097; -0.26753095, 2.483631, -0.13718209; -0.7809315, 4.9474525, -0.057641692; -1.4065281, 7.4072447, 0.16739425; -1.5083253, 8.956368, 0.52454656; -1.2673059, 10.519061, 0.3934886; -1.466017, 12.1165905, 0.120924234; 1.9519087, 9.58293, -1.2395926; 5.074302, 13.095961, -2.8246965; 6.943042, 15.759241, -2.0343318; 7.8796473, 17.09038, -1.6427299; 7.6966124, 18.131594, -2.1271677; 7.6616306, 18.992506, -2.4967747; 8.172358, 18.40021, -1.7224114; -5.46406, 7.045746, 0.8825886; -6.667538, 2.388523, -0.22319579; -4.763865, -0.17225552, 0.20007935; -3.812028, -1.452642, 0.41171667; -4.1640716, -2.6320825, 0.6839987; -4.3253517, -3.612771, 0.89655995; -3.520469, -2.7409477, 1.0270855\",\n  \"0.0, 0.0, 0.0; 1.4505769, -1.8382318, 0.99304044; 2.5795116, -8.988332, 1.810859; 3.562589, -16.012335, -1.0368683; 3.6368358, -17.666607, 0.97327924; 3.528299, -17.350529, 2.1973515; -1.5070728, -1.7717931, 0.9503221; -1.0329084, -8.938719, 1.6665554; -0.51768154, -16.067326, -1.3473492; -1.7967863, -17.09466, 0.6960182; -2.426458, -17.296556, 1.7901715; -0.25292304, 2.4857614, -0.1258347; -0.75676715, 4.951291, -0.03849619; -1.3874408, 7.4098554, 0.18578774; -1.4917988, 8.959992, 0.5377656; -1.2476734, 10.522159, 0.40618074; -1.4424096, 12.119605, 0.13028327; 1.9939173, 9.592824, -1.1533828; 4.942122, 13.329019, -2.550603; 6.612259, 16.077652, -1.6202352; 7.449727, 17.451708, -1.1585784; 7.200805, 18.482052, -1.6368451; 7.1103907, 19.342123, -1.99893; 7.647408, 18.78019, -1.2197385; -5.4566436, 7.0436254, 0.8286059; -6.6422443, 2.3808756, -0.27319193; -4.746412, -0.18111968, 0.1770522; -3.7984974, -1.462116, 0.4021746; -4.1591835, -2.641073, 0.6650783; -4.327565, -3.622044, 0.87071717; -3.518533, -2.7557206, 1.0117825\",\n  \"0.0, 0.0, 0.0; 1.4497364, -1.8401983, 0.9906229; 2.5765061, -8.994429, 1.7746091; 3.5747352, -16.023645, -1.0549228; 3.658981, -17.665241, 0.9651973; 3.551595, -17.334074, 2.1853757; -1.5078821, -1.7723442, 0.94800836; -1.0311966, -8.935987, 1.6947511; -0.50771165, -16.066734, -1.3126599; -1.7908401, -17.092451, 0.7289969; -2.4227858, -17.294703, 1.8217723; -0.23833293, 2.4876902, -0.11579429; -0.732517, 4.954895, -0.020891584; -1.3678331, 7.4122057, 0.20402727; -1.4751977, 8.963254, 0.55105174; -1.2282029, 10.524887, 0.41850376; -1.418971, 12.122129, 0.13867936; 2.0355918, 9.602369, -1.0656956; 4.8026686, 13.542058, -2.2596083; 6.2782917, 16.350994, -1.1908026; 7.0186195, 17.755455, -0.65984505; 6.7036686, 18.77296, -1.1265328; 6.5571885, 19.630177, -1.4768597; 7.12041, 19.095583, -0.69693106; -5.4474883, 7.04189, 0.77414393; -6.6164727, 2.3747635, -0.32688105; -4.7297063, -0.18919969, 0.14948642; -3.7863233, -1.4711791, 0.38766927; -4.155855, -2.6493487, 0.6416677; -4.3315144, -3.630392, 0.8407686; -3.518228, -2.76978, 0.9919677\",\n  \"0.0, 0.0, 0.0; 1.4484022, -1.8423296, 0.9886107; 2.5737936, -9.000534, 1.7375121; 3.583374, -16.03639, -1.0714142; 3.6725032, -17.664314, 0.9595318; 3.5630212, -17.301767, 2.1705694; -1.5091671, -1.7722794, 0.94608265; -1.0339522, -8.93282, 1.7229116; -0.49882668, -16.06535, -1.2782173; -1.7857575, -17.093987, 0.75957346; -2.4200416, -17.293756, 1.8514503; -0.2242293, 2.4894798, -0.10500958; -0.70969594, 4.9580936, -0.0021024495; -1.3504581, 7.413988, 0.22283967; -1.4604084, 8.96614, 0.5640739; -1.21068, 10.527269, 0.4307102; -1.3978882, 12.124315, 0.14738217; 2.0728893, 9.611874, -0.9781211; 4.660802, 13.729145, -1.9548879; 5.9419436, 16.578007, -0.74965644; 6.5850825, 18.002684, -0.15033782; 6.2070694, 19.005735, -0.60122657; 6.006583, 19.858038, -0.93647224; 6.5946794, 19.34712, -0.15903974; -5.439092, 7.03867, 0.72079855; -6.591695, 2.3678951, -0.38202482; -4.7155266, -0.19881487, 0.12068051; -3.7774425, -1.4821672, 0.37203392; -4.155583, -2.6593428, 0.6178395; -4.338299, -3.6402104, 0.8113788; -3.5219789, -2.7845168, 0.9737336\",\n  \"0.0, 0.0, 0.0; 1.4470494, -1.8447452, 0.9860843; 2.570449, -9.006612, 1.7022464; 3.5911708, -16.051125, -1.0808413; 3.685953, -17.667543, 0.9590173; 3.575743, -17.285658, 2.1640303; -1.5104679, -1.77246, 0.94366527; -1.038074, -8.929689, 1.7520913; -0.49194044, -16.065027, -1.2403678; -1.7827098, -17.09718, 0.79321325; -2.4195716, -17.2983, 1.8833404; -0.2114822, 2.4910548, -0.09346838; -0.68866736, 4.960893, 0.018405564; -1.33357, 7.4155955, 0.24452105; -1.4461993, 8.968561, 0.58114535; -1.1944333, 10.52924, 0.44633883; -1.3787838, 12.12579, 0.15837798; 2.109012, 9.619665, -0.8881841; 4.532133, 13.883844, -1.6288191; 5.611842, 16.75676, -0.29072046; 6.154249, 18.193684, 0.37528062; 5.7189894, 19.18255, -0.054836154; 5.468692, 20.029322, -0.3700066; 6.074918, 19.535522, 0.4045569; -5.429905, 7.037427, 0.672048; -6.565813, 2.3640265, -0.43695748; -4.7020283, -0.20618796, 0.09315944; -3.7701366, -1.4912933, 0.35821822; -4.156745, -2.6672058, 0.5967892; -4.3463864, -3.6476035, 0.78599834; -3.5283334, -2.7959695, 0.96051925\",\n  \"0.0, 0.0, 0.0; 1.4457682, -1.8471339, 0.98348814; 2.567261, -9.012195, 1.6700826; 3.59836, -16.067375, -1.0819833; 3.689352, -17.671772, 0.9675174; 3.5748086, -17.270275, 2.1657324; -1.5116981, -1.7727323, 0.9411808; -1.0452163, -8.926581, 1.7823007; -0.48579943, -16.065887, -1.198216; -1.7808831, -17.103834, 0.8296647; -2.4206061, -17.301483, 1.9187509; -0.19850148, 2.492556, -0.08109077; -0.6681645, 4.9633574, 0.040890858; -1.319247, 7.4162254, 0.26918983; -1.4348462, 8.969931, 0.60136616; -1.1814736, 10.530242, 0.46533018; -1.3635952, 12.126243, 0.17294177; 2.140212, 9.629446, -0.7919947; 4.408388, 14.0142, -1.2742752; 5.275157, 16.894289, 0.19668567; 5.7110324, 18.33498, 0.92944413; 5.2279186, 19.311192, 0.5221076; 4.9349174, 20.152515, 0.22999826; 5.5488896, 19.66758, 1.0040599; -5.421974, 7.032148, 0.6239623; -6.5439224, 2.3579288, -0.49575007; -4.6928253, -0.21565604, 0.06176412; -3.7672791, -1.5024475, 0.34052196; -4.16189, -2.6769605, 0.5728016; -4.358081, -3.6567163, 0.75862783; -3.5391605, -2.8084812, 0.94521713\",\n  \"0.0, 0.0, 0.0; 1.4436343, -1.8499001, 0.98142165; 2.5650144, -9.017381, 1.6424645; 3.6069276, -16.085405, -1.0723194; 3.693544, -17.678177, 0.9864172; 3.5748417, -17.261646, 2.1790829; -1.5137439, -1.7720352, 0.9392029; -1.0559251, -8.922424, 1.8138318; -0.47931403, -16.066496, -1.1519527; -1.7790868, -17.11149, 0.869297; -2.422145, -17.306353, 1.9569205; -0.1857196, 2.4939542, -0.0671939; -0.6477828, 4.965601, 0.066162996; -1.3039901, 7.4169216, 0.29640022; -1.4200705, 8.971899, 0.6224015; -1.1655381, 10.531888, 0.48484308; -1.3471258, 12.127212, 0.18845242; 2.172063, 9.637324, -0.6931354; 4.2962418, 14.115174, -0.8931609; 4.9352484, 16.985565, 0.70760745; 5.2571483, 18.421537, 1.5056527; 4.737845, 19.388626, 1.1217629; 4.410912, 20.225912, 0.85517114; 5.0182533, 19.73851, 1.6329064; -5.412016, 7.0291605, 0.578395; -6.521933, 2.3551197, -0.5539808; -4.684639, -0.22191834, 0.03248769; -3.7659922, -1.5104355, 0.32572109; -4.168084, -2.6834502, 0.55268145; -4.3703957, -3.662352, 0.7364334; -3.552454, -2.816199, 0.9362968\",\n  \"0.0, 0.0, 0.0; 1.4415002, -1.8523358, 0.9799635; 2.563168, -9.021652, 1.6202803; 3.619958, -16.10368, -1.0519247; 3.7015774, -17.68546, 1.0154719; 3.5787675, -17.262733, 2.2055387; -1.5157862, -1.7710282, 0.9378076; -1.0696989, -8.918008, 1.8457351; -0.47304904, -16.067543, -1.1028733; -1.7767411, -17.123478, 0.9101503; -2.423103, -17.314669, 1.996466; -0.17148353, 2.495305, -0.05348496; -0.6260281, 4.9676414, 0.09233837; -1.289933, 7.4165115, 0.3265561; -1.406789, 8.972873, 0.64559937; -1.150954, 10.532515, 0.5065239; -1.3319001, 12.127202, 0.20634234; 2.1999614, 9.648077, -0.5861684; 4.18581, 14.19201, -0.47498086; 4.5833373, 17.034708, 1.2486687; 4.7843843, 18.456915, 2.1085641; 4.24168, 19.419655, 1.7467457; 3.890393, 20.25501, 1.5063667; 4.4752297, 19.752508, 2.291704; -5.401766, 7.0212464, 0.5323388; -6.5022697, 2.3487878, -0.61564547; -4.678224, -0.23103595, -7.581711E-4; -3.7662015, -1.5209458, 0.30668506; -4.1748505, -2.6924992, 0.52944326; -4.38255, -3.6704464, 0.7122647; -3.5670033, -2.8251934, 0.9252903\",\n  \"0.0, 0.0, 0.0; 1.4379148, -1.8560182, 0.97826177; 2.562089, -9.026577, 1.6000082; 3.6350229, -16.12344, -1.0260048; 3.7099133, -17.693117, 1.0508494; 3.5828683, -17.270468, 2.2404985; -1.5192096, -1.7689552, 0.9361787; -1.0863196, -8.912369, 1.8779267; -0.46665782, -16.067604, -1.0520452; -1.7742589, -17.13665, 0.9514996; -2.4241989, -17.323246, 2.0364785; -0.15982732, 2.4963188, -0.040766507; -0.6074105, 4.969136, 0.1178703; -1.2750602, 7.41636, 0.35855672; -1.3919927, 8.974215, 0.6701971; -1.1354966, 10.533602, 0.5295; -1.3165576, 12.127623, 0.2258665; 2.2311366, 9.653736, -0.47393617; 4.083245, 14.232164, -0.014619321; 4.2259283, 17.027779, 1.822256; 4.2994246, 18.426472, 2.7391896; 3.7451103, 19.38982, 2.3971305; 3.3779168, 20.22538, 2.1826286; 3.923906, 19.695238, 2.9777026; -5.390007, 7.0207644, 0.48688355; -6.481131, 2.3506045, -0.67926526; -4.6722507, -0.23308754, -0.036453605; -3.7678103, -1.5249314, 0.28495136; -4.18223, -2.6952133, 0.50369596; -4.3947115, -3.6722846, 0.685704; -3.5822, -2.8274124, 0.9114582\",\n  \"0.0, 0.0, 0.0; 1.4335862, -1.8597848, 0.9774606; 2.5621133, -9.030871, 1.5850714; 3.6527362, -16.143177, -0.99140584; 3.7197258, -17.701262, 1.0944277; 3.5884438, -17.285559, 2.286063; -1.523326, -1.7658182, 0.93541235; -1.1048198, -8.905665, 1.9101319; -0.46059746, -16.066528, -1.00073; -1.7717855, -17.147182, 0.9942254; -2.4252691, -17.330914, 2.0775638; -0.14856671, 2.4971828, -0.028635906; -0.58975655, 4.9702106, 0.14401731; -1.2612308, 7.415465, 0.3939058; -1.3763782, 8.974859, 0.6984284; -1.1194562, 10.534021, 0.5560191; -1.3018662, 12.127213, 0.24886268; 2.2601724, 9.6588, -0.35408273; 3.9767635, 14.235214, 0.49032667; 3.8563282, 16.964436, 2.425985; 3.7981093, 18.32991, 3.392733; 3.2416477, 19.298677, 3.0700097; 2.86482, 20.136335, 2.8820336; 3.3573296, 19.566185, 3.684317; -5.377925, 7.020261, 0.4428769; -6.4587827, 2.3524656, -0.7421465; -4.665908, -0.23529196, -0.071452856; -3.7694714, -1.5291691, 0.263894; -4.1891966, -2.6983712, 0.4782533; -4.406116, -3.6747172, 0.6589132; -3.5964966, -2.8303602, 0.89666575\",\n  \"0.0, 0.0, 0.0; 1.4306525, -1.8626128, 0.97637385; 2.5630078, -9.0341425, 1.5715127; 3.670148, -16.161613, -0.9555392; 3.728369, -17.707623, 1.1395228; 3.5927866, -17.299688, 2.3333595; -1.5261075, -1.7639658, 0.9343722; -1.1227639, -8.899887, 1.9436256; -0.45367295, -16.066574, -0.9472259; -1.768357, -17.160778, 1.0380185; -2.4254236, -17.337397, 2.1203718; -0.13824913, 2.497887, -0.016222676; -0.57253, 4.97112, 0.17043136; -1.2462642, 7.4148264, 0.42922068; -1.3621325, 8.975138, 0.728736; -1.1059406, 10.534339, 0.5854488; -1.2897636, 12.126705, 0.27487478; 2.2899935, 9.660885, -0.23592502; 3.8603964, 14.194625, 1.0219796; 3.4762144, 16.837826, 3.0408447; 3.2859507, 18.160234, 4.049579; 2.7342331, 19.137985, 3.746397; 2.3518107, 19.978691, 3.5852454; 2.7792978, 19.35878, 4.3879046; -5.363515, 7.0234423, 0.4006738; -6.4351816, 2.359066, -0.8059631; -4.6575575, -0.2319398, -0.10777897; -3.7687457, -1.5274409, 0.2413122; -4.192935, -2.695891, 0.45093152; -4.4136286, -3.671726, 0.62977266; -3.607139, -2.8276863, 0.87901235\",\n  \"0.0, 0.0, 0.0; 1.4270253, -1.865483, 0.97620225; 2.565468, -9.036929, 1.5606372; 3.686295, -16.17949, -0.9173057; 3.7332747, -17.714314, 1.1862454; 3.592254, -17.309578, 2.3805404; -1.5295389, -1.7610788, 0.9342078; -1.1421378, -8.893059, 1.9770064; -0.44741422, -16.06493, -0.8948827; -1.765346, -17.17118, 1.0815126; -2.4259863, -17.343956, 2.16231; -0.12665369, 2.4985514, -0.003743579; -0.5541612, 4.9718475, 0.19717391; -1.2320266, 7.4134817, 0.464593; -1.3501898, 8.974158, 0.7612921; -1.0949538, 10.533448, 0.61726177; -1.2798882, 12.124841, 0.30238646; 2.3163464, 9.663883, -0.1159749; 3.7213995, 14.112881, 1.5679294; 3.0841784, 16.650362, 3.6572037; 2.767224, 17.919842, 4.701461; 2.2235098, 18.908962, 4.421593; 1.8370574, 19.752865, 4.289358; 2.1953907, 19.076294, 5.080019; -5.348138, 7.023882, 0.35692042; -6.4186172, 2.363534, -0.8662227; -4.6542516, -0.2294538, -0.14224309; -3.7720687, -1.5259455, 0.21974629; -4.199996, -2.6940155, 0.4238135; -4.423868, -3.669666, 0.59968585; -3.6197217, -2.8264725, 0.85915077\",\n  \"0.0, 0.0, 0.0; 1.4232479, -1.8683898, 0.9761574; 2.5673785, -9.0396, 1.5523131; 3.701922, -16.197174, -0.8755591; 3.7379293, -17.720966, 1.2362123; 3.5911963, -17.316364, 2.4298644; -1.5330983, -1.7580035, 0.9341652; -1.1634412, -8.885727, 2.0119185; -0.4407655, -16.062435, -0.8409226; -1.761589, -17.181978, 1.1260346; -2.4257996, -17.34822, 2.2056675; -0.11638415, 2.4990377, 0.0088931825; -0.53752446, 4.9722033, 0.22433458; -1.2181687, 7.4120836, 0.5005585; -1.3384149, 8.973408, 0.7929809; -1.0840099, 10.532757, 0.64812946; -1.2697613, 12.123298, 0.32945558; 2.3421962, 9.66393, 0.005274117; 3.5634148, 13.987196, 2.107958; 2.6944296, 16.401423, 4.2588415; 2.2614317, 17.609203, 5.3341503; 1.7239003, 18.609304, 5.082822; 1.3315656, 19.454823, 4.9819474; 1.625345, 18.719639, 5.7464705; -5.3319154, 7.027543, 0.31355637; -6.3996134, 2.3718076, -0.9294229; -4.6475663, -0.22255278, -0.18086046; -3.771543, -1.519731, 0.19342002; -4.2029457, -2.6875443, 0.39155388; -4.429781, -3.6631565, 0.5638035; -3.627216, -2.821342, 0.8324797\",\n  \"0.0, 0.0, 0.0; 1.4203532, -1.8704094, 0.9765064; 2.5688272, -9.041513, 1.5453006; 3.7169967, -16.212957, -0.83476436; 3.7416906, -17.726885, 1.2842525; 3.5889037, -17.32132, 2.4768176; -1.5358179, -1.7554505, 0.93449867; -1.1859015, -8.87898, 2.0460474; -0.4347055, -16.060047, -0.78839636; -1.7592232, -17.190706, 1.1696985; -2.4272742, -17.34828, 2.2482612; -0.10564052, 2.4994385, 0.021497047; -0.52026814, 4.9724083, 0.25133598; -1.2048298, 7.4102426, 0.53581905; -1.3274848, 8.972155, 0.8240766; -1.0737796, 10.531495, 0.6779016; -1.2600684, 12.121028, 0.35454673; 2.3651576, 9.664074, 0.12624586; 3.3853264, 13.826835, 2.6230373; 2.3108778, 16.099314, 4.834671; 1.7750176, 17.23616, 5.940541; 1.2393633, 18.24564, 5.725289; 0.8384034, 19.090586, 5.6597066; 1.0795417, 18.297876, 6.3841095; -5.314558, 7.029846, 0.26900956; -6.382036, 2.3789625, -0.9921876; -4.6417556, -0.21641612, -0.22007805; -3.7716157, -1.5141038, 0.16597524; -4.2062645, -2.681757, 0.35785866; -4.4358664, -3.6574578, 0.52589023; -3.6340694, -2.8175662, 0.80275166\",\n  \"0.0, 0.0, 0.0; 1.419595, -1.870305, 0.97780794; 2.5706358, -9.041515, 1.5400324; 3.7318125, -16.226353, -0.7928605; 3.744526, -17.732334, 1.3319163; 3.5852268, -17.324818, 2.522963; -1.536529, -1.7541642, 0.93574494; -1.2078724, -8.873333, 2.0812; -0.42820382, -16.058369, -0.7354448; -1.7565459, -17.201958, 1.2125251; -2.4287326, -17.351597, 2.2896476; -0.09508384, 2.499735, 0.033129845; -0.5018162, 4.9726787, 0.2769394; -1.1887344, 7.4088783, 0.56962764; -1.313, 8.971288, 0.8544756; -1.0605514, 10.530685, 0.70674396; -1.2483319, 12.118969, 0.37815475; 2.3907351, 9.661516, 0.24507266; 3.2032816, 13.634065, 3.1019788; 1.9515953, 15.747966, 5.37676; 1.3270018, 16.80547, 6.514337; 0.7848001, 17.819727, 6.3422675; 0.36987287, 18.660044, 6.3156633; 0.5762277, 17.814594, 6.989405; -5.2932854, 7.0360765, 0.22403905; -6.36038, 2.3896394, -1.0537626; -4.6294336, -0.20499873, -0.25852722; -3.7639616, -1.502316, 0.1390906; -4.202076, -2.669746, 0.32433435; -4.4346433, -3.6454992, 0.4879228; -3.633805, -2.807645, 0.77359295\",\n  \"0.0, 0.0, 0.0; 1.4181166, -1.8707342, 0.979131; 2.5733693, -9.041684, 1.5360135; 3.7475004, -16.238918, -0.7517463; 3.7496476, -17.738081, 1.3778838; 3.5843995, -17.32955, 2.567772; -1.5379146, -1.752273, 0.9370109; -1.2292209, -8.86701, 2.1150904; -0.42094457, -16.055424, -0.684824; -1.7528039, -17.209265, 1.2546803; -2.4288568, -17.351755, 2.3303514; -0.085229255, 2.4999292, 0.043627605; -0.48472327, 4.9727283, 0.3005185; -1.173595, 7.4073734, 0.6014333; -1.2988662, 8.97026, 0.88320994; -1.047898, 10.529728, 0.73371327; -1.2376761, 12.116654, 0.39975783; 2.4138136, 9.657621, 0.3581258; 3.022019, 13.406049, 3.5491552; 1.6180646, 15.35123, 5.8847733; 0.9171757, 16.324291, 7.0528555; 0.3594615, 17.33728, 6.9299054; -0.074804485, 18.168049, 6.9454136; 0.11556418, 17.276249, 7.5616517; -5.2719507, 7.043186, 0.1811972; -6.3393497, 2.4011059, -1.1120937; -4.6169105, -0.19243813, -0.29511738; -3.7556922, -1.489209, 0.1133697; -4.196242, -2.6568105, 0.29162633; -4.430907, -3.6328757, 0.45028657; -3.6311882, -2.7968314, 0.74427456\",\n  \"0.0, 0.0, 0.0; 1.4172702, -1.870317, 0.9811511; 2.5752852, -9.041111, 1.5342864; 3.7624102, -16.249802, -0.7102891; 3.7542691, -17.742699, 1.4237229; 3.5832727, -17.334757, 2.6130009; -1.538708, -1.7505411, 0.93894386; -1.2534292, -8.860964, 2.1485486; -0.41546345, -16.052036, -0.63576627; -1.7510508, -17.216118, 1.2950355; -2.4310818, -17.349085, 2.3694177; -0.07527039, 2.5000544, 0.053631183; -0.46756884, 4.972687, 0.32291776; -1.1591572, 7.4056797, 0.6308852; -1.2861154, 8.968917, 0.90994775; -1.0364664, 10.5283985, 0.7583981; -1.2277114, 12.113843, 0.4182972; 2.4343348, 9.653565, 0.4691921; 2.8478403, 13.137677, 3.9753668; 1.3124909, 14.91276, 6.3631926; 0.5456544, 15.800645, 7.557401; -0.035380006, 16.805405, 7.4855237; -0.49386895, 17.621141, 7.543524; -0.30467525, 16.690115, 8.099125; -5.249776, 7.0496507, 0.1350705; -6.311879, 2.411169, -1.1753743; -4.6009064, -0.18213844, -0.33391893; -3.7454197, -1.4787902, 0.08680791; -4.189328, -2.6460848, 0.25862342; -4.426908, -3.6220844, 0.41329902; -3.6292303, -2.7875452, 0.7169491\",\n  \"0.0, 0.0, 0.0; 1.417122, -1.8690517, 0.9837732; 2.5798008, -9.0391865, 1.53568; 3.7791853, -16.257782, -0.67021203; 3.761161, -17.746065, 1.4669607; 3.5850444, -17.343689, 2.6573873; -1.5388446, -1.7490723, 0.94145346; -1.2760754, -8.85514, 2.1813707; -0.4082561, -16.048155, -0.5887451; -1.7474663, -17.220123, 1.3347616; -2.4313028, -17.344875, 2.4077127; -0.06561257, 2.500159, 0.060950387; -0.4492817, 4.972934, 0.34114063; -1.1405284, 7.4050093, 0.65702; -1.2700735, 8.968217, 0.9350555; -1.0230539, 10.527949, 0.78179073; -1.2167184, 12.111818, 0.4357706; 2.459965, 9.645866, 0.5714543; 2.684568, 12.813722, 4.381642; 1.0459129, 14.42975, 6.8133464; 0.2270593, 15.237917, 8.029429; -0.38102132, 16.228905, 8.007257; -0.8656471, 17.025425, 8.105736; -0.6685081, 16.062267, 8.600468; -5.2233047, 7.062246, 0.09203905; -6.275479, 2.4264812, -1.2359152; -4.577138, -0.16663885, -0.36868536; -3.7279694, -1.4631982, 0.064928085; -4.174423, -2.6303294, 0.23116958; -4.4142838, -3.606236, 0.38288242; -3.6202486, -2.771944, 0.6965921\",\n  \"0.0, 0.0, 0.0; 1.4177419, -1.8667754, 0.987196; 2.5841765, -9.0362625, 1.539592; 3.7944438, -16.262688, -0.6344936; 3.76823, -17.746449, 1.5057373; 3.5881004, -17.351748, 2.698131; -1.5382645, -1.7478161, 0.9447287; -1.3015159, -8.849712, 2.2134516; -0.402187, -16.043907, -0.54351807; -1.7444259, -17.224995, 1.3722844; -2.432043, -17.343218, 2.4435573; -0.059922636, 2.5000842, 0.069302276; -0.43746564, 4.9724617, 0.3610813; -1.1276394, 7.4038982, 0.68414116; -1.2561703, 8.967555, 0.9601136; -1.0102975, 10.527149, 0.8036298; -1.2060703, 12.10916, 0.450372; 2.4790545, 9.636354, 0.66943765; 2.543131, 12.4491825, 4.7544317; 0.8216665, 13.906997, 7.228551; -0.038990498, 14.635862, 8.465699; -0.6747617, 15.609202, 8.492423; -1.1854026, 16.383364, 8.629986; -0.97625136, 15.393061, 9.062249; -5.20218, 7.075392, 0.054893613; -6.247802, 2.4428105, -1.2892485; -4.560384, -0.1491108, -0.3974613; -3.7166755, -1.4450696, 0.04843217; -4.165473, -2.6119418, 0.21011779; -4.407517, -3.587562, 0.36019588; -3.6189249, -2.7522948, 0.68484944\",\n  \"0.0, 0.0, 0.0; 1.4177984, -1.8647509, 0.99093384; 2.5898776, -9.032959, 1.5479583; 3.8100362, -16.265446, -0.60028017; 3.7774203, -17.74671, 1.5415915; 3.594485, -17.364468, 2.7376115; -1.5382113, -1.7459247, 0.9483059; -1.3302839, -8.843667, 2.2450175; -0.3959285, -16.038597, -0.49835324; -1.7404286, -17.23022, 1.409322; -2.431685, -17.33783, 2.479371; -0.057230987, 2.4999468, 0.07619117; -0.42996472, 4.9717145, 0.3791055; -1.116214, 7.403103, 0.710771; -1.2424173, 8.967374, 0.98433053; -0.9983639, 10.526908, 0.8244325; -1.1974685, 12.107095, 0.46492785; 2.497494, 9.623798, 0.75482476; 2.4078436, 12.040257, 5.0856414; 0.62318563, 13.338217, 7.603622; -0.2694592, 13.986997, 8.862503; -0.92954963, 14.941515, 8.9365635; -1.4634981, 15.692113, 9.111221; -1.2448933, 14.677782, 9.478156; -5.1839314, 7.092284, 0.03046155; -6.2253666, 2.4626083, -1.3268747; -4.5448456, -0.1263833, -0.4138078; -3.704586, -1.4208778, 0.04272455; -4.156388, -2.587171, 0.20016667; -4.4012265, -3.562279, 0.34903696; -3.6183014, -2.7261038, 0.68487656\",\n  \"0.0, 0.0, 0.0; 1.4175686, -1.8630016, 0.9945471; 2.594883, -9.029784, 1.558825; 3.8233452, -16.265984, -0.57211494; 3.7861896, -17.744865, 1.5713274; 3.6011167, -17.37116, 2.7697144; -1.5384253, -1.7438533, 0.9517638; -1.3602082, -8.837424, 2.2754452; -0.39196014, -16.033289, -0.4536829; -1.7358401, -17.232643, 1.4495803; -2.4292183, -17.332418, 2.5190153; -0.05741145, 2.499732, 0.082813144; -0.4271588, 4.9705963, 0.39656672; -1.1081668, 7.402256, 0.7369356; -1.2320567, 8.967029, 1.0086765; -0.98994637, 10.526417, 0.8444598; -1.1924165, 12.104592, 0.4780631; 2.5126119, 9.609885, 0.8299447; 2.2835965, 11.607711, 5.3642063; 0.4462918, 12.730475, 7.928117; -0.47297215, 13.291576, 9.209768; -1.1516471, 14.22801, 9.331427; -1.7044814, 14.955209, 9.5425205; -1.4821336, 13.918858, 9.838889; -5.1701536, 7.1100507, 0.015389144; -6.203572, 2.482657, -1.3557873; -4.531536, -0.10410285, -0.4210738; -3.6955192, -1.3974817, 0.046281785; -4.1498423, -2.563222, 0.20053075; -4.3971543, -3.537711, 0.3493653; -3.6214168, -2.6994548, 0.6965064\",\n  \"0.0, 0.0, 0.0; 1.4189636, -1.8599619, 0.99824005; 2.5994658, -9.0254965, 1.5716377; 3.834919, -16.263058, -0.5506128; 3.7969732, -17.73999, 1.594159; 3.6117792, -17.377024, 2.795823; -1.5371184, -1.7430732, 0.95529795; -1.388985, -8.832583, 2.304203; -0.38896036, -16.029636, -0.41029453; -1.7302309, -17.238102, 1.4890422; -2.4248304, -17.32817, 2.558546; -0.05847596, 2.4994977, 0.08891681; -0.42451087, 4.969554, 0.41320533; -1.0983821, 7.4019327, 0.7625241; -1.221868, 8.96729, 1.031063; -0.9826765, 10.526625, 0.86213547; -1.1886696, 12.102968, 0.48986387; 2.5304208, 9.594185, 0.8971844; 2.1798296, 11.161385, 5.590185; 0.29160523, 12.084626, 8.1963625; -0.6532601, 12.5459585, 9.499019; -1.3431062, 13.466076, 9.671661; -1.9092203, 14.170665, 9.920807; -1.6911765, 13.113908, 10.137644; -5.1556654, 7.1305475, 0.007173896; -6.1805534, 2.5056152, -1.3786292; -4.5169153, -0.07920432, -0.42378044; -3.6850967, -1.3716129, 0.053641707; -4.14211, -2.536726, 0.20465006; -4.392082, -3.5105603, 0.35332644; -3.623328, -2.670458, 0.71136856\",\n  \"0.0, 0.0, 0.0; 1.4188247, -1.8580785, 1.0019382; 2.6016946, -9.022284, 1.5869402; 3.842585, -16.25972, -0.53256595; 3.8062944, -17.734785, 1.6135203; 3.6216328, -17.37614, 2.8165636; -1.5372471, -1.7410153, 0.9588368; -1.416518, -8.826591, 2.3309484; -0.38852477, -16.025799, -0.367337; -1.7247562, -17.241714, 1.5307965; -2.41923, -17.32332, 2.6010609; -0.060131244, 2.499277, 0.0938739; -0.42359525, 4.9683323, 0.42851514; -1.0904434, 7.401109, 0.788378; -1.2161111, 8.966841, 1.0537047; -0.9808639, 10.52619, 0.8794531; -1.1905019, 12.100654, 0.50131; 2.5457478, 9.578472, 0.9601888; 2.075688, 10.688535, 5.7716427; 0.1448772, 11.40348, 8.41186; -0.82136613, 11.760706, 9.731435; -1.5143169, 12.66588, 9.961191; -2.0874548, 13.348491, 10.251983; -1.8819783, 12.274673, 10.378441; -5.1437006, 7.150017, 0.004915893; -6.1579056, 2.5263557, -1.3929374; -4.5027585, -0.056934595, -0.41937733; -3.6751857, -1.3485773, 0.06740448; -4.1347404, -2.5130167, 0.21587253; -4.3873024, -3.4861126, 0.36500454; -3.6259356, -2.6437511, 0.7333745\",\n  \"0.0, 0.0, 0.0; 1.4201947, -1.8551652, 1.0053892; 2.6034126, -9.018314, 1.6024909; 3.848701, -16.254473, -0.5187969; 3.8154209, -17.727365, 1.6288288; 3.6314876, -17.367352, 2.8315744; -1.535964, -1.7403258, 0.96213925; -1.4413021, -8.822592, 2.3532495; -0.3880496, -16.024014, -0.329345; -1.7181802, -17.245543, 1.5694687; -2.4117556, -17.319, 2.6409054; -0.062080313, 2.4990647, 0.09816454; -0.42253742, 4.9672446, 0.44237494; -1.0820452, 7.4004946, 0.8124219; -1.2112511, 8.966866, 1.072216; -0.98039263, 10.526235, 0.8923648; -1.1935176, 12.099039, 0.50929743; 2.56152, 9.562452, 1.0190259; 1.9821262, 10.18944, 5.905177; 0.019147158, 10.68987, 8.570925; -0.96324253, 10.939909, 9.90318; -1.6523576, 11.829497, 10.196544; -2.2268844, 12.489655, 10.532869; -2.0401592, 11.405358, 10.559906; -5.131408, 7.1699696, 0.0029355884; -6.133798, 2.5478435, -1.4084518; -4.4877663, -0.033993006, -0.4157685; -3.6647522, -1.3249103, 0.08057228; -4.126808, -2.4888628, 0.2250418; -4.381931, -3.4614415, 0.37318525; -3.6273599, -2.6176274, 0.7520642\",\n  \"0.0, 0.0, 0.0; 1.4208158, -1.8524951, 1.0094271; 2.6031337, -9.0148535, 1.6176977; 3.852792, -16.248188, -0.51064444; 3.8257265, -17.720114, 1.6377316; 3.643608, -17.356894, 2.8397894; -1.5353808, -1.7386988, 0.96600384; -1.4620364, -8.818212, 2.3723304; -0.38829243, -16.022022, -0.2956841; -1.7104299, -17.24783, 1.6059531; -2.401902, -17.31487, 2.6791685; -0.06569899, 2.4988358, 0.10158132; -0.42351946, 4.966132, 0.45476252; -1.0731188, 7.4004993, 0.83485484; -1.2076128, 8.967444, 1.0884273; -0.98240334, 10.526885, 0.9021463; -1.1996071, 12.097892, 0.5140248; 2.5797634, 9.543561, 1.071614; 1.9359193, 9.702966, 5.987236; -0.06002426, 9.961821, 8.662891; -1.058797, 10.091149, 10.000142; -1.73922, 10.960128, 10.366489; -2.3106608, 11.594023, 10.754609; -2.145173, 10.509005, 10.673094; -5.1194124, 7.194089, 0.0038000941; -6.109734, 2.5731711, -1.4200084; -4.472229, -0.007278919, -0.4097731; -3.6534765, -1.2975018, 0.09534395; -4.1178465, -2.4610362, 0.23570435; -4.375354, -3.4331925, 0.38248926; -3.626835, -2.5883427, 0.77094436\",\n  \"0.0, 0.0, 0.0; 1.4214633, -1.8501993, 1.012721; 2.6018512, -9.012208, 1.6288111; 3.856543, -16.241243, -0.5111418; 3.8388221, -17.712967, 1.6374707; 3.6595364, -17.345139, 2.838553; -1.5347722, -1.7374818, 0.96915555; -1.4782549, -8.814443, 2.3890402; -0.38981378, -16.021141, -0.26518202; -1.701536, -17.250225, 1.6415459; -2.3893907, -17.311459, 2.7174296; -0.06887579, 2.4986267, 0.10456952; -0.42396986, 4.9651313, 0.46593732; -1.0640435, 7.400486, 0.8557386; -1.2052245, 8.967803, 1.1033087; -0.98606694, 10.527362, 0.91089857; -1.2072623, 12.096783, 0.5186396; 2.5975213, 9.525827, 1.1168592; 1.9342039, 9.24021, 6.024172; -0.092262745, 9.2354965, 8.689381; -1.1060655, 9.233086, 10.021564; -1.7745796, 10.073011, 10.46869; -2.3393435, 10.674511, 10.913937; -2.1948204, 9.600934, 10.719405; -5.108067, 7.216484, 0.008526862; -6.0837793, 2.5960336, -1.4268355; -4.454708, 0.01661396, -0.40046334; -3.640173, -1.2730942, 0.11272228; -4.106429, -2.4364505, 0.24821952; -4.3659253, -3.4084213, 0.39271185; -3.622735, -2.5630882, 0.79024005\",\n  \"0.0, 0.0, 0.0; 1.4222252, -1.8476743, 1.016255; 2.5997624, -9.009745, 1.6370595; 3.8576899, -16.233479, -0.51883864; 3.851849, -17.705822, 1.6294141; 3.676566, -17.332859, 2.829503; -1.5340563, -1.736224, 0.97253764; -1.493983, -8.811236, 2.4026556; -0.3930385, -16.020733, -0.23878002; -1.6922016, -17.251429, 1.6754919; -2.3752127, -17.309378, 2.7546387; -0.07349121, 2.4984171, 0.10641829; -0.42661238, 4.9641037, 0.47522587; -1.0563647, 7.4005437, 0.8749299; -1.2049205, 8.968181, 1.1160738; -0.99242246, 10.52792, 0.91775036; -1.2180369, 12.095958, 0.52248776; 2.6143575, 9.507479, 1.1558948; 1.9690804, 8.792092, 6.0216036; -0.07504487, 8.517595, 8.659051; -1.0974112, 8.380297, 9.977546; -1.7534974, 9.178394, 10.511306; -2.3099246, 9.737894, 11.017619; -2.182917, 8.6893635, 10.708186; -5.09892, 7.2394786, 0.016120791; -6.0586414, 2.6190352, -1.4300066; -4.437627, 0.040222883, -0.38944924; -3.627121, -1.2491821, 0.13082856; -4.094692, -2.4126208, 0.2609825; -4.3556933, -3.384605, 0.40264747; -3.6178317, -2.538855, 0.8091155\",\n  \"0.0, 0.0, 0.0; 1.4234686, -1.8446932, 1.0199229; 2.5980806, -9.00717, 1.6415824; 3.860026, -16.22493, -0.53190243; 3.8697014, -17.698574, 1.6154443; 3.6997983, -17.321157, 2.8149145; -1.5328863, -1.735287, 0.9760482; -1.504445, -8.8082485, 2.4165485; -0.39597976, -16.020836, -0.21328449; -1.6806234, -17.253237, 1.7096696; -2.3575776, -17.30704, 2.7928398; -0.08007425, 2.49816, 0.107701585; -0.43181163, 4.962912, 0.48400038; -1.0494466, 7.400627, 0.8946864; -1.2047241, 8.96848, 1.1301259; -0.9985945, 10.528332, 0.9260492; -1.2284129, 12.095204, 0.52859163; 2.6317246, 9.487745, 1.1866266; 2.0607383, 8.354044, 5.981622; 0.019606113, 7.815713, 8.58045; -1.0010214, 7.5464664, 9.87981; -1.6450585, 8.287492, 10.503033; -2.1921203, 8.793419, 11.072037; -2.0781822, 7.783965, 10.648578; -5.0924406, 7.2638617, 0.033730626; -6.0346465, 2.643434, -1.4239197; -4.419864, 0.065517426, -0.37152028; -3.6124728, -1.2234384, 0.15467918; -4.080171, -2.387389, 0.27969906; -4.34162, -3.3596816, 0.41839087; -3.6087773, -2.513329, 0.83261013\",\n  \"0.0, 0.0, 0.0; 1.4247847, -1.841859, 1.0232023; 2.5985188, -9.004987, 1.6389937; 3.8619943, -16.215757, -0.556689; 3.8909633, -17.692057, 1.5886595; 3.7278397, -17.307142, 2.7866874; -1.5316476, -1.7346128, 0.97918665; -1.5110438, -8.806073, 2.4271724; -0.39698136, -16.020847, -0.19427967; -1.6650048, -17.253387, 1.7395862; -2.3345335, -17.302303, 2.8275928; -0.08724756, 2.4979398, 0.1072315; -0.4375784, 4.9620485, 0.4890173; -1.0420147, 7.401373, 0.90966475; -1.2035933, 8.969238, 1.1407384; -1.0038726, 10.529217, 0.9313282; -1.2381425, 12.095028, 0.53229094; 2.6503615, 9.467749, 1.2075996; 2.17903, 7.9345384, 5.9012547; 0.16346121, 7.1380005, 8.4533; -0.84417, 6.7395997, 9.729415; -1.4776977, 7.4062896, 10.441087; -2.015133, 7.8454676, 11.071396; -1.9081744, 6.888914, 10.537672; -5.0861773, 7.289471, 0.050610006; -6.0121813, 2.6694164, -1.4185603; -4.402795, 0.09241867, -0.3556968; -3.5981035, -1.1960799, 0.17573303; -4.0655727, -2.3606806, 0.29544127; -4.3271723, -3.3333795, 0.43096274; -3.5994759, -2.486387, 0.8528756\",\n  \"0.0, 0.0, 0.0; 1.4262061, -1.8392341, 1.0259401; 2.6033845, -9.002868, 1.6291435; 3.8689568, -16.205126, -0.5931108; 3.9195626, -17.68537, 1.5491154; 3.7640138, -17.293787, 2.7459888; -1.5303072, -1.7343148, 0.9818062; -1.5086503, -8.805127, 2.432937; -0.39245415, -16.020542, -0.18584609; -1.6412519, -17.25247, 1.7608771; -2.3016844, -17.295914, 2.8546603; -0.09423439, 2.4978063, 0.10439224; -0.44178897, 4.961887, 0.48888695; -1.0303557, 7.4036217, 0.9179704; -1.197769, 8.9714775, 1.1449188; -1.0045002, 10.531671, 0.931096; -1.2432297, 12.096816, 0.53209066; 2.6752458, 9.446508, 1.2136871; 2.324674, 7.5343623, 5.777028; 0.3567716, 6.483677, 8.273695; -0.6268316, 5.958134, 9.522231; -1.2496934, 6.5345798, 10.317255; -1.7762358, 6.895053, 11.004144; -1.6727747, 6.0045185, 10.365755; -5.077016, 7.318952, 0.06760341; -5.989484, 2.698938, -1.4101365; -4.38348, 0.122782946, -0.34013784; -3.5804787, -1.1652926, 0.19486111; -4.0465856, -2.3309414, 0.30957848; -4.307328, -3.3043046, 0.44194508; -3.5846477, -2.4563665, 0.8705276\",\n  \"0.0, 0.0, 0.0; 1.4268873, -1.8374115, 1.028256; 2.6110368, -9.001428, 1.6129947; 3.8786445, -16.193756, -0.6400411; 3.9539979, -17.67932, 1.497771; 3.8073137, -17.2828, 2.6941385; -1.5296643, -1.7336257, 0.98402274; -1.4983178, -8.804346, 2.4354253; -0.38460386, -16.019531, -0.18504262; -1.6105062, -17.249763, 1.7772437; -2.2597222, -17.290783, 2.8778143; -0.1010011, 2.497777, 0.09860195; -0.4453072, 4.9622316, 0.48362148; -1.0166533, 7.4064617, 0.921678; -1.1893654, 8.973984, 1.1469563; -1.0024228, 10.534361, 0.92889696; -1.2456201, 12.09877, 0.52970195; 2.7030299, 9.424589, 1.2105333; 2.483518, 7.1367517, 5.6060877; 0.59013116, 5.8488383, 8.048687; -0.35613072, 5.2046456, 9.270209; -0.96659815, 5.6777425, 10.139587; -1.4798639, 5.95002, 10.875405; -1.3781193, 5.13648, 10.141172; -5.0666466, 7.350295, 0.0849278; -5.969579, 2.7305427, -1.3994722; -4.3640423, 0.1563592, -0.3240422; -3.5612745, -1.1307311, 0.21367186; -4.0255113, -2.2975807, 0.3236652; -4.284988, -3.2716753, 0.45310694; -3.5677402, -2.4224162, 0.8881512\",\n  \"0.0, 0.0, 0.0; 1.4275972, -1.835695, 1.030334; 2.6218805, -8.999853, 1.5922809; 3.8898325, -16.181042, -0.6958225; 3.9920928, -17.67281, 1.4365447; 3.8557181, -17.275066, 2.6337252; -1.5289944, -1.7330868, 0.98601127; -1.4837751, -8.80431, 2.4345994; -0.3762679, -16.018711, -0.19065762; -1.576623, -17.248169, 1.787841; -2.2132206, -17.28744, 2.8958213; -0.110725194, 2.4976788, 0.09029847; -0.45213112, 4.9626403, 0.4746534; -1.0020572, 7.4098253, 0.92349315; -1.1779116, 8.977122, 1.147901; -0.99703366, 10.53775, 0.92654806; -1.2449571, 12.101795, 0.5288361; 2.7347412, 9.3979645, 1.1990991; 2.6557724, 6.703706, 5.3629932; 0.87404037, 5.2117524, 7.7732697; -0.016598523, 4.465605, 8.978483; -0.6086986, 4.8291883, 9.910971; -1.1033792, 5.0096097, 10.686691; -1.0069616, 4.279727, 9.868602; -5.056711, 7.387915, 0.10798764; -5.948721, 2.7683182, -1.3834858; -4.3414145, 0.19623184, -0.30568373; -3.5377612, -1.0898093, 0.2332164; -4.000059, -2.2578309, 0.33885214; -4.258135, -3.2326796, 0.46538508; -3.5452354, -2.3825028, 0.9057515\",\n  \"0.0, 0.0, 0.0; 1.4283643, -1.8346847, 1.0310705; 2.6342041, -8.99871, 1.5695326; 3.9002979, -16.1675, -0.7581384; 4.0304103, -17.667412, 1.3669856; 3.9047608, -17.268064, 2.5648057; -1.5282714, -1.7333233, 0.9867159; -1.4654989, -8.805455, 2.430204; -0.36708868, -16.019114, -0.20090461; -1.5400451, -17.24806, 1.7942743; -2.1630778, -17.288168, 2.9099092; -0.12200697, 2.4974744, 0.0809272; -0.46148378, 4.9629498, 0.46369234; -0.9893063, 7.4128466, 0.92412543; -1.1665834, 8.979897, 1.1491426; -0.9909817, 10.540715, 0.9249024; -1.2433517, 12.104572, 0.52925396; 2.7645943, 9.371239, 1.1795683; 2.822189, 6.2815185, 5.0594654; 1.1823866, 4.5903163, 7.438711; 0.36236584, 3.7446814, 8.628241; -0.20393175, 3.996716, 9.612159; -0.6738087, 4.0849195, 10.418657; -0.5883436, 3.4420037, 9.529471; -5.0496554, 7.4247975, 0.13724941; -5.932546, 2.8062882, -1.3629918; -4.3220396, 0.23623705, -0.28511214; -3.5167863, -1.0487868, 0.25382656; -3.976761, -2.2180405, 0.35591486; -4.2331095, -3.193636, 0.48018315; -3.524736, -2.3420901, 0.92518365\",\n  \"0.0, 0.0, 0.0; 1.4291694, -1.8338568, 1.0314276; 2.648294, -8.9972925, 1.5473429; 3.9090767, -16.15234, -0.82506645; 4.0683937, -17.66084, 1.2919761; 3.9540434, -17.257572, 2.4896145; -1.5275085, -1.7338012, 0.9870578; -1.4451883, -8.807273, 2.4229736; -0.3578397, -16.020145, -0.21487498; -1.501173, -17.248993, 1.7974858; -2.1096392, -17.296106, 2.9208598; -0.13861299, 2.4966724, 0.07891529; -0.48089492, 4.9611926, 0.46531674; -0.98792446, 7.413371, 0.93683743; -1.1597164, 8.981873, 1.1559179; -0.9866965, 10.542227, 0.926499; -1.2434478, 12.105932, 0.5330766; 2.7814064, 9.34519, 1.1660395; 2.969941, 5.8962917, 4.725933; 1.4970591, 3.995606, 7.055727; 0.7601406, 3.0453863, 8.220435; 0.22980988, 3.189261, 9.245305; -0.20736751, 3.189179, 10.07469; -0.14259395, 2.6327403, 9.127337; -5.054553, 7.455422, 0.1841631; -5.927616, 2.8392673, -1.3290205; -4.313613, 0.27099895, -0.25212145; -3.5066133, -1.0131339, 0.2863279; -3.9636445, -2.1838858, 0.38438392; -4.217675, -3.1604545, 0.5057316; -3.5132582, -2.307851, 0.9549676\",\n  \"0.0, 0.0, 0.0; 1.4297277, -1.8338354, 1.0306919; 2.6623936, -8.996309, 1.5274413; 3.9153962, -16.13642, -0.89359426; 4.1054974, -17.654116, 1.2143137; 4.0033226, -17.24742, 2.4118931; -1.5269816, -1.7346658, 0.9863534; -1.4249305, -8.809407, 2.4147298; -0.35113895, -16.022526, -0.2280004; -1.4630862, -17.252186, 1.8013804; -2.0561411, -17.306839, 2.9326267; -0.15542851, 2.4957144, 0.07788019; -0.50280213, 4.958889, 0.46829677; -0.993027, 7.4123077, 0.95100534; -1.1575696, 8.982409, 1.1641132; -0.986588, 10.542252, 0.9297407; -1.2482355, 12.105898, 0.5393213; 2.7878323, 9.325201, 1.1466024; 3.1110232, 5.560953, 4.3605204; 1.8260593, 3.4402747, 6.610302; 1.1827971, 2.38019, 7.735; 0.70077866, 2.4217443, 8.792469; 0.30569455, 2.339084, 9.638684; 0.3373183, 1.866257, 8.645341; -5.066842, 7.476018, 0.23986226; -5.9295573, 2.8631926, -1.2893224; -4.310255, 0.29671788, -0.21610785; -3.500605, -0.9865179, 0.320499; -3.9547286, -2.158679, 0.415169; -4.206422, -3.1361651, 0.5339761; -3.5052845, -2.2826009, 0.98650646\",\n  \"0.0, 0.0, 0.0; 1.429977, -1.8343054, 1.0295087; 2.675778, -8.99566, 1.509331; 3.916919, -16.1195, -0.96515656; 4.1387215, -17.64787, 1.1319144; 4.049695, -17.239489, 2.3299706; -1.5267456, -1.7355169, 0.9852211; -1.404111, -8.811757, 2.4045246; -0.34766984, -16.025698, -0.24294925; -1.4254526, -17.2561, 1.8043342; -2.001537, -17.318754, 2.9439046; -0.17183831, 2.49454, 0.08097714; -0.5265418, 4.9557457, 0.47717604; -1.0048355, 7.4097867, 0.9686111; -1.1620511, 8.981289, 1.1768585; -0.99240786, 10.540542, 0.9376379; -1.2585013, 12.104217, 0.5503478; 2.782804, 9.313228, 1.1203283; 3.2604465, 5.283344, 3.9725523; 2.1677217, 2.9388094, 6.0983553; 1.6204536, 1.7668366, 7.16113; 1.2017078, 1.711071, 8.244575; 0.85977554, 1.5506985, 9.102693; 0.84217715, 1.1597371, 8.074036; -5.0868382, 7.4842577, 0.30720234; -5.9407415, 2.8771105, -1.2438896; -4.3149247, 0.31172872, -0.17793715; -3.5020175, -0.970961, 0.3550381; -3.953194, -2.1445117, 0.44653443; -4.202384, -3.122974, 0.5625493; -3.5027883, -2.269143, 1.0169585\",\n  \"0.0, 0.0, 0.0; 1.4298011, -1.8364091, 1.025997; 2.689722, -8.996192, 1.4922152; 3.9159055, -16.102833, -1.0385447; 4.1710105, -17.64252, 1.0464258; 4.095546, -17.229555, 2.2438407; -1.5269132, -1.7372731, 0.9818606; -1.3814756, -8.814834, 2.392401; -0.3439603, -16.03037, -0.25820088; -1.3873413, -17.26206, 1.8060596; -1.9463112, -17.336649, 2.953408; -0.18786287, 2.4932113, 0.08614066; -0.5511328, 4.9523034, 0.48766714; -1.0201492, 7.4068766, 0.9853487; -1.1702565, 8.979759, 1.1883564; -1.0015285, 10.538465, 0.9449584; -1.2715439, 12.102514, 0.56192017; 2.771188, 9.30636, 1.0855389; 3.4187765, 5.0558424, 3.5587986; 2.5092592, 2.499229, 5.5200315; 2.0536578, 1.2211763, 6.500603; 1.7136091, 1.0711656, 7.602498; 1.4359, 0.83631444, 8.466631; 1.3518074, 0.52733374, 7.413656; -5.1106653, 7.485582, 0.37934923; -5.9549065, 2.8858676, -1.1988548; -4.3221564, 0.3207562, -0.14289534; -3.505783, -0.9617983, 0.38508385; -3.9536903, -2.1368384, 0.4734732; -4.200128, -3.116311, 0.58680934; -3.502549, -2.261899, 1.0432216\",\n  \"0.0, 0.0, 0.0; 1.429918, -1.8385402, 1.0220094; 2.7041435, -8.996697, 1.4741012; 3.9134164, -16.083529, -1.1195594; 4.201474, -17.634783, 0.95250523; 4.139408, -17.216942, 2.1489983; -1.5268017, -1.7395221, 0.97804457; -1.3561767, -8.8189, 2.3765936; -0.3389188, -16.035578, -0.27875423; -1.3471916, -17.269537, 1.8015356; -1.888603, -17.350811, 2.9568224; -0.20254947, 2.4919102, 0.09039461; -0.57386667, 4.949151, 0.49587333; -1.0346453, 7.404213, 0.9988089; -1.1769465, 8.978446, 1.1969129; -1.0094708, 10.536627, 0.94932556; -1.2842046, 12.10099, 0.5709538; 2.7581794, 9.302943, 1.0390314; 3.554543, 4.861122, 3.0979905; 2.8285873, 2.1182477, 4.8755045; 2.4648266, 0.74702764, 5.7642937; 2.2203438, 0.5035008, 6.8748035; 2.0189638, 0.19550383, 7.7371187; 1.850207, -0.030038789, 6.673188; -5.1340046, 7.4833393, 0.45590472; -5.967986, 2.8916721, -1.1509287; -4.3280115, 0.32561994, -0.10853708; -3.5080261, -0.957405, 0.41265845; -3.951735, -2.1342497, 0.49816445; -4.1945295, -3.114959, 0.6086352; -3.4981058, -2.2599976, 1.0657828\",\n  \"0.0, 0.0, 0.0; 1.4300857, -1.8410408, 1.0172621; 2.7174003, -8.997825, 1.4537423; 3.9062796, -16.062675, -1.2084088; 4.2306347, -17.626204, 0.849015; 4.183497, -17.203594, 2.0445137; -1.5266427, -1.7422079, 0.97350144; -1.3285377, -8.823363, 2.3593733; -0.3358119, -16.041557, -0.30113244; -1.3055253, -17.278309, 1.7957647; -1.8274993, -17.366995, 2.9594216; -0.21721491, 2.4904926, 0.095282465; -0.59672457, 4.9457912, 0.50492257; -1.0494125, 7.401263, 1.0131752; -1.1846147, 8.976484, 1.2083769; -1.018711, 10.534188, 0.9567634; -1.2981162, 12.098889, 0.5832385; 2.7429724, 9.301094, 0.9853681; 3.6539402, 4.6994243, 2.5972166; 3.1156225, 1.7987711, 4.1803627; 2.8456802, 0.34864986, 4.972064; 2.715112, 0.009835124, 6.076811; 2.6031656, -0.37191173, 6.9257755; 2.3308496, -0.5110024, 5.868518; -5.1576204, 7.4786644, 0.5415964; -5.9827743, 2.895422, -1.0935948; -4.332814, 0.32805824, -0.07036698; -3.5078344, -0.9556215, 0.44124657; -3.9474394, -2.1341586, 0.52461493; -4.186521, -3.1160846, 0.6323416; -3.4891534, -2.261199, 1.0881898\",\n  \"0.0, 0.0, 0.0; 1.4304174, -1.844012, 1.0113974; 2.728329, -8.999885, 1.4311192; 3.8925514, -16.041199, -1.3033035; 4.255581, -17.617159, 0.738112; 4.2244954, -17.189117, 1.9322026; -1.5263292, -1.7456063, 0.9678893; -1.2973752, -8.828379, 2.3406787; -0.3360865, -16.04895, -0.32491183; -1.2629255, -17.2881, 1.7898822; -1.7629179, -17.386415, 2.9623842; -0.23169929, 2.4889295, 0.10177701; -0.61933875, 4.9421225, 0.5163889; -1.0638909, 7.3979626, 1.0300194; -1.1928734, 8.974051, 1.2224076; -1.029036, 10.531359, 0.967014; -1.3130994, 12.096677, 0.59963876; 2.7253325, 9.301227, 0.92191565; 3.7215178, 4.580197, 2.072036; 3.369392, 1.5478368, 3.4470725; 3.1925447, 0.031847358, 4.1348324; 3.1902363, -0.40369985, 5.213073; 3.1775157, -0.85948193, 6.032283; 2.7872794, -0.91007406, 5.004444; -5.1809387, 7.470866, 0.64226484; -6.0033116, 2.896936, -1.0201774; -4.339864, 0.3280611, -0.022910118; -3.50814, -0.95637476, 0.47572196; -3.9436936, -2.136468, 0.55833894; -4.1790986, -3.1194603, 0.6644251; -3.4805684, -2.2642014, 1.1177864\",\n  \"0.0, 0.0, 0.0; 1.429807, -1.8479757, 1.0050056; 2.7364073, -9.0031595, 1.4092208; 3.8742423, -16.020077, -1.3980545; 4.2777333, -17.609251, 0.62544215; 4.2624807, -17.17171, 1.8163923; -1.5269065, -1.7484802, 0.9617721; -1.2665547, -8.833067, 2.3195205; -0.3371327, -16.056112, -0.3506658; -1.2208455, -17.296907, 1.7815526; -1.698606, -17.403103, 2.962606; -0.24603958, 2.4873161, 0.10741011; -0.6422301, 4.93851, 0.52574545; -1.0787643, 7.3948164, 1.0439994; -1.2019837, 8.971555, 1.2348317; -1.0403068, 10.528499, 0.9758688; -1.3286805, 12.094498, 0.6148079; 2.704206, 9.303325, 0.84639525; 3.7701344, 4.5089254, 1.5398055; 3.5854936, 1.3696244, 2.6889896; 3.4924922, -0.1998843, 3.2638857; 3.6271038, -0.7305971, 4.289816; 3.719061, -1.2583345, 5.059258; 3.2035017, -1.2224979, 4.087553; -5.203613, 7.460912, 0.74902433; -6.02827, 2.8977976, -0.9417667; -4.349082, 0.32829857, 0.027110934; -3.5094888, -0.95644915, 0.5115491; -3.939791, -2.138522, 0.59338325; -4.1704884, -3.122824, 0.69765246; -3.471089, -2.2667155, 1.1480606\",\n  \"0.0, 0.0, 0.0; 1.4298275, -1.85109, 0.9992287; 2.7454414, -9.005345, 1.3904326; 3.8578377, -15.997332, -1.4883327; 4.2984333, -17.600945, 0.5159426; 4.2974935, -17.155476, 1.704048; -1.5268875, -1.7515261, 0.9562442; -1.2321861, -8.838525, 2.2942445; -0.3368861, -16.063477, -0.38243914; -1.1797371, -17.30582, 1.7653637; -1.6361074, -17.41914, 2.9541886; -0.25798342, 2.4858894, 0.112306565; -0.66114557, 4.9354253, 0.53368264; -1.0906198, 7.3921537, 1.0558203; -1.2089651, 8.969588, 1.243965; -1.0501317, 10.526266, 0.9816638; -1.3431824, 12.093002, 0.6276361; 2.6830688, 9.307458, 0.7673802; 3.7997942, 4.4815702, 1.0262579; 3.7685373, 1.2581954, 1.9311357; 3.752427, -0.35342216, 2.3838406; 4.023195, -0.97225624, 3.3304336; 4.2180004, -1.5656874, 4.029643; 3.579196, -1.4510179, 3.140781; -5.221245, 7.449572, 0.854836; -6.04917, 2.8972106, -0.863127; -4.353588, 0.32695985, 0.07470667; -3.505798, -0.9581641, 0.5436231; -3.9304113, -2.1423712, 0.62430763; -4.1560388, -3.1280732, 0.7264236; -3.4559963, -2.2710075, 1.1740035\",\n  \"0.0, 0.0, 0.0; 1.4293817, -1.8544904, 0.99354535; 2.7517323, -9.008239, 1.3710773; 3.8433168, -15.973072, -1.5805578; 4.317664, -17.591547, 0.40397096; 4.328478, -17.137339, 1.5887139; -1.5273095, -1.7541168, 0.9508055; -1.1977118, -8.8444805, 2.2625778; -0.33432156, -16.07005, -0.4229064; -1.1413591, -17.314766, 1.7372434; -1.5788586, -17.43364, 2.9326024; -0.26729232, 2.4848785, 0.112904444; -0.67666364, 4.9335585, 0.533269; -1.1012744, 7.3906794, 1.0575342; -1.2175376, 8.968352, 1.2449825; -1.0610027, 10.5247965, 0.9799293; -1.3566658, 12.092356, 0.63176286; 2.6598048, 9.315282, 0.6800401; 3.8075547, 4.491653, 0.5437976; 3.9189668, 1.2070353, 1.1831725; 3.9744616, -0.43527436, 1.5029404; 4.3748164, -1.1288955, 2.3460982; 4.666483, -1.7771268, 2.9574332; 3.913229, -1.5980034, 2.1752443; -5.2354765, 7.4363503, 0.9478065; -6.0687575, 2.89642, -0.8001994; -4.3567224, 0.32599354, 0.10675359; -3.5007062, -0.95921826, 0.56022966; -3.9198833, -2.1454346, 0.63981706; -4.140746, -3.1323996, 0.7401342; -3.4411464, -2.2739646, 1.1857784\",\n  \"0.0, 0.0, 0.0; 1.4288363, -1.8572668, 0.98913413; 2.7600348, -9.009906, 1.356436; 3.8334618, -15.947499, -1.6651769; 4.337067, -17.58177, 0.29909313; 4.3581505, -17.122828, 1.4818718; -1.5278265, -1.755949, 0.9465843; -1.16088, -8.850123, 2.2274756; -0.33103234, -16.075012, -0.47038698; -1.1053983, -17.319622, 1.7017496; -1.5250416, -17.448452, 2.9024668; -0.2742157, 2.4841917, 0.11140681; -0.68863785, 4.9324684, 0.52916205; -1.1097012, 7.38995, 1.0545977; -1.2254245, 8.967778, 1.2410625; -1.0711658, 10.524152, 0.97426677; -1.3686363, 12.0927925, 0.63257074; 2.6360216, 9.325201, 0.58911127; 3.804006, 4.5302553, 0.09152049; 4.0480385, 1.210962, 0.45575345; 4.1701093, -0.44871318, 0.63765746; 4.6893206, -1.1987402, 1.3588982; 5.0689106, -1.8873208, 1.8695567; 4.2145624, -1.6630944, 1.2129687; -5.245438, 7.4221573, 1.0347302; -6.0863223, 2.8950844, -0.74273217; -4.3569593, 0.32554436, 0.1333313; -3.4922783, -0.9592236, 0.571363; -3.9049604, -2.1478014, 0.6496528; -4.1202254, -3.136186, 0.7481452; -3.422399, -2.2755957, 1.1924102\",\n  \"0.0, 0.0, 0.0; 1.4282328, -1.859884, 0.98507917; 2.7653332, -9.011819, 1.3445718; 3.821456, -15.920923, -1.7475913; 4.352483, -17.571308, 0.1958741; 4.3832874, -17.109875, 1.37747; -1.528397, -1.7575396, 0.9427034; -1.1269536, -8.855721, 2.1906235; -0.33205295, -16.080105, -0.5190878; -1.0744158, -17.324526, 1.6643009; -1.4764509, -17.462284, 2.8700414; -0.2817055, 2.483491, 0.10829926; -0.7017356, 4.9315596, 0.52165097; -1.1192821, 7.3896904, 1.0468564; -1.2350873, 8.967281, 1.2352761; -1.0832136, 10.523703, 0.9673953; -1.3821161, 12.093396, 0.6318419; 2.6078844, 9.335913, 0.48760182; 3.7912989, 4.592433, -0.35038275; 4.157782, 1.2657421, -0.25687435; 4.3412533, -0.39760208, -0.21064666; 4.9692955, -1.1816622, 0.3751193; 5.4292, -1.8934602, 0.77616185; 4.4891973, -1.6488355, 0.25861996; -5.2544703, 7.4075885, 1.1220362; -6.1043153, 2.892963, -0.6826155; -4.3574524, 0.32451558, 0.16134399; -3.4840224, -0.95970654, 0.58332384; -3.8904798, -2.1505814, 0.6592321; -4.100388, -3.1403806, 0.75504243; -3.4043238, -2.2781203, 1.1988338\",\n  \"0.0, 0.0, 0.0; 1.4290165, -1.861258, 0.9813402; 2.7704878, -9.012598, 1.3363477; 3.8071828, -15.892733, -1.8261842; 4.363499, -17.559814, 0.095837474; 4.4036236, -17.096966, 1.2765996; -1.5276569, -1.7600968, 0.9391249; -1.0982507, -8.862446, 2.1535747; -0.334265, -16.085878, -0.5675397; -1.0463955, -17.330864, 1.6255758; -1.4319459, -17.477657, 2.8356264; -0.2881922, 2.4829311, 0.10398413; -0.7135756, 4.93102, 0.51170117; -1.129605, 7.3896537, 1.0357533; -1.2462533, 8.966849, 1.2269412; -1.0967742, 10.52346, 0.9588109; -1.3967962, 12.094349, 0.62991345; 2.5750077, 9.349319, 0.381635; 3.7759945, 4.678039, -0.77597076; 4.254057, 1.3682785, -0.93988556; 4.4934015, -0.2865243, -1.0226746; 5.2197227, -1.0798154, -0.58057046; 5.752445, -1.796143, -0.29406494; 4.7441673, -1.5582726, -0.6656692; -5.2619743, 7.3901668, 1.2068534; -6.1237473, 2.8871326, -0.6209538; -4.357488, 0.32138777, 0.1902191; -3.4743595, -0.9614835, 0.595804; -3.8739848, -2.1548305, 0.66911745; -4.078034, -3.1461282, 0.76205224; -3.384123, -2.2819362, 1.2054582\",\n  \"0.0, 0.0, 0.0; 1.4291434, -1.8622032, 0.97936064; 2.7736745, -9.012959, 1.3345869; 3.7907093, -15.862514, -1.8998883; 4.370513, -17.545961, 8.081198E-4; 4.4199944, -17.085135, 1.1820059; -1.5275366, -1.7612106, 0.93723017; -1.0769924, -8.868117, 2.1168597; -0.34176266, -16.090607, -0.61466193; -1.0248799, -17.334898, 1.5880554; -1.3945367, -17.491964, 2.80177; -0.2958467, 2.4822776, 0.09791115; -0.72805035, 4.9302597, 0.49904346; -1.1431755, 7.389376, 1.0215466; -1.2602222, 8.965853, 1.2183387; -1.112332, 10.522711, 0.95076394; -1.4124713, 12.0949135, 0.62831616; 2.5352645, 9.363232, 0.2696874; 3.7531059, 4.782605, -1.1925045; 4.3391542, 1.5105045, -1.5922933; 4.6324325, -0.12538922, -1.7931705; 5.4459047, -0.9025761, -1.4989717; 6.0439734, -1.6044109, -1.3294264; 4.9862385, -1.4004529, -1.5550222; -5.2702117, 7.371364, 1.2917302; -6.1458244, 2.8787546, -0.55505264; -4.3594313, 0.31632566, 0.22178519; -3.466236, -0.96488726, 0.6102048; -3.8589516, -2.1607132, 0.6804006; -4.057075, -3.1535199, 0.76998675; -3.3652232, -2.287599, 1.2132375\",\n  \"0.0, 0.0, 0.0; 1.4284476, -1.8636898, 0.97754586; 2.7758155, -9.013726, 1.3364735; 3.7730246, -15.832308, -1.9688447; 4.374473, -17.53379, -0.09107149; 4.4330626, -17.077082, 1.0913088; -1.5281936, -1.7615638, 0.935494; -1.0584599, -8.872549, 2.0826123; -0.35053867, -16.093906, -0.6590936; -1.0063542, -17.338234, 1.5518858; -1.3611166, -17.503363, 2.768971; -0.30470186, 2.4815092, 0.08990473; -0.7449137, 4.929367, 0.48300675; -1.1588426, 7.3890095, 1.0039802; -1.2748415, 8.964462, 1.2094002; -1.1281201, 10.521764, 0.9437716; -1.4282541, 12.095387, 0.62832606; 2.4893644, 9.376943, 0.14898163; 3.7332363, 4.9086914, -1.6090837; 4.4275503, 1.6896553, -2.2137825; 4.774821, 0.08033109, -2.5170832; 5.6634912, -0.65516204, -2.370031; 6.3190594, -1.3232664, -2.3164518; 5.231376, -1.1791066, -2.402818; -5.2775145, 7.3522935, 1.3794081; -6.1695795, 2.8694863, -0.4832536; -4.362295, 0.3113129, 0.25849783; -3.4586558, -0.9677731, 0.6293734; -3.8446352, -2.1660314, 0.6953256; -4.036969, -3.1603577, 0.7805702; -3.346842, -2.2932942, 1.2242754\",\n  \"0.0, 0.0, 0.0; 1.4291941, -1.8634427, 0.9769258; 2.777543, -9.01293, 1.3430293; 3.75664, -15.800049, -2.0317261; 4.376523, -17.52133, -0.17814648; 4.4429545, -17.06976, 1.0057917; -1.5274892, -1.7624897, 0.93490064; -1.0443231, -8.877707, 2.049746; -0.36225593, -16.09741, -0.7028508; -0.9924366, -17.342278, 1.5152676; -1.3331056, -17.519068, 2.7347383; -0.31236356, 2.4808216, 0.082263835; -0.7599634, 4.9286304, 0.46724457; -1.1743273, 7.388879, 0.9850015; -1.2906511, 8.963017, 1.2000831; -1.1451049, 10.520856, 0.93696743; -1.4445324, 12.096017, 0.6286051; 2.43894, 9.392237, 0.024182022; 3.7266383, 5.0555778, -2.0101502; 4.5350924, 1.9018161, -2.791249; 4.939302, 0.32513344, -3.1826549; 5.8887653, -0.3462838, -3.1774364; 6.5918717, -0.9637517, -3.2355628; 5.4939327, -0.8995832, -3.194234; -5.281567, 7.3312817, 1.467715; -6.189215, 2.857738, -0.40963233; -4.3621817, 0.30360484, 0.29681778; -3.448666, -0.9734603, 0.65004313; -3.827679, -2.1741993, 0.71109676; -4.0140376, -3.17007, 0.79144496; -3.3257544, -2.3019783, 1.2360036\",\n  \"0.0, 0.0, 0.0; 1.4291494, -1.8630636, 0.97771424; 2.7778478, -9.011949, 1.3541464; 3.7386606, -15.769157, -2.0852685; 4.3748536, -17.511456, -0.25702488; 4.44913, -17.067495, 0.9293232; -1.5275297, -1.7620538, 0.9356548; -1.033082, -8.880754, 2.0229733; -0.37583864, -16.098967, -0.7395556; -0.9831447, -17.342789, 1.4855199; -1.3110526, -17.52963, 2.7069886; -0.31979403, 2.480084, 0.07569634; -0.7750473, 4.927698, 0.4528609; -1.1901665, 7.3889256, 0.9653318; -1.3086402, 8.961189, 1.192611; -1.1642729, 10.519745, 0.9331199; -1.4619038, 12.096614, 0.6318265; 2.3838997, 9.406809, -0.105422616; 3.7317514, 5.216335, -2.3915782; 4.6624055, 2.1404288, -3.3310528; 5.127616, 0.60266364, -3.8015525; 6.1228123, 0.014353633, -3.9271896; 6.862959, -0.5380543, -4.0885353; 5.7734323, -0.56888837, -3.935968; -5.2825556, 7.3106112, 1.5586054; -6.204158, 2.8473926, -0.3364334; -4.3589516, 0.2966447, 0.3341025; -3.436349, -0.9787271, 0.6693711; -3.8092148, -2.1816292, 0.72550005; -3.9903305, -3.178836, 0.80112386; -3.3040502, -2.3099184, 1.2471625\",\n  \"0.0, 0.0, 0.0; 1.4298047, -1.8622282, 0.9783471; 2.778853, -9.010358, 1.3676536; 3.723202, -15.738605, -2.1325607; 4.3738785, -17.502382, -0.33019304; 4.456057, -17.069334, 0.8596616; -1.52691, -1.7622694, 0.93626046; -1.0251945, -8.884266, 1.9983767; -0.3889042, -16.100224, -0.7749256; -0.9762686, -17.3442, 1.4554104; -1.2931366, -17.539568, 2.6784582; -0.32861507, 2.479126, 0.06899384; -0.79201335, 4.926455, 0.43800133; -1.2069097, 7.3888893, 0.94482225; -1.327446, 8.959172, 1.18438; -1.1841187, 10.518454, 0.9286965; -1.4793725, 12.097207, 0.6350291; 2.3221722, 9.419746, -0.2440924; 3.748498, 5.386665, -2.7546964; 4.80896, 2.4020143, -3.8396888; 5.338994, 0.9098747, -4.382916; 6.364616, 0.4181958, -4.6251154; 7.130831, -0.059168488, -4.8781796; 6.067069, -0.19316407, -4.6296797; -5.27973, 7.2910085, 1.6577792; -6.21287, 2.8378935, -0.25529778; -4.3499985, 0.29080153, 0.3793292; -3.4185648, -0.9827436, 0.6966427; -3.7854674, -2.1877148, 0.7474309; -3.961459, -3.1862218, 0.81781906; -3.2764184, -2.3169494, 1.2650703\",\n  \"0.0, 0.0, 0.0; 1.4305319, -1.8612857, 0.97907794; 2.7810087, -9.008362, 1.3825114; 3.712134, -15.70935, -2.1731005; 4.374969, -17.494343, -0.39622962; 4.464695, -17.075098, 0.79801583; -1.5262223, -1.7624934, 0.9369598; -1.0160447, -8.887239, 1.9763598; -0.4007399, -16.100252, -0.8093126; -0.97091377, -17.34285, 1.4262469; -1.2778974, -17.548752, 2.650087; -0.3376059, 2.4780707, 0.06326679; -0.8107737, 4.924856, 0.4233716; -1.228356, 7.388633, 0.9213902; -1.3488492, 8.956892, 1.1738746; -1.2054447, 10.516777, 0.9219476; -1.4978204, 12.097394, 0.6355145; 2.2462163, 9.434579, -0.3953365; 3.7734513, 5.568942, -3.1023078; 4.972814, 2.689689, -4.319417; 5.5722094, 1.2502587, -4.9287434; 6.614305, 0.86370677, -5.2706833; 7.396791, 0.4672707, -5.601678; 6.374712, 0.22738072, -5.271369; -5.2760057, 7.2672644, 1.7625525; -6.2203856, 2.82479, -0.16965294; -4.340765, 0.28126287, 0.4288581; -3.400956, -0.99049926, 0.7281128; -3.7638736, -2.1968498, 0.77460396; -3.936379, -3.1962655, 0.8405882; -3.251033, -2.3273962, 1.2881552\",\n  \"0.0, 0.0, 0.0; 1.4303656, -1.8605499, 0.9807176; 2.7860081, -9.005695, 1.400692; 3.7039757, -15.681604, -2.2051604; 4.376853, -17.487646, -0.45351398; 4.4734054, -17.081572, 0.7447431; -1.5263802, -1.7615217, 0.9385291; -1.0081851, -8.888689, 1.9571528; -0.40978843, -16.098373, -0.84079266; -0.96599925, -17.34114, 1.3981872; -1.2649815, -17.55692, 2.6223068; -0.34634358, 2.4769719, 0.058911577; -0.83209515, 4.9227395, 0.40903962; -1.2578145, 7.387884, 0.893204; -1.3756921, 8.954203, 1.1586387; -1.2297754, 10.514698, 0.9119893; -1.5175318, 12.097739, 0.6344043; 2.150992, 9.452165, -0.55975986; 3.8106513, 5.7717676, -3.441338; 5.1539736, 3.0071054, -4.7687626; 5.825188, 1.6250365, -5.433495; 6.8712006, 1.3475287, -5.8591204; 7.66145, 1.0341756, -6.2544928; 6.696325, 0.6904993, -5.852353; -5.2742715, 7.237005, 1.8684273; -6.2324843, 2.8042707, -0.079274535; -4.3352585, 0.2653966, 0.4823053; -3.3866458, -1.0040385, 0.7630943; -3.7458966, -2.2115884, 0.80685055; -3.915248, -3.211725, 0.87002087; -3.2304895, -2.3424704, 1.3177389\",\n  \"0.0, 0.0, 0.0; 1.4311143, -1.8587602, 0.9830163; 2.792455, -9.0016775, 1.4220293; 3.6991427, -15.654749, -2.2286084; 4.3790545, -17.481234, -0.5010408; 4.480389, -17.08506, 0.70013213; -1.5256693, -1.7609642, 0.9407289; -0.9989115, -8.8903265, 1.9394107; -0.41841274, -16.096958, -0.870141; -0.9644136, -17.338528, 1.372015; -1.2570872, -17.564405, 2.595837; -0.35570142, 2.4757633, 0.053737555; -0.8562677, 4.920085, 0.3929237; -1.294432, 7.3859735, 0.86196303; -1.4063337, 8.950326, 1.1412178; -1.256058, 10.511262, 0.90003157; -1.5386645, 12.0966835, 0.6308692; 2.0411768, 9.470534, -0.7256887; 3.8478255, 6.021715, -3.7989526; 5.3491764, 3.3668303, -5.180061; 6.0991244, 2.0397596, -5.87214; 7.1380153, 1.8733835, -6.367452; 7.9292045, 1.6438942, -6.815066; 7.036652, 1.2013464, -6.3473077; -5.274984, 7.202022, 1.9697169; -6.253259, 2.7783265, 0.011466622; -4.336808, 0.24567366, 0.53453994; -3.378584, -1.0206511, 0.7960774; -3.7355747, -2.2288947, 0.83917344; -3.9029965, -3.2294083, 0.90150994; -3.218794, -2.3594706, 1.3487506\",\n  \"0.0, 0.0, 0.0; 1.4317214, -1.8571873, 0.9851028; 2.7984767, -8.997692, 1.4459988; 3.6978266, -15.629852, -2.244289; 4.3807163, -17.4743, -0.5371016; 4.484487, -17.086319, 0.66653466; -1.525096, -1.7603925, 0.9427261; -0.98940164, -8.891786, 1.9219668; -0.42500234, -16.095434, -0.89849687; -0.9654529, -17.335714, 1.345716; -1.2542577, -17.568966, 2.5690742; -0.36718863, 2.4742029, 0.04802894; -0.8841424, 4.916817, 0.3747044; -1.3346679, 7.3837385, 0.8262782; -1.4377109, 8.946293, 1.1187006; -1.2820803, 10.507596, 0.8833587; -1.5596288, 12.09531, 0.62257755; 1.9268229, 9.483034, -0.890681; 3.892133, 6.2733727, -4.121612; 5.56844, 3.7462554, -5.5406265; 6.405541, 2.483103, -6.252118; 7.4260244, 2.427386, -6.806932; 8.21118, 2.2812476, -7.298031; 7.4058614, 1.7487733, -6.7696095; -5.2766085, 7.1717663, 2.0599415; -6.278537, 2.7545958, 0.09892309; -4.340314, 0.23077011, 0.58298564; -3.371203, -1.0311404, 0.82501775; -3.7270305, -2.2396808, 0.86940354; -3.8934865, -3.2402887, 0.93280566; -3.2101092, -2.3692193, 1.379105\",\n  \"0.0, 0.0, 0.0; 1.4317335, -1.8559178, 0.987475; 2.8065426, -8.993259, 1.4727662; 3.7005, -15.6074505, -2.250932; 4.3828683, -17.467327, -0.56035435; 4.486264, -17.082, 0.6441668; -1.5250828, -1.7591861, 0.9449965; -0.9790273, -8.892676, 1.903006; -0.42911035, -16.092903, -0.9290339; -0.969171, -17.331488, 1.3162099; -1.2566199, -17.573633, 2.5381584; -0.37828547, 2.472702, 0.03819773; -0.9117614, 4.913512, 0.35152116; -1.3751714, 7.3803806, 0.7901597; -1.4689726, 8.941235, 1.0945324; -1.3076197, 10.502759, 0.864574; -1.5799558, 12.092684, 0.6118905; 1.8112798, 9.494706, -1.0451802; 3.9434261, 6.5139904, -4.38772; 5.8110557, 4.1454268, -5.840921; 6.7435026, 2.9614635, -6.5698147; 7.7343426, 3.0160012, -7.1760907; 8.506782, 2.9533465, -7.7037416; 7.8031535, 2.3420086, -7.1185327; -5.2763214, 7.1408057, 2.142708; -6.2972116, 2.72675, 0.18445778; -4.3383493, 0.21203327, 0.63142574; -3.3589196, -1.0453235, 0.85490966; -3.7146602, -2.2537785, 0.9022158; -3.881075, -3.2542274, 0.96818256; -3.1983087, -2.3818521, 1.412863\",\n  \"0.0, 0.0, 0.0; 1.4324149, -1.8541515, 0.9898022; 2.81565, -8.9880085, 1.501653; 3.707436, -15.58679, -2.2498; 4.38513, -17.460684, -0.5728756; 4.485455, -17.07473, 0.63170457; -1.5244374, -1.7585479, 0.9472233; -0.9684397, -8.894229, 1.8829391; -0.42881364, -16.090418, -0.96131563; -0.9734897, -17.327105, 1.2838585; -1.2622864, -17.575176, 2.5042996; -0.38741556, 2.471449, 0.025765562; -0.93658984, 4.91053, 0.3251198; -1.4150171, 7.3763227, 0.7535645; -1.5001583, 8.935399, 1.0693774; -1.3328074, 10.497084, 0.8448562; -1.5997134, 12.089149, 0.5999761; 1.6973212, 9.507251, -1.1867487; 4.0017905, 6.7385015, -4.5965486; 6.070668, 4.569212, -6.0878077; 7.103524, 3.4846702, -6.8357983; 8.052967, 3.6469805, -7.4873524; 8.804993, 3.6672754, -8.046861; 8.213587, 2.9906583, -7.4114676; -5.2753534, 7.1077375, 2.2135012; -6.3131475, 2.69556, 0.25990903; -4.333526, 0.19113469, 0.6718258; -3.3437157, -1.0610757, 0.8777832; -3.7008553, -2.26892, 0.9298955; -3.86845, -3.2688947, 0.99994004; -3.1850424, -2.3954253, 1.4414766\",\n  \"0.0, 0.0, 0.0; 1.4322933, -1.8526154, 0.99284977; 2.8245244, -8.982666, 1.532587; 3.7168927, -15.569735, -2.2392566; 4.3867927, -17.456118, -0.57324064; 4.482193, -17.067286, 0.63081396; -1.5245514, -1.7568746, 0.9501397; -0.9605143, -8.894753, 1.8640265; -0.42711365, -16.086308, -0.9930973; -0.9800793, -17.322119, 1.2505326; -1.272275, -17.574982, 2.46918; -0.39216253, 2.4707901, 0.014802302; -0.95588267, 4.9082937, 0.29961723; -1.4538924, 7.3726716, 0.7136464; -1.5323474, 8.929641, 1.0413625; -1.3600729, 10.491647, 0.82288074; -1.6228257, 12.085468, 0.585033; 1.5878428, 9.519443, -1.3189719; 4.0739436, 6.9776726, -4.7775826; 6.344118, 5.0363984, -6.290093; 7.4774895, 4.065594, -7.0487237; 8.372366, 4.330743, -7.7424107; 9.093862, 4.4321423, -8.332466; 8.62098, 3.7037702, -7.656335; -5.2765617, 7.0742035, 2.264087; -6.3303556, 2.6610355, 0.32132876; -4.332116, 0.16638947, 0.7014576; -3.3329973, -1.0809321, 0.8915212; -3.6917531, -2.288046, 0.94916767; -3.8606832, -3.2874649, 1.023787; -3.1760857, -2.412904, 1.4613008\",\n  \"0.0, 0.0, 0.0; 1.4330134, -1.8506087, 0.9955495; 2.8336158, -8.976847, 1.5632604; 3.727908, -15.555574, -2.2226586; 4.388097, -17.452772, -0.565068; 4.4784107, -17.062733, 0.63898826; -1.5238686, -1.756068, 0.9527231; -0.9494783, -8.89571, 1.8461607; -0.42430687, -16.0825, -1.0244396; -0.9884946, -17.315063, 1.2181828; -1.2852601, -17.5744, 2.434363; -0.3931706, 2.4706736, 0.0020762826; -0.96905005, 4.9070687, 0.27164096; -1.4887109, 7.3691254, 0.67266476; -1.5636857, 8.9237385, 1.0121652; -1.3861631, 10.486154, 0.8009285; -1.6434623, 12.081967, 0.57059336; 1.4901147, 9.532705, -1.4339522; 4.1671576, 7.243741, -4.926426; 6.632361, 5.5544267, -6.4360332; 7.8631735, 4.709311, -7.1932597; 8.692506, 5.068993, -7.924796; 9.374469, 5.246802, -8.543112; 9.022038, 4.480976, -7.8355813; -5.2789354, 7.040101, 2.2949142; -6.350611, 2.6213675, 0.3747183; -4.333498, 0.13787293, 0.7271819; -3.3249426, -1.1038728, 0.90341336; -3.684908, -2.3102844, 0.9678231; -3.8547485, -3.3091502, 1.047604; -3.1676302, -2.4334059, 1.4787524\",\n  \"0.0, 0.0, 0.0; 1.4329025, -1.8493625, 0.998022; 2.8414555, -8.971582, 1.5956974; 3.737885, -15.546505, -2.1963212; 4.386615, -17.452917, -0.5447887; 4.4701447, -17.056284, 0.6576023; -1.523975, -1.7546898, 0.9550889; -0.94059277, -8.895743, 1.8312492; -0.42046964, -16.077913, -1.0518064; -1.0002538, -17.307144, 1.1886661; -1.3039811, -17.568535, 2.4026859; -0.39177242, 2.4708655, -0.012340885; -0.977087, 4.906639, 0.24209444; -1.5166272, 7.3660264, 0.63312083; -1.5925254, 8.917826, 0.9850631; -1.4114057, 10.480769, 0.7809137; -1.6637625, 12.078214, 0.5564919; 1.4151019, 9.545025, -1.5230904; 4.2871685, 7.5291567, -5.0289125; 6.934329, 6.1117754, -6.5099583; 8.256124, 5.40233, -7.2529655; 9.010814, 5.847571, -8.0175; 9.645087, 6.09634, -8.661561; 9.411797, 5.3049736, -7.9331307; -5.28382, 7.010138, 2.3026571; -6.3789315, 2.578403, 0.4261428; -4.342228, 0.10775232, 0.75545156; -3.3238766, -1.1275707, 0.9201063; -3.68473, -2.333301, 0.99187875; -3.855126, -3.3316429, 1.0768657; -3.1640604, -2.4549527, 1.4997034\",\n  \"0.0, 0.0, 0.0; 1.4336833, -1.8474993, 1.000349; 2.8470206, -8.966213, 1.6277573; 3.7468345, -15.54034, -2.1648376; 4.381929, -17.455011, -0.5175642; 4.457898, -17.051525, 0.68304634; -1.5232338, -1.7541201, 0.95731574; -0.9288164, -8.896211, 1.8174574; -0.41651762, -16.074236, -1.0772982; -1.0132923, -17.299875, 1.1606791; -1.3244736, -17.56614, 2.3717484; -0.38792142, 2.4713361, -0.02878866; -0.9784657, 4.907421, 0.21010329; -1.5345128, 7.364333, 0.5934919; -1.6164036, 8.912992, 0.95771086; -1.4334513, 10.476807, 0.7620472; -1.681238, 12.075846, 0.5439814; 1.3713336, 9.556095, -1.5847079; 4.433606, 7.835896, -5.087091; 7.2440586, 6.703843, -6.51178; 8.647557, 6.1367755, -7.226718; 9.322951, 6.6571093, -8.017544; 9.904827, 6.9697967, -8.682864; 9.78554, 6.1645155, -7.9421964; -5.2914968, 6.9874225, 2.2813196; -6.413717, 2.5395846, 0.45972466; -4.3599544, 0.08071518, 0.77075803; -3.3330746, -1.1487182, 0.9262742; -3.6943483, -2.353834, 1.005838; -3.864797, -3.3517349, 1.0957513; -3.1678214, -2.4745884, 1.5078044\",\n  \"0.0, 0.0, 0.0; 1.4334357, -1.846244, 1.0030174; 2.8525229, -8.960977, 1.6618207; 3.7586358, -15.537268, -2.12552; 4.378068, -17.458244, -0.47962558; 4.4456787, -17.048262, 0.71928275; -1.5234684, -1.7525202, 0.9598693; -0.91759527, -8.895612, 1.8035549; -0.41057384, -16.069572, -1.1021897; -1.0283492, -17.289442, 1.1332399; -1.348995, -17.558598, 2.341197; -0.38222077, 2.4719763, -0.04532471; -0.97487366, 4.909114, 0.17703764; -1.5439882, 7.364551, 0.55057245; -1.6360298, 8.909587, 0.92753136; -1.4523857, 10.474467, 0.7412558; -1.6955951, 12.074911, 0.5284025; 1.3562853, 9.563142, -1.6281722; 4.6009765, 8.164329, -5.1093483; 7.551283, 7.3247375, -6.451253; 9.024805, 6.903623, -7.124979; 9.622178, 7.4894686, -7.932593; 10.152035, 7.8595204, -8.611796; 10.137445, 7.0509706, -7.8652506; -5.3031607, 6.974871, 2.230609; -6.4450293, 2.5092444, 0.4656266; -4.3771234, 0.060827255, 0.76518965; -3.3431716, -1.1633798, 0.9149705; -3.7047563, -2.3678572, 1.0023947; -3.8751261, -3.3653445, 1.096929; -3.1710856, -2.4882255, 1.4968512\",\n  \"0.0, 0.0, 0.0; 1.4335529, -1.8440833, 1.0068173; 2.85574, -8.955246, 1.6967533; 3.7747784, -15.53462, -2.0821114; 4.3753705, -17.460339, -0.43477416; 4.432758, -17.044611, 0.7626884; -1.5233569, -1.7506202, 0.9635064; -0.9026832, -8.894724, 1.787636; -0.4002443, -16.064268, -1.1297777; -1.0439821, -17.278122, 1.1015973; -1.3765527, -17.54848, 2.3060572; -0.37381378, 2.472887, -0.06251387; -0.9663186, 4.9116054, 0.14221495; -1.5488958, 7.3656797, 0.5037578; -1.6526757, 8.907408, 0.8910668; -1.4681166, 10.473315, 0.71458274; -1.7063286, 12.075204, 0.50701517; 1.3562768, 9.570086, -1.6625483; 4.7716417, 8.507725, -5.0991106; 7.833111, 7.9657073, -6.341509; 9.362367, 7.6931252, -6.9656773; 9.886487, 8.336976, -7.779964; 10.367813, 8.759491, -8.464661; 10.446598, 7.9568954, -7.7157083; -5.3176165, 6.964676, 2.1595635; -6.4645367, 2.483213, 0.4385438; -4.3919106, 0.03940773, 0.7431005; -3.3555984, -1.1824933, 0.8953781; -3.7166388, -2.3865457, 0.9905623; -3.8862207, -3.383744, 1.089462; -3.17524, -2.5065079, 1.476647\",\n  \"0.0, 0.0, 0.0; 1.4333551, -1.8424408, 1.0101005; 2.8558621, -8.950376, 1.7318938; 3.7922063, -15.533756, -2.0357263; 4.373166, -17.462181, -0.3845191; 4.4198723, -17.04221, 0.8119259; -1.5235434, -1.7487252, 0.966648; -0.8881866, -8.893914, 1.7699101; -0.38922003, -16.059649, -1.1574445; -1.0599103, -17.264791, 1.0707111; -1.4047909, -17.53828, 2.2709947; -0.3648329, 2.4737458, -0.079326704; -0.9564496, 4.9141045, 0.10765535; -1.5521209, 7.36684, 0.45673284; -1.6675209, 8.905627, 0.8523601; -1.4816045, 10.472415, 0.6853682; -1.7148718, 12.07559, 0.4821607; 1.368176, 9.576889, -1.6833283; 4.936697, 8.857056, -5.0524206; 8.077086, 8.612985, -6.187458; 9.646011, 8.489164, -6.7581205; 10.104406, 9.185993, -7.5684366; 10.54307, 9.658139, -8.24936; 10.701736, 8.868643, -7.4991493; -5.3371105, 6.9556646, 2.0724487; -6.48498, 2.4565291, 0.39882267; -4.409356, 0.016153336, 0.7103849; -3.3715453, -1.2040333, 0.8661659; -3.7319317, -2.4075408, 0.97029746; -3.9006925, -3.4043152, 1.074721; -3.183588, -2.5263832, 1.4488138\",\n  \"0.0, 0.0, 0.0; 1.4339422, -1.8403625, 1.0130519; 2.853602, -8.945967, 1.7628613; 3.8071847, -15.534327, -1.9917092; 4.369214, -17.463018, -0.33427358; 4.4058075, -17.039402, 0.86123836; -1.522988, -1.7476449, 0.96947247; -0.8787286, -8.894066, 1.7544844; -0.3783304, -16.057423, -1.1784365; -1.0776882, -17.255396, 1.0447664; -1.4360759, -17.529888, 2.2408566; -0.35575086, 2.474508, -0.09521687; -0.94568366, 4.9164643, 0.0755253; -1.5537231, 7.3676457, 0.4140346; -1.6800008, 8.904034, 0.8156189; -1.4924048, 10.471501, 0.6571029; -1.7208692, 12.075825, 0.45753598; 1.3858931, 9.584703, -1.6920581; 5.074409, 9.225851, -4.9889297; 8.26407, 9.265096, -6.006011; 9.857846, 9.282747, -6.5179462; 10.258927, 10.029093, -7.3144464; 10.661081, 10.549112, -7.9829187; 10.884625, 9.77601, -7.2321615; -5.35729, 6.94596, 1.9827332; -6.511038, 2.431079, 0.35621572; -4.4317164, -0.0048754215, 0.6775719; -3.3920562, -1.2228506, 0.8382493; -3.7513573, -2.4257252, 0.95291376; -3.9190192, -3.4219007, 1.0645719; -3.1975756, -2.5421128, 1.4257383\",\n  \"0.0, 0.0, 0.0; 1.4338821, -1.8392606, 1.0151365; 2.8508372, -8.942976, 1.7876143; 3.8141408, -15.537995, -1.9527555; 4.36304, -17.465168, -0.2891655; 4.3946347, -17.044914, 0.907675; -1.5230443, -1.7464877, 0.9714667; -0.87146485, -8.89391, 1.7411666; -0.3731976, -16.056852, -1.1931305; -1.0962951, -17.247393, 1.0264683; -1.4656987, -17.523762, 2.218769; -0.34713867, 2.4752617, -0.10671728; -0.93625045, 4.918255, 0.051567413; -1.5573933, 7.3673906, 0.38096982; -1.6920556, 8.902353, 0.7852727; -1.5024142, 10.470302, 0.63411456; -1.7269132, 12.07567, 0.43848985; 1.4017365, 9.594061, -1.6873169; 5.1655626, 9.610945, -4.9178915; 8.376277, 9.920264, -5.815422; 9.980811, 10.072819, -6.2678704; 10.329899, 10.8660555, -7.0432563; 10.698756, 11.432551, -7.6928945; 10.974952, 10.675955, -6.9428453; -5.379717, 6.932797, 1.89976; -6.5399065, 2.4023852, 0.3217305; -4.458623, -0.030666113, 0.65224314; -3.4179811, -1.2471896, 0.8174991; -3.774899, -2.4495144, 0.9446898; -3.9404457, -3.4449663, 1.0655757; -3.2168474, -2.5616224, 1.4135101\",\n  \"0.0, 0.0, 0.0; 1.4338441, -1.8384076, 1.0167338; 2.8455954, -8.941242, 1.8066328; 3.8158097, -15.544106, -1.9180808; 4.357107, -17.465857, -0.24575078; 4.388017, -17.056383, 0.9548383; -1.5230803, -1.7456051, 0.97299594; -0.867223, -8.893836, 1.7314745; -0.37019306, -16.058203, -1.199551; -1.1144738, -17.243294, 1.0159587; -1.4938946, -17.518084, 2.2054753; -0.34037223, 2.4758375, -0.11484498; -0.9289571, 4.919572, 0.03365442; -1.5609758, 7.3670683, 0.35444015; -1.7025603, 8.901052, 0.7600876; -1.5104138, 10.469326, 0.6156135; -1.7308183, 12.0757065, 0.42367065; 1.4188123, 9.601414, -1.6755552; 5.2180767, 9.9964, -4.8398657; 8.422558, 10.568346, -5.6235166; 10.024225, 10.852154, -6.0192757; 10.325151, 11.691234, -6.7660675; 10.66264, 12.303853, -7.39041; 10.981131, 11.561135, -6.6432624; -5.401577, 6.9223576, 1.8233743; -6.5692663, 2.3771563, 0.29416108; -4.487959, -0.054534674, 0.6343952; -3.4473062, -1.2703787, 0.8045114; -3.8020248, -2.471849, 0.94521046; -3.9656699, -3.4662852, 1.0765895; -3.241351, -2.578742, 1.4121163\",\n  \"0.0, 0.0, 0.0; 1.4337766, -1.8376712, 1.0181589; 2.8376873, -8.94081, 1.8192189; 3.8156085, -15.55104, -1.8903818; 4.351629, -17.46355, -0.20580423; 4.3837967, -17.06999, 1.0000621; -1.5231439, -1.7447884, 0.97435987; -0.86277205, -8.893784, 1.7216372; -0.36944455, -16.06027, -1.2048299; -1.1338105, -17.23904, 1.0072098; -1.5226065, -17.511864, 2.1941488; -0.3356164, 2.4761117, -0.1226661; -0.92556703, 4.9200115, 0.017462693; -1.56931, 7.3652344, 0.33221653; -1.7119681, 8.898989, 0.7383578; -1.5150723, 10.467208, 0.5998077; -1.7315494, 12.074451, 0.41064054; 1.4324915, 9.610886, -1.6523613; 5.243787, 10.364749, -4.7360277; 8.41262, 11.204698, -5.416403; 9.996742, 11.622553, -5.7605915; 10.249878, 12.505635, -6.473611; 10.5548935, 13.16295, -7.0685115; 10.909738, 12.430099, -6.328031; -5.429119, 6.907399, 1.745726; -6.600251, 2.3483124, 0.2611302; -4.521295, -0.08360052, 0.61392236; -3.481818, -1.299555, 0.7903189; -3.8347893, -2.4998174, 0.9450232; -3.996956, -3.492938, 1.0876998; -3.2729404, -2.6009157, 1.4118084\",\n  \"0.0, 0.0, 0.0; 1.4336205, -1.837308, 1.0190344; 2.8307815, -8.940976, 1.8271747; 3.811683, -15.560585, -1.8648713; 4.3417625, -17.462406, -0.16636789; 4.3748174, -17.080412, 1.0431883; -1.5232927, -1.7441906, 0.9751975; -0.8592403, -8.893842, 1.7128723; -0.370586, -16.063036, -1.2077425; -1.152262, -17.234814, 1.0019624; -1.5489943, -17.510029, 2.1857188; -0.3304487, 2.4765286, -0.12815487; -0.9208369, 4.920671, 0.005756259; -1.5750921, 7.3637342, 0.3155689; -1.718117, 8.898111, 0.7192204; -1.516273, 10.46614, 0.58572716; -1.7288828, 12.074224, 0.3993478; 1.4506681, 9.620413, -1.6195011; 5.244706, 10.727384, -4.6166964; 8.352513, 11.829612, -5.19683; 9.906384, 12.378726, -5.4908886; 10.110613, 13.302411, -6.167207; 10.380804, 14.001261, -6.730776; 10.769515, 13.27408, -6.0017977; -5.454512, 6.893952, 1.6702478; -6.6255274, 2.3215332, 0.22714138; -4.551098, -0.11201143, 0.5950007; -3.5138845, -1.3287828, 0.77893007; -3.8657115, -2.5276678, 0.94639707; -4.0269303, -3.5193696, 1.0996274; -3.303757, -2.6232634, 1.4142108\",\n  \"0.0, 0.0, 0.0; 1.4330401, -1.8375418, 1.019429; 2.8241482, -8.94221, 1.8292156; 3.8014004, -15.5722475, -1.845044; 4.3267875, -17.463331, -0.13314795; 4.3611107, -17.087805, 1.0783966; -1.5238436, -1.743498, 0.97557527; -0.8582467, -8.893764, 1.7058636; -0.3731506, -16.065912, -1.208083; -1.17095, -17.232199, 0.9987625; -1.5752157, -17.505892, 2.1803212; -0.32558814, 2.476965, -0.1321025; -0.9160297, 4.921374, -0.0033893883; -1.5791874, 7.3626585, 0.30147523; -1.7201955, 8.897996, 0.7021763; -1.5127892, 10.465687, 0.57331896; -1.7216287, 12.074553, 0.3894332; 1.470113, 9.628465, -1.5853751; 5.204792, 11.103842, -4.497199; 8.237065, 12.443679, -4.9663277; 9.753391, 13.111748, -5.204977; 9.9071865, 14.071575, -5.8432455; 10.140034, 14.807662, -6.375188; 10.562725, 14.082725, -5.663083; -5.4769382, 6.883294, 1.5989726; -6.6447735, 2.2989988, 0.19140506; -4.5776844, -0.13799334, 0.5773212; -3.5441413, -1.3564882, 0.77027845; -3.8952231, -2.5539527, 0.94908905; -4.055818, -3.5442715, 1.1116364; -3.3329797, -2.6448777, 1.4174867\",\n  \"0.0, 0.0, 0.0; 1.4321781, -1.8378135, 1.0201498; 2.8189626, -8.943827, 1.8255413; 3.782993, -15.585475, -1.8311989; 4.3052373, -17.465229, -0.105915666; 4.3410997, -17.087858, 1.1050113; -1.5246603, -1.7423975, 0.9762647; -0.86043495, -8.893184, 1.7026997; -0.3779242, -16.068607, -1.2035997; -1.1893209, -17.23006, 1.0008352; -1.5999672, -17.503279, 2.1803017; -0.32088858, 2.4774492, -0.13450345; -0.9110805, 4.9220753, -0.008811563; -1.5821464, 7.3615947, 0.29286164; -1.7204614, 8.898337, 0.6890876; -1.506714, 10.465484, 0.5640268; -1.7109333, 12.075204, 0.38244355; 1.4914427, 9.636783, -1.5425906; 5.1277, 11.487722, -4.3630414; 8.073278, 13.040994, -4.7106647; 9.546451, 13.815955, -4.8887444; 9.646549, 14.806802, -5.4891706; 9.838547, 15.575626, -5.9902196; 10.297484, 14.853222, -5.2982626; -5.497939, 6.8732767, 1.531353; -6.6605253, 2.2773957, 0.1576277; -4.601349, -0.16362023, 0.5600618; -3.5717626, -1.3841274, 0.7612785; -3.9220996, -2.5803442, 0.949645; -4.0820303, -3.5695176, 1.1196511; -3.358245, -2.6679509, 1.4167387\",\n  \"0.0, 0.0, 0.0; 1.4316204, -1.8382816, 1.0200895; 2.815763, -8.945842, 1.8163233; 3.7623692, -15.600126, -1.8219504; 4.282873, -17.469213, -0.08459365; 4.320023, -17.083443, 1.1236446; -1.5251912, -1.7419654, 0.97620726; -0.8621115, -8.893108, 1.7001734; -0.38130203, -16.071054, -1.2001784; -1.2037235, -17.230228, 1.001369; -1.6196615, -17.499342, 2.1799245; -0.31454265, 2.4781303, -0.13692145; -0.9029232, 4.923308, -0.013479076; -1.5814394, 7.3608904, 0.28718343; -1.7159219, 8.899602, 0.67703557; -1.4955472, 10.466059, 0.5548705; -1.6952126, 12.076609, 0.37559047; 1.5157675, 9.6465025, -1.4948382; 5.022823, 11.867529, -4.2097754; 7.8713017, 13.613522, -4.427954; 9.296099, 14.485052, -4.5415297; 9.340439, 15.501324, -5.105032; 9.489207, 16.298025, -5.5763493; 9.98602, 15.5797825, -4.9065723; -5.5143046, 6.8632803, 1.4664663; -6.6709404, 2.2562256, 0.12553799; -4.6206503, -0.18962407, 0.5436864; -3.5955071, -1.4125482, 0.7527596; -3.9463353, -2.607692, 0.94693315; -4.1065855, -3.5961175, 1.1209397; -3.3797326, -2.6946683, 1.4108074\",\n  \"0.0, 0.0, 0.0; 1.4314791, -1.8384169, 1.0200438; 2.8129716, -8.947709, 1.805346; 3.744733, -15.615622, -1.8117476; 4.2638626, -17.473635, -0.06214392; 4.302647, -17.08193, 1.1441319; -1.5253235, -1.7418737, 0.9761637; -0.8652934, -8.893312, 1.6999918; -0.38706705, -16.073872, -1.1943144; -1.2185913, -17.229614, 1.0056177; -1.6387682, -17.499495, 2.1824927; -0.30750033, 2.4789488, -0.13809657; -0.89377975, 4.9247026, -0.016079329; -1.5806245, 7.360118, 0.2832334; -1.709601, 8.900732, 0.66739327; -1.482022, 10.466365, 0.54791254; -1.6772751, 12.077616, 0.3700797; 1.5395948, 9.657033, -1.443245; 4.8931093, 12.237143, -4.031731; 7.636668, 14.154612, -4.1099734; 9.009173, 15.112118, -4.1538324; 8.995728, 16.148685, -4.6807623; 9.0991745, 16.969198, -5.1224194; 9.634122, 16.258635, -4.474171; -5.530105, 6.8521495, 1.4009639; -6.678189, 2.2345643, 0.08922541; -4.63723, -0.21622658, 0.5237749; -3.6167512, -1.4416198, 0.74105054; -3.9682786, -2.636088, 0.9380959; -4.128992, -3.624226, 1.1133027; -3.3976853, -2.7243562, 1.396805\",\n  \"0.0, 0.0, 0.0; 1.4308054, -1.8389348, 1.0200558; 2.8107243, -8.949951, 1.7923982; 3.7283046, -15.632583, -1.8010786; 4.246364, -17.480425, -0.040421724; 4.287931, -17.087841, 1.1654755; -1.5259615, -1.7413086, 0.976175; -0.871046, -8.892959, 1.7025509; -0.3926374, -16.075827, -1.1859868; -1.2325401, -17.229355, 1.0119236; -1.6567794, -17.496586, 2.1879458; -0.30121067, 2.4797883, -0.13688141; -0.8851063, 4.926076, -0.014138021; -1.5781808, 7.359824, 0.28437218; -1.7015918, 8.902704, 0.6611936; -1.466582, 10.467393, 0.54374635; -1.6568372, 12.079406, 0.3674094; 1.5658026, 9.665644, -1.3862213; 4.752674, 12.582124, -3.8236957; 7.3827868, 14.652816, -3.7553732; 8.69873, 15.6872015, -3.726178; 8.62723, 16.738794, -4.2174516; 8.684682, 17.578812, -4.62985; 9.256501, 16.879162, -4.0015125; -5.543565, 6.844745, 1.3408643; -6.6830764, 2.2181687, 0.053560853; -4.6516075, -0.23775554, 0.50332785; -3.635874, -1.4657161, 0.7282111; -3.9893568, -2.6596363, 0.92508; -4.1515646, -3.6478057, 1.0987278; -3.4141366, -2.7513916, 1.3772786\",\n  \"0.0, 0.0, 0.0; 1.4299634, -1.8397783, 1.0197153; 2.8077483, -8.952615, 1.779001; 3.7117424, -15.65128, -1.7879689; 4.2290235, -17.489212, -0.016741157; 4.2728934, -17.093224, 1.187961; -1.5267586, -1.7407925, 0.9758494; -0.8774985, -8.892387, 1.7078265; -0.39809334, -16.077581, -1.1747535; -1.2459071, -17.229582, 1.0209199; -1.6740367, -17.495497, 2.1958299; -0.29507202, 2.4806955, -0.13377807; -0.87687814, 4.9273763, -0.008966662; -1.5764474, 7.3593674, 0.28871405; -1.692587, 8.904585, 0.6581994; -1.4500052, 10.468225, 0.5421791; -1.6358837, 12.080813, 0.36644214; 1.5900251, 9.674291, -1.3258744; 4.6042805, 12.897384, -3.590652; 7.1110373, 15.105842, -3.3697155; 8.365463, 16.209396, -3.2643826; 8.2357645, 17.270943, -3.7211185; 8.246702, 18.126387, -4.1046553; 8.853571, 17.440996, -3.4937162; -5.556659, 6.8369083, 1.284054; -6.685914, 2.2023153, 0.016703844; -4.6645904, -0.25916862, 0.48153567; -3.653928, -1.4899075, 0.7139515; -4.0101566, -2.6834266, 0.90828514; -4.174538, -3.6718287, 1.0785314; -3.4308178, -2.7797432, 1.3542353\",\n  \"0.0, 0.0, 0.0; 1.4287841, -1.8408977, 1.0193479; 2.804687, -8.955739, 1.7631066; 3.6960607, -15.670094, -1.7774441; 4.212839, -17.497725, 0.0045562983; 4.259494, -17.100819, 1.2088518; -1.5278732, -1.7400112, 0.9754974; -0.885132, -8.891314, 1.7160418; -0.40440324, -16.078676, -1.1609063; -1.2583336, -17.230825, 1.0323176; -1.6895696, -17.495506, 2.20637; -0.28898987, 2.481613, -0.1299854; -0.86844504, 4.928677, -0.0018008202; -1.5736532, 7.358945, 0.29664654; -1.6820195, 8.906583, 0.6582791; -1.4318833, 10.46908, 0.5429147; -1.6134796, 12.082173, 0.36732715; 1.6152537, 9.68276, -1.2599757; 4.452182, 13.179138, -3.3409526; 6.8244696, 15.511732, -2.9652116; 8.011811, 16.677654, -2.7825708; 7.82404, 17.74451, -3.2054973; 7.788133, 18.611584, -3.5603216; 8.428182, 17.943, -2.9648116; -5.5679502, 6.8300595, 1.2302548; -6.687052, 2.1882634, -0.019619465; -4.674267, -0.27756858, 0.45901275; -3.6678755, -1.510483, 0.69832957; -4.0275397, -2.7035408, 0.88913804; -4.1947045, -3.6921272, 1.0555601; -3.4455264, -2.8044074, 1.3305774\",\n  \"0.0, 0.0, 0.0; 1.427827, -1.8418442, 1.018979; 2.8026252, -8.958458, 1.7476699; 3.6829908, -15.688401, -1.7659357; 4.198982, -17.505096, 0.027438164; 4.247721, -17.10565, 1.2308106; -1.5287766, -1.7394156, 0.97514474; -0.8921235, -8.890013, 1.7276587; -0.40769008, -16.079626, -1.1430354; -1.2680826, -17.234303, 1.04633; -1.7028, -17.498137, 2.2192888; -0.28304136, 2.482583, -0.12443551; -0.859193, 4.9301596, 0.008762054; -1.5680592, 7.359202, 0.30851635; -1.6655462, 8.909031, 0.66380715; -1.4097781, 10.470579, 0.5479403; -1.5909711, 12.083509, 0.37044784; 1.643827, 9.689394, -1.1902534; 4.3059483, 13.426565, -3.0743828; 6.531398, 15.8709545, -2.543097; 7.6454554, 17.093073, -2.282683; 7.3990884, 18.160423, -2.6730382; 7.3154645, 19.035156, -2.9999208; 7.9877834, 18.386152, -2.4184775; -5.575694, 6.827165, 1.1811836; -6.683839, 2.1792545, -0.055662155; -4.678794, -0.29029822, 0.4360933; -3.6762733, -1.5250736, 0.68197155; -4.039777, -2.7177038, 0.86811924; -4.210099, -3.7064583, 1.0302876; -3.456831, -2.822838, 1.3073275\",\n  \"0.0, 0.0, 0.0; 1.4271479, -1.842928, 1.0179704; 2.8003707, -8.961332, 1.7319947; 3.6728714, -15.70698, -1.7533423; 4.1869864, -17.513685, 0.050631285; 4.2366095, -17.110357, 1.2526722; -1.5294206, -1.7393904, 0.97417986; -0.89779204, -8.8888855, 1.7412608; -0.4094617, -16.080194, -1.1245239; -1.2762227, -17.237514, 1.060931; -1.7143883, -17.49745, 2.233477; -0.27596042, 2.4836767, -0.11836876; -0.8481524, 4.931924, 0.019495666; -1.5613893, 7.359665, 0.31942636; -1.649555, 8.91129, 0.66927046; -1.3879186, 10.471816, 0.552734; -1.5677166, 12.08458, 0.37234545; 1.6736327, 9.696262, -1.1183712; 4.1640773, 13.646008, -2.7918346; 6.232416, 16.187283, -2.1034832; 7.268044, 17.45813, -1.7644651; 6.9635634, 18.5214, -2.1237116; 6.8321786, 19.399965, -2.4234872; 7.5348625, 18.772839, -1.8540628; -5.5821657, 6.824224, 1.1271453; -6.6789193, 2.1720119, -0.10366762; -4.680843, -0.30036116, 0.4020803; -3.681806, -1.5365463, 0.65495443; -4.0493712, -2.7285943, 0.8368059; -4.2230916, -3.7172616, 0.99587226; -3.4682736, -2.8365092, 1.2777836\",\n  \"0.0, 0.0, 0.0; 1.4257194, -1.8444084, 1.0172907; 2.7978287, -8.964448, 1.7170041; 3.6650457, -15.7253275, -1.7400231; 4.176969, -17.522038, 0.07452595; 4.226783, -17.114096, 1.2750009; -1.5307671, -1.73857, 0.97352874; -0.90338755, -8.886632, 1.7572713; -0.4083582, -16.079174, -1.1042652; -1.2826861, -17.240559, 1.0760124; -1.7250597, -17.493256, 2.2485604; -0.267295, 2.4849339, -0.1116776; -0.83485603, 4.9339266, 0.031957135; -1.5531014, 7.360044, 0.3330698; -1.6320103, 8.913591, 0.6765369; -1.3649278, 10.473094, 0.5586639; -1.5439328, 12.08557, 0.37493533; 1.7040914, 9.704229, -1.0409052; 4.0313625, 13.838098, -2.4894314; 5.932109, 16.46191, -1.645216; 6.884035, 17.774302, -1.2281086; 6.521153, 18.828707, -1.5580395; 6.3413267, 19.707067, -1.83217; 7.0739527, 19.104528, -1.2740469; -5.5861583, 6.8202214, 1.0738778; -6.671847, 2.1652298, -0.15623832; -4.6798086, -0.30933475, 0.36244518; -3.6837897, -1.5466145, 0.6217874; -4.054835, -2.7382812, 0.79901147; -4.2315054, -3.726881, 0.9552218; -3.4772515, -2.8479252, 1.2441623\",\n  \"0.0, 0.0, 0.0; 1.4250386, -1.8454922, 1.016279; 2.7956853, -8.967191, 1.7018361; 3.66017, -15.74283, -1.726862; 4.1693935, -17.529646, 0.098186135; 4.2186446, -17.116405, 1.2968712; -1.5314089, -1.7385466, 0.9725609; -0.9075835, -8.884916, 1.7743664; -0.4060793, -16.07863, -1.0830953; -1.2869318, -17.242062, 1.093462; -1.7328863, -17.491295, 2.2653947; -0.2576202, 2.4862502, -0.10490891; -0.8190614, 4.9363346, 0.04406619; -1.5414479, 7.3611784, 0.3455345; -1.6125993, 8.915997, 0.6849178; -1.3411022, 10.474629, 0.56563777; -1.5199072, 12.086572, 0.3770971; 1.7387445, 9.711011, -0.962495; 3.9071, 14.003851, -2.176187; 5.6339803, 16.690975, -1.1726074; 6.4990606, 18.035276, -0.67561185; 6.079374, 19.076618, -0.97856474; 5.8520007, 19.951168, -1.2285019; 6.6116214, 19.375053, -0.67862475; -5.5863714, 6.819185, 1.0167933; -6.660776, 2.1620874, -0.21525693; -4.6753297, -0.31460333, 0.31834078; -3.6826072, -1.5529464, 0.58513975; -4.0572486, -2.744224, 0.7573434; -4.237012, -3.732694, 0.9108239; -3.4847274, -2.8550344, 1.2087002\",\n  \"0.0, 0.0, 0.0; 1.4243044, -1.8464764, 1.0155197; 2.793354, -8.969769, 1.6875768; 3.6602895, -15.759514, -1.7124798; 4.165702, -17.535707, 0.12396097; 4.2130184, -17.116417, 1.320621; -1.5321003, -1.7383431, 0.971835; -0.90962565, -8.882627, 1.7930361; -0.39946002, -16.077091, -1.0609988; -1.2880858, -17.245548, 1.1096984; -1.7384633, -17.488174, 2.2813263; -0.24657452, 2.4876559, -0.09789454; -0.80067474, 4.939054, 0.056839652; -1.5268829, 7.362683, 0.3588939; -1.5922786, 8.918581, 0.69446766; -1.3169364, 10.476326, 0.5724408; -1.4952813, 12.087512, 0.3771212; 1.7762117, 9.717517, -0.8807181; 3.790627, 14.144346, -1.8546786; 5.3383613, 16.873068, -0.68484056; 6.1139565, 18.238405, -0.10448146; 5.6414466, 19.263815, -0.38301036; 5.3693995, 20.131887, -0.6098221; 6.149996, 19.581774, -0.06270158; -5.5828915, 6.8194923, 0.9584676; -6.645775, 2.161263, -0.27928078; -4.6679654, -0.31744123, 0.27300012; -3.6790612, -1.5567914, 0.54913974; -4.0560637, -2.7480679, 0.7161206; -4.237934, -3.73656, 0.86695147; -3.4894135, -2.8591123, 1.1747686\",\n  \"0.0, 0.0, 0.0; 1.4227912, -1.8482046, 1.0144968; 2.7906685, -8.973005, 1.6728156; 3.6620708, -15.776587, -1.6983175; 4.164201, -17.542646, 0.14876604; 4.209791, -17.118893, 1.3439198; -1.5335227, -1.7376366, 0.9708548; -0.91223484, -8.879634, 1.8125875; -0.39304918, -16.075027, -1.0374794; -1.2881132, -17.24849, 1.1278658; -1.7422962, -17.48519, 2.2992368; -0.2356545, 2.489011, -0.09002583; -0.78268766, 4.9416404, 0.07024622; -1.5124938, 7.3643193, 0.37124604; -1.5734999, 8.92096, 0.704188; -1.2951514, 10.477936, 0.57918984; -1.473403, 12.088195, 0.37628865; 1.8121133, 9.722717, -0.8023221; 3.6777754, 14.261089, -1.5274171; 5.040257, 17.007608, -0.18198025; 5.72333, 18.382072, 0.48642832; 5.204628, 19.390545, 0.22905442; 4.892966, 20.250723, 0.024201006; 5.6854854, 19.723036, 0.576247; -5.5782356, 6.8209414, 0.90061426; -6.626552, 2.1618137, -0.34614384; -4.658868, -0.3196864, 0.22926354; -3.6750267, -1.5604352, 0.5169664; -4.0535655, -2.7520623, 0.6778568; -4.2369046, -3.740756, 0.8255579; -3.49364, -2.8629007, 1.1447388\",\n  \"0.0, 0.0, 0.0; 1.4222777, -1.849156, 1.0134825; 2.7905354, -8.975084, 1.6586709; 3.6678624, -15.792947, -1.6819355; 4.165446, -17.549122, 0.17577255; 4.2088075, -17.12166, 1.3696887; -1.5340067, -1.737751, 0.9698843; -0.91410047, -8.877447, 1.8319104; -0.38224941, -16.073587, -1.0139322; -1.2854297, -17.253693, 1.1444213; -1.7444782, -17.48188, 2.3155851; -0.22285748, 2.4904242, -0.08327911; -0.76081896, 4.9446716, 0.08282038; -1.4938072, 7.366229, 0.3851089; -1.5525888, 8.923829, 0.7139416; -1.2722574, 10.480186, 0.58571714; -1.450679, 12.0894985, 0.37557715; 1.8519262, 9.728405, -0.718751; 3.579472, 14.354828, -1.182519; 4.7484236, 17.094006, 0.34731197; 5.334857, 18.465015, 1.1081942; 4.7786036, 19.457743, 0.8686453; 4.434001, 20.310074, 0.68483734; 5.2271605, 19.797653, 1.2501862; -5.568324, 6.823295, 0.84258664; -6.6020527, 2.1638656, -0.4151783; -4.644969, -0.32029963, 0.18437839; -3.6664293, -1.5623817, 0.48415542; -4.0461526, -2.7545755, 0.63789743; -4.2306795, -3.743659, 0.7814479; -3.4925432, -2.865751, 1.1121765\",\n  \"0.0, 0.0, 0.0; 1.4214615, -1.8501588, 1.0127974; 2.789516, -8.977422, 1.6435096; 3.6771753, -15.808382, -1.6674769; 4.170669, -17.55424, 0.20101535; 4.21149, -17.124182, 1.3940883; -1.5347729, -1.7374403, 0.96922904; -0.9146263, -8.874849, 1.8498285; -0.3710757, -16.071678, -0.9920573; -1.2807119, -17.257343, 1.1605303; -1.7437311, -17.477749, 2.3316212; -0.20801066, 2.4919198, -0.0766954; -0.73567784, 4.9480286, 0.09482294; -1.4725242, 7.368367, 0.39749554; -1.5303195, 8.926972, 0.7217096; -1.248907, 10.482878, 0.5904062; -1.4282266, 12.091136, 0.37308568; 1.8943555, 9.734314, -0.6314534; 3.4904716, 14.426971, -0.81764954; 4.458622, 17.131252, 0.90266436; 4.944818, 18.485031, 1.7590568; 4.3617315, 19.465609, 1.5336996; 3.992429, 20.31171, 1.3702056; 4.7717514, 19.80341, 1.958069; -5.5550756, 6.8258643, 0.7772538; -6.5738854, 2.1663537, -0.4923268; -4.628268, -0.3203671, 0.13338244; -3.6554604, -1.5637264, 0.44623673; -4.035213, -2.7569764, 0.59147835; -4.219962, -3.7468026, 0.72951925; -3.4870868, -2.8689523, 1.071896\",\n  \"0.0, 0.0, 0.0; 1.4202275, -1.8514377, 1.0121912; 2.7886705, -8.979996, 1.6272357; 3.69103, -15.823105, -1.6545644; 4.179831, -17.558952, 0.22445834; 4.2171693, -17.12629, 1.4167032; -1.5359328, -1.7367389, 0.96864825; -0.91419566, -8.871662, 1.8680713; -0.35798645, -16.069492, -0.9688251; -1.2737134, -17.260714, 1.1781049; -1.7406011, -17.474434, 2.348899; -0.1916331, 2.493417, -0.07044542; -0.7073354, 4.951672, 0.10662973; -1.446784, 7.3710785, 0.41040367; -1.5063969, 8.930656, 0.7295693; -1.2254534, 10.486362, 0.59494585; -1.4061997, 12.093488, 0.37054536; 1.9412756, 9.738876, -0.54191214; 3.4096045, 14.4754095, -0.42989457; 4.1716223, 17.118391, 1.4790072; 4.554962, 18.441751, 2.4299438; 3.9563012, 19.415379, 2.215554; 3.5706947, 20.257809, 2.0719416; 4.3201017, 19.739878, 2.6895435; -5.536278, 6.831548, 0.7115651; -6.5443583, 2.1724653, -0.5681091; -4.608565, -0.3153751, 0.08309978; -3.6406693, -1.5592942, 0.40870336; -4.020258, -2.7535696, 0.54571116; -4.205095, -3.7440987, 0.67849267; -3.4777937, -2.8661726, 1.0323678\",\n  \"0.0, 0.0, 0.0; 1.4198831, -1.8521357, 1.0113968; 2.786739, -8.982159, 1.6128324; 3.7075706, -15.837148, -1.6389049; 4.190172, -17.562773, 0.251104; 4.223124, -17.128546, 1.4429092; -1.5362552, -1.7368773, 0.9678888; -0.91371024, -8.869376, 1.8857898; -0.34194732, -16.068657, -0.9443251; -1.2645938, -17.267313, 1.1954936; -1.7360343, -17.47324, 2.36586; -0.17421524, 2.494869, -0.06397057; -0.6765374, 4.9555216, 0.11819974; -1.4181116, 7.3742976, 0.42181435; -1.4818704, 8.934607, 0.73657835; -1.2018871, 10.490207, 0.5987628; -1.3835361, 12.096135, 0.36664963; 1.9913116, 9.742165, -0.45074245; 3.3428895, 14.494877, -0.016867429; 3.8858023, 17.052162, 2.0748935; 4.1598425, 18.332895, 3.117553; 3.5558212, 19.305027, 2.9115736; 3.1610155, 20.14631, 2.787584; 3.864043, 19.604597, 3.4384253; -5.5134783, 6.839604, 0.64051276; -6.5114555, 2.1808195, -0.6481381; -4.5866566, -0.3082888, 0.030248582; -3.624258, -1.5528412, 0.3694416; -4.0035787, -2.748221, 0.4972527; -4.188412, -3.7395613, 0.62384105; -3.466355, -2.8620925, 0.98939645\",\n  \"0.0, 0.0, 0.0; 1.4193394, -1.8529212, 1.010721; 2.7847228, -8.9843, 1.5992936; 3.7220373, -15.851567, -1.6216806; 4.1992702, -17.566637, 0.27926707; 4.2275295, -17.126318, 1.4689555; -1.5367646, -1.7367873, 0.96724176; -0.91529924, -8.866883, 1.9043419; -0.32721025, -16.06786, -0.918102; -1.2558589, -17.273798, 1.2150178; -1.7314844, -17.472872, 2.3848767; -0.15672547, 2.4961827, -0.057654615; -0.6448157, 4.9592733, 0.13016391; -1.3867657, 7.3777914, 0.43491092; -1.4554207, 8.938956, 0.7443534; -1.1772268, 10.494523, 0.60260004; -1.3602674, 12.09913, 0.36257836; 2.0438428, 9.743247, -0.35746458; 3.3122625, 14.472922, 0.43282875; 3.612032, 16.929514, 2.6878731; 3.764737, 18.160023, 3.812614; 3.1640851, 19.135841, 3.6143637; 2.765442, 19.978075, 3.510781; 3.4055293, 19.398495, 4.1931825; -5.4867163, 6.8511653, 0.57210207; -6.478237, 2.1929555, -0.7235887; -4.5623775, -0.295928, -0.01955688; -3.6044486, -1.5403683, 0.33245772; -3.9836025, -2.736661, 0.4519503; -4.1685343, -3.7286649, 0.57307917; -3.4517317, -2.8515427, 0.94964206\",\n  \"0.0, 0.0, 0.0; 1.4179661, -1.854103, 1.0104818; 2.7836256, -8.986223, 1.5893443; 3.7364547, -15.866109, -1.5999954; 4.2090464, -17.571468, 0.31082177; 4.2331862, -17.12578, 1.4986002; -1.5380515, -1.7357752, 0.9670127; -0.91849506, -8.863407, 1.9239111; -0.31256735, -16.06609, -0.89039636; -1.2457684, -17.278234, 1.2372115; -1.7249209, -17.470158, 2.406826; -0.13980377, 2.4973395, -0.050643608; -0.6142012, 4.9626017, 0.14365478; -1.3561432, 7.3809443, 0.44981146; -1.4301159, 8.943118, 0.75287044; -1.1540197, 10.498659, 0.60679924; -1.3385197, 12.101927, 0.35906738; 2.0939758, 9.7430525, -0.263938; 3.3040843, 14.405024, 0.9213676; 3.3438303, 16.746851, 3.3138957; 3.3666925, 17.919985, 4.5079427; 2.7759814, 18.903557, 4.3183255; 2.3770428, 19.747978, 4.235833; 2.9421835, 19.11991, 4.941129; -5.4591274, 6.863328, 0.50766766; -6.4483953, 2.205955, -0.79274476; -4.5403857, -0.2821412, -0.06501031; -3.5863822, -1.5261875, 0.2988568; -3.965509, -2.7232184, 0.4108029; -4.1507144, -3.71572, 0.5273491; -3.4399743, -2.838532, 0.9150841\",\n  \"0.0, 0.0, 0.0; 1.4178939, -1.8544086, 1.0100222; 2.783874, -8.986934, 1.583116; 3.7510347, -15.879969, -1.5733478; 4.2197857, -17.576262, 0.3464651; 4.240809, -17.127644, 1.5331998; -1.5381179, -1.7359617, 0.9665726; -0.9238445, -8.860939, 1.9463726; -0.2972529, -16.065783, -0.8578588; -1.2359302, -17.286255, 1.2625679; -1.7193997, -17.471539, 2.431476; -0.123107396, 2.4983668, -0.042683635; -0.58307046, 4.9658017, 0.1586183; -1.3242114, 7.3842583, 0.46581566; -1.4044474, 8.947403, 0.7622011; -1.130556, 10.502907, 0.6116437; -1.316097, 12.104795, 0.3558973; 2.1454587, 9.741023, -0.16613692; 3.3036025, 14.287434, 1.4438727; 3.0815613, 16.500803, 3.9461963; 2.9735649, 17.609598, 5.1957655; 2.3977008, 18.60395, 5.017013; 2.001708, 19.451532, 4.9553914; 2.489979, 18.771208, 5.6695666; -5.428939, 6.877943, 0.441175; -6.4189124, 2.2214122, -0.8617145; -4.5179815, -0.26518703, -0.11070979; -3.5675182, -1.5084857, 0.264792; -3.9468584, -2.7061286, 0.36921754; -4.1325674, -3.699057, 0.48123837; -3.427939, -2.8219647, 0.88018286\",\n  \"0.0, 0.0, 0.0; 1.4172921, -1.855199, 1.009415; 2.7865367, -8.987411, 1.5786055; 3.7631798, -15.893625, -1.5459691; 4.2288322, -17.58235, 0.38125598; 4.248201, -17.133194, 1.5678152; -1.5386826, -1.7357842, 0.96599233; -0.93412846, -8.858356, 1.969046; -0.28345412, -16.064802, -0.8255676; -1.2257301, -17.292076, 1.2893294; -1.7127204, -17.472965, 2.4574645; -0.108, 2.4991813, -0.035261337; -0.55449104, 4.9685197, 0.17291364; -1.2938008, 7.387309, 0.48189935; -1.3803618, 8.951555, 0.7705971; -1.1089181, 10.506987, 0.61495036; -1.2955661, 12.107459, 0.35126635; 2.1938891, 9.737118, -0.07193121; 3.2856493, 14.122517, 1.9724807; 2.821638, 16.193918, 4.5616736; 2.5925753, 17.231554, 5.855256; 2.0331368, 18.238235, 5.694233; 1.6415224, 19.089249, 5.656565; 2.0584676, 18.355906, 6.3634315; -5.398909, 6.8940163, 0.37943274; -6.3895426, 2.2385383, -0.92671174; -4.4960175, -0.24675417, -0.15301603; -3.5492563, -1.489399, 0.23383164; -3.9287846, -2.687604, 0.3308659; -4.115022, -3.6809106, 0.43857548; -3.417014, -2.8037813, 0.8489139\",\n  \"0.0, 0.0, 0.0; 1.4164643, -1.8562317, 1.0086783; 2.790853, -8.987599, 1.5760388; 3.7754729, -15.90694, -1.5168288; 4.2387395, -17.588924, 0.4168558; 4.2566786, -17.13814, 1.6028197; -1.5394558, -1.7354908, 0.9652867; -0.94580877, -8.855382, 1.9935732; -0.2691834, -16.063366, -0.79089427; -1.2149993, -17.299137, 1.3174648; -1.7057394, -17.472713, 2.4851396; -0.093818724, 2.4998574, -0.02693536; -0.5264354, 4.9710484, 0.18842691; -1.2614255, 7.391017, 0.4984832; -1.3545624, 8.95618, 0.780079; -1.0857775, 10.511536, 0.61915326; -1.2733593, 12.110481, 0.3470043; 2.2448282, 9.729699, 0.019875288; 3.2413251, 13.921304, 2.4776652; 2.572155, 15.832566, 5.143976; 2.2403867, 16.789974, 6.476573; 1.6965122, 17.809032, 6.3422966; 1.3101532, 18.663225, 6.3330107; 1.6698892, 17.880445, 7.0179496; -5.3660245, 6.915115, 0.32089055; -6.354444, 2.2606258, -0.99044585; -4.470107, -0.2242794, -0.1934269; -3.52794, -1.4667314, 0.20508096; -3.908276, -2.6652267, 0.29511446; -4.0955734, -3.6587617, 0.39880472; -3.4037056, -2.7819433, 0.82006115\",\n  \"0.0, 0.0, 0.0; 1.4157112, -1.8577365, 1.0069638; 2.7957988, -8.98796, 1.5748796; 3.7866135, -15.920353, -1.4866271; 4.247301, -17.596111, 0.45306933; 4.2637444, -17.142555, 1.6379974; -1.54016, -1.7357775, 0.96364677; -0.95947766, -8.852971, 2.0176928; -0.2545246, -16.062212, -0.756475; -1.2038662, -17.306171, 1.3454742; -1.6985161, -17.47452, 2.5122647; -0.08150907, 2.500361, -0.019131854; -0.5010207, 4.9731965, 0.20316982; -1.230232, 7.3946342, 0.5153895; -1.3276151, 8.960947, 0.78904426; -1.0615028, 10.516147, 0.62227225; -1.2509633, 12.1133795, 0.3415051; 2.2939577, 9.720019, 0.10920569; 3.1701305, 13.6894, 2.951673; 2.3324726, 15.424965, 5.6895685; 1.916307, 16.294386, 7.0583; 1.3842309, 17.323814, 6.960926; 1.002078, 18.17958, 6.9859424; 1.3213837, 17.35194, 7.6373663; -5.3333883, 6.938591, 0.2666328; -6.3166723, 2.2849298, -1.0514864; -4.445223, -0.20138216, -0.2288996; -3.5094981, -1.4445359, 0.18239379; -3.8903403, -2.6434026, 0.26503822; -4.0784926, -3.6372132, 0.36445075; -3.3933492, -2.760638, 0.7970513\",\n  \"0.0, 0.0, 0.0; 1.4150783, -1.858396, 1.0066363; 2.8016152, -8.987366, 1.5745878; 3.7960234, -15.9316635, -1.4586403; 4.254737, -17.602194, 0.4860258; 4.27032, -17.146439, 1.6701216; -1.5407537, -1.7354248, 0.963333; -0.97414255, -8.850172, 2.0412762; -0.24308467, -16.060324, -0.7237513; -1.1937629, -17.308802, 1.3749118; -1.6909049, -17.47581, 2.5408354; -0.07052847, 2.5007424, -0.011319971; -0.47701243, 4.9750834, 0.21831213; -1.1985139, 7.398576, 0.53249747; -1.3000349, 8.965988, 0.7982379; -1.0363988, 10.520957, 0.62548363; -1.2272317, 12.116453, 0.33590785; 2.3436608, 9.707559, 0.1949859; 3.076673, 13.422497, 3.3989234; 2.1039345, 14.9700775, 6.2040434; 1.6200618, 15.745379, 7.606643; 1.0946151, 16.78159, 7.5568075; 0.71439755, 17.636017, 7.623071; 1.0092676, 16.767393, 8.231217; -5.2995315, 6.9655304, 0.21646082; -6.276517, 2.312438, -1.1083341; -4.418907, -0.17485714, -0.2578233; -3.4901035, -1.418503, 0.1674321; -3.8720517, -2.6175385, 0.2421486; -4.061541, -3.6115713, 0.33667812; -3.3821664, -2.7360785, 0.78042483\",\n  \"0.0, 0.0, 0.0; 1.414264, -1.8597473, 1.0052842; 2.8061967, -8.987634, 1.5736272; 3.805186, -15.942823, -1.4330254; 4.262718, -17.607763, 0.51670754; 4.2771726, -17.148016, 1.6992738; -1.5415124, -1.7354689, 0.96203905; -0.987917, -8.847512, 2.0643175; -0.23061049, -16.05879, -0.69069266; -1.1831648, -17.313334, 1.4034986; -1.6832397, -17.477173, 2.5686173; -0.0611557, 2.5010107, -0.0044750157; -0.4560059, 4.976589, 0.23201235; -1.1698005, 7.401925, 0.54955435; -1.2731417, 8.970523, 0.80748034; -1.01195, 10.525217, 0.6286477; -1.2051793, 12.118837, 0.33046156; 2.3885412, 9.694594, 0.27718577; 2.9711661, 13.123161, 3.8139584; 1.8882085, 14.47243, 6.68042; 1.3490405, 15.148443, 8.113883; 0.8245519, 16.186314, 8.1206665; 0.44298175, 17.035118, 8.234423; 0.72583807, 16.128702, 8.790929; -5.2678776, 6.9917173, 0.1710774; -6.2411656, 2.3389153, -1.157453; -4.3981133, -0.14962697, -0.2793674; -3.4765878, -1.3938961, 0.15967584; -3.8602989, -2.5927968, 0.22716805; -4.051783, -3.586818, 0.31771785; -3.3790603, -2.7121212, 0.77301854\",\n  \"0.0, 0.0, 0.0; 1.4136109, -1.8611785, 1.0035526; 2.8113313, -8.987844, 1.5730006; 3.8138065, -15.953558, -1.408019; 4.2703743, -17.613594, 0.5461161; 4.283755, -17.149185, 1.7268721; -1.5421209, -1.735846, 0.9603819; -1.0011292, -8.845468, 2.0843256; -0.219917, -16.057543, -0.66190696; -1.1730347, -17.31588, 1.4297502; -1.6751235, -17.47452, 2.5947223; -0.05305141, 2.5011983, 0.0027885837; -0.4363734, 4.9779916, 0.24544409; -1.140669, 7.405897, 0.5645544; -1.2456827, 8.9754925, 0.8156452; -0.9863924, 10.529781, 0.6306323; -1.1810869, 12.121442, 0.32308072; 2.4341636, 9.679223, 0.3527094; 2.8833535, 12.799247, 4.1824565; 1.7079234, 13.938489, 7.103144; 1.1223304, 14.509358, 8.563864; 0.5931532, 15.542292, 8.636864; 0.20638847, 16.379616, 8.805102; 0.4863133, 15.437324, 9.300101; -5.235339, 7.021148, 0.12706748; -6.2042737, 2.3678923, -1.2030532; -4.3762093, -0.12165213, -0.2969249; -3.462177, -1.3664222, 0.1561389; -3.847681, -2.565083, 0.21738863; -4.0411897, -3.5590038, 0.30467883; -3.3748555, -2.6849203, 0.7704321\",\n  \"0.0, 0.0, 0.0; 1.4123445, -1.8628497, 1.002234; 2.8143952, -8.988754, 1.5705537; 3.8228676, -15.96306, -1.3882717; 4.279928, -17.618715, 0.5694612; 4.2929263, -17.152704, 1.7495898; -1.5433022, -1.7354944, 0.9591196; -1.0131147, -8.842745, 2.1030293; -0.21031612, -16.05534, -0.6356027; -1.1628882, -17.315811, 1.4550176; -1.6661645, -17.476143, 2.6192453; -0.046553858, 2.5013094, 0.009929554; -0.41913742, 4.9790907, 0.25913915; -1.1124449, 7.4098525, 0.5805639; -1.2181249, 8.980567, 0.8242667; -0.96105886, 10.534398, 0.632432; -1.1579406, 12.123924, 0.3153799; 2.4789298, 9.661645, 0.42636937; 2.8125558, 12.465459, 4.5044336; 1.5631188, 13.37606, 7.474221; 0.94039917, 13.832524, 8.959608; 0.4009748, 14.852133, 9.107015; 0.0048463345, 15.6705475, 9.335672; 0.28871045, 14.695081, 9.75897; -5.203336, 7.052885, 0.08768058; -6.1708803, 2.39914, -1.2417414; -4.357668, -0.09149265, -0.30914837; -3.4510622, -1.3368073, 0.15714708; -3.8396952, -2.5346966, 0.21352133; -4.036491, -3.5281222, 0.29908186; -3.377316, -2.6542928, 0.77537984\",\n  \"0.0, 0.0, 0.0; 1.411598, -1.8641568, 1.0008545; 2.8160655, -8.989742, 1.5672045; 3.8311605, -15.971127, -1.3726006; 4.2895293, -17.622402, 0.5885236; 4.3019857, -17.153433, 1.7674855; -1.5439978, -1.7356043, 0.9577995; -1.0227801, -8.840765, 2.1186936; -0.20356339, -16.053911, -0.6136155; -1.1533124, -17.31306, 1.479084; -1.6560477, -17.47926, 2.6427226; -0.041162785, 2.5013666, 0.016887557; -0.40384164, 4.9800253, 0.27191332; -1.0863807, 7.4136796, 0.5944946; -1.1914549, 8.985492, 0.8312865; -0.9356874, 10.538758, 0.63324517; -1.1340761, 12.126254, 0.307092; 2.5202003, 9.644109, 0.49411064; 2.74184, 12.12625, 4.7828326; 1.4376729, 12.78778, 7.794718; 0.78756785, 13.119699, 9.301272; 0.23263824, 14.115744, 9.529871; -0.17706552, 14.906194, 9.823701; 0.11591026, 13.901563, 10.16455; -5.1728916, 7.0836353, 0.049289405; -6.139972, 2.429244, -1.2782071; -4.3411655, -0.06232786, -0.32056105; -3.4417632, -1.3081125, 0.15826055; -3.8345275, -2.5047812, 0.21185756; -4.0354886, -3.4973717, 0.29742897; -3.3829267, -2.623464, 0.78260666\",\n  \"0.0, 0.0, 0.0; 1.4109048, -1.8656107, 0.9991212; 2.8163676, -8.991215, 1.562755; 3.839193, -15.978993, -1.3591233; 4.299082, -17.626383, 0.60491; 4.3105464, -17.15303, 1.7821288; -1.5446439, -1.7359438, 0.95614076; -1.0315676, -8.83927, 2.1317928; -0.1977244, -16.052666, -0.595428; -1.1449203, -17.310131, 1.4994411; -1.6470337, -17.483845, 2.6622505; -0.03761825, 2.5013793, 0.022383098; -0.39158505, 4.980725, 0.28291273; -1.0627741, 7.4171095, 0.60868067; -1.1694193, 8.990388, 0.83478945; -0.9162084, 10.543001, 0.62851447; -1.1165736, 12.128263, 0.2928428; 2.5584626, 9.625422, 0.5605188; 2.6795893, 11.771711, 5.0306473; 1.3303566, 12.173931, 8.068363; 0.6577324, 12.376203, 9.58796; 0.08164257, 13.335839, 9.9034395; -0.34671313, 14.086782, 10.266207; -0.041721225, 13.058191, 10.511721; -5.1446085, 7.1150336, 0.014430642; -6.108679, 2.4595227, -1.3113277; -4.325973, -0.03336668, -0.32736605; -3.4346218, -1.2798105, 0.16461438; -3.8329372, -2.474721, 0.21644133; -4.0393033, -3.4661248, 0.30290073; -3.3926816, -2.592349, 0.7962008\",\n  \"0.0, 0.0, 0.0; 1.4100702, -1.8669871, 0.9977273; 2.8178687, -8.992441, 1.5574167; 3.8486738, -15.985378, -1.3492792; 4.310287, -17.630255, 0.6164553; 4.3209248, -17.153711, 1.7923943; -1.5454193, -1.7359883, 0.9548068; -1.0372683, -8.837728, 2.1421237; -0.19006824, -16.050766, -0.58192515; -1.1344159, -17.306362, 1.5153491; -1.6356266, -17.485893, 2.677664; -0.034419924, 2.5013614, 0.02864428; -0.37996954, 4.981322, 0.29456633; -1.039685, 7.420637, 0.62183833; -1.142779, 8.995739, 0.836621; -0.89127624, 10.547434, 0.62152684; -1.0949901, 12.130131, 0.2759107; 2.5954266, 9.6065645, 0.62199664; 2.6353445, 11.395234, 5.2482643; 1.2468947, 11.538818, 8.291538; 0.55464715, 11.611742, 9.814032; -0.048134744, 12.520305, 10.218355; -0.5000315, 13.2189245, 10.650471; -0.17958194, 12.175209, 10.789273; -5.1164455, 7.14608, -0.018779635; -6.0761933, 2.489789, -1.3449335; -4.3105183, -0.005168915, -0.33582687; -3.4276822, -1.2526464, 0.16872674; -3.8317137, -2.445603, 0.22131616; -4.0437374, -3.4355311, 0.31093693; -3.403864, -2.5605307, 0.810822\",\n  \"0.0, 0.0, 0.0; 1.4087199, -1.8690411, 0.9957877; 2.8191397, -8.994539, 1.5482794; 3.8566604, -15.991147, -1.34717; 4.323412, -17.633091, 0.61980283; 4.3347483, -17.15394, 1.7946746; -1.5466769, -1.735888, 0.9529511; -1.0415223, -8.835945, 2.1515567; -0.18445218, -16.049213, -0.568794; -1.1215988, -17.302595, 1.5330298; -1.6195126, -17.49131, 2.695307; -0.03307415, 2.5012832, 0.036088124; -0.37142047, 4.9815273, 0.3085463; -1.0185649, 7.423872, 0.638314; -1.1173253, 9.000868, 0.84088725; -0.86748993, 10.551474, 0.61621404; -1.0746857, 12.131627, 0.26116142; 2.630188, 9.586578, 0.67857957; 2.6210966, 11.006326, 5.4312124; 1.2023772, 10.892539, 8.46176; 0.49496043, 10.836717, 9.977991; -0.13931602, 11.677444, 10.471123; -0.6186341, 12.309466, 10.970929; -0.2776869, 11.263237, 10.992276; -5.0910683, 7.177477, -0.039740205; -6.046372, 2.5199165, -1.3646455; -4.2973957, 0.022281647, -0.33332407; -3.4229102, -1.2265347, 0.1823368; -3.832747, -2.417466, 0.23590381; -4.0503917, -3.405905, 0.3284378; -3.4155104, -2.5301795, 0.8333927\",\n  \"0.0, 0.0, 0.0; 1.4081036, -1.8704373, 0.9940361; 2.8208625, -8.99635, 1.5350807; 3.859637, -15.995074, -1.3547997; 4.336791, -17.63459, 0.6117021; 4.351832, -17.154299, 1.7860667; -1.5472485, -1.7362978, 0.95127463; -1.0433884, -8.834579, 2.1608877; -0.17939949, -16.048677, -0.555073; -1.1052744, -17.301893, 1.5518394; -1.5980077, -17.496555, 2.7153425; -0.032916687, 2.5011299, 0.045607176; -0.36466712, 4.9813027, 0.3266877; -0.9989279, 7.4265575, 0.6599074; -1.0938374, 9.005277, 0.850548; -0.8460478, 10.55478, 0.61621165; -1.0569036, 12.132532, 0.25273272; 2.6627765, 9.566426, 0.73202765; 2.638331, 10.591194, 5.5851235; 1.2026647, 10.238274, 8.589161; 0.48665178, 10.062744, 10.092167; -0.18183029, 10.819325, 10.6692505; -0.6901366, 11.371643, 11.23101; -0.32244593, 10.339245, 11.129755; -5.0681458, 7.2076116, -0.046692252; -6.020955, 2.5490875, -1.3700056; -4.2866383, 0.04825306, -0.32182097; -3.4194818, -1.2021631, 0.20227122; -3.8346486, -2.391117, 0.2586435; -4.0574074, -3.3780284, 0.35522705; -3.4263082, -2.501059, 0.862758\",\n  \"0.0, 0.0, 0.0; 1.4080865, -1.8715491, 0.99196494; 2.823503, -8.997914, 1.519943; 3.8647165, -15.99765, -1.366607; 4.3534865, -17.635843, 0.5981438; 4.372734, -17.155874, 1.7725793; -1.5472649, -1.7373674, 0.94929266; -1.041927, -8.833961, 2.1681588; -0.17309958, -16.048754, -0.544405; -1.0857124, -17.300222, 1.5693212; -1.5719731, -17.50238, 2.7342684; -0.032615405, 2.5009549, 0.054543346; -0.35713184, 4.9811163, 0.34404662; -0.9777393, 7.429285, 0.68154764; -1.071522, 9.009217, 0.8624419; -0.8263123, 10.557712, 0.61889935; -1.0400747, 12.13315, 0.24717954; 2.6970067, 9.545559, 0.7812659; 2.6927257, 10.148381, 5.704666; 1.2538854, 9.582347, 8.674392; 0.5360403, 9.300045, 10.160163; -0.168536, 9.957349, 10.811188; -0.7063857, 10.418575, 11.425184; -0.3047154, 9.418354, 11.202663; -5.044188, 7.238501, -0.04875815; -5.9953504, 2.5794168, -1.371284; -4.2757177, 0.074724436, -0.3082229; -3.415903, -1.1776209, 0.22330666; -3.8350754, -2.3651009, 0.28108224; -4.06169, -3.3508914, 0.38011104; -3.43344, -2.4732423, 0.88999635\",\n  \"0.0, 0.0, 0.0; 1.4075322, -1.8733487, 0.9893517; 2.8259485, -9.000402, 1.4996939; 3.8675385, -15.999477, -1.3883228; 4.370725, -17.635954, 0.57421756; 4.3951964, -17.155111, 1.7481979; -1.5477815, -1.7382722, 0.94679177; -1.0386083, -8.833445, 2.1723151; -0.16747308, -16.0484, -0.5390785; -1.0633957, -17.298777, 1.5824203; -1.5413041, -17.51066, 2.7490945; -0.032171052, 2.500745, 0.06366995; -0.3500664, 4.980839, 0.3609934; -0.95797396, 7.431752, 0.7016753; -1.0531782, 9.012563, 0.8739489; -0.811229, 10.560435, 0.62329715; -1.0275913, 12.13421, 0.24606994; 2.7285252, 9.526307, 0.8236578; 2.758327, 9.70783, 5.7804155; 1.3310064, 8.930095, 8.707498; 0.61866224, 8.541745, 10.171827; -0.119695544, 9.088746, 10.884517; -0.6837216, 9.451595, 11.539665; -0.2423563, 8.501022, 11.203654; -5.022027, 7.2664776, -0.04792911; -5.9760914, 2.6078515, -1.3699772; -4.269705, 0.09932041, -0.29469252; -3.416514, -1.1549445, 0.24294949; -3.8380148, -2.3415852, 0.3010301; -4.066872, -3.3267584, 0.40103757; -3.4402058, -2.4489458, 0.91258746\",\n  \"0.0, 0.0, 0.0; 1.4067758, -1.8749534, 0.9873854; 2.8310485, -9.0023575, 1.4760623; 3.8731666, -15.999543, -1.4163375; 4.3921685, -17.635736, 0.54231703; 4.4224153, -17.154804, 1.7161264; -1.5484838, -1.7386703, 0.9449098; -1.02982, -8.832547, 2.173952; -0.15841532, -16.047169, -0.5382409; -1.0374734, -17.296108, 1.5911446; -1.5068071, -17.515873, 2.75984; -0.031372312, 2.500583, 0.07011508; -0.34167624, 4.9808064, 0.37429768; -0.9352422, 7.4345207, 0.7200701; -1.0358886, 9.0156, 0.8866895; -0.7975154, 10.563013, 0.6298498; -1.0146914, 12.135427, 0.24745551; 2.764066, 9.505028, 0.86302507; 2.847597, 9.270152, 5.816927; 1.4496154, 8.27886, 8.693194; 0.75166863, 7.7835636, 10.131967; -0.016741455, 8.214938, 10.890762; -0.6025596, 8.477228, 11.574155; -0.117708206, 7.5901012, 11.139159; -4.9972606, 7.2975683, -0.046089947; -5.9554505, 2.6395679, -1.3673604; -4.2614775, 0.1274755, -0.28082073; -3.4144914, -1.128569, 0.26244777; -3.8360977, -2.3152566, 0.31877968; -4.065089, -3.3005338, 0.41745034; -3.4388695, -2.4233308, 0.93059075\",\n  \"0.0, 0.0, 0.0; 1.4067303, -1.8760834, 0.9853016; 2.8378694, -9.003977, 1.4459826; 3.8796704, -15.997019, -1.4565362; 4.417632, -17.632727, 0.49740255; 4.454218, -17.149174, 1.6699538; -1.5485259, -1.7397153, 0.9429158; -1.0165334, -8.8328285, 2.1706693; -0.1475681, -16.046207, -0.5456114; -1.0056691, -17.292927, 1.5936012; -1.4640611, -17.523096, 2.7646341; -0.029427854, 2.5004838, 0.074364595; -0.33103073, 4.9811354, 0.38376215; -0.9102213, 7.437527, 0.7348599; -1.016644, 9.018946, 0.894533; -0.78262526, 10.56598, 0.6314845; -1.0014992, 12.137232, 0.2452977; 2.8015893, 9.484208, 0.8957195; 2.9562647, 8.840272, 5.811481; 1.606116, 7.6392145, 8.630077; 0.93179953, 7.0388865, 10.039835; 0.13948083, 7.3547897, 10.830243; -0.46221322, 7.5186453, 11.530329; 0.06555134, 6.703763, 11.011939; -4.970541, 7.3284655, -0.044665456; -5.936617, 2.6717377, -1.3646761; -4.2517443, 0.15635705, -0.27161324; -3.4093087, -1.1013316, 0.27491713; -3.8305097, -2.2882504, 0.32938007; -4.059093, -3.2737927, 0.4263335; -3.4324222, -2.397471, 0.9404273\",\n  \"0.0, 0.0, 0.0; 1.4061128, -1.8776314, 0.9832325; 2.8442578, -9.006213, 1.4102204; 3.8841243, -15.993319, -1.5072515; 4.444687, -17.628363, 0.44087994; 4.490024, -17.14602, 1.6136248; -1.5490985, -1.7402776, 0.94093543; -0.9967056, -8.83251, 2.1647577; -0.13472778, -16.044575, -0.5572357; -0.9702655, -17.290447, 1.5913806; -1.4169488, -17.527527, 2.7655554; -0.027724605, 2.5004232, 0.07700532; -0.32015854, 4.981653, 0.39053807; -0.8830237, 7.441007, 0.747403; -0.99661034, 9.022649, 0.899763; -0.7666316, 10.569279, 0.6308373; -0.98582506, 12.139912, 0.2423226; 2.842492, 9.461704, 0.91953814; 3.0859542, 8.437086, 5.7666163; 1.8055893, 7.0202203, 8.516723; 1.16593, 6.311887, 9.892081; 0.35749662, 6.517077, 10.702415; -0.25300378, 6.5882554, 11.410389; 0.31458008, 5.8495407, 10.824347; -4.9427743, 7.36194, -0.03867948; -5.917985, 2.7061534, -1.355289; -4.2400274, 0.18727016, -0.2596581; -3.4010494, -1.0721701, 0.28815573; -3.8205738, -2.2598104, 0.3397549; -4.0474834, -3.2460341, 0.43366033; -3.4189851, -2.3712306, 0.94810885\",\n  \"0.0, 0.0, 0.0; 1.4060783, -1.8787309, 0.98117924; 2.8506305, -9.008025, 1.3731979; 3.8851225, -15.989079, -1.5606228; 4.472004, -17.623318, 0.3804214; 4.526225, -17.135162, 1.5503798; -1.5491312, -1.741309, 0.9389714; -0.97262084, -8.8326435, 2.1568604; -0.121686935, -16.043629, -0.57145834; -0.93184435, -17.288984, 1.5871539; -1.3653351, -17.531866, 2.765082; -0.02639894, 2.5004075, 0.077972315; -0.30967742, 4.982299, 0.39466408; -0.8559875, 7.44444, 0.757977; -0.97626114, 9.026127, 0.9046172; -0.75099516, 10.572482, 0.63018006; -0.97165775, 12.142442, 0.23977798; 2.8831491, 9.43899, 0.93947786; 3.2314458, 8.059193, 5.6911235; 2.038679, 6.4194093, 8.355395; 1.442653, 5.5995526, 9.687724; 0.6260215, 5.702531, 10.509197; 0.013338149, 5.6893573, 11.218739; 0.614648, 5.0262246, 10.578444; -4.9154053, 7.39551, -0.03226596; -5.9034367, 2.7412376, -1.3446648; -4.2302094, 0.21846008, -0.25076163; -3.3935964, -1.0429264, 0.29619056; -3.810741, -2.2314947, 0.34567454; -4.0353446, -3.2184856, 0.437029; -3.4049962, -2.3446937, 0.95093304\",\n  \"0.0, 0.0, 0.0; 1.4060938, -1.879641, 0.9794127; 2.856401, -9.009817, 1.3321972; 3.8840516, -15.982592, -1.6236377; 4.4995375, -17.616383, 0.3089049; 4.5640955, -17.12494, 1.4769614; -1.5491168, -1.7422327, 0.9372802; -0.94545734, -8.832843, 2.1461947; -0.10843974, -16.042221, -0.5906601; -0.8910755, -17.287773, 1.57797; -1.3101374, -17.538263, 2.7595205; -0.027701292, 2.5004175, 0.0771965; -0.30241904, 4.9829254, 0.39658275; -0.8290756, 7.4481277, 0.76807064; -0.955032, 9.029821, 0.90979016; -0.7339163, 10.575832, 0.63008845; -0.9554218, 12.145361, 0.23843253; 2.9258096, 9.412396, 0.95461696; 3.3924408, 7.7104383, 5.5902267; 2.3024583, 5.841199, 8.1451845; 1.757759, 4.9065924, 9.42281; 0.94074017, 4.916703, 10.250268; 0.3321588, 4.827783, 10.957888; 0.9596447, 4.237411, 10.273038; -4.8890314, 7.433915, -0.020796657; -5.8910804, 2.7811742, -1.3279871; -4.219655, 0.25509715, -0.23895335; -3.383943, -1.0079398, 0.30556226; -3.7986984, -2.1974216, 0.3531415; -4.0209064, -3.1851907, 0.4419062; -3.3877807, -2.3126473, 0.9545157\",\n  \"0.0, 0.0, 0.0; 1.4053221, -1.8807093, 0.9784687; 2.8604631, -9.0118, 1.2905132; 3.880721, -15.974134, -1.6923641; 4.525985, -17.607529, 0.23077857; 4.6013317, -17.113516, 1.3971032; -1.5498313, -1.7420827, 0.9363772; -0.91688645, -8.831746, 2.135836; -0.09642941, -16.039768, -0.60959363; -0.850619, -17.284618, 1.5694938; -1.2547069, -17.540897, 2.755012; -0.028196702, 2.5004363, 0.076404765; -0.29487416, 4.983451, 0.39865494; -0.80376565, 7.4511805, 0.7780371; -0.9350226, 9.032885, 0.9147379; -0.71819276, 10.57855, 0.62982166; -0.9411613, 12.14761, 0.23711717; 2.9652224, 9.387423, 0.9729965; 3.5612533, 7.3904486, 5.474121; 2.5854578, 5.2926903, 7.8942785; 2.0978782, 4.243836, 9.10452; 1.2886968, 4.169197, 9.936363; 0.6906891, 4.0117617, 10.641066; 1.3352964, 3.4911423, 9.916681; -4.8632965, 7.469146, -0.012936294; -5.8796883, 2.8180017, -1.3147256; -4.2087803, 0.2884791, -0.23292029; -3.3733275, -0.97628105, 0.3079812; -3.785442, -2.16669, 0.35531265; -4.0050406, -3.155154, 0.44283056; -3.3692017, -2.283037, 0.95280033\",\n  \"0.0, 0.0, 0.0; 1.4055645, -1.8811903, 0.9771951; 2.8611193, -9.013923, 1.2469049; 3.8724775, -15.963808, -1.7678664; 4.549717, -17.595987, 0.14528644; 4.6367826, -17.099846, 1.30989; -1.5496094, -1.742935, 0.93515795; -0.8900277, -8.831826, 2.1247883; -0.08698213, -16.037928, -0.6308129; -0.8101198, -17.282784, 1.5587714; -1.1979562, -17.545078, 2.7483947; -0.028206768, 2.5004659, 0.075428486; -0.28635722, 4.9840326, 0.40035465; -0.77802473, 7.4540095, 0.7877413; -0.9147428, 9.035659, 0.919641; -0.70227814, 10.581112, 0.63031566; -0.9268036, 12.149974, 0.23771116; 3.0044522, 9.362788, 0.99206674; 3.7338464, 7.083049, 5.3364954; 2.8805897, 4.7686787, 7.6004677; 2.4543595, 3.6115506, 8.732676; 1.6624949, 3.4588747, 9.5705; 1.0825365, 3.238835, 10.273519; 1.7335497, 2.785304, 9.510769; -4.8367205, 7.503459, -0.0061719418; -5.8690624, 2.8538818, -1.3009894; -4.1963787, 0.32130146, -0.2291286; -3.3600378, -0.94498706, 0.30680126; -3.7700887, -2.136066, 0.35519063; -3.987555, -3.125019, 0.4425057; -3.3484473, -2.2531145, 0.94873965\",\n  \"0.0, 0.0, 0.0; 1.4048065, -1.8824813, 0.975798; 2.8608463, -9.016512, 1.2056043; 3.8636017, -15.953026, -1.8426495; 4.573644, -17.584024, 0.059586167; 4.67304, -17.087503, 1.2230407; -1.5503112, -1.7430272, 0.9338213; -0.8654047, -8.8308525, 2.1154633; -0.07811135, -16.035175, -0.6493163; -0.7696974, -17.280313, 1.5502777; -1.1412065, -17.547491, 2.744018; -0.029114766, 2.5004206, 0.07657046; -0.27945155, 4.984301, 0.40519258; -0.75318485, 7.4567013, 0.799407; -0.8963202, 9.038242, 0.9256737; -0.6882963, 10.583476, 0.6319841; -0.91390544, 12.152285, 0.23978558; 3.043097, 9.337008, 1.0115523; 3.9107044, 6.7640147, 5.1624856; 3.1779432, 4.262036, 7.263221; 2.8119974, 3.0111122, 8.313833; 2.0472813, 2.784931, 9.160214; 1.4928722, 2.5061436, 9.863003; 2.1375139, 2.118565, 9.059563; -4.810904, 7.538293, 0.003157854; -5.856016, 2.8899288, -1.2857567; -4.181593, 0.353415, -0.22598088; -3.3443823, -0.91484046, 0.30390602; -3.7531214, -2.1062746, 0.3545985; -3.9691024, -3.0954764, 0.442779; -3.3263655, -2.2235892, 0.94442713\",\n  \"0.0, 0.0, 0.0; 1.4047352, -1.882725, 0.9754308; 2.8578153, -9.018611, 1.1623625; 3.8498526, -15.938791, -1.9262563; 4.5936265, -17.568935, -0.036217093; 4.7059693, -17.073105, 1.1263531; -1.5503763, -1.743158, 0.93346924; -0.84385604, -8.830297, 2.1064677; -0.06961352, -16.03142, -0.6703105; -0.7288469, -17.277662, 1.5385728; -1.0839217, -17.547192, 2.736778; -0.033214282, 2.5002804, 0.07943134; -0.27693915, 4.98413, 0.41321337; -0.7303448, 7.4592896, 0.81396174; -0.8770231, 9.041145, 0.93195295; -0.6726139, 10.585824, 0.6328557; -0.89924175, 12.15472, 0.24159741; 3.0810597, 9.309258, 1.0216293; 4.0984907, 6.437664, 4.9359703; 3.4799104, 3.7756212, 6.8700886; 3.1710472, 2.4446528, 7.837373; 2.4455094, 2.1479542, 8.696369; 1.9259275, 1.8130951, 9.401286; 2.5492477, 1.4914099, 8.553178; -4.7890835, 7.5745068, 0.027122676; -5.8473864, 2.9282064, -1.2584648; -4.170192, 0.38759542, -0.2129823; -3.3315957, -0.88270855, 0.30975902; -3.738932, -2.0744438, 0.3645052; -3.953386, -3.0637627, 0.45506683; -3.3073964, -2.191008, 0.9509957\",\n  \"0.0, 0.0, 0.0; 1.4048629, -1.8829519, 0.9748087; 2.8551488, -9.020437, 1.1170233; 3.8318017, -15.921474, -2.0189652; 4.6112537, -17.550577, -0.1424526; 4.7373676, -17.054697, 1.0186832; -1.5502595, -1.7435801, 0.9328745; -0.8240287, -8.83042, 2.0956063; -0.06037891, -16.026958, -0.69594836; -0.6848763, -17.276932, 1.520906; -1.022695, -17.5475, 2.7238564; -0.042527366, 2.5000951, 0.08080557; -0.28203347, 4.98369, 0.41950467; -0.711393, 7.4616838, 0.8291221; -0.85653216, 9.044436, 0.9365151; -0.6543957, 10.588034, 0.6303699; -0.8821685, 12.157066, 0.24032721; 3.1171217, 9.278282, 1.0155569; 4.292937, 6.119221, 4.6543856; 3.7798755, 3.3157969, 6.411515; 3.5237834, 1.9141271, 7.2902937; 2.851201, 1.547554, 8.16526; 2.3768733, 1.1573938, 8.873633; 2.9609752, 0.90378773, 7.975967; -4.774163, 7.613722, 0.06982297; -5.844697, 2.9689116, -1.2110116; -4.1638126, 0.4236083, -0.18301535; -3.3233714, -0.84904265, 0.33098102; -3.7296185, -2.040937, 0.39017573; -3.9427164, -3.0303233, 0.4831693; -3.2920878, -2.1571646, 0.97227585\",\n  \"0.0, 0.0, 0.0; 1.4047854, -1.883013, 0.9748023; 2.8500547, -9.022241, 1.0741653; 3.805307, -15.9023485, -2.1139703; 4.6232543, -17.530369, -0.25296795; 4.7644324, -17.033432, 0.9059802; -1.5503318, -1.7435192, 0.9328681; -0.8067058, -8.83025, 2.0852175; -0.05488336, -16.022013, -0.72181153; -0.641368, -17.27388, 1.5043368; -0.959991, -17.548489, 2.7116017; -0.05740835, 2.499748, 0.082331896; -0.29629788, 4.9827604, 0.4257017; -0.6996057, 7.463811, 0.8432206; -0.8384587, 9.047732, 0.9412845; -0.6379953, 10.590189, 0.6283685; -0.86802465, 12.159416, 0.24043956; 3.146424, 9.246584, 0.9918527; 4.483789, 5.8263397, 4.32602; 4.066546, 2.894703, 5.888499; 3.8584645, 1.4289314, 6.6699896; 3.2535906, 0.99124813, 7.5615444; 2.835351, 0.5451585, 8.272237; 3.3600154, 0.36391312, 7.3218822; -4.7686453, 7.652483, 0.12692934; -5.8515725, 3.0103335, -1.1531351; -4.167386, 0.45919466, -0.14520347; -3.325294, -0.81637347, 0.3587618; -3.7302575, -2.00843, 0.4232441; -3.9417157, -2.9979072, 0.51897234; -3.2849798, -2.124537, 0.9994632\",\n  \"0.0, 0.0, 0.0; 1.404837, -1.8828446, 0.9750532; 2.8412585, -9.024283, 1.0367148; 3.7721095, -15.881866, -2.2066882; 4.6290274, -17.510326, -0.36369407; 4.7862473, -17.014412, 0.7936257; -1.5502836, -1.7434336, 0.93310875; -0.79624975, -8.830376, 2.077369; -0.05330807, -16.018202, -0.7420826; -0.6013012, -17.273052, 1.4921803; -0.90075904, -17.551275, 2.7035167; -0.07366913, 2.4992924, 0.08321426; -0.313084, 4.9816623, 0.4308396; -0.69050753, 7.4654384, 0.8562789; -0.8221127, 9.050268, 0.94955504; -0.62267, 10.591752, 0.63123786; -0.85444874, 12.161256, 0.2454738; 3.1719618, 9.215363, 0.96310544; 4.669249, 5.5708046, 3.9761791; 4.3366265, 2.5220847, 5.3195314; 4.1711144, 0.9977914, 5.991579; 3.6483366, 0.48725533, 6.8962145; 3.2962654, -0.01561892, 7.6048517; 3.7402515, -0.119357824, 6.603148; -4.7657504, 7.689591, 0.18702549; -5.8575544, 3.0498824, -1.0943468; -4.1704817, 0.4925034, -0.10727131; -3.3269477, -0.7861856, 0.38626596; -3.7308187, -1.9783022, 0.45625526; -3.9408367, -2.9677958, 0.5549395; -3.2781096, -2.0941916, 1.026699\",\n  \"0.0, 0.0, 0.0; 1.4034534, -1.8838227, 0.97515625; 2.829076, -9.027631, 1.0043371; 3.7323744, -15.860691, -2.2980773; 4.629169, -17.490435, -0.47530055; 4.8038936, -16.998373, 0.68115366; -1.5515635, -1.7422419, 0.93320745; -0.79168487, -8.829739, 2.0701392; -0.053396583, -16.014046, -0.7594862; -0.5627828, -17.272999, 1.4815929; -0.8435193, -17.551212, 2.6974068; -0.09155431, 2.498669, 0.084178515; -0.33219856, 4.9804077, 0.43544164; -0.6813567, 7.4671583, 0.8675877; -0.80687064, 9.052603, 0.9587806; -0.60914445, 10.59341, 0.6361456; -0.8425837, 12.163393, 0.25334778; 3.1978545, 9.182082, 0.9230116; 4.854055, 5.3587484, 3.6141834; 4.5949917, 2.2051737, 4.7086143; 4.466726, 0.6284685, 5.2563925; 4.037811, 0.04394567, 6.165609; 3.7596292, -0.51580167, 6.8643947; 4.104466, -0.5374723, 5.8194475; -4.7631297, 7.7285867, 0.2539633; -5.8625574, 3.091949, -1.0319982; -4.1729302, 0.527967, -0.066660225; -3.328118, -0.7540225, 0.41600904; -3.7309973, -1.9461776, 0.49088928; -3.939588, -2.935756, 0.591726; -3.2696762, -2.0626998, 1.0542623\",\n  \"0.0, 0.0, 0.0; 1.4032848, -1.8838174, 0.9754086; 2.8170009, -9.03005, 0.979427; 3.6915874, -15.8371315, -2.3838081; 4.6257815, -17.469828, -0.58258533; 4.817435, -16.982761, 0.57330143; -1.5517197, -1.7419733, 0.93344855; -0.7847751, -8.83029, 2.060482; -0.053432763, -16.011263, -0.7793896; -0.5249642, -17.273241, 1.4682631; -0.7870133, -17.554066, 2.687643; -0.10718906, 2.4980266, 0.08478332; -0.34755215, 4.9793673, 0.43903738; -0.6698413, 7.468736, 0.876945; -0.7899741, 9.054746, 0.9655247; -0.593842, 10.594938, 0.63900757; -0.82849467, 12.165529, 0.25945538; 3.2241495, 9.150738, 0.8813936; 5.024409, 5.189473, 3.262723; 4.8261266, 1.9480996, 4.077651; 4.728924, 0.32748938, 4.4859233; 4.402096, -0.33151424, 5.3865933; 4.2027764, -0.9474177, 6.064781; 4.435461, -0.8834959, 4.990971; -4.757076, 7.765048, 0.31795937; -5.8630004, 3.1316047, -0.9739323; -4.1710773, 0.5614071, -0.029368758; -3.325117, -0.72369075, 0.44291177; -3.7263663, -1.9160867, 0.52255905; -3.9330237, -2.9058633, 0.6254115; -3.2563891, -2.0331028, 1.0786264\",\n  \"0.0, 0.0, 0.0; 1.4032674, -1.8833035, 0.9764257; 2.805339, -9.031809, 0.95898265; 3.6501193, -15.810371, -2.4688504; 4.619858, -17.446323, -0.6895001; 4.8274403, -16.963915, 0.46558893; -1.5517343, -1.7414383, 0.93442184; -0.78070146, -8.831422, 2.0481024; -0.05489844, -16.00867, -0.8025873; -0.4897295, -17.272709, 1.4512985; -0.73375535, -17.55441, 2.674211; -0.12023669, 2.4974551, 0.084113635; -0.3581514, 4.9787674, 0.44021824; -0.6532668, 7.470645, 0.88298863; -0.77035594, 9.057034, 0.968811; -0.5767668, 10.596685, 0.6382501; -0.8126065, 12.167857, 0.26185086; 3.2544465, 9.119766, 0.83306664; 5.1859064, 5.044299, 2.897846; 5.0328712, 1.7419424, 3.4278903; 4.9589972, 0.0907923, 3.6938953; 4.7363496, -0.6406863, 4.570067; 4.6161017, -1.3100483, 5.215434; 4.730934, -1.1599848, 4.1311874; -4.745297, 7.8015456, 0.38144332; -5.857763, 3.1721206, -0.9192061; -4.1647263, 0.5955968, 0.0059277415; -3.3182077, -0.69266284, 0.46849418; -3.7178717, -1.8853016, 0.55236274; -3.9226778, -2.8752942, 0.6568283; -3.2396076, -2.002988, 1.1011773\",\n  \"0.0, 0.0, 0.0; 1.4032619, -1.8833367, 0.9763696; 2.7938232, -9.034034, 0.94288427; 3.6089163, -15.78368, -2.5486047; 4.610353, -17.423105, -0.7901324; 4.8325953, -16.9461, 0.3644725; -1.55174, -1.7414622, 0.93436825; -0.7767671, -8.833515, 2.0320244; -0.0543468, -16.006378, -0.8305385; -0.45430544, -17.273771, 1.427917; -0.68120193, -17.558857, 2.6533408; -0.12923072, 2.497037, 0.0831863; -0.3617506, 4.9788246, 0.43954068; -0.63006663, 7.473257, 0.88496935; -0.74724096, 9.059822, 0.96734905; -0.55686474, 10.599131, 0.63334286; -0.7932297, 12.17108, 0.2605363; 3.2900822, 9.089952, 0.7798616; 5.335844, 4.913959, 2.5059037; 5.2138815, 1.5782883, 2.767345; 5.156155, -0.08959234, 2.8990817; 5.0346193, -0.8886652, 3.7351563; 4.990203, -1.6065503, 4.336548; 4.990006, -1.3738027, 3.2608504; -4.725792, 7.8377957, 0.44011113; -5.844097, 3.2125564, -0.8703873; -4.15218, 0.6291001, 0.037297368; -3.3062234, -0.66262734, 0.49113774; -3.703782, -1.8557397, 0.5782166; -3.9063652, -2.8460963, 0.6835611; -3.2177787, -1.9741485, 1.1200293\",\n  \"0.0, 0.0, 0.0; 1.402546, -1.8834727, 0.9771354; 2.7827768, -9.036112, 0.93271536; 3.5726976, -15.755814, -2.621752; 4.601029, -17.398235, -0.88169277; 4.835605, -16.927326, 0.27297485; -1.5524019, -1.7404786, 0.9351009; -0.7743933, -8.835136, 2.013605; -0.052693844, -16.002884, -0.8619251; -0.422959, -17.272074, 1.4005809; -0.6354289, -17.557768, 2.6284468; -0.13395698, 2.496882, 0.080312006; -0.35934842, 4.9795485, 0.43511882; -0.60364336, 7.476202, 0.8819215; -0.7211892, 9.062901, 0.9611425; -0.5337231, 10.601874, 0.62396216; -0.7703792, 12.174474, 0.25409317; 3.3265653, 9.06403, 0.7251453; 5.4625354, 4.8024607, 2.0962546; 5.362132, 1.4558575, 2.105803; 5.3156605, -0.21755815, 2.1115196; 5.286003, -1.0774213, 2.8938653; 5.310185, -1.8375227, 3.4421945; 5.2074413, -1.5282364, 2.3909657; -4.701968, 7.870445, 0.48941857; -5.827354, 3.250485, -0.83358103; -4.1385236, 0.6600678, 0.05990112; -3.2941103, -0.6351398, 0.5066416; -3.6898198, -1.8286767, 0.5962859; -3.8904963, -2.8193514, 0.7022869; -3.1975136, -1.947656, 1.1322534\",\n  \"0.0, 0.0, 0.0; 1.4032396, -1.8826114, 0.9777996; 2.7739236, -9.037047, 0.9275214; 3.5431302, -15.726965, -2.6871614; 4.5951424, -17.373251, -0.9650028; 4.841373, -16.911257, 0.19083929; -1.5517595, -1.7407095, 0.9357368; -0.7693217, -8.838244, 1.9918759; -0.04810351, -15.999861, -0.89900804; -0.39211252, -17.270588, 1.3667774; -0.59169745, -17.558477, 2.5962915; -0.13589662, 2.4969556, 0.0745575; -0.35163978, 4.9810762, 0.42516237; -0.57228607, 7.4798565, 0.87237835; -0.6890295, 9.0667, 0.94986737; -0.5028455, 10.60548, 0.6110951; -0.7382604, 12.179074, 0.24468136; 3.3675187, 9.038347, 0.66901135; 5.567612, 4.7109065, 1.6869164; 5.482127, 1.3718076, 1.4566234; 5.4434896, -0.29790807, 1.3423029; 5.492086, -1.2108173, 2.061013; 5.5745616, -2.0063906, 2.55016; 5.3863797, -1.627423, 1.5341543; -4.6718144, 7.904155, 0.52655727; -5.801812, 3.2892532, -0.81009144; -4.118964, 0.6910465, 0.07198846; -3.2775407, -0.6080551, 0.51302755; -3.6719444, -1.8018686, 0.6047224; -3.8712592, -2.792758, 0.71128404; -3.1748238, -1.9213021, 1.1361266\",\n  \"0.0, 0.0, 0.0; 1.4032388, -1.8826033, 0.97781605; 2.766739, -9.038404, 0.92655516; 3.5229616, -15.698542, -2.7454076; 4.59179, -17.350334, -1.0389478; 4.847942, -16.901999, 0.12011218; -1.5517595, -1.7407013, 0.9357522; -0.76386625, -8.8412695, 1.9671578; -0.04064524, -15.995671, -0.94103694; -0.36421165, -17.266855, 1.3275025; -0.55373555, -17.557259, 2.5580173; -0.13488844, 2.497252, 0.065965965; -0.34039897, 4.9833136, 0.40887618; -0.540485, 7.4841647, 0.8541862; -0.6553829, 9.070888, 0.9367219; -0.469464, 10.609978, 0.5992141; -0.7031688, 12.184515, 0.23577031; 3.4070826, 9.01683, 0.6093201; 5.6527724, 4.6459255, 1.2841189; 5.579031, 1.3302472, 0.8250263; 5.54653, -0.32778955, 0.5961807; 5.6576285, -1.2863616, 1.2451074; 5.7868567, -2.111116, 1.6718208; 5.533066, -1.668462, 0.6966572; -4.6404147, 7.934418, 0.54824495; -5.7756224, 3.3250413, -0.8029741; -4.1007133, 0.7195265, 0.07263541; -3.2632596, -0.5832293, 0.51043975; -3.6569257, -1.7771835, 0.6034597; -3.8554971, -2.7681637, 0.7105632; -3.1574643, -1.8966496, 1.1326555\",\n  \"0.0, 0.0, 0.0; 1.4031789, -1.8819953, 0.9790716; 2.76094, -9.038912, 0.9312843; 3.5068278, -15.670277, -2.7944694; 4.5860424, -17.329302, -1.1016176; 4.8503904, -16.89697, 0.061674237; -1.5518162, -1.7400044, 0.936954; -0.75794035, -8.843798, 1.9412023; -0.03200203, -15.989946, -0.98654115; -0.33867502, -17.26185, 1.2839407; -0.51987934, -17.554945, 2.5150704; -0.13206308, 2.4976633, 0.05524244; -0.32622647, 4.985963, 0.3883937; -0.5063645, 7.488985, 0.83000565; -0.61941296, 9.075438, 0.919959; -0.43359828, 10.615039, 0.5847342; -0.6654656, 12.190442, 0.2238754; 3.4483433, 8.996095, 0.5450125; 5.7273917, 4.604341, 0.89389783; 5.664319, 1.3264027, 0.21487749; 5.6373334, -0.31278062, -0.12403616; 5.7953506, -1.3101971, 0.4525921; 5.9598308, -2.158546, 0.8162601; 5.658494, -1.6570904, -0.11596012; -4.606044, 7.9645295, 0.56123954; -5.748581, 3.360856, -0.80318135; -4.082657, 0.7481313, 0.068072855; -3.2496958, -0.5582297, 0.5036994; -3.6427696, -1.7523239, 0.5974266; -3.8407767, -2.7433872, 0.7048062; -3.1419852, -1.8717475, 1.1253811\",\n  \"0.0, 0.0, 0.0; 1.4032146, -1.8819313, 0.97914374; 2.754315, -9.040162, 0.94030607; 3.4921675, -15.643593, -2.8363156; 4.5742307, -17.311314, -1.1538585; 4.846071, -16.901129, 0.015709639; -1.5517837, -1.7399967, 0.9370224; -0.75499594, -8.847201, 1.9144714; -0.02366352, -15.985305, -1.0314999; -0.31694272, -17.257448, 1.240617; -0.49178523, -17.551022, 2.4725523; -0.12674595, 2.4981833, 0.04278087; -0.30939448, 4.988869, 0.36441168; -0.47339138, 7.4936585, 0.8022779; -0.5838502, 9.079741, 0.90150964; -0.39728183, 10.620071, 0.5700767; -0.62698674, 12.196529, 0.21245465; 3.486424, 8.980222, 0.4824156; 5.791088, 4.5882306, 0.52951616; 5.737041, 1.3617678, -0.3632; 5.7147207, -0.25168872, -0.80903864; 5.905478, -1.2818004, -0.30427068; 6.094419, -2.1490006, -0.0021634102; 5.7596593, -1.5929356, -0.89099604; -4.5726576, 7.989327, 0.5654659; -5.726343, 3.3915133, -0.80929375; -4.069639, 0.7718296, 0.058639765; -3.2412891, -0.5380113, 0.49260613; -3.6343393, -1.7320503, 0.58713186; -3.8323746, -2.723013, 0.6953849; -3.1344035, -1.8507605, 1.1160519\"\n]\n\nexport const seq2 = [\n\"0.0, 0.0, 0.0; 1.2552955, -1.9279126, 1.0847974; 2.1271794, -9.111054, 1.9271369; 3.2960262, -16.459257, 0.18062484; 2.8099215, -17.784454, 2.3693166; 2.454963, -17.264456, 3.4709718; -1.6793493, -1.5542524, 1.0381316; -1.3431978, -8.6697645, 2.2039492; -0.81091034, -15.904186, -0.5430331; -1.7558703, -17.09908, 1.589139; -2.2370157, -17.254362, 2.7633646; 0.12522875, 2.4983087, 0.039828863; 0.15026866, 4.9657445, 0.5412833; 0.12267795, 7.4028473, 1.2844934; 0.008469164, 8.890457, 1.8427749; 0.124712005, 10.466403, 1.9847474; -0.17592509, 12.070981, 1.9560056; 4.127321, 8.757626, 0.9384767; 5.184576, 3.9471269, 1.5255017; 4.1950135, 0.7895477, 2.0357823; 3.704973, -0.7911185, 2.288501; 4.158049, -1.60745, 2.9817789; 4.484441, -2.3430254, 3.4628205; 3.6725748, -2.0405226, 2.7840998; -3.955993, 8.087429, 1.3237547; -5.6502066, 3.6104922, 0.120624185; -4.0727453, 0.84297967, 0.5823697; -3.2840157, -0.5407753, 0.8132417; -3.7316892, -1.7173716, 0.7471946; -3.978427, -2.703203, 0.73303807; -3.2874253, -1.9135116, 1.302119\",\n\"0.0, 0.0, 0.0; 1.2546307, -1.9255348, 1.0897777; 2.1210895, -9.108723, 1.9373033; 3.3007994, -16.454311, 0.18710041; 2.8115327, -17.778559, 2.3756628; 2.4542751, -17.255209, 3.4749856; -1.679837, -1.5505298, 1.0428978; -1.3525176, -8.666967, 2.2055764; -0.8019751, -15.900003, -0.5414591; -1.7524828, -17.098406, 1.5862727; -2.2373462, -17.250584, 2.759375; 0.14874071, 2.4973102, 0.011538969; 0.1947934, 4.9701023, 0.48429647; 0.17215315, 7.4129295, 1.2086388; 0.05809302, 8.899182, 1.7705525; 0.17715575, 10.474495, 1.9171423; -0.119449064, 12.079827, 1.8886759; 4.1865387, 8.745544, 0.89057994; 5.1463346, 3.9925618, 1.9352; 4.006089, 0.9173672, 2.6082125; 3.440812, -0.6224344, 2.942855; 3.7906737, -1.3877792, 3.7454464; 4.0358944, -2.087544, 4.319206; 3.2989385, -1.8142198, 3.5488257; -3.903281, 8.117604, 1.2037358; -5.6249814, 3.6335711, 0.06793535; -4.0558224, 0.86400294, 0.54537964; -3.2712448, -0.52077985, 0.7841022; -3.7297182, -1.6938735, 0.73113334; -3.9853325, -2.6775355, 0.72738653; -3.2848248, -1.8887463, 1.286\",\n\"0.0, 0.0, 0.0; 1.2541325, -1.9228617, 1.0950584; 2.1138716, -9.106611, 1.9446745; 3.3026528, -16.449242, 0.18820083; 2.812759, -17.772894, 2.3769827; 2.4544718, -17.245844, 3.4742002; -1.6801871, -1.5467389, 1.0479512; -1.3636317, -8.66433, 2.2065463; -0.7970104, -15.896014, -0.54077864; -1.750097, -17.097809, 1.5838835; -2.237208, -17.250313, 2.756012; 0.16965064, 2.4959679, -0.013326655; 0.23364878, 4.9734344, 0.43207914; 0.21378562, 7.422561, 1.1349127; 0.10340649, 8.910158, 1.6939969; 0.22750373, 10.484735, 1.8442733; -0.06415667, 12.091018, 1.8184485; 4.235451, 8.738171, 0.83878195; 5.0878477, 4.0913153, 2.3498867; 3.8059354, 1.1084836, 3.1680212; 3.169934, -0.3854109, 3.575813; 3.4189353, -1.0837681, 4.4716954; 3.5849023, -1.7346357, 5.125783; 2.924785, -1.507358, 4.274968; -3.8589015, 8.141548, 1.0898595; -5.6028852, 3.6502795, 0.018470287; -4.041957, 0.8783307, 0.508901; -3.2614942, -0.5076425, 0.7541152; -3.7297, -1.6773566, 0.7128261; -3.99314, -2.6589463, 0.7177902; -3.2817032, -1.8721081, 1.2652316\",\n\"0.0, 0.0, 0.0; 1.2534969, -1.92078, 1.0994309; 2.1060777, -9.105278, 1.9499216; 3.3058343, -16.444668, 0.18738484; 2.8144608, -17.76884, 2.3755202; 2.4542334, -17.244328, 3.473318; -1.6806581, -1.5433829, 1.0521353; -1.373831, -8.662026, 2.2068691; -0.79292655, -15.892641, -0.5402875; -1.7494344, -17.098728, 1.5804021; -2.2391057, -17.247564, 2.751935; 0.18598734, 2.4946017, -0.034430802; 0.26448277, 4.97622, 0.38477272; 0.2478345, 7.4322205, 1.0632818; 0.14391287, 8.9235935, 1.6134747; 0.27521712, 10.497247, 1.7672585; -0.009899706, 12.10478, 1.7467017; 4.2758994, 8.73162, 0.7829796; 4.9513507, 4.20439, 2.6938014; 3.5673459, 1.3256738, 3.6975203; 2.8800938, -0.11622846, 4.198633; 3.0344105, -0.7319019, 5.173026; 3.1257217, -1.3211486, 5.896528; 2.5397577, -1.1564119, 4.979574; -3.821993, 8.164103, 0.9820129; -5.5854406, 3.66641, -0.02885896; -4.0311136, 0.892709, 0.47251052; -3.2539506, -0.49413943, 0.723195; -3.7303653, -1.6608297, 0.6913263; -4.0003166, -2.6405923, 0.7029313; -3.278302, -1.8563411, 1.2401404\",\n\"0.0, 0.0, 0.0; 1.2536528, -1.9180291, 1.104046; 2.098397, -9.103432, 1.9547212; 3.3060832, -16.439823, 0.18512666; 2.8151767, -17.764297, 2.3731847; 2.454242, -17.241198, 3.4714246; -1.6804886, -1.5405478, 1.0565523; -1.3833243, -8.660368, 2.206553; -0.79130304, -15.890041, -0.5407102; -1.7503387, -17.099436, 1.5769515; -2.2419205, -17.244371, 2.7481735; 0.20219173, 2.4929633, -0.055383343; 0.29374236, 4.9785166, 0.33700264; 0.27697262, 7.441532, 0.98958606; 0.17866892, 8.937122, 1.5292614; 0.31866306, 10.509638, 1.6869643; 0.042151928, 12.118744, 1.6729962; 4.309401, 8.730518, 0.724345; 4.795717, 4.341064, 2.9825466; 3.3173234, 1.5918956, 4.1934776; 2.5824509, 0.21484601, 4.7986298; 2.6488388, -0.30653, 5.835967; 2.6709752, -0.8245646, 6.6170907; 2.1566515, -0.73637205, 5.648076; -3.7907703, 8.17999, 0.8716904; -5.572874, 3.6761646, -0.07726377; -4.0240855, 0.9012072, 0.4341904; -3.2496934, -0.48627043, 0.6899183; -3.732194, -1.650671, 0.667179; -4.006899, -2.6290143, 0.6852125; -3.2759085, -1.8463074, 1.2124429\",\n\"0.0, 0.0, 0.0; 1.252981, -1.9160142, 1.1082995; 2.0909815, -9.102448, 1.9569257; 3.3063262, -16.4355, 0.17875195; 2.816772, -17.760338, 2.3668926; 2.455516, -17.239515, 3.4661086; -1.6809859, -1.5372043, 1.060623; -1.3908597, -8.658182, 2.2052393; -0.79159284, -15.887089, -0.54246855; -1.7504544, -17.099869, 1.5733352; -2.2424657, -17.2415, 2.744781; 0.21710788, 2.4911594, -0.07618015; 0.32026157, 4.9805093, 0.28826526; 0.3031982, 7.450794, 0.91275847; 0.21146014, 8.9510565, 1.4404905; 0.36067528, 10.522327, 1.602095; 0.093036056, 12.132981, 1.5956979; 4.3386326, 8.731741, 0.65436685; 4.636588, 4.4977326, 3.221014; 3.0733685, 1.9058564, 4.6522546; 2.2954984, 0.6076611, 5.36788; 2.281908, 0.19016615, 6.453155; 2.2413993, -0.2486563, 7.28068; 1.7949773, -0.24956793, 6.2746964; -3.7629077, 8.192856, 0.7648498; -5.5645638, 3.684219, -0.122324824; -4.019882, 0.908391, 0.39676923; -3.247542, -0.47952116, 0.65631557; -3.735053, -1.641957, 0.64120406; -4.0135336, -2.619131, 0.66408056; -3.2730827, -1.8386292, 1.1812828\",\n\"0.0, 0.0, 0.0; 1.2523917, -1.9140757, 1.1123077; 2.0828273, -9.101656, 1.9586632; 3.3039699, -16.43118, 0.16995049; 2.8172746, -17.756071, 2.3586965; 2.4565969, -17.237896, 3.459353; -1.6814181, -1.5340773, 1.0644584; -1.399346, -8.65639, 2.202763; -0.79400766, -15.884697, -0.54519224; -1.752717, -17.099886, 1.569298; -2.2450223, -17.236788, 2.7411826; 0.23034674, 2.489282, -0.09607507; 0.34333128, 4.9821067, 0.24064784; 0.32504946, 7.459486, 0.8363414; 0.24084389, 8.96466, 1.3511872; 0.39962345, 10.534605, 1.5165238; 0.14075169, 12.146703, 1.5182606; 4.3623867, 8.735029, 0.58098096; 4.4930077, 4.6936874, 3.45392; 2.8476844, 2.2740948, 5.081313; 2.0282464, 1.0622782, 5.895275; 1.9383862, 0.75551045, 7.013366; 1.838145, 0.40193862, 7.8758874; 1.4581426, 0.3035959, 6.847674; -3.7398982, 8.202111, 0.6618111; -5.560018, 3.688889, -0.16210252; -4.018365, 0.9124677, 0.36278874; -3.2475405, -0.47574198, 0.62523353; -3.7381861, -1.6369247, 0.6166314; -4.0188813, -2.6133661, 0.64339256; -3.270228, -1.8345163, 1.1511918\",\n\"0.0, 0.0, 0.0; 1.2524407, -1.912708, 1.1146024; 2.0749598, -9.101529, 1.9581492; 3.3019767, -16.427645, 0.15952218; 2.8180487, -17.753155, 2.3485074; 2.4577708, -17.239737, 3.4515214; -1.6813567, -1.5326184, 1.0666547; -1.4066237, -8.656119, 2.1993055; -0.7973839, -15.883991, -0.54893136; -1.7551312, -17.102293, 1.564203; -2.2473009, -17.23555, 2.7365642; 0.24333405, 2.4872427, -0.115009174; 0.3648214, 4.9833055, 0.19359304; 0.34250832, 7.4676275, 0.7594867; 0.2660097, 8.97769, 1.2610496; 0.43445098, 10.546283, 1.4296246; 0.18412122, 12.159702, 1.439132; 4.3799324, 8.74299, 0.5045845; 4.3680096, 4.9283485, 3.6750195; 2.6442962, 2.6919167, 5.4742165; 1.7852132, 1.5719291, 6.374281; 1.6213353, 1.381974, 7.5097857; 1.462822, 1.1192567, 8.395707; 1.1478187, 0.9173661, 7.3606663; -3.722238, 8.205119, 0.5602455; -5.5600204, 3.6882138, -0.20196873; -4.0193434, 0.9123709, 0.32881582; -3.249007, -0.47554958, 0.5942065; -3.7418127, -1.6358473, 0.5921856; -4.02393, -2.611762, 0.6229082; -3.2678895, -1.8339543, 1.1212722\",\n\"0.0, 0.0, 0.0; 1.2516688, -1.9128605, 1.115208; 2.067401, -9.102656, 1.9570297; 3.297449, -16.425716, 0.14805663; 2.8176641, -17.752504, 2.3371792; 2.458647, -17.24363, 3.4427073; -1.681968, -1.5315443, 1.0672336; -1.4153647, -8.656358, 2.193552; -0.8012871, -15.88364, -0.5551591; -1.7566011, -17.105667, 1.5569255; -2.2480066, -17.234873, 2.7300606; 0.25415114, 2.4852972, -0.13235834; 0.3819942, 4.9843636, 0.14807928; 0.35540268, 7.4755216, 0.68288416; 0.2882576, 8.990285, 1.1714401; 0.46661958, 10.557546, 1.3421869; 0.22434507, 12.172143, 1.3581828; 4.3920608, 8.752253, 0.4227617; 4.2727404, 5.2127104, 3.895612; 2.4678762, 3.1558414, 5.8247776; 1.5679581, 2.1258187, 6.7900305; 1.3332329, 2.0560808, 7.926846; 1.1186345, 1.8878193, 8.823863; 0.8662549, 1.5789278, 7.7981014; -3.7096217, 8.205793, 0.4637253; -5.5603056, 3.6846004, -0.2395707; -4.020074, 0.90949154, 0.29631916; -3.2499583, -0.47806084, 0.56426316; -3.7441208, -1.6377763, 0.5682578; -4.027048, -2.613334, 0.60265386; -3.2649245, -1.8360567, 1.0925075\",\n\"0.0, 0.0, 0.0; 1.2519867, -1.9120165, 1.1162978; 2.0597405, -9.10305, 1.9552367; 3.2913616, -16.423033, 0.13491702; 2.8155797, -17.750477, 2.3245153; 2.4580486, -17.246834, 3.4329166; -1.6817027, -1.5311078, 1.0682772; -1.4252582, -8.657328, 2.1880407; -0.80581915, -15.88373, -0.5617802; -1.7597607, -17.109228, 1.548912; -2.2508807, -17.23315, 2.7227366; 0.2628814, 2.4834886, -0.14829569; 0.3952948, 4.9852033, 0.105108455; 0.36342695, 7.482815, 0.6086074; 0.30816695, 9.002258, 1.0839394; 0.49550346, 10.568371, 1.255616; 0.25863266, 12.18371, 1.2767965; 4.398548, 8.762929, 0.3413631; 4.2034483, 5.551824, 4.116813; 2.316052, 3.6632073, 6.136909; 1.3747916, 2.717433, 7.147875; 1.0734136, 2.7678826, 8.269897; 0.8057313, 2.695049, 9.165467; 0.6125202, 2.2791245, 8.164981; -3.702297, 8.203494, 0.37140626; -5.5635424, 3.678422, -0.2769274; -4.022472, 0.9051473, 0.2660004; -3.2519379, -0.48148847, 0.5374639; -3.7468307, -1.6408648, 0.5464061; -4.0301156, -2.6162066, 0.5838483; -3.263379, -1.8391137, 1.0667466\",\n\"0.0, 0.0, 0.0; 1.2517704, -1.9120568, 1.1164718; 2.0532954, -9.1040535, 1.9531276; 3.2859604, -16.420816, 0.12061322; 2.8139768, -17.7491, 2.3105254; 2.457941, -17.250704, 3.4217758; -1.6818745, -1.5308032, 1.0684433; -1.4322159, -8.658419, 2.1808343; -0.81115556, -15.883921, -0.5709853; -1.7617531, -17.112513, 1.5394175; -2.2514148, -17.231886, 2.714322; 0.26913422, 2.4819286, -0.16251585; 0.40291524, 4.986106, 0.064471036; 0.36364985, 7.4898605, 0.53591967; 0.3217926, 9.013572, 0.9987975; 0.5186936, 10.578438, 1.1711298; 0.2870263, 12.194463, 1.1970521; 4.395685, 8.777348, 0.25773454; 4.1409955, 5.9256296, 4.308182; 2.1788135, 4.2035456, 6.404415; 1.2001218, 3.3411627, 7.4536867; 0.83876735, 3.5092058, 8.546158; 0.52275634, 3.530828, 9.428582; 0.3820689, 3.0115054, 8.468474; -3.7036629, 8.19646, 0.28405243; -5.5699086, 3.6665864, -0.31446463; -4.0287614, 0.89490795, 0.2363382; -3.2581873, -0.49092877, 0.5117399; -3.753077, -1.65027, 0.52456605; -4.036155, -2.625579, 0.5643462; -3.2660122, -1.8483593, 1.0415864\",\n\"0.0, 0.0, 0.0; 1.2517775, -1.9120598, 1.1164585; 2.0474072, -9.105376, 1.947376; 3.279933, -16.418627, 0.10079932; 2.813272, -17.747105, 2.2917337; 2.4596214, -17.253017, 3.4056675; -1.6818672, -1.5308205, 1.0684305; -1.4387879, -8.659777, 2.1736605; -0.81735504, -15.884203, -0.58090115; -1.7635965, -17.116692, 1.529187; -2.2512484, -17.230257, 2.7055025; 0.2700128, 2.480927, -0.175809; 0.40101987, 4.987458, 0.025344282; 0.3545578, 7.4969277, 0.46465626; 0.3289021, 9.024453, 0.91600275; 0.5361041, 10.587993, 1.0883005; 0.30925703, 12.204637, 1.1179744; 4.3828897, 8.792307, 0.16994682; 4.076599, 6.301548, 4.44845; 2.0533953, 4.7580123, 6.624242; 1.0440747, 3.985076, 7.7134404; 0.63345253, 4.2663126, 8.764442; 0.27737612, 4.3799458, 9.624269; 0.17951825, 3.7621648, 8.718693; -3.7147586, 8.188565, 0.2037938; -5.581427, 3.6530485, -0.34891; -4.038664, 0.883811, 0.20959231; -3.2672818, -0.500805, 0.48884514; -3.761818, -1.6602498, 0.5054092; -4.0444884, -2.6355662, 0.5478244; -3.2727387, -1.857388, 1.0208892\",\n\"0.0, 0.0, 0.0; 1.2518294, -1.9121717, 1.1162083; 2.0414028, -9.106934, 1.9403591; 3.273788, -16.416264, 0.07823241; 2.8134809, -17.74612, 2.2696738; 2.462501, -17.259218, 3.3876088; -1.681828, -1.53103, 1.068191; -1.44436, -8.661415, 2.1653929; -0.8262376, -15.884905, -0.59236574; -1.7657461, -17.119955, 1.519233; -2.250069, -17.232687, 2.6970034; 0.26703048, 2.4804633, -0.18657464; 0.39156687, 4.989124, -0.00927566; 0.3366949, 7.503801, 0.39813113; 0.32926244, 9.035002, 0.8375302; 0.5471952, 10.5971, 1.0096562; 0.3246246, 12.214257, 1.0434699; 4.3600492, 8.809577, 0.082092196; 4.009959, 6.67045, 4.543578; 1.9398074, 5.322754, 6.803691; 0.90682113, 4.647925, 7.935087; 0.4580983, 5.0352335, 8.935561; 0.07064101, 5.2362237, 9.76531; 0.0052014664, 4.5281887, 8.925251; -3.735356, 8.177654, 0.13341436; -5.596099, 3.6346655, -0.3762314; -4.0504403, 0.8684478, 0.18918952; -3.2776124, -0.51465976, 0.47189856; -3.7711754, -1.6744714, 0.49152592; -4.0529695, -2.649938, 0.536252; -3.2809055, -1.8702917, 1.0063771\",\n\"0.0, 0.0, 0.0; 1.2519224, -1.9128282, 1.1149787; 2.0363507, -9.109137, 1.930492; 3.2657564, -16.414806, 0.052101612; 2.8126256, -17.745056, 2.2448008; 2.4651809, -17.262264, 3.3656192; -1.6817677, -1.5319172, 1.0670141; -1.4480739, -8.663605, 2.1565382; -0.8351859, -15.88615, -0.604861; -1.7667568, -17.123936, 1.5086517; -2.2469552, -17.231596, 2.6885834; 0.262163, 2.4802964, -0.19548522; 0.37793905, 4.9908805, -0.04093346; 0.31304944, 7.51027, 0.3346402; 0.32515934, 9.044945, 0.76164365; 0.5539639, 10.605571, 0.9330214; 0.335025, 12.223139, 0.97067696; 4.330197, 8.82904, -0.0054848194; 3.9558632, 7.0408683, 4.605979; 1.8525324, 5.8978014, 6.9467745; 0.8027494, 5.325472, 8.118485; 0.32645756, 5.810945, 9.061762; -0.08378005, 6.0939207, 9.855886; -0.12565799, 5.3039284, 9.090736; -3.762323, 8.163375, 0.06903514; -5.610998, 3.6117635, -0.40644595; -4.0623374, 0.84887815, 0.16699532; -3.288007, -0.5325625, 0.45371446; -3.7804208, -1.6928079, 0.47634152; -4.061246, -2.6684358, 0.5235759; -3.2899075, -1.8868341, 0.9916406\",\n\"0.0, 0.0, 0.0; 1.2523605, -1.9131913, 1.113863; 2.032095, -9.111012, 1.9204792; 3.2581701, -16.41326, 0.026666403; 2.81212, -17.744259, 2.220362; 2.468136, -17.268211, 3.3451254; -1.6814281, -1.5330324, 1.0659467; -1.4495655, -8.66604, 2.1471858; -0.84478074, -15.887685, -0.6183517; -1.7681782, -17.127254, 1.4977007; -2.2439468, -17.231747, 2.6797097; 0.2563588, 2.4802403, -0.20371965; 0.36261845, 4.9924736, -0.07061477; 0.28751907, 7.515905, 0.2747053; 0.31583387, 9.053558, 0.6900646; 0.55441743, 10.612773, 0.86095023; 0.33933508, 12.230757, 0.9027239; 4.29785, 8.84819, -0.09213567; 3.9124143, 7.412298, 4.639982; 1.7889564, 6.4816966, 7.0555224; 0.72890437, 6.0157657, 8.264535; 0.23472264, 6.5906878, 9.146328; -0.19023532, 6.949553, 9.901067; -0.216467, 6.0870767, 9.217881; -3.7914047, 8.147757, 0.012225032; -5.625249, 3.5874605, -0.43673608; -4.0732174, 0.8286946, 0.14732745; -3.2972023, -0.55068624, 0.43935955; -3.78865, -1.7112882, 0.4645578; -4.0687346, -2.6870048, 0.5142908; -3.2992697, -1.903183, 0.9817265\",\n\"0.0, 0.0, 0.0; 1.2530957, -1.9136677, 1.112217; 2.0284462, -9.113251, 1.907257; 3.2505522, -16.411995, -0.0025621653; 2.811575, -17.742924, 2.1926022; 2.4712849, -17.269041, 3.3194013; -1.6808546, -1.5347549, 1.0643717; -1.4488672, -8.669103, 2.136709; -0.8554552, -15.889627, -0.63421106; -1.7699413, -17.1309, 1.4847112; -2.2406726, -17.231333, 2.6690865; 0.25140098, 2.480148, -0.2108954; 0.34846213, 4.993761, -0.098413415; 0.2623201, 7.520736, 0.21712905; 0.30374742, 9.061533, 0.61953855; 0.5509113, 10.6195545, 0.7891047; 0.33957332, 12.237921, 0.8349707; 4.2647185, 8.867938, -0.18057549; 3.880697, 7.7868114, 4.6450834; 1.7489705, 7.071726, 7.125874; 0.6846024, 6.713696, 8.367424; 0.18095398, 7.3697853, 9.184855; -0.2517103, 7.798749, 9.897453; -0.26935226, 6.873808, 9.301241; -3.8205814, 8.129672, -0.037558198; -5.63855, 3.5616584, -0.4724035; -4.082316, 0.80797625, 0.124330014; -3.3041992, -0.5688628, 0.42269665; -3.7942078, -1.7300221, 0.45013922; -4.0731864, -2.7059321, 0.5022344; -3.3064287, -1.9194868, 0.969712\",\n\"0.0, 0.0, 0.0; 1.2530229, -1.914831, 1.1102948; 2.0264978, -9.116277, 1.8901471; 3.2432017, -16.411308, -0.037222028; 2.8127146, -17.742556, 2.1594296; 2.476853, -17.271276, 3.2886467; -1.680932, -1.5359437, 1.0625324; -1.4452845, -8.671899, 2.1233103; -0.86442983, -15.890406, -0.6555152; -1.7686379, -17.132725, 1.4672012; -2.2335372, -17.230513, 2.6540987; 0.24902104, 2.479786, -0.21786623; 0.3380363, 4.994502, -0.1251149; 0.2396886, 7.524364, 0.16249256; 0.29107973, 9.068093, 0.552316; 0.54513454, 10.625216, 0.71994936; 0.33674145, 12.243858, 0.7693897; 4.232874, 8.888425, -0.2689299; 3.8757226, 8.178287, 4.627133; 1.7457302, 7.6695814, 7.1597757; 0.68211305, 7.414861, 8.427194; 0.17472237, 8.142527, 9.179103; -0.26048338, 8.63456, 9.84806; -0.273135, 7.657451, 9.341704; -3.847573, 8.108538, -0.07996908; -5.646813, 3.532528, -0.50859666; -4.0894003, 0.782238, 0.1005767; -3.3106954, -0.5929054, 0.40516376; -3.7992978, -1.7546066, 0.43467295; -4.077198, -2.7307038, 0.4889825; -3.3131454, -1.9417237, 0.95661795\",\n\"0.0, 0.0, 0.0; 1.2537438, -1.9157197, 1.1079457; 2.0262632, -9.118993, 1.8716954; 3.235633, -16.41063, -0.07305336; 2.8125896, -17.742697, 2.1245472; 2.4809616, -17.271902, 3.2552166; -1.6803776, -1.5381029, 1.0602841; -1.4401066, -8.675903, 2.1075258; -0.87202495, -15.891952, -0.68031335; -1.7673516, -17.136099, 1.4450951; -2.227001, -17.22859, 2.6344593; 0.24753188, 2.4792583, -0.22543456; 0.3295739, 4.994858, -0.15227443; 0.21917021, 7.527075, 0.10903072; 0.2764064, 9.074018, 0.48505974; 0.5358696, 10.630444, 0.65086865; 0.33057803, 12.249344, 0.70468897; 4.203078, 8.907381, -0.35524505; 3.8847966, 8.560294, 4.582519; 1.7663331, 8.2630005, 7.1581073; 0.7083658, 8.114085, 8.446921; 0.2010746, 8.904885, 9.132195; -0.23355079, 9.453761, 9.755766; -0.24472527, 8.435092, 9.3392515; -3.8721876, 8.087232, -0.12068851; -5.6476088, 3.5019379, -0.549421; -4.091235, 0.75404716, 0.07308835; -3.3130493, -0.61989677, 0.38434148; -3.8006146, -1.7819933, 0.41539708; -4.0777874, -2.7581875, 0.47164333; -3.3167953, -1.9668609, 0.9403033\",\n\"0.0, 0.0, 0.0; 1.2551532, -1.9159153, 1.10601; 2.0282435, -9.121031, 1.8515868; 3.2306077, -16.409225, -0.11033332; 2.8140461, -17.741425, 2.0884252; 2.4862804, -17.272943, 3.22118; -1.679264, -1.5405927, 1.058432; -1.432295, -8.680431, 2.090104; -0.8786816, -15.8934355, -0.7085035; -1.7646787, -17.138872, 1.4200578; -2.2188258, -17.23057, 2.6115952; 0.2470455, 2.4786108, -0.2329617; 0.3230822, 4.99487, -0.1783809; 0.20056972, 7.5289397, 0.05841756; 0.26028332, 9.078857, 0.42158788; 0.5241446, 10.634758, 0.5853752; 0.32232568, 12.253958, 0.64316195; 4.174581, 8.925552, -0.44060498; 3.8992631, 8.9198265, 4.5119147; 1.8049684, 8.844474, 7.123079; 0.7589314, 8.806609, 8.429557; 0.25412893, 9.651865, 9.048449; -0.17783996, 10.250958, 9.625937; -0.1892802, 9.200573, 9.2975235; -3.8948607, 8.065212, -0.15515906; -5.642062, 3.4697404, -0.5907861; -4.087744, 0.7242384, 0.04720503; -3.3105855, -0.6485108, 0.3661999; -3.7973328, -1.8109162, 0.39850563; -4.0739937, -2.7871497, 0.45656067; -3.3163757, -1.9935353, 0.9268162\",\n\"0.0, 0.0, 0.0; 1.2557738, -1.9170926, 1.1032621; 2.0299969, -9.124154, 1.8285816; 3.226244, -16.408615, -0.15086746; 2.815154, -17.74082, 2.048918; 2.4907644, -17.274483, 3.183528; -1.6787916, -1.5429103, 1.0558023; -1.4232144, -8.684964, 2.069898; -0.8837842, -15.894286, -0.74093914; -1.7618651, -17.14056, 1.3904107; -2.2110286, -17.228605, 2.5841107; 0.24658397, 2.47789, -0.24098293; 0.31614098, 4.994673, -0.2050638; 0.18104234, 7.530165, 0.008519068; 0.24392194, 9.082672, 0.35990494; 0.5111543, 10.638191, 0.5218345; 0.31100512, 12.257462, 0.5833237; 4.1446333, 8.943507, -0.5250763; 3.9287763, 9.290553, 4.418227; 1.8620484, 9.419632, 7.049178; 0.829721, 9.48405, 8.365484; 0.32773525, 10.375334, 8.918595; -0.10106909, 11.018076, 9.449644; -0.1122845, 9.944623, 9.207016; -3.9183424, 8.0422, -0.18799013; -5.6347914, 3.4362059, -0.6346067; -4.0826607, 0.69310594, 0.01885438; -3.3065953, -0.6784419, 0.3455846; -3.7926095, -1.8411515, 0.37797603; -4.0688066, -2.817474, 0.4367417; -3.3140733, -2.022294, 0.90898675\",\n\"0.0, 0.0, 0.0; 1.256367, -1.9180834, 1.1008621; 2.0329137, -9.127004, 1.8049184; 3.222258, -16.40812, -0.19093716; 2.8151426, -17.740965, 2.0091987; 2.4935637, -17.276493, 3.145373; -1.6783357, -1.5449748, 1.0535051; -1.4131839, -8.689384, 2.048369; -0.88684595, -15.894293, -0.776232; -1.7590365, -17.142405, 1.3564601; -2.204146, -17.224094, 2.5521288; 0.24597947, 2.477112, -0.24944691; 0.30917192, 4.994258, -0.23197503; 0.16196586, 7.530855, -0.04067643; 0.22542515, 9.0857, 0.3001086; 0.49550655, 10.640881, 0.46056247; 0.2977143, 12.260302, 0.5256116; 4.1152587, 8.959767, -0.6081282; 3.971286, 9.665041, 4.299534; 1.9330153, 9.985928, 6.936276; 0.91489613, 10.146312, 8.255451; 0.41588557, 11.076147, 8.744024; -0.009303242, 11.7566805, 9.228888; -0.019370811, 10.667714, 9.069678; -3.9410143, 8.019874, -0.22002544; -5.6246276, 3.4033003, -0.6821351; -4.075064, 0.6626406, -0.012540519; -3.300284, -0.7076882, 0.32225543; -3.7858472, -1.8706094, 0.35379902; -4.0618057, -2.8470068, 0.41243544; -3.3095658, -2.0509155, 0.88711727\",\n\"0.0, 0.0, 0.0; 1.2570654, -1.9192351, 1.0980538; 2.0370219, -9.129847, 1.7806957; 3.2185407, -16.407768, -0.23138404; 2.814602, -17.740763, 1.9692469; 2.495688, -17.275215, 3.1057315; -1.6777991, -1.5473862, 1.0508181; -1.4022819, -8.694328, 2.024444; -0.8883194, -15.894436, -0.81464005; -1.7548878, -17.14354, 1.3197627; -2.1960912, -17.220694, 2.5171793; 0.24509276, 2.4763057, -0.25817487; 0.3020745, 4.993661, -0.25894448; 0.1434567, 7.5310736, -0.088742405; 0.20560189, 9.087972, 0.24278739; 0.47768772, 10.642887, 0.40241492; 0.28216434, 12.26243, 0.47118533; 4.0866246, 8.974202, -0.68967795; 4.026253, 10.037943, 4.15471; 2.0173738, 10.540502, 6.7856345; 1.013973, 10.791784, 8.1019; 0.5179907, 11.754002, 8.526692; 0.09655368, 12.467485, 8.965252; 0.08795805, 11.369725, 8.886858; -3.962767, 7.9985967, -0.25030616; -5.614044, 3.3721318, -0.7298424; -4.0661144, 0.6344869, -0.044324696; -3.2921495, -0.7343329, 0.2984347; -3.777044, -1.8976046, 0.3272286; -4.0525694, -2.87423, 0.3840807; -3.3027773, -2.0779605, 0.8623231\",\n\"0.0, 0.0, 0.0; 1.2586184, -1.919753, 1.095366; 2.0415466, -9.132104, 1.7558722; 3.2161186, -16.406889, -0.27156353; 2.8134286, -17.740685, 1.9288106; 2.496234, -17.27669, 3.0664105; -1.6765698, -1.5504606, 1.0482453; -1.3904741, -8.700087, 1.9988462; -0.88691723, -15.894754, -0.85585034; -1.7507739, -17.146809, 1.2779225; -2.189596, -17.218527, 2.4765513; 0.24483058, 2.4753523, -0.2674004; 0.2966749, 4.99275, -0.28589973; 0.12714791, 7.5306783, -0.13499425; 0.18783294, 9.089305, 0.18858816; 0.46065754, 10.644091, 0.34821677; 0.2657863, 12.263534, 0.42106098; 4.0607405, 8.987043, -0.765996; 4.0811024, 10.404374, 3.9873233; 2.1026175, 11.081518, 6.602089; 1.1144632, 11.420164, 7.9102874; 0.62179196, 12.41004, 8.270467; 0.20442459, 13.152949, 8.661484; 0.19738841, 12.052384, 8.663251; -3.9819047, 7.9780984, -0.28077686; -5.5995684, 3.3418012, -0.7795323; -4.052242, 0.607666, -0.078814864; -3.2785776, -0.75939906, 0.27154312; -3.7627358, -1.9230515, 0.29715806; -4.037776, -2.8999362, 0.3518659; -3.290473, -2.1036398, 0.8339438\",\n\"0.0, 0.0, 0.0; 1.2591656, -1.9210958, 1.0923787; 2.0455418, -9.13499, 1.7315948; 3.2147741, -16.406712, -0.30986667; 2.8116386, -17.740969, 1.8901463; 2.495294, -17.279442, 3.0289872; -1.6761538, -1.5528376, 1.0453879; -1.3763853, -8.705116, 1.9715073; -0.8873445, -15.894396, -0.8992436; -1.7482564, -17.147085, 1.2353461; -2.1841872, -17.213955, 2.4353094; 0.24350119, 2.4745517, -0.27589008; 0.28914997, 4.9918876, -0.3113718; 0.10910976, 7.5301337, -0.17914852; 0.16718967, 9.090043, 0.13867998; 0.44055265, 10.644667, 0.2989712; 0.24672848, 12.264051, 0.37580514; 4.0324626, 8.999003, -0.8440101; 4.125477, 10.761217, 3.7916386; 2.1848083, 11.608257, 6.3851414; 1.2156241, 12.031927, 7.6827154; 0.72692364, 13.044946, 7.9781365; 0.31448448, 13.813938, 8.32099; 0.3095808, 12.716392, 8.402626; -4.002674, 7.95816, -0.30476627; -5.5874653, 3.3129416, -0.82556283; -4.040351, 0.5820246, -0.11194575; -3.266795, -0.78343225, 0.24486297; -3.7498765, -1.9476345, 0.26531005; -4.02415, -2.9249399, 0.31622022; -3.279643, -2.1292152, 0.80353975\",\n\"0.0, 0.0, 0.0; 1.2597563, -1.9224036, 1.089393; 2.043365, -9.138729, 1.704097; 3.2051473, -16.406353, -0.35612082; 2.8005474, -17.741272, 1.8432221; 2.4850388, -17.282772, 2.983516; -1.6757042, -1.5552422, 1.0425298; -1.3713646, -8.710829, 1.941195; -0.89459836, -15.893476, -0.9481628; -1.7538297, -17.146626, 1.1868339; -2.1875038, -17.208559, 2.3878794; 0.2383232, 2.473899, -0.28607827; 0.27431592, 4.9910593, -0.34023225; 0.082889125, 7.5294094, -0.22742; 0.1381225, 9.090385, 0.085641414; 0.4118394, 10.64486, 0.24676543; 0.21883844, 12.264164, 0.32728058; 3.99524, 9.011446, -0.92698693; 4.1610956, 11.113683, 3.5625985; 2.2680945, 12.123353, 6.133014; 1.3228467, 12.628427, 7.419062; 0.8384589, 13.660419, 7.648559; 0.43151078, 14.452508, 7.9418044; 0.42950752, 13.363892, 8.103691; -4.0315566, 7.936899, -0.33247977; -5.582672, 3.2830129, -0.87674814; -4.0330405, 0.5564165, -0.15215594; -3.2582254, -0.80687976, 0.21014035; -3.740119, -1.9716691, 0.22418004; -4.0135207, -2.9494615, 0.27018952; -3.2716525, -2.1548967, 0.7633906\",\n\"0.0, 0.0, 0.0; 1.2612044, -1.9229858, 1.0866865; 2.0404897, -9.141834, 1.6767714; 3.1949742, -16.405212, -0.40243602; 2.788776, -17.739576, 1.7969487; 2.4741611, -17.279703, 2.9369369; -1.6745551, -1.5582114, 1.0399395; -1.3667175, -8.717262, 1.9093504; -0.9027449, -15.893244, -0.99859095; -1.7611333, -17.147074, 1.1363456; -2.1928692, -17.203585, 2.3383565; 0.2334145, 2.4731855, -0.29611728; 0.25890994, 4.990023, -0.36823794; 0.053308725, 7.528014, -0.2737788; 0.10621134, 9.08972, 0.036030203; 0.38017854, 10.643991, 0.1986813; 0.18729734, 12.263113, 0.28305393; 3.9527762, 9.027286, -1.0077102; 4.195666, 11.453249, 3.3118951; 2.3583817, 12.62407, 5.8542347; 1.4410926, 13.20981, 7.1262417; 0.96016264, 14.2560835, 7.2885017; 0.55819273, 15.067788, 7.530494; 0.56063753, 13.994092, 7.772294; -4.0639935, 7.9108067, -0.35774451; -5.583474, 3.249299, -0.92552614; -4.0297594, 0.5275159, -0.19164056; -3.2529037, -0.83337414, 0.17530218; -3.7331388, -1.9989132, 0.18203862; -4.0053205, -2.9772882, 0.22257383; -3.2671082, -2.1837223, 0.72281814\",\n\"0.0, 0.0, 0.0; 1.2620198, -1.9242513, 1.0834954; 2.0356839, -9.1455555, 1.6504738; 3.1830804, -16.40533, -0.4451754; 2.7735631, -17.739794, 1.7535334; 2.4590125, -17.281769, 2.8942828; -1.6739215, -1.5609252, 1.0368854; -1.3633649, -8.723325, 1.8772583; -0.9136145, -15.892511, -1.049618; -1.772027, -17.146366, 1.0852938; -2.2022862, -17.201204, 2.2879114; 0.22580642, 2.472823, -0.30491415; 0.2388584, 4.9891987, -0.39438763; 0.020139843, 7.52672, -0.3186457; 0.07224993, 9.088619, -0.009679645; 0.34685728, 10.642554, 0.15509936; 0.15403278, 12.261495, 0.24301283; 3.905762, 9.041054, -1.093921; 4.2334437, 11.773531, 3.032758; 2.4583926, 13.103954, 5.5405645; 1.5723135, 13.769585, 6.7952805; 1.0938175, 14.825211, 6.890171; 0.69638944, 15.6528225, 7.0802054; 0.7057777, 14.6001005, 7.4011164; -4.0997014, 7.8866262, -0.37459823; -5.586406, 3.2180343, -0.9702561; -4.028741, 0.5006964, -0.22831625; -3.249909, -0.85797083, 0.14265272; -3.728589, -2.024168, 0.141093; -3.9996767, -3.0030832, 0.17544657; -3.2655478, -2.210874, 0.6837852\",\n\"0.0, 0.0, 0.0; 1.2633158, -1.9253414, 1.0800425; 2.0332978, -9.148713, 1.6252624; 3.172922, -16.405228, -0.48586285; 2.7594826, -17.74023, 1.7117845; 2.4447784, -17.285183, 2.853683; -1.6728976, -1.5642102, 1.0335817; -1.3559175, -8.729641, 1.845228; -0.9238056, -15.8921995, -1.100471; -1.7820094, -17.144552, 1.0354061; -2.2103112, -17.196661, 2.2388434; 0.21772093, 2.4725773, -0.31268546; 0.21815382, 4.9883747, -0.41797298; -0.013566613, 7.5251923, -0.35922047; 0.03906128, 9.087282, -0.05130717; 0.31433254, 10.640839, 0.11591534; 0.120970115, 12.259479, 0.20808284; 3.8576822, 9.054324, -1.1762298; 4.281106, 12.081768, 2.7299938; 2.5788715, 13.564859, 5.2023945; 1.7293175, 14.30693, 6.4393673; 1.2506976, 15.366383, 6.4675126; 0.856334, 16.2057, 6.6054564; 0.87734365, 15.180176, 7.0043993; -4.13559, 7.8628163, -0.3853652; -5.585891, 3.1865263, -1.009695; -4.0244327, 0.4737873, -0.258951; -3.243706, -0.8825816, 0.11642006; -3.7206717, -2.0494356, 0.106040254; -3.9905295, -3.0289009, 0.13375375; -3.2605343, -2.2382865, 0.6504592\",\n\"0.0, 0.0, 0.0; 1.2646769, -1.9266552, 1.0760999; 2.0316854, -9.151758, 1.6022466; 3.1666539, -16.405148, -0.52208745; 2.748386, -17.740831, 1.6742314; 2.4326534, -17.294065, 2.8191123; -1.6718242, -1.5678425, 1.0298084; -1.3457857, -8.735895, 1.8142555; -0.9322033, -15.89205, -1.149612; -1.7906818, -17.14257, 0.98722816; -2.2174175, -17.195576, 2.1911826; 0.20999125, 2.4725006, -0.3185256; 0.19795746, 4.9876547, -0.43759945; -0.047020376, 7.5235395, -0.39439604; 0.007921495, 9.085366, -0.08555439; 0.28409496, 10.638493, 0.08415438; 0.08959298, 12.256788, 0.17989483; 3.8088884, 9.067714, -1.2545149; 4.3347707, 12.377986, 2.4018261; 2.7171278, 14.005786, 4.83974; 1.910011, 14.820328, 6.05941; 1.4284112, 15.878206, 6.0238624; 1.0357239, 16.725039, 6.111477; 1.0747416, 15.732807, 6.586083; -4.170889, 7.838852, -0.38814363; -5.5878553, 3.1561346, -1.0402257; -4.0218306, 0.44797444, -0.2824967; -3.2388196, -0.9061049, 0.09636566; -3.7133088, -2.0738442, 0.07642961; -3.98138, -3.053973, 0.09714793; -3.2570899, -2.264485, 0.62351394\",\n\"0.0, 0.0, 0.0; 1.2662051, -1.927472, 1.0728352; 2.0274456, -9.154242, 1.5842683; 3.1543689, -16.40676, -0.5473108; 2.7320943, -17.742912, 1.6479568; 2.4159772, -17.298704, 2.7937267; -1.6706059, -1.5711868, 1.0266837; -1.3406626, -8.741361, 1.7898238; -0.94381714, -15.893523, -1.1859457; -1.803061, -17.14255, 0.9514606; -2.2285504, -17.193344, 2.1559515; 0.19860613, 2.4735067, -0.31801564; 0.17205682, 4.988141, -0.4454145; -0.08439249, 7.5231056, -0.4174834; -0.025759786, 9.0845375, -0.107328475; 0.25172365, 10.637126, 0.065147474; 0.05617167, 12.255072, 0.16459066; 3.7564418, 9.079079, -1.3226097; 4.385604, 12.660955, 2.0504608; 2.868335, 14.425882, 4.4572964; 2.111588, 15.309132, 5.6613383; 1.6226599, 16.359924, 5.5659785; 1.2289901, 17.2099, 5.605575; 1.2937858, 16.256784, 6.1520805; -4.2094727, 7.8194027, -0.37657648; -5.59028, 3.129897, -1.056838; -4.021797, 0.4253266, -0.2914105; -3.237557, -0.92695713, 0.09130314; -3.7095885, -2.0954647, 0.06082753; -3.9759607, -3.0761876, 0.07393976; -3.2582428, -2.288074, 0.61125416\",\n\"0.0, 0.0, 0.0; 1.2676938, -1.9285364, 1.0691578; 2.0227983, -9.156891, 1.567118; 3.1435986, -16.408054, -0.5722803; 2.7174356, -17.745178, 1.6216439; 2.4006393, -17.30957, 2.7705235; -1.6694202, -1.5747391, 1.0231645; -1.3345602, -8.746808, 1.7660966; -0.95581067, -15.894774, -1.222086; -1.8169882, -17.141514, 0.91587734; -2.2416787, -17.190762, 2.1207144; 0.18609078, 2.4745185, -0.31771573; 0.1444904, 4.9885592, -0.45259297; -0.1226155, 7.522532, -0.437503; -0.05969718, 9.083341, -0.12505618; 0.21909681, 10.635389, 0.050139353; 0.02230388, 12.252961, 0.15315908; 3.7026043, 9.089312, -1.3889276; 4.427057, 12.929489, 1.665821; 3.029645, 14.824046, 4.04654; 2.3330555, 15.772289, 5.2373843; 1.8329387, 16.811516, 5.088381; 1.4365274, 17.661129, 5.08397; 1.5369207, 16.753084, 5.6977057; -4.248353, 7.801507, -0.35869414; -5.592498, 3.1059055, -1.0696452; -4.020672, 0.4052763, -0.29719192; -3.2347593, -0.9450363, 0.08903536; -3.704518, -2.1141362, 0.047990743; -3.9693549, -3.0953474, 0.053464487; -3.2580936, -2.3088834, 0.6016712\",\n\"0.0, 0.0, 0.0; 1.2687923, -1.929902, 1.0653843; 2.0185184, -9.159581, 1.5521083; 3.13089, -16.40958, -0.5956211; 2.7008555, -17.7475, 1.5970628; 2.3837452, -17.31545, 2.7471995; -1.6685516, -1.5779978, 1.0195538; -1.3283439, -8.751619, 1.7448556; -0.96864045, -15.895697, -1.2549613; -1.8307166, -17.141315, 0.88329315; -2.2542732, -17.19097, 2.0885124; 0.17124951, 2.4756513, -0.31723586; 0.11360063, 4.989039, -0.45823878; -0.16210176, 7.522131, -0.453436; -0.093371354, 9.08201, -0.1375911; 0.1870668, 10.633505, 0.039876357; -0.011038423, 12.250736, 0.1456852; 3.6477647, 9.096991, -1.4519601; 4.457858, 13.17935, 1.2464414; 3.2006736, 15.195878, 3.6050491; 2.5744731, 16.205326, 4.784625; 2.0601592, 17.230076, 4.590518; 1.6600811, 18.0769, 4.5477633; 1.8064733, 17.21884, 5.221259; -4.2877603, 7.787455, -0.33387783; -5.595539, 3.0864353, -1.0761567; -4.0195646, 0.39048386, -0.29585415; -3.2315784, -0.9574901, 0.09429717; -3.6992044, -2.1269891, 0.041851144; -3.9627182, -3.1085682, 0.039234884; -3.2588778, -2.3239985, 0.5995986\",\n\"0.0, 0.0, 0.0; 1.2704719, -1.9309127, 1.0615442; 2.0139976, -9.161944, 1.5375614; 3.1153822, -16.410995, -0.6190088; 2.682266, -17.748724, 1.5731845; 2.365603, -17.316433, 2.723353; -1.6672062, -1.5817863, 1.0158781; -1.3240861, -8.756923, 1.7246242; -0.9842789, -15.896809, -1.2874653; -1.847215, -17.139343, 0.8522363; -2.2693791, -17.188255, 2.0579746; 0.15430719, 2.4768474, -0.31659237; 0.07983068, 4.989486, -0.46295297; -0.20304936, 7.5217886, -0.46708655; -0.1276463, 9.080339, -0.14624745; 0.1543046, 10.631229, 0.034084365; -0.045568496, 12.248043, 0.14290833; 3.5915022, 9.102626, -1.5133411; 4.4749103, 13.405879, 0.7898923; 3.381454, 15.536995, 3.1292567; 2.837419, 16.603994, 4.298894; 2.3064845, 17.612473, 4.0678315; 1.9022148, 18.454958, 3.991743; 2.105286, 17.651646, 4.716137; -4.327952, 7.776075, -0.3050066; -5.5981455, 3.0701013, -1.0804211; -4.0191164, 0.37852478, -0.29124188; -3.2296033, -0.967262, 0.10334736; -3.694855, -2.1371107, 0.038943306; -3.956923, -3.1190188, 0.027962953; -3.2615309, -2.3363404, 0.60136783\",\n\"0.0, 0.0, 0.0; 1.2725992, -1.9315432, 1.0578424; 2.0104177, -9.163894, 1.522578; 3.101568, -16.411642, -0.6435554; 2.666313, -17.749466, 1.5481565; 2.3503041, -17.321417, 2.7000897; -1.6654888, -1.5858606, 1.0123364; -1.3219631, -8.762219, 1.7084043; -0.99883735, -15.898016, -1.3151903; -1.8620007, -17.138546, 0.8255832; -2.282651, -17.185379, 2.0319328; 0.1357754, 2.4780226, -0.31588495; 0.045078896, 4.9898996, -0.4661201; -0.24144393, 7.5217743, -0.4763541; -0.1607588, 9.079018, -0.15049142; 0.12194273, 10.629427, 0.032770872; -0.07960515, 12.245791, 0.14511856; 3.5388658, 9.104009, -1.5709354; 4.4761486, 13.597561, 0.3086331; 3.573806, 15.840902, 2.6244752; 3.1256137, 16.964283, 3.781908; 2.5775497, 17.956783, 3.5232983; 2.1700945, 18.794764, 3.4195023; 2.4400923, 18.049212, 4.182751; -4.364626, 7.77094, -0.26889867; -5.5954237, 3.0600739, -1.0774326; -4.0138197, 0.3728292, -0.27870566; -3.2230184, -0.9707917, 0.12065616; -3.6857095, -2.1408687, 0.0432648; -3.9461994, -3.12305, 0.023049977; -3.259445, -2.342852, 0.61008376\",\n\"0.0, 0.0, 0.0; 1.2740539, -1.9326378, 1.0540855; 2.0065432, -9.166225, 1.5078721; 3.087642, -16.412518, -0.6681497; 2.65067, -17.751102, 1.5227547; 2.3353846, -17.328375, 2.6768496; -1.6643199, -1.5893747, 1.008741; -1.3188204, -8.766726, 1.69351; -1.0151467, -15.89803, -1.3426688; -1.8768487, -17.135954, 0.80020094; -2.2952702, -17.184591, 2.0072541; 0.117561825, 2.47911, -0.31465453; 0.010626644, 4.9902296, -0.46685657; -0.2795944, 7.5216694, -0.48002827; -0.19541289, 9.077386, -0.1478186; 0.08756186, 10.627493, 0.037571356; -0.11537625, 12.243523, 0.15220329; 3.4852266, 9.106398, -1.6233016; 4.4536858, 13.749647, -0.17223251; 3.766551, 16.107319, 2.1035433; 3.426157, 17.288095, 3.2403855; 2.8611255, 18.265528, 2.961681; 2.4514477, 19.099102, 2.8339248; 2.7967827, 18.413141, 3.6222758; -4.4003787, 7.765622, -0.22433451; -5.593676, 3.0507736, -1.0652255; -4.0078173, 0.36826634, -0.25904495; -3.2148895, -0.97298586, 0.14404538; -3.6757255, -2.142933, 0.054562815; -3.9352846, -3.1251516, 0.025943924; -3.257129, -2.3474662, 0.62615997\",\n\"0.0, 0.0, 0.0; 1.2761928, -1.9331799, 1.050498; 2.0025253, -9.168055, 1.4935417; 3.0732293, -16.413046, -0.69193554; 2.6354573, -17.752298, 1.4984021; 2.3212664, -17.336206, 2.6552038; -1.6625848, -1.593361, 1.0053074; -1.3195711, -8.771443, 1.6836233; -1.032573, -15.898788, -1.3634577; -1.8938944, -17.134907, 0.7806058; -2.3105469, -17.181528, 1.9883503; 0.09969853, 2.480224, -0.31203118; -0.023254536, 4.9906006, -0.46439368; -0.31778127, 7.521535, -0.47915787; -0.23050854, 9.075852, -0.14124572; 0.05193904, 10.625845, 0.045892328; -0.1533243, 12.241411, 0.16289327; 3.4303505, 9.110042, -1.6709936; 4.4081163, 13.863377, -0.64480686; 3.9569204, 16.331701, 1.5718849; 3.7346158, 17.567997, 2.6785321; 3.15488, 18.532309, 2.3847303; 2.7446425, 19.361933, 2.2349584; 3.1677704, 18.734232, 3.0338645; -4.435575, 7.75932, -0.17421821; -5.590057, 3.040649, -1.0472392; -4.001701, 0.36231995, -0.23213243; -3.2075229, -0.97684205, 0.17542091; -3.6675377, -2.1461177, 0.073767096; -3.9270947, -3.128057, 0.03677266; -3.2573714, -2.3535473, 0.650413\",\n\"0.0, 0.0, 0.0; 1.2778492, -1.9342659, 1.0464776; 1.9988979, -9.170437, 1.4767885; 3.058137, -16.413628, -0.72021055; 2.621225, -17.752577, 1.4704843; 2.3090646, -17.34147, 2.6296158; -1.6612452, -1.5971763, 1.0014604; -1.3228472, -8.775813, 1.6762272; -1.0529554, -15.899378, -1.3812371; -1.9102854, -17.133535, 0.7655548; -2.3238053, -17.182314, 1.9742901; 0.08159189, 2.4811542, -0.3098885; -0.057737753, 4.990711, -0.4616556; -0.35652322, 7.5211525, -0.4752949; -0.26708153, 9.073845, -0.13054633; 0.014923573, 10.623733, 0.058125004; -0.19201162, 12.238931, 0.1772441; 3.373171, 9.114357, -1.7176299; 4.342837, 13.93987, -1.1032534; 4.143069, 16.508839, 1.0346005; 4.0465193, 17.795603, 2.1011028; 3.456354, 18.750107, 1.7962466; 3.0482404, 19.576847, 1.6261078; 3.5467913, 19.002014, 2.4212873; -4.470368, 7.752672, -0.11692047; -5.5892215, 3.0311227, -1.0202377; -3.997821, 0.35621214, -0.1998604; -3.2021222, -0.9812417, 0.21032754; -3.6608052, -2.150011, 0.09745344; -3.9198518, -3.1317577, 0.052600663; -3.2578025, -2.3601775, 0.6781434\",\n\"0.0, 0.0, 0.0; 1.2799262, -1.9348854, 1.0427878; 1.9945291, -9.172385, 1.4613472; 3.0434346, -16.414328, -0.74470484; 2.6079195, -17.753548, 1.4461013; 2.2977638, -17.345537, 2.606864; -1.6595521, -1.601142, 0.99792904; -1.3278217, -8.780035, 1.673274; -1.0741765, -15.900097, -1.3937271; -1.927747, -17.131622, 0.7560718; -2.338172, -17.180962, 1.9658388; 0.062080834, 2.4820433, -0.3072803; -0.09447026, 4.990717, -0.45685327; -0.39716145, 7.52071, -0.46705064; -0.3051861, 9.071592, -0.114899635; -0.023736298, 10.621435, 0.07495974; -0.23255666, 12.236256, 0.19589967; 3.3117507, 9.118937, -1.7639531; 4.2721124, 13.979461, -1.5266981; 4.3241425, 16.636269, 0.5101118; 4.35346, 17.967028, 1.5253626; 3.7590876, 18.914825, 1.2080134; 3.356376, 19.739412, 1.0159639; 3.9193234, 19.209654, 1.7993808; -4.5057087, 7.746308, -0.04908505; -5.5871277, 3.0216546, -0.981305; -3.9936342, 0.34882212, -0.15822208; -3.1968865, -0.98759127, 0.25331897; -3.6543736, -2.1557508, 0.12978163; -3.912949, -3.1372433, 0.077299014; -3.2575154, -2.3688416, 0.71362823\",\n\"0.0, 0.0, 0.0; 1.2814416, -1.9356477, 1.0395067; 1.9899774, -9.17445, 1.4456716; 3.029902, -16.414625, -0.7704079; 2.5961685, -17.753723, 1.4208264; 2.2880142, -17.352324, 2.5844233; -1.6583176, -1.604372, 0.99478906; -1.3357713, -8.783479, 1.6723052; -1.0945177, -15.899933, -1.4040545; -1.9444475, -17.130543, 0.7477106; -2.3523474, -17.182701, 1.9582131; 0.042352136, 2.4828541, -0.30406612; -0.13185082, 4.9905553, -0.45039123; -0.4385941, 7.520074, -0.45626846; -0.34392765, 9.069134, -0.09688482; -0.06262958, 10.6188965, 0.09385556; -0.2728485, 12.233416, 0.21638621; 3.2484903, 9.123985, -1.8072653; 4.2191496, 13.9872675, -1.9051857; 4.5084686, 16.717907, 0.010494471; 4.656347, 18.085562, 0.9645206; 4.0652437, 19.02918, 0.6291249; 3.6722908, 19.851994, 0.411019; 4.285866, 19.359787, 1.180794; -4.540945, 7.7393064, 0.02164799; -5.590275, 3.0124578, -0.9357747; -3.9918323, 0.341254, -0.11701363; -3.1926126, -0.99434674, 0.2923673; -3.6488438, -2.1621482, 0.16104513; -3.9068167, -3.143493, 0.1031135; -3.2570546, -2.3770983, 0.7476269\",\n\"0.0, 0.0, 0.0; 1.2835916, -1.9363389, 1.0355592; 1.9857647, -9.17643, 1.4296106; 3.0172083, -16.41547, -0.7941257; 2.5850441, -17.754904, 1.3972145; 2.27866, -17.359097, 2.5631924; -1.6565589, -1.6085215, 0.9910116; -1.3452439, -8.787667, 1.6733522; -1.1143157, -15.900541, -1.4120662; -1.9604181, -17.129171, 0.74233675; -2.3656847, -17.182589, 1.9536687; 0.020964839, 2.4836328, -0.29990476; -0.17196825, 4.9902267, -0.4416386; -0.48279044, 7.5192547, -0.44145095; -0.38379815, 9.066613, -0.0759567; -0.102513045, 10.61638, 0.114769414; -0.31474736, 12.23056, 0.23828682; 3.1811776, 9.129826, -1.8463405; 4.2050643, 13.967255, -2.2390454; 4.702049, 16.755917, -0.4540267; 4.9536886, 18.15246, 0.43414932; 4.3743134, 19.093222, 0.07137996; 3.9961827, 19.913864, -0.17875457; 4.64228, 19.451889, 0.5831075; -4.577901, 7.731654, 0.09772372; -5.595974, 3.0031676, -0.8850227; -3.994184, 0.33162475, -0.07394552; -3.193289, -1.0041444, 0.3315932; -3.6490264, -2.1714063, 0.19391409; -3.906909, -3.1524944, 0.13141446; -3.2609258, -2.3882504, 0.78224885\",\n\"0.0, 0.0, 0.0; 1.2850556, -1.9371983, 1.0321307; 1.9809643, -9.178561, 1.413744; 3.0060942, -16.415895, -0.8184521; 2.57592, -17.754984, 1.3734903; 2.2712743, -17.365812, 2.5421538; -1.6553618, -1.6117685, 0.98773074; -1.3548058, -8.7909565, 1.6744361; -1.131663, -15.900005, -1.4203591; -1.9739379, -17.128365, 0.735698; -2.3765724, -17.180584, 1.9479595; -0.0023754046, 2.4843156, -0.2949318; -0.21569766, 4.989607, -0.43032497; -0.53036803, 7.5181456, -0.42217237; -0.42561054, 9.063918, -0.05160904; -0.14341977, 10.613604, 0.13844027; -0.35707387, 12.227523, 0.26291132; 3.1090715, 9.136154, -1.8812289; 4.260915, 13.917513, -2.5255542; 4.9206657, 16.754988, -0.8752841; 5.253639, 18.175682, -0.05475384; 4.6950884, 19.113451, -0.45590165; 4.337903, 19.930614, -0.7451509; 4.9995847, 19.49394, 0.018255651; -4.617021, 7.7235017, 0.18019712; -5.6088758, 2.994546, -0.826805; -4.0017514, 0.3221209, -0.029298842; -3.1981921, -1.0140913, 0.3694531; -3.6527348, -2.1814086, 0.22833666; -3.9096746, -3.1625655, 0.16309017; -3.2651126, -2.3993802, 0.81657106\",\n\"0.0, 0.0, 0.0; 1.2887913, -1.9364861, 1.0288033; 1.9785488, -9.179027, 1.3990664; 2.995597, -16.415049, -0.8410673; 2.566933, -17.75419, 1.3511384; 2.264045, -17.367832, 2.521192; -1.6522661, -1.6168845, 0.98454696; -1.361996, -8.796097, 1.6754164; -1.1467571, -15.901081, -1.4292549; -1.9867314, -17.128868, 0.72802556; -2.387694, -17.183023, 1.9407563; -0.025153955, 2.4848082, -0.28967372; -0.25797936, 4.9887304, -0.41808394; -0.5773077, 7.5166416, -0.40117916; -0.46546265, 9.0609045, -0.026416719; -0.18221512, 10.61055, 0.1623838; -0.39788514, 12.224177, 0.28716204; 3.0372422, 9.144002, -1.910829; 4.3932896, 13.835966, -2.7767925; 5.1714897, 16.715229, -1.2555499; 5.5637097, 18.156464, -0.49956173; 5.03476, 19.088884, -0.9502406; 4.7044406, 19.899939, -1.2850287; 5.363414, 19.48594, -0.5067895; -4.655063, 7.713158, 0.2614222; -5.623744, 2.9846787, -0.7700769; -4.0118055, 0.31042814, 0.011433244; -3.2058372, -1.0266958, 0.40218678; -3.6590204, -2.1944418, 0.26024717; -3.9147532, -3.175857, 0.19415578; -3.2703948, -2.4125967, 0.8477496\",\n\"0.0, 0.0, 0.0; 1.2896402, -1.9376539, 1.0255362; 1.9751265, -9.181041, 1.3870612; 2.9854472, -16.41544, -0.861344; 2.5592723, -17.754356, 1.3314835; 2.2583668, -17.373755, 2.5039327; -1.6515756, -1.6194892, 0.98141986; -1.3710513, -8.798672, 1.6766076; -1.1615564, -15.900501, -1.4356647; -1.9978665, -17.127974, 0.7232175; -2.3965077, -17.181597, 1.9367368; -0.048704393, 2.4851818, -0.2833942; -0.30255973, 4.987496, -0.4029945; -0.6264642, 7.514729, -0.37527338; -0.50800633, 9.057787, 0.00240919; -0.22362489, 10.6075325, 0.18866162; -0.44092736, 12.220983, 0.31290227; 2.9625542, 9.152796, -1.9334776; 4.562849, 13.723711, -3.0054283; 5.4428415, 16.633575, -1.6024946; 5.886044, 18.089735, -0.9055843; 5.3956366, 19.013899, -1.4132547; 5.0988154, 19.815891, -1.7975842; 5.741166, 19.423433, -0.9946777; -4.694496, 7.7016654, 0.34717235; -5.6430955, 2.9745665, -0.70901906; -4.0272636, 0.29718685, 0.053506672; -3.2193484, -1.0415014, 0.43476868; -3.6709805, -2.2100039, 0.2941156; -3.9251199, -3.1918595, 0.22841713; -3.2786908, -2.4279864, 0.8792447\",\n\"0.0, 0.0, 0.0; 1.290984, -1.9382708, 1.0226753; 1.9735422, -9.182331, 1.3761613; 2.976016, -16.41547, -0.8797946; 2.5517654, -17.754787, 1.3131623; 2.252702, -17.378588, 2.4875016; -1.6504679, -1.6222727, 0.97868186; -1.3782592, -8.8013525, 1.6782213; -1.175425, -15.899961, -1.4418298; -2.008059, -17.126682, 0.7188996; -2.4046164, -17.18336, 1.9329629; -0.07087365, 2.485394, -0.27678326; -0.34470648, 4.9860563, -0.3864445; -0.67373323, 7.512463, -0.3464156; -0.5499825, 9.054965, 0.031841785; -0.26496756, 10.604895, 0.21557629; -0.48397416, 12.218079, 0.34028518; 2.8900888, 9.1633415, -1.9483175; 4.7473383, 13.586315, -3.20975; 5.7282023, 16.514572, -1.9162506; 6.221982, 17.979553, -1.2739687; 5.77774, 18.891468, -1.8426241; 5.520155, 19.680805, -2.278054; 6.1351547, 19.310448, -1.4438438; -4.7319236, 7.688088, 0.43204477; -5.6720347, 2.9642396, -0.6460521; -4.0456557, 0.28576326, 0.0897311; -3.2324672, -1.0534732, 0.45762238; -3.6826022, -2.2229924, 0.32067204; -3.9349642, -3.2054286, 0.25682673; -3.2839415, -2.4404013, 0.9016924\",\n\"0.0, 0.0, 0.0; 1.2917796, -1.9392111, 1.0198846; 1.9722, -9.183877, 1.3649882; 2.968757, -16.41549, -0.8984691; 2.547185, -17.754574, 1.2951466; 2.2500827, -17.382412, 2.4712696; -1.6498166, -1.6245424, 0.97601116; -1.3857892, -8.803548, 1.6794405; -1.1879162, -15.89988, -1.4461029; -2.0168421, -17.126394, 0.7161696; -2.4113166, -17.184254, 1.9308554; -0.091818914, 2.4854264, -0.27025643; -0.38539904, 4.9843016, -0.36903852; -0.7207717, 7.5096054, -0.31467193; -0.5925617, 9.051384, 0.06504691; -0.3071482, 10.601678, 0.24505287; -0.5279327, 12.214743, 0.36814886; 2.817699, 9.176727, -1.9554794; 4.925856, 13.433088, -3.3845859; 6.0216146, 16.367262, -2.2014265; 6.573001, 17.83482, -1.6142659; 6.1796603, 18.73114, -2.2421227; 5.9649644, 19.504763, -2.7262893; 6.547884, 19.156403, -1.8601795; -4.7691083, 7.670864, 0.5164234; -5.6985145, 2.9505343, -0.5860881; -4.063372, 0.27016163, 0.122877; -3.2458029, -1.0700238, 0.47735915; -3.6941638, -2.240909, 0.3463901; -3.9444695, -3.2240992, 0.28615615; -3.2884047, -2.4567246, 0.92307377\",\n\"0.0, 0.0, 0.0; 1.2918434, -1.9404299, 1.0174831; 1.9718289, -9.185528, 1.3542678; 2.9619565, -16.415474, -0.91732144; 2.5437486, -17.755074, 1.276623; 2.248899, -17.387697, 2.454815; -1.6497755, -1.6259629, 0.973713; -1.3926346, -8.804775, 1.6816437; -1.1987796, -15.899128, -1.4486425; -2.0239527, -17.126421, 0.7146225; -2.4164686, -17.185896, 1.9298645; -0.11160987, 2.4854693, -0.26229507; -0.4239133, 4.9825263, -0.34887892; -0.7650114, 7.5067115, -0.28008276; -0.6333537, 9.048382, 0.098896354; -0.3481139, 10.599219, 0.27444014; -0.5708978, 12.212144, 0.3957669; 2.7496014, 9.189699, -1.9556022; 5.076171, 13.269415, -3.5513086; 6.3159313, 16.189684, -2.4812846; 6.9394574, 17.649912, -1.9507523; 6.5979276, 18.529, -2.631099; 6.427142, 19.284794, -3.158934; 6.982423, 18.955877, -2.2674336; -4.8036447, 7.654103, 0.5993877; -5.7224646, 2.9368129, -0.52479786; -4.0819554, 0.25329518, 0.15944105; -3.2617002, -1.0884609, 0.50156057; -3.708471, -2.2606537, 0.3770118; -3.9566615, -3.2445803, 0.32014257; -3.2928555, -2.475563, 0.94697833\",\n\"0.0, 0.0, 0.0; 1.2932571, -1.9411035, 1.0143976; 1.9735988, -9.18648, 1.3443887; 2.9569936, -16.41537, -0.9334762; 2.540962, -17.755074, 1.2608197; 2.2479117, -17.392609, 2.4409804; -1.6486067, -1.6289115, 0.97076; -1.3973355, -8.807466, 1.68341; -1.2086453, -15.900139, -1.450992; -2.0295432, -17.126795, 0.71425927; -2.419716, -17.187374, 1.9302013; -0.12849186, 2.4854019, -0.25511023; -0.45774293, 4.980686, -0.32909173; -0.8067626, 7.5032663, -0.24326628; -0.67459804, 9.044437, 0.13756141; -0.38972858, 10.595854, 0.30853567; -0.6136141, 12.208885, 0.42635956; 2.6856484, 9.207448, -1.9436035; 5.190553, 13.103138, -3.7190852; 6.6088414, 15.9817915, -2.7642355; 7.3217077, 17.42083, -2.291472; 7.030067, 18.283966, -3.014141; 6.902265, 19.02146, -3.5787427; 7.4416094, 18.704391, -2.6732748; -4.8371415, 7.6319156, 0.6761071; -5.75414, 2.9180193, -0.46369225; -4.1067433, 0.23237014, 0.19516629; -3.2830462, -1.1104529, 0.5245947; -3.7285502, -2.2840223, 0.408779; -3.9749641, -3.268691, 0.35729223; -3.3036928, -2.4968982, 0.9726617\",\n\"0.0, 0.0, 0.0; 1.2931007, -1.9421319, 1.0126266; 1.9740539, -9.187813, 1.3345965; 2.952018, -16.41502, -0.950935; 2.540227, -17.754705, 1.2441703; 2.2497213, -17.392874, 2.4251542; -1.6487473, -1.6297778, 0.9690654; -1.4022659, -8.807996, 1.6867542; -1.2180339, -15.899093, -1.4514806; -2.0338898, -17.125797, 0.71564865; -2.4216294, -17.189724, 1.9321975; -0.14364594, 2.4853852, -0.24706441; -0.48865336, 4.978906, -0.30744678; -0.8449229, 7.4998493, -0.20493908; -0.7163123, 9.040531, 0.17906825; -0.43301257, 10.592691, 0.34584582; -0.6574814, 12.205911, 0.45993125; 2.6269112, 9.224396, -1.9267482; 5.260275, 12.931299, -3.9085517; 6.8917236, 15.732956, -3.072476; 7.711129, 17.133123, -2.6594148; 7.4650507, 17.985077, -3.4116983; 7.377231, 18.706045, -4.00457; 7.9158297, 18.387014, -3.099348; -4.8674207, 7.61055, 0.7505762; -5.782962, 2.900052, -0.40434414; -4.129775, 0.21182156, 0.22898805; -3.3031824, -1.1322922, 0.5456537; -3.7471623, -2.3072968, 0.4388911; -3.9915352, -3.2927423, 0.39281896; -3.312122, -2.518221, 0.9956982\",\n\"0.0, 0.0, 0.0; 1.2932878, -1.9433352, 1.0100765; 1.9765348, -9.189123, 1.324683; 2.9481962, -16.414923, -0.96797633; 2.5400248, -17.754774, 1.2277038; 2.2518735, -17.396582, 2.4103727; -1.648603, -1.6313722, 0.96662474; -1.4070482, -8.809207, 1.6897984; -1.2280971, -15.899052, -1.4515705; -2.0374608, -17.124464, 0.7187221; -2.4219925, -17.191467, 1.9361233; -0.15575922, 2.4852529, -0.24098006; -0.5148362, 4.9770756, -0.28793198; -0.8802408, 7.4958134, -0.16532785; -0.7584048, 9.035565, 0.22457522; -0.4780821, 10.588674, 0.3875122; -0.7037526, 12.202051, 0.49688476; 2.573595, 9.246087, -1.8973422; 5.303876, 12.755031, -4.096472; 7.169552, 15.444119, -3.3907957; 8.105846, 16.787659, -3.0432804; 7.9001613, 17.637058, -3.8104339; 7.84798, 18.346386, -4.421282; 8.398455, 18.00587, -3.5311565; -4.8968463, 7.5839496, 0.81694704; -5.8144417, 2.8768091, -0.3499698; -4.1532683, 0.18736458, 0.2567523; -3.322682, -1.1573557, 0.56011283; -3.7656305, -2.3335733, 0.46284333; -4.0083866, -3.319667, 0.42244568; -3.3202364, -2.5426795, 1.012097\",\n\"0.0, 0.0, 0.0; 1.2932509, -1.9440867, 1.008676; 1.9787726, -9.189922, 1.3172004; 2.9451687, -16.413486, -0.98471045; 2.5420744, -17.753588, 1.211756; 2.256795, -17.397234, 2.3956761; -1.6486398, -1.6321285, 0.96528476; -1.4090843, -8.809524, 1.6934644; -1.2361265, -15.897917, -1.4515134; -2.0386074, -17.122776, 0.7216455; -2.41971, -17.192816, 1.9399537; -0.16590032, 2.4852505, -0.23413931; -0.53778046, 4.975424, -0.2667804; -0.9128148, 7.491703, -0.124379575; -0.80035484, 9.029963, 0.27413613; -0.52339506, 10.58404, 0.43354368; -0.74956274, 12.197732, 0.53709763; 2.524145, 9.2683935, -1.8630555; 5.340007, 12.566528, -4.270652; 7.444054, 15.111284, -3.7164617; 8.499107, 16.38237, -3.4449549; 8.328156, 17.242054, -4.209173; 8.305982, 17.949295, -4.8242526; 8.872672, 17.565826, -3.962214; -4.9242287, 7.556314, 0.8806761; -5.8442535, 2.8530593, -0.29991668; -4.178299, 0.16090107, 0.28111905; -3.3453226, -1.1851763, 0.5716357; -3.787047, -2.3625946, 0.48378134; -4.028078, -3.3493266, 0.44903314; -3.3316507, -2.569821, 1.0254953\",\n\"0.0, 0.0, 0.0; 1.2929856, -1.9449764, 1.0073001; 1.98227, -9.19066, 1.3109593; 2.9433508, -16.412903, -0.9973166; 2.5448625, -17.75285, 1.2000835; 2.262234, -17.398302, 2.3851805; -1.6488703, -1.6326737, 0.96396846; -1.4103348, -8.809435, 1.6987058; -1.2444017, -15.896911, -1.4487168; -2.0393982, -17.120478, 0.7279178; -2.417005, -17.196789, 1.9469377; -0.17508484, 2.4852839, -0.22698827; -0.55846363, 4.973865, -0.24452429; -0.94191635, 7.487603, -0.081202745; -0.8413814, 9.023934, 0.32780212; -0.5690456, 10.579175, 0.48379564; -0.7960395, 12.193151, 0.58090436; 2.4802523, 9.289989, -1.8226044; 5.386248, 12.362429, -4.414629; 7.7191477, 14.7344, -4.038788; 8.888015, 15.918906, -3.8565612; 8.749622, 16.803545, -4.598565; 8.754353, 17.520489, -5.2026944; 9.3350315, 17.073027, -4.381789; -4.9486938, 7.529921, 0.94334555; -5.8729897, 2.830946, -0.25087345; -4.202633, 0.13600707, 0.30404192; -3.3674552, -1.2114608, 0.58149886; -3.8086536, -2.3897614, 0.5033676; -4.048599, -3.376949, 0.47454786; -3.3436983, -2.5952415, 1.0375733\",\n\"0.0, 0.0, 0.0; 1.2930076, -1.9456848, 1.0059029; 1.9856117, -9.191209, 1.3057903; 2.9395442, -16.412241, -1.0092307; 2.5476475, -17.75209, 1.1894134; 2.2687058, -17.39498, 2.3746147; -1.6488585, -1.6334742, 0.96263134; -1.4100643, -8.809559, 1.7038631; -1.2532506, -15.896885, -1.4443662; -2.0398111, -17.119156, 0.73605776; -2.4131196, -17.198687, 1.9561952; -0.18298711, 2.4853537, -0.21987794; -0.5766488, 4.97239, -0.22208016; -0.9683298, 7.4833717, -0.03728567; -0.88107085, 9.017026, 0.3846103; -0.61401576, 10.573495, 0.5374528; -0.84209377, 12.187752, 0.6270767; 2.4401913, 9.311692, -1.7784187; 5.441228, 12.14353, -4.5311913; 7.985327, 14.313227, -4.35826; 9.259066, 15.396539, -4.2774086; 9.156381, 16.320002, -4.97668; 9.189121, 17.057938, -5.554072; 9.777032, 16.526134, -4.7906303; -4.9709563, 7.5032578, 1.0040295; -5.900871, 2.8086247, -0.20283675; -4.226264, 0.110618114, 0.32363373; -3.3889613, -1.2383834, 0.5868695; -3.829121, -2.4176645, 0.51825714; -4.0675435, -3.4053683, 0.49501997; -3.354003, -2.6215568, 1.0440631\",\n\"0.0, 0.0, 0.0; 1.293232, -1.9461368, 1.0047398; 1.9877832, -9.191623, 1.3010256; 2.935215, -16.411602, -1.0199356; 2.5501692, -17.750923, 1.1802404; 2.2749405, -17.394217, 2.366431; -1.6486771, -1.6343129, 0.96151805; -1.4115628, -8.809624, 1.7107418; -1.2624142, -15.89757, -1.4364626; -2.0395274, -17.118858, 0.7478962; -2.4084625, -17.20475, 1.9689322; -0.19033721, 2.4854689, -0.21220383; -0.5932419, 4.9709873, -0.19837649; -0.9920988, 7.4791374, 0.008231655; -0.92005605, 9.009645, 0.4441917; -0.65902877, 10.567417, 0.5941446; -0.8881352, 12.181935, 0.67612225; 2.4044223, 9.332281, -1.7301068; 5.4867725, 11.918254, -4.630995; 8.221777, 13.848927, -4.6776857; 9.590204, 14.81282, -4.706443; 9.531816, 15.784086, -5.3432655; 9.597788, 16.55038, -5.879403; 10.181533, 15.917608, -5.193738; -4.991005, 7.4779425, 1.0639312; -5.925897, 2.7881212, -0.15770578; -4.2497087, 0.08613014, 0.34264958; -3.4116156, -1.2648641, 0.5928261; -3.8511162, -2.444894, 0.5334861; -4.0884614, -3.4329746, 0.51594806; -3.3674357, -2.6470866, 1.0520929\",\n\"0.0, 0.0, 0.0; 1.2923615, -1.947123, 1.0039483; 1.9910722, -9.192317, 1.297584; 2.9320307, -16.41152, -1.0284209; 2.555923, -17.751406, 1.1729581; 2.2851443, -17.395401, 2.3603835; -1.6494111, -1.6340176, 0.9607603; -1.4113545, -8.808423, 1.7183076; -1.2705851, -15.8974495, -1.4268454; -2.0377026, -17.11771, 0.76161754; -2.4017797, -17.207603, 1.9838232; -0.19731599, 2.4856539, -0.20348112; -0.60901093, 4.96957, -0.17202526; -1.0140318, 7.474716, 0.057743356; -0.9571647, 9.001762, 0.50785553; -0.7023643, 10.560898, 0.65431315; -0.93271774, 12.175637, 0.72801775; 2.3722105, 9.352283, -1.6744304; 5.5226927, 11.689316, -4.710221; 8.418056, 13.348164, -4.984124; 9.86595, 14.176377, -5.12617; 9.864387, 15.19572, -5.685856; 9.971451, 15.9909525, -6.170775; 10.534728, 15.248667, -5.5850897; -5.0097227, 7.453351, 1.1253338; -5.949453, 2.7681084, -0.110084295; -4.2723837, 0.061742783, 0.36293235; -3.4338493, -1.291438, 0.59943944; -3.8728385, -2.472043, 0.5483246; -4.109221, -3.4604259, 0.5354183; -3.3800507, -2.6733425, 1.0586383\",\n\"0.0, 0.0, 0.0; 1.2916036, -1.947777, 1.0036548; 1.9942386, -9.192735, 1.2937429; 2.927909, -16.411423, -1.0367925; 2.5612805, -17.750336, 1.1667757; 2.295361, -17.388374, 2.353498; -1.6500493, -1.6335387, 0.9604797; -1.4114978, -8.80701, 1.7266679; -1.2779163, -15.897462, -1.4155855; -2.0351923, -17.11802, 0.77613664; -2.3945515, -17.21131, 1.9994835; -0.20351265, 2.4859784, -0.19315441; -0.62330097, 4.9682293, -0.14282358; -1.0345047, 7.4701757, 0.109695315; -0.992974, 8.993679, 0.57328874; -0.7445475, 10.554249, 0.71534467; -0.9763321, 12.169186, 0.77962816; 2.3429139, 9.371889, -1.6133387; 5.556098, 11.445108, -4.77253; 8.571077, 12.812167, -5.273504; 10.0782, 13.494812, -5.5286293; 10.147327, 14.553558, -6.0046406; 10.304055, 15.371853, -6.4345636; 10.825518, 14.523119, -5.966564; -5.027777, 7.4287496, 1.1857108; -5.9734206, 2.7482471, -0.06308949; -4.2963543, 0.037306547, 0.38296986; -3.4578228, -1.3181627, 0.6059988; -3.895706, -2.4995139, 0.5633312; -4.1306424, -3.4882913, 0.555117; -3.3934178, -2.6997733, 1.064713\",\n\"0.0, 0.0, 0.0; 1.2914864, -1.948085, 1.0032078; 1.9983032, -9.192806, 1.2889937; 2.92508, -16.411097, -1.0455207; 2.5686545, -17.749132, 1.1602534; 2.3078067, -17.383972, 2.3471212; -1.6501496, -1.6336887, 0.96005166; -1.409662, -8.80606, 1.7358692; -1.2847497, -15.898585, -1.4020596; -2.0304687, -17.119005, 0.7936988; -2.3842964, -17.2166, 2.0183215; -0.20971476, 2.4864123, -0.18052256; -0.6366629, 4.966939, -0.109633066; -1.0526745, 7.465704, 0.16549832; -1.0259598, 8.985929, 0.64079595; -0.7834027, 10.547876, 0.7777603; -1.016071, 12.163036, 0.8325608; 2.3181684, 9.389542, -1.5458112; 5.5863104, 11.18546, -4.8164697; 8.678492, 12.248445, -5.5364733; 10.223811, 12.7794075, -5.900587; 10.37573, 13.862339, -6.2961736; 10.589184, 14.693222, -6.6744246; 11.045565, 13.751604, -6.333295; -5.0442142, 7.4064765, 1.2470975; -5.996968, 2.7316809, -0.017573237; -4.3207827, 0.015942574, 0.40181908; -3.4826913, -1.3419253, 0.61151356; -3.919485, -2.5239635, 0.5776121; -4.1530685, -3.5130908, 0.57452434; -3.4085636, -2.7228801, 1.0707382\",\n\"0.0, 0.0, 0.0; 1.290733, -1.9485551, 1.0032645; 2.0026903, -9.192995, 1.2833687; 2.9231596, -16.41125, -1.053753; 2.578571, -17.74886, 1.1541592; 2.3233097, -17.3817, 2.341625; -1.6507808, -1.6330192, 0.960106; -1.4074728, -8.804145, 1.7464874; -1.2900808, -15.89891, -1.386666; -2.0233188, -17.118994, 0.8134775; -2.3712182, -17.220518, 2.0394783; -0.21497494, 2.4868836, -0.16736227; -0.6473613, 4.9657617, -0.0750111; -1.0657358, 7.46146, 0.22339103; -1.0556146, 8.978738, 0.70864516; -0.8205501, 10.542395, 0.8390141; -1.0551351, 12.1575985, 0.88331735; 2.3005667, 9.404516, -1.4750953; 5.615265, 10.911468, -4.843352; 8.744729, 11.665816, -5.7638626; 10.308454, 12.042788, -6.2277274; 10.552223, 13.131796, -6.5547547; 10.827933, 13.962872, -6.889868; 11.1972, 12.949754, -6.669571; -5.055676, 7.3879657, 1.3100036; -6.016943, 2.719142, 0.029810071; -4.341254, -7.2932243E-4, 0.42362118; -3.5034103, -1.3606632, 0.62052655; -3.9396367, -2.5431356, 0.5956576; -4.1723413, -3.5324721, 0.5979276; -3.4203956, -2.740862, 1.0805035\",\n\"0.0, 0.0, 0.0; 1.2908013, -1.948327, 1.0036204; 2.006322, -9.192737, 1.2753146; 2.9211195, -16.41066, -1.065058; 2.5895867, -17.747532, 1.1452987; 2.3403373, -17.376675, 2.3328924; -1.6507223, -1.6328778, 0.96044666; -1.4054817, -8.802723, 1.7578335; -1.2949584, -15.899591, -1.3707993; -2.0152893, -17.12075, 0.8330085; -2.357195, -17.22733, 2.060266; -0.21919358, 2.4874504, -0.15283819; -0.6556568, 4.9646883, -0.038320154; -1.0759659, 7.4572964, 0.28236052; -1.0845176, 8.972556, 0.77390766; -0.85752296, 10.537992, 0.8970376; -1.0937262, 12.153195, 0.9317216; 2.2882671, 9.418101, -1.3997498; 5.641555, 10.612882, -4.853914; 8.772497, 11.066163, -5.950118; 10.336864, 11.2928505, -6.50137; 10.678377, 12.369377, -6.77844; 11.02083, 13.187325, -7.0828934; 11.286329, 12.126148, -6.961602; -5.06553, 7.37091, 1.3694067; -6.0381455, 2.708712, 0.07373011; -4.362802, -0.014966965, 0.44185743; -3.5251322, -1.3768053, 0.6259215; -3.961039, -2.5595477, 0.6098547; -4.1930985, -3.5490112, 0.6172045; -3.4334, -2.756456, 1.0858862\",\n\"0.0, 0.0, 0.0; 1.290811, -1.9479724, 1.0042955; 2.0126579, -9.192055, 1.2678443; 2.921248, -16.409994, -1.074891; 2.6052291, -17.74615, 1.1381699; 2.3630068, -17.372343, 2.326293; -1.65071, -1.6325097, 0.9610935; -1.4029887, -8.800793, 1.77165; -1.2973508, -15.900428, -1.3508707; -2.001766, -17.12181, 0.8579515; -2.3364007, -17.233759, 2.086734; -0.22252356, 2.4880369, -0.13772935; -0.66073763, 4.963768, 2.770722E-4; -1.0795141, 7.4534473, 0.3448253; -1.1054894, 8.966488, 0.8425597; -0.886903, 10.533755, 0.9573088; -1.1254097, 12.148815, 0.9812863; 2.2842484, 9.4283695, -1.3216373; 5.6665754, 10.298392, -4.843882; 8.772343, 10.453375, -6.0848956; 10.324087, 10.531105, -6.708241; 10.767069, 11.577021, -6.957512; 11.180412, 12.367581, -7.2458935; 11.332092, 11.278913, -7.190308; -5.0681787, 7.3587813, 1.4344795; -6.053618, 2.7029696, 0.12559569; -4.378496, -0.024410963, 0.46630216; -3.540936, -1.3880994, 0.6366554; -3.9772365, -2.5707912, 0.63079023; -4.209285, -3.5601912, 0.64438224; -3.4414847, -2.7667258, 1.0980834\",\n\"0.0, 0.0, 0.0; 1.2893711, -1.9484102, 1.0052955; 2.0213604, -9.191718, 1.262066; 2.924468, -16.410149, -1.081273; 2.625099, -17.745733, 1.134446; 2.3901854, -17.367046, 2.3224907; -1.6519104, -1.630731, 0.9620497; -1.3994231, -8.796916, 1.7895001; -1.2953416, -15.899954, -1.3253247; -1.9846082, -17.123652, 0.8869935; -2.3124247, -17.238768, 2.1173203; -0.22317056, 2.4889028, -0.11988501; -0.6604215, 4.9632573, 0.043532386; -1.0755653, 7.450226, 0.41127253; -1.1158478, 8.960782, 0.9155558; -0.904186, 10.52956, 1.0223682; -1.1444302, 12.1444845, 1.0357493; 2.291957, 9.43558, -1.2350796; 5.689563, 9.979185, -4.807761; 8.749125, 9.832729, -6.1596336; 10.277718, 9.759912, -6.83832; 10.8235, 10.757099, -7.0833664; 11.310675, 11.504604, -7.371291; 11.344499, 10.404927, -7.34192; -5.064864, 7.351415, 1.4982327; -6.064625, 2.7018256, 0.17813921; -4.3897142, -0.028778553, 0.4930916; -3.55226, -1.3940791, 0.65056765; -3.9892292, -2.576532, 0.6545827; -4.221558, -3.565763, 0.6742966; -3.446129, -2.7716484, 1.113661\",\n\"0.0, 0.0, 0.0; 1.2885712, -1.9480695, 1.0069796; 2.0295026, -9.190727, 1.2563298; 2.9249225, -16.409515, -1.0888612; 2.6487205, -17.74377, 1.1306651; 2.4239585, -17.35624, 2.3178213; -1.6525712, -1.6291093, 0.96366155; -1.396109, -8.792588, 1.813033; -1.2960678, -15.900474, -1.2908465; -1.9635093, -17.126696, 0.9267589; -2.281462, -17.248055, 2.1590729; -0.22388566, 2.4897726, -0.098599866; -0.6583742, 4.9626017, 0.092864364; -1.0663881, 7.447294, 0.48327363; -1.1157049, 8.955337, 0.9942339; -0.9103503, 10.525498, 1.0927074; -1.1536225, 12.140022, 1.0959023; 2.3042555, 9.43826, -1.1498618; 5.6951213, 9.657797, -4.763325; 8.687722, 9.205161, -6.1948934; 10.182743, 8.9794445, -6.9135566; 10.828886, 9.909256, -7.1786213; 11.389409, 10.596626, -7.482496; 11.305533, 9.500106, -7.4388533; -5.0545015, 7.349424, 1.5746595; -6.0684543, 2.7053666, 0.24594796; -4.3962345, -0.030120134, 0.5314524; -3.560125, -1.3978616, 0.6742041; -3.9984345, -2.57972, 0.68996733; -4.231606, -3.5685782, 0.71705794; -3.4472313, -2.7741187, 1.1395972\",\n\"0.0, 0.0, 0.0; 1.287777, -1.9477453, 1.0086212; 2.0361643, -9.189909, 1.2499329; 2.918937, -16.408749, -1.0998932; 2.6712635, -17.741465, 1.1239196; 2.4593725, -17.344807, 2.3104286; -1.6532257, -1.627514, 0.96523243; -1.3950645, -8.787499, 1.8430731; -1.3020724, -15.902704, -1.2442131; -1.942863, -17.132183, 0.9794419; -2.2483828, -17.25694, 2.2145584; -0.22562516, 2.490462, -0.0742003; -0.6564678, 4.9613104, 0.1485259; -1.0537952, 7.4437637, 0.56343114; -1.1106541, 8.949311, 1.0809243; -0.9111499, 10.520778, 1.1701727; -1.1570423, 12.134892, 1.1631515; 2.319652, 9.437121, -1.060974; 5.677244, 9.331172, -4.710445; 8.581745, 8.572117, -6.192886; 10.032594, 8.193387, -6.9372745; 10.771525, 9.037061, -7.244688; 11.399855, 9.647014, -7.5795975; 11.202008, 8.5685425, -7.4844565; -5.0390334, 7.350846, 1.6656994; -6.0721903, 2.7115245, 0.33523548; -4.4022875, -0.028666735, 0.58722115; -3.5673368, -1.3987606, 0.7132146; -4.007306, -2.5797575, 0.74194807; -4.241638, -3.5680733, 0.7774974; -3.4484656, -2.7732008, 1.1824709\",\n\"0.0, 0.0, 0.0; 1.2877868, -1.9467028, 1.0106193; 2.0409842, -9.188671, 1.2426695; 2.9085875, -16.407284, -1.1134962; 2.6933668, -17.738361, 1.1146711; 2.4961169, -17.331614, 2.3002882; -1.6532073, -1.6263973, 0.9671444; -1.39528, -8.782527, 1.8759506; -1.3094041, -15.905672, -1.1931779; -1.9209924, -17.14019, 1.0359023; -2.21278, -17.266441, 2.2741833; -0.22601682, 2.491055, -0.048748992; -0.650999, 4.959903, 0.20522746; -1.0358052, 7.4404516, 0.6427123; -1.0995247, 8.943912, 1.165448; -0.906338, 10.516681, 1.245141; -1.1555493, 12.130214, 1.2283635; 2.341815, 9.432495, -0.97461885; 5.641581, 9.001083, -4.6527586; 8.437945, 7.9374585, -6.155747; 9.834596, 7.4066396, -6.9108043; 10.653064, 8.146843, -7.2775717; 11.337902, 8.664228, -7.654815; 11.033238, 7.6210527, -7.4808598; -5.0181246, 7.356028, 1.7561567; -6.0711536, 2.7207937, 0.42702818; -4.4065967, -0.025584936, 0.64468294; -3.5743186, -1.3987725, 0.75350994; -4.0165687, -2.5784962, 0.79616845; -4.252615, -3.5660348, 0.8408147; -3.449902, -2.7713184, 1.2268546\",\n\"0.0, 0.0, 0.0; 1.2863293, -1.9464023, 1.0130514; 2.043077, -9.188301, 1.2355131; 2.895423, -16.406668, -1.1269599; 2.7120593, -17.734957, 1.1057171; 2.5291314, -17.316687, 2.28962; -1.6544092, -1.623787, 0.9694724; -1.3993624, -8.775983, 1.909519; -1.3202173, -15.907168, -1.141062; -1.9010842, -17.14497, 1.0944054; -2.1785007, -17.274662, 2.3356304; -0.22754817, 2.4912665, -0.025047928; -0.64668775, 4.9578853, 0.25856653; -1.0162501, 7.436797, 0.7179248; -1.0852532, 8.938636, 1.2446358; -0.8986651, 10.512673, 1.3143876; -1.1521001, 12.125416, 1.2877069; 2.369006, 9.423136, -0.8904336; 5.5923195, 8.670588, -4.5846467; 8.260985, 7.3069296, -6.0774918; 9.593676, 6.626278, -6.8279343; 10.473181, 7.250424, -7.262931; 11.198277, 7.6655726, -7.688242; 10.798294, 6.675121, -7.423073; -4.996414, 7.365705, 1.8399749; -6.0688, 2.7336402, 0.51528203; -4.4111657, -0.019344091, 0.6997932; -3.5823483, -1.395834, 0.7920479; -4.026519, -2.5742526, 0.8485687; -4.2640414, -3.5609703, 0.9025554; -3.4531088, -2.7660985, 1.2706803\",\n\"0.0, 0.0, 0.0; 1.2862577, -1.9454495, 1.0149707; 2.0454888, -9.187323, 1.2296597; 2.8858814, -16.405334, -1.138177; 2.7302105, -17.73223, 1.0974296; 2.559433, -17.305363, 2.280079; -1.6544589, -1.6226386, 0.97130907; -1.4020394, -8.771532, 1.9368384; -1.3258533, -15.909256, -1.0984895; -1.8814085, -17.15057, 1.1414595; -2.1472077, -17.28481, 2.3847413; -0.22697893, 2.49144, -0.0046377266; -0.63756204, 4.956466, 0.30421638; -0.9907297, 7.4343004, 0.7819214; -1.065839, 8.9348955, 1.3113327; -0.8856013, 10.510053, 1.3719082; -1.1425582, 12.122047, 1.3355335; 2.407123, 9.410165, -0.81271756; 5.5437956, 8.350669, -4.506231; 8.067595, 6.696734, -5.957045; 9.327782, 5.8710938, -6.6869483; 10.249543, 6.372308, -7.188396; 10.998604, 6.6814404, -7.6599345; 10.516058, 5.757878, -7.305705; -4.971012, 7.381079, 1.9045389; -6.0615473, 2.7523093, 0.5831505; -4.4131074, -0.007826567, 0.7413126; -3.5888875, -1.3878921, 0.82039356; -4.0349674, -2.5648963, 0.8898658; -4.2740145, -3.550704, 0.9529803; -3.456643, -2.7554855, 1.3057979\",\n\"0.0, 0.0, 0.0; 1.285575, -1.9446491, 1.0173668; 2.050067, -9.186166, 1.2253208; 2.8841343, -16.403873, -1.1456766; 2.7498066, -17.729742, 1.0919218; 2.5878563, -17.294147, 2.2726283; -1.6550149, -1.6206968, 0.9736013; -1.4025618, -8.766859, 1.9591322; -1.323114, -15.909334, -1.0649159; -1.8597734, -17.153913, 1.1778264; -2.117148, -17.290176, 2.4226599; -0.22139812, 2.491927, 0.009863574; -0.62057745, 4.956221, 0.3388525; -0.9593395, 7.432783, 0.833295; -1.0404752, 8.932691, 1.3637652; -0.86673397, 10.508913, 1.4148659; -1.1280189, 12.119923, 1.3673719; 2.4573407, 9.397838, -0.73424196; 5.498207, 8.02779, -4.40567; 7.863597, 6.1084967, -5.7953353; 9.044577, 5.15027, -6.4950495; 9.993219, 5.5281906, -7.0514317; 10.75339, 5.7333527, -7.5604043; 10.199462, 4.8851104, -7.1303525; -4.9440866, 7.3975315, 1.9406784; -6.049595, 2.772038, 0.6202581; -4.4137287, 0.0035147667, 0.7614739; -3.5957966, -1.380745, 0.8320816; -4.0434675, -2.556513, 0.91153634; -4.2838063, -3.54153, 0.98169976; -3.4614885, -2.746266, 1.3227241\",\n\"0.0, 0.0, 0.0; 1.284845, -1.943725, 1.0200517; 2.0554736, -9.1847, 1.2241478; 2.8879387, -16.40262, -1.1467669; 2.7686133, -17.727783, 1.092099; 2.6123288, -17.283913, 2.2704844; -1.6556089, -1.6185429, 0.97617084; -1.4009023, -8.762842, 1.9745467; -1.3157301, -15.908125, -1.0427015; -1.8392451, -17.15408, 1.2023828; -2.0910137, -17.293571, 2.4480047; -0.21283768, 2.492614, 0.019715087; -0.59780926, 4.9570255, 0.36438298; -0.9213954, 7.4326653, 0.8733926; -1.010881, 8.932123, 1.4037917; -0.8437165, 10.509318, 1.4460597; -1.1085001, 12.119379, 1.3871361; 2.521677, 9.382193, -0.6553037; 5.457691, 7.6958694, -4.280137; 7.652266, 5.537099, -5.596752; 8.747907, 4.459182, -6.2602124; 9.713121, 4.719754, -6.8541584; 10.476177, 4.82823, -7.3879952; 9.858209, 4.057287, -6.9031672; -4.914411, 7.420336, 1.9510872; -6.033354, 2.7973948, 0.63304496; -4.409953, 0.021101475, 0.765285; -3.5982537, -1.3670434, 0.83140516; -4.0477295, -2.5415514, 0.91889864; -4.2895637, -3.5257616, 0.9949936; -3.4636717, -2.7305799, 1.3274653\",\n\"0.0, 0.0, 0.0; 1.2855735, -1.9420295, 1.0223603; 2.0641444, -9.182236, 1.2235932; 2.8961535, -16.40118, -1.1443622; 2.7892346, -17.725416, 1.0956798; 2.6373665, -17.272385, 2.271153; -1.654987, -1.6178445, 0.97838074; -1.399305, -8.760251, 1.9899609; -1.3034899, -15.908634, -1.0196166; -1.8168635, -17.15581, 1.2271309; -2.0647438, -17.29872, 2.4731452; -0.19896518, 2.49368, 0.028066201; -0.5659296, 4.958804, 0.38698533; -0.87641364, 7.4331956, 0.9100311; -0.9748394, 8.933141, 1.4374611; -0.81432223, 10.511236, 1.470978; -1.0829659, 12.120208, 1.4008474; 2.5993466, 9.366708, -0.56405866; 5.4210105, 7.369462, -4.1210957; 7.4268856, 4.9932775, -5.3621182; 8.42831, 3.806706, -5.9879856; 9.404961, 3.957397, -6.600974; 10.167143, 3.9774094, -7.1465764; 9.487545, 3.2830982, -6.6294928; -4.8818283, 7.4442735, 1.9407023; -6.018748, 2.8239336, 0.62894106; -4.406501, 0.040879965, 0.7553929; -3.6003785, -1.3506457, 0.8186187; -4.051309, -2.5240948, 0.91259384; -4.294348, -3.5076296, 0.993435; -3.4654894, -2.7126205, 1.3188632\",\n\"0.0, 0.0, 0.0; 1.284895, -1.9412087, 1.0247695; 2.0721288, -9.180504, 1.2250435; 2.9035082, -16.400593, -1.1396422; 2.8082297, -17.72534, 1.1006224; 2.6605518, -17.26662, 2.2744222; -1.6555376, -1.6158847, 0.98068553; -1.3999742, -8.7568245, 2.002598; -1.2922667, -15.907958, -1.0000346; -1.7949781, -17.157368, 1.2478824; -2.0389113, -17.3067, 2.4939225; -0.18190639, 2.4948943, 0.035021793; -0.52922696, 4.9610157, 0.4064223; -0.82764685, 7.434233, 0.9418961; -0.93628097, 8.934985, 1.4650098; -0.7826453, 10.5139265, 1.4898037; -1.0551351, 12.121711, 1.4082155; 2.684845, 9.349537, -0.46747744; 5.384807, 7.0512114, -3.9360776; 7.1845093, 4.4816, -5.1057334; 8.083064, 3.1983886, -5.696056; 9.07063, 3.2461696, -6.308216; 9.832183, 3.1852694, -6.8516607; 9.088914, 2.5667133, -6.3260794; -4.847642, 7.470699, 1.9135239; -6.0064616, 2.8534927, 0.60991526; -4.4074507, 0.06274319, 0.73482746; -3.6079457, -1.3326294, 0.7972845; -4.058921, -2.5056558, 0.89619464; -4.30199, -3.4888809, 0.9806314; -3.4715452, -2.693318, 1.3006152\",\n\"0.0, 0.0, 0.0; 1.2849871, -1.9395792, 1.0277351; 2.0803583, -9.177968, 1.2286491; 2.9138122, -16.399187, -1.1318467; 2.8272471, -17.723576, 1.108984; 2.6821895, -17.25692, 2.2799792; -1.6554439, -1.6142546, 0.983524; -1.3996304, -8.753819, 2.0149386; -1.2776672, -15.907305, -0.9815388; -1.7743363, -17.158089, 1.266957; -2.016425, -17.309324, 2.5131273; -0.16085419, 2.4962463, 0.041166037; -0.48675826, 4.963535, 0.42404613; -0.77674055, 7.4353356, 0.9705833; -0.8955157, 8.937493, 1.4874195; -0.7477714, 10.517111, 1.5034418; -1.0234411, 12.123723, 1.4102632; 2.7749085, 9.333584, -0.36161697; 5.3493576, 6.7395926, -3.7152271; 6.9364038, 4.00605, -4.81929; 7.728938, 2.640945, -5.3768654; 8.72905, 2.59131, -5.9681535; 9.49234, 2.4555087, -6.4953623; 8.682104, 1.9131973, -5.9847627; -4.8134522, 7.49543, 1.8689711; -5.9976735, 2.8814964, 0.576653; -4.411288, 0.08367038, 0.704203; -3.6180959, -1.315241, 0.76797724; -4.069442, -2.487893, 0.8695946; -4.3128185, -3.4708843, 0.95585; -3.4808357, -2.6754942, 1.2722483\",\n\"0.0, 0.0, 0.0; 1.2850394, -1.9380978, 1.030461; 2.0888727, -9.1754265, 1.2358302; 2.9255917, -16.397789, -1.1200052; 2.8449044, -17.722404, 1.1209105; 2.7013369, -17.251028, 2.2901974; -1.6553851, -1.6127229, 0.9861324; -1.3995228, -8.751143, 2.025425; -1.2626532, -15.906797, -0.96522665; -1.755288, -17.158749, 1.2835066; -1.9965138, -17.312061, 2.5295904; -0.14145061, 2.4973328, 0.04620458; -0.44570303, 4.9657755, 0.4393276; -0.7241738, 7.4365735, 0.99628556; -0.85250366, 8.940689, 1.5050817; -0.71028405, 10.520876, 1.5126342; -0.98865044, 12.126351, 1.4085318; 2.868428, 9.311455, -0.2568494; 5.317031, 6.437647, -3.473814; 6.692146, 3.5672483, -4.512947; 7.379113, 2.13376, -5.0380177; 8.392789, 1.9910066, -5.5897355; 9.160003, 1.7851259, -6.087732; 8.280968, 1.3208208, -5.615487; -4.776372, 7.526965, 1.8192515; -5.989168, 2.916407, 0.5414691; -4.414782, 0.112033606, 0.6738192; -3.6275907, -1.290152, 0.7399942; -4.0791144, -2.4625869, 0.843313; -4.3226376, -3.4454277, 0.9308592; -3.4901445, -2.6499019, 1.2455707\",\n\"0.0, 0.0, 0.0; 1.2843013, -1.9371457, 1.0331675; 2.0944, -9.173571, 1.2456268; 2.9376707, -16.396914, -1.1048657; 2.8604178, -17.721508, 1.1361834; 2.7168965, -17.243979, 2.3029764; -1.6559815, -1.6105227, 0.98872274; -1.3981942, -8.747862, 2.0349464; -1.2481948, -15.905281, -0.95084834; -1.7389991, -17.1586, 1.2975245; -1.9803008, -17.314348, 2.5432916; -0.12583122, 2.498081, 0.050711345; -0.40926108, 4.967535, 0.45293862; -0.6713312, 7.4380884, 1.0188699; -0.8068714, 8.944495, 1.5189431; -0.6700059, 10.525173, 1.5181125; -0.9514401, 12.129386, 1.4033362; 2.963734, 9.2807255, -0.15727186; 5.28786, 6.1375866, -3.210533; 6.463179, 3.156584, -4.18119; 7.0507007, 1.6677753, -4.6718826; 8.077323, 1.4354217, -5.1662183; 8.849888, 1.1630452, -5.622243; 7.9046345, 0.77919674, -5.209384; -4.7368, 7.56796, 1.7677678; -5.9808645, 2.9614215, 0.50564516; -4.4174843, 0.15119338, 0.6441423; -3.6357968, -1.2539198, 0.71339107; -4.087664, -2.4261756, 0.8172409; -4.3314757, -3.4089198, 0.9050649; -3.4982724, -2.613737, 1.2187613\",\n\"0.0, 0.0, 0.0; 1.2843895, -1.9355044, 1.03613; 2.099349, -9.171051, 1.2596333; 2.9508626, -16.39456, -1.0873737; 2.8744955, -17.719055, 1.1537638; 2.7299168, -17.236788, 2.3184757; -1.6558914, -1.6088716, 0.99155784; -1.397975, -8.745316, 2.043837; -1.2315704, -15.904673, -0.93643785; -1.7237016, -17.158709, 1.311245; -1.966734, -17.31611, 2.5564675; -0.111818835, 2.4986877, 0.053571012; -0.37401295, 4.9691305, 0.46404517; -0.61685693, 7.439431, 1.0395714; -0.75818354, 8.94859, 1.5296427; -0.6260206, 10.529644, 1.520804; -0.91006875, 12.132658, 1.3961445; 3.061418, 9.244459, -0.057918906; 5.2574186, 5.829393, -2.9071631; 6.2507877, 2.7604783, -3.8043296; 6.747798, 1.2276309, -4.258061; 7.783327, 0.90815866, -4.6798744; 8.560128, 0.57123524, -5.082449; 7.5568447, 0.27032107, -4.7445602; -4.6937327, 7.6143827, 1.7135371; -5.970915, 3.0117683, 0.47031677; -4.416901, 0.19680476, 0.6177712; -3.6398966, -1.210676, 0.6914974; -4.0914927, -2.383059, 0.79508984; -4.3350773, -3.365868, 0.8828207; -3.5024085, -2.5703847, 1.1971732\",\n\"0.0, 0.0, 0.0; 1.2844685, -1.93366, 1.0394704; 2.1029258, -9.168335, 1.2779028; 2.9642847, -16.39189, -1.0653667; 2.8866854, -17.716658, 1.1755676; 2.7399387, -17.228302, 2.3374681; -1.6558061, -1.6069852, 0.99475473; -1.3991781, -8.742866, 2.0511627; -1.216212, -15.903855, -0.92421293; -1.7116852, -17.158203, 1.3225615; -1.9574225, -17.318308, 2.5669084; -0.09938786, 2.4991727, 0.055425577; -0.3408248, 4.970562, 0.47287932; -0.56296206, 7.4408703, 1.0566794; -0.7083584, 8.953553, 1.534543; -0.580221, 10.534877, 1.518071; -0.8666878, 12.136752, 1.3846169; 3.158549, 9.203697, 0.03927648; 5.2321653, 5.5349603, -2.5767827; 6.0552106, 2.3910103, -3.3818295; 6.4675217, 0.82050097, -3.7892752; 7.504691, 0.41698715, -4.1265655; 8.281872, 0.017410249, -4.466171; 7.2327204, -0.19995041, -4.2145123; -4.649442, 7.6651154, 1.6534615; -5.9588404, 3.066049, 0.43079555; -4.412597, 0.2474544, 0.5900942; -3.6394758, -1.1618408, 0.6697439; -4.091151, -2.334248, 0.7727143; -4.3348055, -3.3170595, 0.86022395; -3.5029387, -2.5213673, 1.1761675\",\n\"0.0, 0.0, 0.0; 1.2821106, -1.9331139, 1.0433891; 2.1052163, -9.166626, 1.3003905; 2.9783242, -16.38985, -1.0395503; 2.8957815, -17.714436, 1.2013156; 2.7453985, -17.222754, 2.3613467; -1.6577375, -1.6026618, 0.9985055; -1.4029573, -8.738176, 2.0578287; -1.2003632, -15.9009, -0.9120977; -1.7011677, -17.157099, 1.3324592; -1.9507852, -17.320515, 2.5756025; -0.08700523, 2.4996123, 0.056414094; -0.30887988, 4.971818, 0.47984585; -0.51105094, 7.4421387, 1.070807; -0.6586385, 8.959555, 1.5327269; -0.5336902, 10.541034, 1.5084951; -0.8224919, 12.141839, 1.3674533; 3.2521296, 9.1615505, 0.13570774; 5.216741, 5.2670765, -2.2257862; 5.868905, 2.0551102, -2.9098055; 6.196236, 0.45038998, -3.2565613; 7.225357, -0.033131182, -3.500337; 7.9966836, -0.4934458, -3.768981; 6.9164305, -0.6291965, -3.6079814; -4.6053934, 7.716187, 1.5875387; -5.9430637, 3.1201077, 0.38440073; -4.4054146, 0.29777312, 0.5598534; -3.6365907, -1.1133925, 0.64757943; -4.0888753, -2.285655, 0.74951696; -4.333042, -3.2683735, 0.8366417; -3.502143, -2.4726958, 1.1551574\",\n\"0.0, 0.0, 0.0; 1.280063, -1.9324279, 1.0471677; 2.1063776, -9.164827, 1.324408; 2.99304, -16.387497, -1.0121439; 2.9024053, -17.713196, 1.2277505; 2.747116, -17.22235, 2.3874893; -1.6594108, -1.5986689, 1.0021204; -1.4078654, -8.734169, 2.0623088; -1.1857148, -15.898238, -0.9029691; -1.6950839, -17.15459, 1.3395736; -1.9500308, -17.320362, 2.581323; -0.07544012, 2.500007, 0.05556735; -0.27916193, 4.973239, 0.4821175; -0.46313092, 7.443968, 1.0773021; -0.6064316, 8.966328, 1.5240557; -0.4820686, 10.547738, 1.4932158; -0.77306914, 12.147532, 1.3453803; 3.3381095, 9.120611, 0.22187567; 5.208509, 5.02748, -1.8640687; 5.6843743, 1.7575881, -2.403777; 5.9240227, 0.12365556, -2.678267; 6.9334826, -0.43555337, -2.8217418; 7.6904016, -0.954839, -3.0125828; 6.593609, -1.0121521, -2.9414697; -4.563229, 7.7659445, 1.514656; -5.9240613, 3.1722984, 0.32831657; -4.395458, 0.3462956, 0.52274215; -3.6311579, -1.0667043, 0.6199544; -4.083516, -2.2390013, 0.72117114; -4.3277583, -3.221698, 0.80832857; -3.498643, -2.4253485, 1.1298\",\n\"0.0, 0.0, 0.0; 1.2786659, -1.9309567, 1.0515788; 2.1074085, -9.162176, 1.3514123; 3.0078282, -16.384422, -0.9811866; 2.906722, -17.710836, 1.2578363; 2.7456217, -17.2207, 2.4170823; -1.6605372, -1.5948431, 1.0063417; -1.4152136, -8.730739, 2.0653272; -1.1704606, -15.895672, -0.8960817; -1.6911526, -17.153112, 1.3432477; -1.9528918, -17.319635, 2.5834823; -0.06343265, 2.5003865, 0.05346354; -0.24990638, 4.974717, 0.48152697; -0.41861743, 7.4459515, 1.0791292; -0.550935, 8.97328, 1.512101; -0.42373925, 10.554347, 1.4757228; -0.71593344, 12.153321, 1.321511; 3.4161084, 9.083322, 0.30053198; 5.20216, 4.8141704, -1.4848677; 5.494721, 1.5005817, -1.8649545; 5.6432, -0.15549457, -2.0595758; 6.6207304, -0.78425866, -2.0969834; 7.353523, -1.3592354, -2.203853; 6.253181, -1.3428175, -2.2204187; -4.522624, 7.811243, 1.4389086; -5.903948, 3.2193074, 0.26975524; -4.384425, 0.3899455, 0.48535126; -3.6246648, -1.0247338, 0.5931485; -4.0764685, -2.1973445, 0.6932003; -4.320257, -3.1801848, 0.7800088; -3.493339, -2.382855, 1.104694\",\n\"0.0, 0.0, 0.0; 1.2779293, -1.929467, 1.0552026; 2.1082096, -9.159549, 1.3773894; 3.023879, -16.381865, -0.94904876; 2.910202, -17.709646, 1.2885604; 2.742336, -17.222214, 2.4479868; -1.6611203, -1.592041, 1.0098102; -1.4213495, -8.728366, 2.0671754; -1.1544914, -15.89362, -0.89154553; -1.6891832, -17.151234, 1.3443849; -1.9589163, -17.31843, 2.5828147; -0.05116237, 2.5007412, 0.04989933; -0.22140816, 4.9764414, 0.47680366; -0.37764382, 7.4485497, 1.0741827; -0.4998633, 8.98104, 1.4916036; -0.36913985, 10.561686, 1.4498276; -0.6612931, 12.160132, 1.2901657; 3.485172, 9.05097, 0.36480397; 5.1932836, 4.6290774, -1.095506; 5.2927027, 1.2887821, -1.3015834; 5.345099, -0.38100743, -1.4091473; 6.2781057, -1.0710709, -1.3341818; 6.976358, -1.6965163, -1.3504815; 5.8838615, -1.6120437, -1.4534949; -4.4837646, 7.8516197, 1.3623803; -5.884058, 3.2614608, 0.2089212; -4.373426, 0.42906284, 0.4460529; -3.618112, -0.9871353, 0.5646186; -4.0693703, -2.1600103, 0.66403097; -4.3127236, -3.1429255, 0.7512112; -3.4888358, -2.3440688, 1.0798228\",\n\"0.0, 0.0, 0.0; 1.2779187, -1.9272751, 1.0592136; 2.1091352, -9.15619, 1.4043494; 3.0400333, -16.379211, -0.91383445; 2.911579, -17.707973, 1.3223919; 2.736085, -17.222593, 2.4815493; -1.6611019, -1.589619, 1.0136485; -1.4281315, -8.726435, 2.0692194; -1.1383241, -15.891791, -0.8870952; -1.688176, -17.149889, 1.3448834; -1.9664494, -17.31489, 2.5817175; -0.035748865, 2.5011175, 0.04412182; -0.19011188, 4.9787025, 0.46610212; -0.33997512, 7.4523635, 1.0586671; -0.45355675, 8.989021, 1.4629996; -0.319361, 10.569266, 1.4172578; -0.611305, 12.167231, 1.2524694; 3.5445948, 9.028658, 0.41234887; 5.1776996, 4.4821076, -0.71243334; 5.074453, 1.1356256, -0.73049355; 5.0259414, -0.537688, -0.7439259; 5.900874, -1.2790418, -0.5510628; 6.553034, -1.9478313, -0.47098958; 5.478892, -1.8008401, -0.66048706; -4.4475794, 7.8827057, 1.2780818; -5.866065, 3.2951007, 0.13675511; -4.365493, 0.4592464, 0.3954673; -3.6152065, -0.9586787, 0.5248232; -4.064691, -2.1322389, 0.6241861; -4.3065825, -3.1154501, 0.71209323; -3.4861653, -2.3142486, 1.0436659\",\n\"0.0, 0.0, 0.0; 1.2787707, -1.9246857, 1.0628875; 2.109493, -9.15262, 1.4290979; 3.0566885, -16.376793, -0.8788774; 2.9115548, -17.70682, 1.3555763; 2.7276926, -17.227589, 2.5159945; -1.6603745, -1.5881325, 1.0171645; -1.4343978, -8.725594, 2.0698898; -1.1226556, -15.890011, -0.88646984; -1.6892142, -17.148685, 1.3410008; -1.976733, -17.31423, 2.5756454; -0.01776401, 2.5014634, 0.034349408; -0.1559104, 4.981555, 0.44712517; -0.30329126, 7.457059, 1.0325735; -0.40950873, 8.996737, 1.4273062; -0.2714831, 10.576594, 1.3796296; -0.562376, 12.174309, 1.2106152; 3.5984557, 9.013649, 0.44459987; 5.154107, 4.3680243, -0.33090323; 4.84295, 1.0389354, -0.15690356; 4.6908336, -0.6261519, -0.07409542; 5.494851, -1.4051526, 0.24058339; 6.0900574, -2.1066983, 0.4210469; 5.04462, -1.9050969, 0.14227524; -4.411744, 7.907294, 1.1863858; -5.8526, 3.3223548, 0.06250262; -4.3593974, 0.48442698, 0.34040916; -3.6127977, -0.9345356, 0.4793622; -4.0595016, -2.1091523, 0.57877785; -4.2990956, -3.0928416, 0.6676224; -3.48325, -2.2883794, 1.0025632\",\n\"0.0, 0.0, 0.0; 1.2789893, -1.9226933, 1.0662248; 2.1112297, -9.14933, 1.4539734; 3.077157, -16.374805, -0.84212697; 2.9128504, -17.707022, 1.3896929; 2.7193112, -17.236036, 2.5519128; -1.66017, -1.5862967, 1.0203581; -1.4406126, -8.724859, 2.0669565; -1.1034698, -15.8869915, -0.892149; -1.6895938, -17.145876, 1.3301342; -1.9878371, -17.310534, 2.562351; 0.003111758, 2.5016856, 0.019327587; -0.118560895, 4.9849505, 0.41796803; -0.2670607, 7.4624386, 0.9946748; -0.36600694, 9.004366, 1.3824568; -0.22375585, 10.583856, 1.3350134; -0.5133163, 12.1814995, 1.1630661; 3.648433, 9.004991, 0.4638641; 5.1173525, 4.2840548, 0.06596547; 4.596328, 0.99579954, 0.42070338; 4.3396115, -0.6493516, 0.59415823; 5.061273, -1.4493032, 1.0318693; 5.590149, -2.1701937, 1.3140235; 4.5840387, -1.9250698, 0.9412598; -4.375936, 7.9262233, 1.0829875; -5.8377576, 3.3430037, -0.020653725; -4.3527308, 0.50288796, 0.27793726; -3.6102183, -0.9171684, 0.4272331; -4.0539746, -2.0929298, 0.5263215; -4.291143, -3.0771503, 0.61579186; -3.4800265, -2.2694287, 0.9543551\",\n\"0.0, 0.0, 0.0; 1.2795949, -1.9208448, 1.0688272; 2.1133504, -9.14607, 1.4789826; 3.098833, -16.37343, -0.8028313; 2.9117572, -17.707933, 1.4258283; 2.70691, -17.243778, 2.588857; -1.6596524, -1.5852338, 1.0228485; -1.4459589, -8.725086, 2.0618298; -1.0809188, -15.884054, -0.90162325; -1.6905236, -17.143454, 1.3140416; -2.0014875, -17.307888, 2.54314; 0.023658117, 2.5016503, 8.312872E-4; -0.08121723, 4.988491, 0.38155204; -0.22989239, 7.4683857, 0.9477755; -0.32400185, 9.011912, 1.330364; -0.17720184, 10.591032, 1.2844962; -0.46354222, 12.18898, 1.1099983; 3.6984515, 8.995877, 0.47112352; 5.064643, 4.2275705, 0.47841668; 4.3343887, 1.0018709, 0.9994895; 3.97336, -0.6124793, 1.2564803; 4.6020494, -1.4149528, 1.8160295; 5.056225, -2.1403015, 2.1989102; 4.100704, -1.8655381, 1.726913; -4.338014, 7.9463787, 0.9724408; -5.8178043, 3.3644247, -0.11234981; -4.341996, 0.52212477, 0.21020618; -3.6040926, -0.8990234, 0.37148374; -4.0448585, -2.0759535, 0.47004372; -4.2795835, -3.0606954, 0.5602159; -3.4740107, -2.2494013, 0.9034407\",\n\"0.0, 0.0, 0.0; 1.2804025, -1.9188502, 1.0714393; 2.1149864, -9.142729, 1.5030578; 3.119956, -16.371744, -0.7649771; 2.9089334, -17.708635, 1.4601089; 2.6922672, -17.251417, 2.623744; -1.658968, -1.5843352, 1.0253482; -1.451068, -8.725797, 2.0544014; -1.0595671, -15.880633, -0.91564155; -1.6929324, -17.139933, 1.2934058; -2.0166526, -17.307299, 2.518809; 0.04620435, 2.501256, -0.019939546; -0.0417443, 4.991748, 0.34066612; -0.19374499, 7.474002, 0.8955563; -0.28427717, 9.018704, 1.2742413; -0.13229279, 10.597425, 1.2316513; -0.4141711, 12.19602, 1.0558159; 3.7446964, 8.991532, 0.47354442; 4.993163, 4.209924, 0.89879733; 4.0562897, 1.0667408, 1.571548; 3.592185, -0.50680137, 1.9048415; 4.120925, -1.2915857, 2.5807533; 4.4951925, -2.0052285, 3.0599623; 3.600246, -1.7186946, 2.4870176; -4.3007293, 7.960662, 0.8556207; -5.798723, 3.3798752, -0.2089259; -4.3319716, 0.5358212, 0.13851666; -3.5985973, -0.88620436, 0.31223804; -4.036422, -2.064235, 0.41075838; -4.268763, -3.049433, 0.50211364; -3.4689784, -2.234364, 0.8499005\",\n\"0.0, 0.0, 0.0; 1.2811053, -1.917439, 1.0731246; 2.116257, -9.140003, 1.5251518; 3.139915, -16.370491, -0.72979295; 2.9065285, -17.709991, 1.4914881; 2.6787486, -17.262383, 2.6567352; -1.6583776, -1.5839084, 1.0269611; -1.4559511, -8.726736, 2.047587; -1.0383573, -15.877502, -0.92869973; -1.6943116, -17.13774, 1.2732084; -2.03016, -17.302776, 2.49566; 0.06827823, 2.5005233, -0.03917226; -0.002754584, 4.9945183, 0.30033562; -0.1572279, 7.4799266, 0.84022045; -0.24618313, 9.025676, 1.2149898; -0.089323774, 10.604046, 1.1773171; -0.36593223, 12.203677, 1.0025425; 3.7899234, 8.987187, 0.46541876; 4.834515, 4.2062798, 1.2747598; 3.7447505, 1.1544244, 2.1164944; 3.204118, -0.37372088, 2.534825; 3.631011, -1.1187748, 3.319023; 3.9237416, -1.803324, 3.8888521; 3.094802, -1.5250769, 3.220471; -4.2622156, 7.97477, 0.74041927; -5.779497, 3.3949456, -0.3006915; -4.3216143, 0.5493703, 0.07079065; -3.5926743, -0.87341607, 0.25653112; -4.0288067, -2.0519757, 0.3562206; -4.259801, -3.0373087, 0.44951573; -3.464195, -2.2193336, 0.8000541\",\n\"0.0, 0.0, 0.0; 1.2822043, -1.9153553, 1.0755303; 2.1152923, -9.137092, 1.5442984; 3.1531315, -16.368542, -0.7010586; 2.9031847, -17.709305, 1.5176566; 2.667053, -17.266098, 2.6829243; -1.6574509, -1.583384, 1.0292628; -1.4603069, -8.727154, 2.0443108; -1.0232896, -15.874846, -0.9365647; -1.6972167, -17.134544, 1.2602189; -2.042616, -17.299847, 2.4799705; 0.08805603, 2.4996068, -0.055011097; 0.03265516, 4.996564, 0.26508296; -0.12335229, 7.48557, 0.7876756; -0.210207, 9.032372, 1.1585717; -0.04818821, 10.610341, 1.1263336; -0.3192099, 12.211197, 0.95404404; 3.8307807, 8.983197, 0.4496504; 4.6605873, 4.2374773, 1.629841; 3.427907, 1.2928157, 2.6394916; 2.8156438, -0.18190885, 3.1423173; 3.1418715, -0.86845255, 4.022398; 3.3541226, -1.5089388, 4.6733437; 2.5945244, -1.257965, 3.9174871; -4.2259407, 7.9873366, 0.63685703; -5.7596507, 3.4078383, -0.38136613; -4.309998, 0.5610144, 0.012105286; -3.5851715, -0.8623954, 0.20884122; -4.020424, -2.041059, 0.31111616; -4.250741, -3.0262704, 0.4073262; -3.4581208, -2.2058177, 0.7588366\",\n\"0.0, 0.0, 0.0; 1.2829206, -1.913909, 1.0772494; 2.11408, -9.1349535, 1.5598855; 3.1635365, -16.366903, -0.67845225; 2.9006672, -17.709032, 1.5379426; 2.6580033, -17.273184, 2.7046432; -1.6568488, -1.5829437, 1.0309087; -1.4636619, -8.727107, 2.0439463; -1.0107552, -15.872816, -0.9393141; -1.6988575, -17.133764, 1.2523522; -2.0518703, -17.296339, 2.4702895; 0.10603716, 2.4986126, -0.06711422; 0.06445938, 4.9980736, 0.23502891; -0.09346865, 7.4909897, 0.73803973; -0.1783781, 9.038935, 1.104592; -0.011082798, 10.616469, 1.0786659; -0.27624598, 12.218794, 0.91097325; 3.8655298, 8.981557, 0.42681983; 4.485526, 4.3090568, 1.9716932; 3.1146135, 1.4864166, 3.1392665; 2.4330478, 0.07258582, 3.7215579; 2.6617136, -0.5383737, 4.684236; 2.7958586, -1.1211281, 5.4063206; 2.1064112, -0.9148295, 4.5736146; -4.1938205, 7.996379, 0.54453063; -5.738974, 3.4163742, -0.4539206; -4.298085, 0.56784034, -0.041109174; -3.5776422, -0.8564255, 0.16529529; -4.01352, -2.0346465, 0.26997662; -4.244384, -3.019504, 0.36847103; -3.452193, -2.1983473, 0.7193048\",\n\"0.0, 0.0, 0.0; 1.2843014, -1.9124421, 1.0782084; 2.1128888, -9.132899, 1.5738798; 3.1731462, -16.365694, -0.6566192; 2.8977149, -17.70958, 1.5571846; 2.6486638, -17.280056, 2.724884; -1.6556996, -1.5835483, 1.0318263; -1.4660994, -8.728198, 2.0421078; -0.9994242, -15.8714, -0.94503164; -1.7001841, -17.132296, 1.2426496; -2.0599089, -17.294025, 2.458734; 0.12299899, 2.4975545, -0.07685209; 0.09452177, 4.999181, 0.20841846; -0.065631814, 7.496009, 0.6909031; -0.14964151, 9.045325, 1.051827; 0.022861466, 10.62239, 1.0321997; -0.23599048, 12.22629, 0.869781; 3.8973317, 8.980837, 0.4036403; 4.317674, 4.421732, 2.311822; 2.810231, 1.7340875, 3.6210618; 2.0602388, 0.38767362, 4.2746625; 2.1956584, -0.13470727, 5.3047543; 2.255198, -0.649203, 6.0862613; 1.6356435, -0.50239414, 5.1885443; -4.1636357, 8.003329, 0.45693472; -5.715585, 3.4223185, -0.5262455; -4.2829385, 0.5725088, -0.09401101; -3.566616, -0.85239446, 0.122106254; -4.004667, -2.0293996, 0.23129787; -4.2373834, -3.0133893, 0.33401546; -3.4451213, -2.1916666, 0.6833593\",\n\"0.0, 0.0, 0.0; 1.2850621, -1.9110498, 1.0797697; 2.111678, -9.131126, 1.5841969; 3.1816597, -16.363985, -0.6414453; 2.8967218, -17.70941, 1.5702196; 2.6426408, -17.285448, 2.7388678; -1.6550591, -1.5832435, 1.0333205; -1.4685065, -8.728533, 2.0396435; -0.98759174, -15.868751, -0.95236754; -1.7004428, -17.130138, 1.2311208; -2.0666194, -17.289732, 2.4455607; 0.13687411, 2.496636, -0.083003625; 0.11924188, 5.0000544, 0.18701021; -0.04222457, 7.50119, 0.6461825; -0.12453543, 9.05204, 1.0008565; 0.05346787, 10.62856, 0.98760283; -0.19893059, 12.234072, 0.8310623; 3.9241965, 8.979965, 0.3759206; 4.1582336, 4.5737114, 2.6416306; 2.516488, 2.033245, 4.0771194; 1.6992097, 0.76036024, 4.794289; 1.7476676, 0.33534795, 5.875643; 1.7373773, -0.10352096, 6.70407; 1.1846449, -0.026425391, 5.755471; -4.137857, 8.009992, 0.3766175; -5.6946406, 3.426505, -0.58718914; -4.269794, 0.57543397, -0.1378296; -3.5573716, -0.85010004, 0.086850315; -3.9984639, -2.0255036, 0.20093861; -4.2337513, -3.0084097, 0.30807945; -3.4404168, -2.1867797, 0.6552012\",\n\"0.0, 0.0, 0.0; 1.2861332, -1.9098306, 1.0806509; 2.1104782, -9.129833, 1.5898318; 3.1896267, -16.36269, -0.6313889; 2.8953526, -17.709698, 1.5780883; 2.636384, -17.291895, 2.747881; -1.6541654, -1.583627, 1.0341632; -1.4711426, -8.729698, 2.0355668; -0.976913, -15.866789, -0.96173143; -1.6998179, -17.12923, 1.2178385; -2.0714636, -17.287954, 2.4307299; 0.14995813, 2.4956815, -0.088880934; 0.14203203, 5.0007257, 0.16609329; -0.022016808, 7.505764, 0.6025121; -0.10162571, 9.058628, 0.9488952; 0.08201377, 10.634541, 0.94181496; -0.16435596, 12.241644, 0.79214823; 3.9466357, 8.981309, 0.347796; 4.0051093, 4.7646985, 2.95932; 2.2320743, 2.3822377, 4.505333; 1.3490312, 1.1883196, 5.278189; 1.3169593, 0.86648214, 6.3951945; 1.2416826, 0.5083375, 7.2583685; 0.75192875, 0.508621, 6.2727532; -4.1154838, 8.013095, 0.29937133; -5.673688, 3.4251833, -0.64079285; -4.2566514, 0.57264495, -0.17630348; -3.5481343, -0.8536228, 0.05594121; -3.9934862, -2.02691, 0.1751509; -4.2323647, -3.008437, 0.2868914; -3.437057, -2.187687, 0.6315714\",\n\"0.0, 0.0, 0.0; 1.2874485, -1.9088238, 1.0808636; 2.1106567, -9.128798, 1.592294; 3.1988397, -16.361631, -0.62458706; 2.8956294, -17.710848, 1.5823326; 2.6318915, -17.29961, 2.7533855; -1.6530721, -1.5846354, 1.0343671; -1.4708545, -8.731698, 2.028822; -0.9650721, -15.865406, -0.97459626; -1.698956, -17.128448, 1.2009518; -2.076333, -17.283888, 2.412498; 0.1636259, 2.4946127, -0.09459669; 0.16511944, 5.0012236, 0.14461288; -0.0032323003, 7.510038, 0.55704415; -0.079567686, 9.065261, 0.8934338; 0.10997094, 10.640491, 0.89256984; -0.13043909, 12.249186, 0.7505099; 3.9663408, 8.985475, 0.3164426; 3.858864, 4.985508, 3.2476535; 1.9617654, 2.7738974, 4.8968115; 1.0165219, 1.6654265, 5.7216263; 0.9112521, 1.4496614, 6.859463; 0.77674705, 1.1749825, 7.745727; 0.34546235, 1.0931923, 6.7364697; -4.0947537, 8.012244, 0.22089416; -5.6531715, 3.4190164, -0.6925804; -4.2430935, 0.5653503, -0.2140539; -3.5380554, -0.8614814, 0.025208905; -3.9887674, -2.0321894, 0.14952296; -4.2321596, -3.0120735, 0.26584607; -3.434102, -2.1929724, 0.60808367\",\n\"0.0, 0.0, 0.0; 1.2890162, -1.9075657, 1.0812166; 2.1118515, -9.12776, 1.5901234; 3.2088373, -16.360336, -0.62325907; 2.8988256, -17.711138, 1.5817456; 2.6312528, -17.306986, 2.7543943; -1.6517678, -1.5857745, 1.0347046; -1.467518, -8.734057, 2.019971; -0.95318866, -15.863808, -0.99138165; -1.6952652, -17.127405, 1.1810639; -2.07688, -17.281998, 2.3913903; 0.17667049, 2.4934616, -0.10124737; 0.18737037, 5.001648, 0.120586514; 0.015228778, 7.514317, 0.5071789; -0.057531714, 9.071638, 0.83453673; 0.13745444, 10.646195, 0.839477; -0.09767726, 12.256267, 0.70434153; 3.9851966, 8.989885, 0.27400437; 3.7288842, 5.228161, 3.496894; 1.7177963, 3.199198, 5.2429643; 0.7153474, 2.1821332, 6.1165705; 0.5422257, 2.0744722, 7.261449; 0.3523816, 1.8854699, 8.159915; -0.024389565, 1.719022, 7.13931; -4.0746603, 8.010494, 0.14335209; -5.631404, 3.411275, -0.7424126; -4.2286887, 0.5561056, -0.25137547; -3.5273304, -0.87147677, -0.005857572; -3.982998, -2.0396504, 0.1241052; -4.2305636, -3.0178804, 0.24543458; -3.429925, -2.2000687, 0.58471394\",\n\"0.0, 0.0, 0.0; 1.2898599, -1.9070137, 1.0811844; 2.1140237, -9.127531, 1.5833194; 3.2203388, -16.359085, -0.6287625; 2.9032528, -17.711145, 1.5744641; 2.6317081, -17.312757, 2.7481718; -1.6510674, -1.5865239, 1.0346737; -1.460839, -8.736402, 2.0071452; -0.93962467, -15.861481, -1.0140634; -1.6896151, -17.126022, 1.1551127; -2.07523, -17.280157, 2.3642294; 0.19027038, 2.4920897, -0.110002644; 0.20966694, 5.0018153, 0.0930348; 0.032301024, 7.517846, 0.45459166; -0.036519133, 9.077421, 0.7719125; 0.16381714, 10.651279, 0.7823937; -0.06647465, 12.262644, 0.6545306; 4.0014915, 8.996445, 0.2274603; 3.610752, 5.4932117, 3.7171545; 1.4950159, 3.6553087, 5.549011; 0.44000387, 2.7339125, 6.465794; 0.20431088, 2.735913, 7.604545; -0.03657408, 2.6342118, 8.504898; -0.3617949, 2.3787875, 7.484954; -4.056318, 8.00501, 0.06520629; -5.6113596, 3.3997297, -0.7915831; -4.2157793, 0.5431156, -0.28876084; -3.5179894, -0.88518953, -0.037350357; -3.9786344, -2.0508869, 0.09721725; -4.2304087, -3.0275033, 0.2228109; -3.4275901, -2.2110977, 0.5603212\",\n\"0.0, 0.0, 0.0; 1.2911584, -1.9063387, 1.0808244; 2.1165042, -9.127432, 1.5726297; 3.2311354, -16.358086, -0.6382191; 2.908379, -17.711535, 1.5633314; 2.633522, -17.318434, 2.7380502; -1.6499884, -1.5878701, 1.03433; -1.4514595, -8.739487, 1.9922533; -0.92637396, -15.859625, -1.0399134; -1.683166, -17.124739, 1.1265645; -2.0720131, -17.277037, 2.3348784; 0.20194668, 2.4906905, -0.12038344; 0.22893399, 5.001916, 0.062212735; 0.04694146, 7.521146, 0.39829418; -0.01654777, 9.082876, 0.70598453; 0.18908928, 10.656001, 0.7222832; -0.03701526, 12.268553, 0.60215044; 4.0150146, 9.002759, 0.17128773; 3.502545, 5.772127, 3.9000516; 1.2938428, 4.133135, 5.809309; 0.19207501, 3.3113942, 6.765009; -0.10215378, 3.4252715, 7.884281; -0.3909217, 3.4131217, 8.776172; -0.6670585, 3.0647297, 7.769361; -4.040836, 7.998962, -0.010998189; -5.590738, 3.38666, -0.8388432; -4.2010837, 0.5293, -0.32399064; -3.5062575, -0.89937866, -0.066565216; -3.9717414, -2.0627234, 0.071660206; -4.2276034, -3.0378351, 0.20063819; -3.4224267, -2.2231698, 0.5367329\",\n\"0.0, 0.0, 0.0; 1.2918835, -1.9067086, 1.0793046; 2.1191833, -9.128366, 1.559391; 3.2416234, -16.357658, -0.6519594; 2.913514, -17.712309, 1.5480599; 2.6355517, -17.323065, 2.7233322; -1.649393, -1.5894347, 1.0328751; -1.4399614, -8.743079, 1.9731671; -0.9124757, -15.858128, -1.0705074; -1.6762358, -17.1231, 1.0936071; -2.068255, -17.273443, 2.3011408; 0.21272624, 2.4891582, -0.13286485; 0.24581072, 5.00179, 0.028105572; 0.057922885, 7.5236216, 0.34060258; 0.0012068339, 9.087175, 0.6402506; 0.21193835, 10.659564, 0.66171783; -0.011127427, 12.273003, 0.5479816; 4.0239897, 9.01066, 0.11400697; 3.4069839, 6.0688734, 4.059698; 1.116885, 4.6300263, 6.033297; -0.025851846, 3.908593, 7.0213246; -0.374822, 4.135263, 8.107211; -0.70843786, 4.2139134, 8.979861; -0.9377116, 3.769383, 7.9994926; -4.0292773, 7.9899116, -0.087323815; -5.5794177, 3.3725328, -0.88590133; -4.1925325, 0.5158243, -0.3600824; -3.4990902, -0.91252804, -0.09717342; -3.9692984, -2.0735633, 0.044439897; -4.2291694, -3.0471668, 0.17675436; -3.4222918, -2.233938, 0.5122485\",\n\"0.0, 0.0, 0.0; 1.2933162, -1.9067454, 1.077522; 2.123087, -9.129103, 1.5425929; 3.2539005, -16.356876, -0.6694535; 2.9213939, -17.712788, 1.529128; 2.640648, -17.32801, 2.705209; -1.6482093, -1.5917683, 1.0311695; -1.426072, -8.7474575, 1.9528036; -0.8969098, -15.857033, -1.1033418; -1.6674621, -17.123556, 1.0574543; -2.0625267, -17.268936, 2.2646031; 0.22247125, 2.4875574, -0.14621767; 0.26093027, 5.001452, -0.0077354014; 0.0668859, 7.5256357, 0.28111255; 0.01777061, 9.090771, 0.5737612; 0.23306432, 10.662468, 0.6000665; 0.01187861, 12.276562, 0.49211052; 4.030311, 9.019092, 0.050539196; 3.332068, 6.3902965, 4.1984515; 0.9726453, 5.142658, 6.2199483; -0.20497322, 4.5170655, 7.2320557; -0.6031485, 4.8542604, 8.2713175; -0.9770888, 5.022448, 9.114458; -1.163264, 4.481168, 8.174431; -4.0202355, 7.97915, -0.1610573; -5.570428, 3.3567152, -0.9297228; -4.183606, 0.5019841, -0.39310694; -3.4901974, -0.92538035, -0.12479964; -3.9644558, -2.0846353, 0.017886743; -4.227763, -3.0571384, 0.15149109; -3.419307, -2.2457383, 0.4876122\",\n\"0.0, 0.0, 0.0; 1.2933832, -1.9079567, 1.0752951; 2.1252694, -9.131118, 1.5238097; 3.2622662, -16.356934, -0.6914637; 2.9264557, -17.713947, 1.5059357; 2.643651, -17.331295, 2.6822166; -1.6481655, -1.5931923, 1.0290385; -1.4139184, -8.751108, 1.9301541; -0.8855048, -15.855354, -1.1384883; -1.6614066, -17.121634, 1.0205364; -2.0586476, -17.264872, 2.227227; 0.2298437, 2.4860249, -0.16020818; 0.27065986, 5.001037, -0.044573814; 0.069156885, 7.527155, 0.22135448; 0.027726114, 9.093889, 0.5065417; 0.24752684, 10.664872, 0.5377588; 0.027974665, 12.279613, 0.43633455; 4.0287037, 9.0296135, -0.017231971; 3.2667983, 6.7300024, 4.3111134; 0.85044074, 5.668411, 6.371251; -0.35583627, 5.1360765, 7.4027686; -0.7959442, 5.5773826, 8.384534; -1.2042825, 5.8305683, 9.189618; -1.3529885, 5.196188, 8.302632; -4.0186024, 7.965201, -0.23040867; -5.570215, 3.3385248, -0.9701487; -4.1817636, 0.48653626, -0.42326158; -3.487538, -0.93945575, -0.14981788; -3.9648883, -2.0973883, -0.006703973; -4.230833, -3.0690663, 0.12767887; -3.4215746, -2.2589574, 0.46498194\",\n\"0.0, 0.0, 0.0; 1.294778, -1.9083577, 1.0729022; 2.1237874, -9.132966, 1.5030509; 3.2673945, -16.3562, -0.71723497; 2.9268775, -17.714325, 1.478753; 2.6414428, -17.333866, 2.6551104; -1.647014, -1.5958585, 1.0267483; -1.4057941, -8.75625, 1.90609; -0.87649214, -15.855065, -1.1749442; -1.6582355, -17.122698, 0.98117685; -2.0579956, -17.261322, 2.1875744; 0.23357213, 2.484601, -0.17611569; 0.2742797, 5.0005856, -0.08399044; 0.06520255, 7.528208, 0.16096358; 0.03117039, 9.0963745, 0.43917143; 0.25516284, 10.666656, 0.47549257; 0.0369983, 12.281986, 0.38069004; 4.0206175, 9.04014, -0.08616048; 3.2168715, 7.0847025, 4.400881; 0.75450516, 6.200994, 6.4903154; -0.47492385, 5.757817, 7.536552; -0.94939196, 6.29365, 8.453106; -1.3860099, 6.6247797, 9.213843; -1.5036126, 5.90489, 8.389692; -4.0233603, 7.950661, -0.2983178; -5.5736895, 3.319467, -1.0120218; -4.18307, 0.47062778, -0.45433694; -3.4877605, -0.9537897, -0.1754939; -3.967509, -2.110849, -0.033339992; -4.2355175, -3.082007, 0.10070068; -3.426091, -2.273031, 0.44031185\",\n\"0.0, 0.0, 0.0; 1.2953929, -1.909656, 1.0698457; 2.1221893, -9.135597, 1.4814723; 3.269524, -16.355968, -0.74618816; 2.9257646, -17.71394, 1.4493899; 2.6387122, -17.331522, 2.6247182; -1.6465166, -1.5982492, 1.0238231; -1.3980385, -8.761245, 1.8796189; -0.86990076, -15.854139, -1.21522; -1.6571429, -17.121986, 0.9387729; -2.0590134, -17.255392, 2.1450577; 0.23553546, 2.483253, -0.19181219; 0.27392882, 5.000018, -0.12293731; 0.056298524, 7.528791, 0.10186382; 0.029967312, 9.098194, 0.37386268; 0.25811103, 10.667765, 0.4147703; 0.041011393, 12.283586, 0.32606363; 4.006428, 9.052206, -0.15890943; 3.190512, 7.458842, 4.46697; 0.6926563, 6.741943, 6.5780597; -0.5546042, 6.382355, 7.6352024; -1.0555696, 7.0011497, 8.482808; -1.5140036, 7.4014797, 9.195954; -1.6072264, 6.605847, 8.441253; -4.033853, 7.9335794, -0.359174; -5.579934, 3.2973418, -1.0489452; -4.186362, 0.45229244, -0.4794103; -3.4895768, -0.9702307, -0.19464341; -3.9716825, -2.1265574, -0.05451949; -4.241736, -3.0972998, 0.078423694; -3.432642, -2.289489, 0.42158204\",\n\"0.0, 0.0, 0.0; 1.2954705, -1.9112378, 1.0669231; 2.1194277, -9.138541, 1.4599044; 3.2676215, -16.35615, -0.7762501; 2.9212556, -17.714897, 1.4184375; 2.6331134, -17.328901, 2.5923285; -1.6464691, -1.6000861, 1.0210264; -1.3927094, -8.765504, 1.8547137; -0.86585987, -15.852866, -1.2529933; -1.658782, -17.121193, 0.898633; -2.062881, -17.250238, 2.1046472; 0.23532365, 2.4819245, -0.20853509; 0.26897627, 4.9992704, -0.16207825; 0.041804403, 7.528638, 0.04597397; 0.02204022, 9.09908, 0.31247962; 0.25356603, 10.668022, 0.35819274; 0.036958277, 12.284264, 0.2762039; 3.985614, 9.065592, -0.23052274; 3.1806607, 7.8468614, 4.5097337; 0.65692854, 7.289233, 6.6380553; -0.60331595, 7.0094485, 7.703896; -1.123276, 7.699525, 8.482193; -1.5972552, 8.160126, 9.14717; -1.6725838, 7.299143, 8.465753; -4.0505147, 7.914411, -0.412126; -5.5865498, 3.271532, -1.0792973; -4.189332, 0.4306414, -0.4980536; -3.4907236, -0.98980165, -0.20743155; -3.9743814, -2.145791, -0.06989603; -4.245788, -3.1163957, 0.061287194; -3.4369664, -2.3097024, 0.40770078\",\n\"0.0, 0.0, 0.0; 1.2967149, -1.9122795, 1.0635395; 2.1177273, -9.140768, 1.4405622; 3.2655406, -16.355675, -0.8044834; 2.9152603, -17.715345, 1.3890109; 2.625642, -17.324116, 2.5608041; -1.6454445, -1.6032, 1.0177884; -1.3870702, -8.771006, 1.8292401; -0.86075866, -15.852379, -1.2921822; -1.6593661, -17.122225, 0.8564429; -2.0657325, -17.246136, 2.0622342; 0.23537809, 2.4807441, -0.22208188; 0.26304835, 4.9984646, -0.19673288; 0.02259241, 7.528077, -0.0074364245; 0.010456264, 9.09934, 0.25464702; 0.24573568, 10.667568, 0.30545533; 0.029208556, 12.284132, 0.22985142; 3.9573634, 9.0842285, -0.30456963; 3.174906, 8.251078, 4.5221167; 0.63065577, 7.845312, 6.6603565; -0.6398593, 7.6416144, 7.731249; -1.1739447, 8.393039, 8.440067; -1.659375, 8.906359, 9.056398; -1.721056, 7.9894648, 8.45076; -4.072772, 7.8881645, -0.45918295; -5.5949397, 3.2380228, -1.1072845; -4.194252, 0.40153718, -0.51302606; -3.493909, -1.016704, -0.21589673; -3.978712, -2.1725235, -0.08098963; -4.2511544, -3.1430492, 0.04862015; -3.4436173, -2.3368158, 0.3990776\",\n\"0.0, 0.0, 0.0; 1.2976422, -1.913293, 1.0605818; 2.1165447, -9.142785, 1.4226563; 3.2643194, -16.35476, -0.83182; 2.9106417, -17.714653, 1.3609912; 2.619855, -17.321348, 2.5317998; -1.6446829, -1.6057742, 1.0149575; -1.382894, -8.775696, 1.8063684; -0.85714525, -15.851529, -1.3276851; -1.6617936, -17.12215, 0.81822705; -2.0705419, -17.240631, 2.023759; 0.23601824, 2.479738, -0.23239891; 0.25612608, 4.997649, -0.22589281; -0.0013855994, 7.526969, -0.056122378; -0.006314884, 9.098896, 0.2021931; 0.23219217, 10.666442, 0.25865474; 0.014834508, 12.283216, 0.19030026; 3.9211268, 9.108196, -0.38159364; 3.1728306, 8.661534, 4.501421; 0.6161847, 8.407822, 6.648307; -0.66053164, 8.280311, 7.723597; -1.2044289, 9.085809, 8.362079; -1.6978827, 9.646543, 8.928722; -1.7501559, 8.682105, 8.401064; -4.1009355, 7.8546615, -0.49437225; -5.606581, 3.1972184, -1.1284897; -4.2033005, 0.36464286, -0.5218275; -3.5016613, -1.0516435, -0.2184971; -3.9878583, -2.2071385, -0.08584672; -4.261543, -3.1774898, 0.042446107; -3.4549525, -2.3718786, 0.3964966\",\n\"0.0, 0.0, 0.0; 1.2981564, -1.9146098, 1.0575721; 2.1165547, -9.144724, 1.4081727; 3.2644088, -16.354687, -0.8526789; 2.906779, -17.716173, 1.338502; 2.6144185, -17.32138, 2.5084176; -1.6442674, -1.6080158, 1.0120776; -1.3774177, -8.7796955, 1.7856743; -0.852488, -15.85016, -1.3606098; -1.6624433, -17.12174, 0.78273606; -2.0734286, -17.240593, 1.9874703; 0.23741294, 2.4790564, -0.23817708; 0.24953745, 4.9970093, -0.24766673; -0.026762053, 7.525667, -0.09887825; -0.02497859, 9.097932, 0.15741445; 0.21642363, 10.664794, 0.2202113; -0.0021575093, 12.281692, 0.15903494; 3.882013, 9.134057, -0.4550711; 3.180709, 9.079452, 4.4549675; 0.61886406, 8.974102, 6.608053; -0.6604382, 8.920933, 7.686511; -1.2117724, 9.774363, 8.252193; -1.7113025, 10.378122, 8.766924; -1.7564002, 9.373097, 8.32062; -4.1305437, 7.8180113, -0.522273; -5.613858, 3.1525674, -1.1501728; -4.209319, 0.32358313, -0.52981883; -3.507051, -1.0909078, -0.21964353; -3.9943423, -2.2461565, -0.08887564; -4.2690105, -3.2163696, 0.038353637; -3.463377, -2.411172, 0.39550924\",\n\"0.0, 0.0, 0.0; 1.2996838, -1.9150158, 1.0549576; 2.1181593, -9.145609, 1.3953466; 3.2643337, -16.354004, -0.8713496; 2.9031138, -17.717144, 1.3182132; 2.609536, -17.321247, 2.4874508; -1.6429971, -1.6108848, 1.0095755; -1.3720413, -8.78419, 1.7664832; -0.8472148, -15.849501, -1.3913738; -1.6631117, -17.121479, 0.7494811; -2.0764742, -17.23593, 1.9538282; 0.23633161, 2.4786704, -0.24321836; 0.24044675, 4.996556, -0.26685363; -0.051290423, 7.5245094, -0.1367388; -0.04466565, 9.096965, 0.11830011; 0.19822799, 10.663303, 0.18802422; -0.02216947, 12.280235, 0.13480352; 3.8453887, 9.154813, -0.52444863; 3.1997585, 9.478712, 4.382846; 0.64601564, 9.529836, 6.547496; -0.62924635, 9.555066, 7.6317387; -1.1858368, 10.451879, 8.119841; -1.6896958, 11.09575, 8.578709; -1.7297637, 10.056226, 8.219431; -4.1588264, 7.7874146, -0.5426765; -5.614836, 3.1133094, -1.1700698; -4.2095485, 0.2875769, -0.5367263; -3.506905, -1.1252873, -0.2200548; -3.99578, -2.2800727, -0.09111847; -4.271863, -3.2500036, 0.035198003; -3.4672165, -2.4453526, 0.3957944\",\n\"0.0, 0.0, 0.0; 1.300539, -1.9158946, 1.0523049; 2.1196425, -9.146978, 1.3805406; 3.2658758, -16.35276, -0.8944206; 2.9001472, -17.716537, 1.2939968; 2.604918, -17.31892, 2.4622345; -1.6422914, -1.6131917, 1.0070363; -1.3638831, -8.788223, 1.7446321; -0.84006804, -15.847339, -1.4272157; -1.6623225, -17.120718, 0.71037114; -2.0781605, -17.23031, 1.9143178; 0.23402636, 2.4782658, -0.24948913; 0.23051248, 4.9959784, -0.28735784; -0.07330336, 7.5233183, -0.17404807; -0.06258402, 9.095744, 0.08103424; 0.1804057, 10.661722, 0.15812795; -0.0429845, 12.278497, 0.113247395; 3.812895, 9.170297, -0.5950466; 3.233675, 9.864514, 4.2820277; 0.7016232, 10.0802, 6.4619637; -0.56282175, 10.187874, 7.553796; -1.1222804, 11.122679, 7.960557; -1.6282651, 11.8031025, 8.360566; -1.6651354, 10.735792, 8.094509; -4.1842737, 7.7626157, -0.5592873; -5.6117077, 3.080267, -1.1908666; -4.205744, 0.25740218, -0.54633474; -3.5027626, -1.1540284, -0.22406965; -3.9935288, -2.308138, -0.09627047; -4.2712846, -3.277635, 0.029707253; -3.4673867, -2.4735456, 0.39321375\",\n\"0.0, 0.0, 0.0; 1.3018113, -1.9161954, 1.0501816; 2.1233659, -9.147537, 1.3663791; 3.269661, -16.35091, -0.9161674; 2.8976312, -17.717125, 1.2696661; 2.5999544, -17.323914, 2.4387734; -1.6412296, -1.6155375, 1.005005; -1.3563305, -8.792318, 1.7228398; -0.83232176, -15.844875, -1.4635322; -1.6614301, -17.118393, 0.67132306; -2.0799952, -17.224184, 1.8746647; 0.23103763, 2.4779441, -0.25539836; 0.21950817, 4.9954, -0.3064546; -0.09626174, 7.521926, -0.20874655; -0.0822976, 9.094222, 0.04697731; 0.1605646, 10.659809, 0.13200426; -0.06563988, 12.276417, 0.09608829; 3.7789166, 9.185231, -0.66560996; 3.2763314, 10.261822, 4.150161; 0.77354336, 10.6331415, 6.3428984; -0.47626495, 10.818796, 7.441089; -1.037715, 11.78455, 7.764202; -1.5446647, 12.49656, 8.103389; -1.5783246, 11.409387, 7.935408; -4.2107124, 7.7380996, -0.5697392; -5.6085773, 3.04843, -1.2130239; -4.202897, 0.22736263, -0.5600581; -3.5000584, -1.1831696, -0.23357585; -3.9920886, -2.3368666, -0.10691765; -4.270967, -3.3061085, 0.01854457; -3.4676845, -2.5024555, 0.38436943\",\n\"0.0, 0.0, 0.0; 1.3026154, -1.9171973, 1.047352; 2.126003, -9.14889, 1.3505288; 3.2720509, -16.34971, -0.9401835; 2.895353, -17.717014, 1.2441689; 2.595955, -17.320663, 2.4117758; -1.6405649, -1.6178931, 1.002297; -1.3468448, -8.796462, 1.6983693; -0.82398325, -15.841982, -1.5037208; -1.6596303, -17.116446, 0.62801814; -2.0806723, -17.218071, 1.8308545; 0.22840935, 2.4776313, -0.2607407; 0.20874494, 4.9947367, -0.32489106; -0.11937204, 7.5202484, -0.24291803; -0.10410768, 9.092091, 0.015510067; 0.13777405, 10.657378, 0.10846972; -0.09148896, 12.273718, 0.080866255; 3.7436986, 9.200057, -0.7401524; 3.3300483, 10.663244, 3.9812098; 0.8668134, 11.186471, 6.187708; -0.36318576, 11.448245, 7.2927365; -0.92529416, 12.437465, 7.533126; -1.431422, 13.175705, 7.8121233; -1.4617606, 12.077569, 7.7452464; -4.2374187, 7.7127447, -0.57516426; -5.6042185, 3.0161567, -1.2345359; -4.198462, 0.19627976, -0.5766124; -3.495585, -1.2136574, -0.24765235; -3.9894469, -2.3666096, -0.12134282; -4.2699156, -3.335384, 0.0041841567; -3.4665666, -2.5324664, 0.3714748\",\n\"0.0, 0.0, 0.0; 1.304088, -1.9175212, 1.044924; 2.1309257, -9.14935, 1.3351713; 3.2770805, -16.347874, -0.9626962; 2.8927143, -17.7167, 1.2193662; 2.590378, -17.323362, 2.3872347; -1.6393346, -1.6205765, 0.99997306; -1.3373336, -8.800927, 1.6737692; -0.8157798, -15.838924, -1.5450344; -1.6592909, -17.112526, 0.5841203; -2.0833752, -17.21191, 1.7860749; 0.22622406, 2.4773364, -0.26540878; 0.19905424, 4.9940352, -0.34164095; -0.14133155, 7.518367, -0.27471066; -0.12587652, 9.089754, -0.013542742; 0.114093944, 10.65481, 0.08788525; -0.11888766, 12.270745, 0.06913936; 3.7094421, 9.214165, -0.8114821; 3.3935595, 11.057177, 3.7827325; 0.97895694, 11.731602, 6.001915; -0.22668457, 12.0691395, 7.1132245; -0.7887372, 13.074132, 7.2756915; -1.2924242, 13.832945, 7.4981923; -1.3178594, 12.733194, 7.532805; -4.2625937, 7.687769, -0.5784438; -5.596168, 2.9845104, -1.2579927; -4.189472, 0.1655674, -0.5980791; -3.4861252, -1.2439026, -0.26812238; -3.9813073, -2.396245, -0.1414196; -4.2629385, -3.3645906, -0.015190735; -3.4599268, -2.5617895, 0.35309148\",\n\"0.0, 0.0, 0.0; 1.304709, -1.9183247, 1.0426712; 2.134224, -9.150335, 1.3204765; 3.2819378, -16.346107, -0.9852178; 2.8897452, -17.717438, 1.1938779; 2.5841644, -17.328312, 2.3623128; -1.6388192, -1.6224247, 0.997818; -1.328541, -8.804493, 1.6491771; -0.8072301, -15.835267, -1.5854108; -1.6587584, -17.109211, 0.5403464; -2.0860386, -17.205336, 1.741434; 0.22347629, 2.4770858, -0.2700362; 0.18805642, 4.9933224, -0.35734028; -0.16443829, 7.516305, -0.30350855; -0.14952895, 9.087159, -0.03912437; 0.08863568, 10.651897, 0.071084306; -0.14748603, 12.267459, 0.061801963; 3.6730096, 9.2277775, -0.8841717; 3.457597, 11.429147, 3.5555189; 1.1046932, 12.262533, 5.7869396; -0.07007468, 12.6797, 6.90426; -0.63229847, 13.693613, 6.994773; -1.1326807, 14.467936, 7.165202; -1.1503476, 13.375719, 7.2995415; -4.2889543, 7.6632524, -0.57281566; -5.58904, 2.9542084, -1.2767543; -4.18018, 0.13603067, -0.6181881; -3.4757504, -1.273056, -0.2889053; -3.9722733, -2.4247668, -0.16170417; -4.2550745, -3.3926792, -0.03476745; -3.4521065, -2.5901234, 0.33414415\",\n\"0.0, 0.0, 0.0; 1.3064762, -1.918531, 1.040076; 2.1388378, -9.150657, 1.3061241; 3.286014, -16.343987, -1.007445; 2.8860548, -17.716932, 1.1692206; 2.5775585, -17.327196, 2.3366854; -1.637336, -1.6254451, 0.9953342; -1.3182304, -8.809207, 1.6233331; -0.7973998, -15.832241, -1.6281048; -1.6583421, -17.106342, 0.49376166; -2.0894976, -17.20101, 1.6935793; 0.22090246, 2.4768717, -0.27408734; 0.1781424, 4.992633, -0.3712566; -0.18562937, 7.514229, -0.32867497; -0.17241967, 9.084595, -0.06131476; 0.06287129, 10.649174, 0.057030715; -0.17717001, 12.264184, 0.056919675; 3.6381474, 9.240018, -0.9553329; 3.5255616, 11.782396, 3.30224; 1.2452333, 12.777128, 5.5428963; 0.1067847, 13.2751, 6.6647124; -0.45596808, 14.292402, 6.691438; -0.952274, 15.078037, 6.815784; -0.95867485, 14.001613, 7.0450535; -4.3131356, 7.6405344, -0.55996186; -5.5778375, 2.9258986, -1.2904289; -4.1659236, 0.10797334, -0.63734597; -3.4599676, -1.3009877, -0.31080562; -3.9574678, -2.4522839, -0.18366963; -4.2411203, -3.4199276, -0.056584135; -3.4381711, -2.6176956, 0.31307137\",\n\"0.0, 0.0, 0.0; 1.3076277, -1.9191098, 1.0375578; 2.1439066, -9.1511135, 1.2944922; 3.293551, -16.341877, -1.0258181; 2.8829904, -17.716528, 1.1477952; 2.5700765, -17.328732, 2.3147302; -1.6363711, -1.627889, 0.9929242; -1.308043, -8.813264, 1.5972669; -0.7865324, -15.828595, -1.6706483; -1.6571546, -17.101385, 0.4480536; -2.0922678, -17.193974, 1.6466041; 0.21252318, 2.4773705, -0.2761932; 0.159959, 4.9926004, -0.3819181; -0.20963936, 7.513521, -0.35113397; -0.19513519, 9.083086, -0.07917902; 0.038094312, 10.647341, 0.047255993; -0.20560712, 12.261779, 0.05609656; 3.6009097, 9.24451, -1.0408531; 3.5904949, 12.109063, 3.0085316; 1.3937664, 13.265343, 5.255158; 0.29716325, 13.84421, 6.37983; -0.26754755, 14.860312, 6.3490615; -0.7603262, 15.6536455, 6.4314933; -0.7516191, 14.599987, 6.7493367; -4.3402014, 7.628122, -0.52742803; -5.5652113, 2.9084525, -1.2922287; -4.1504016, 0.089757204, -0.64880776; -3.442997, -1.3195888, -0.32709882; -3.9409723, -2.4707797, -0.20087403; -4.2250347, -3.4383936, -0.07447924; -3.4220047, -2.6366498, 0.29605937\",\n\"0.0, 0.0, 0.0; 1.3086652, -1.9199246, 1.0347388; 2.1481047, -9.151835, 1.2838404; 3.2994335, -16.340315, -1.0427048; 2.8778799, -17.716953, 1.1275439; 2.5604515, -17.331913, 2.2941723; -1.6355032, -1.6304028, 0.99022627; -1.2986888, -8.817213, 1.5724304; -0.77495795, -15.825226, -1.7107971; -1.6566544, -17.09915, 0.40263724; -2.0963936, -17.186087, 1.599922; 0.19873515, 2.4782045, -0.2789634; 0.13317966, 4.9927726, -0.39286363; -0.23934248, 7.513362, -0.3716908; -0.22079745, 9.081869, -0.09394103; 0.011751533, 10.645618, 0.039790124; -0.23472933, 12.259565, 0.057088047; 3.5556731, 9.244744, -1.1414224; 3.6541185, 12.414135, 2.6728344; 1.5560911, 13.729181, 4.926467; 0.5089234, 14.38756, 6.054514; -0.058708727, 15.399208, 5.9728374; -0.54815865, 16.197598, 6.017744; -0.5207599, 15.172389, 6.4171104; -4.3725743, 7.621496, -0.47394872; -5.557504, 2.8975754, -1.2747982; -4.138113, 0.078094244, -0.6450556; -3.4284172, -1.331644, -0.33018467; -3.925758, -2.4833407, -0.20609137; -4.2092724, -3.451361, -0.08159193; -3.4063308, -2.650053, 0.29007912\",\n\"0.0, 0.0, 0.0; 1.3093438, -1.920593, 1.0326376; 2.1523676, -9.152262, 1.2766212; 3.307036, -16.3382, -1.0561074; 2.8738399, -17.717127, 1.1103922; 2.5514026, -17.335981, 2.2769256; -1.6349359, -1.6321908, 0.98821557; -1.2885827, -8.820335, 1.54791; -0.76283, -15.820879, -1.7508898; -1.6572059, -17.093628, 0.3579197; -2.1022987, -17.177355, 1.5534538; 0.18100597, 2.4794528, -0.27993765; 0.101522714, 4.9933167, -0.40033495; -0.2688365, 7.5142875, -0.38884586; -0.24498229, 9.081637, -0.10503274; -0.0131302625, 10.644865, 0.035823375; -0.26243114, 12.258266, 0.06155686; 3.5107296, 9.237334, -1.2480931; 3.7317355, 12.696038, 2.3004005; 1.7473565, 14.164282, 4.5623527; 0.75715, 14.899406, 5.6944284; 0.18561584, 15.904055, 5.566598; -0.30080837, 16.705484, 5.576874; -0.2511365, 15.713868, 6.0517693; -4.403224, 7.625005, -0.40708792; -5.546117, 2.8974886, -1.2468702; -4.121479, 0.07684255, -0.6344289; -3.4091618, -1.3334787, -0.32820767; -3.9053102, -2.4861047, -0.20802933; -4.187817, -3.4548419, -0.086860366; -3.385572, -2.6540422, 0.28740105\",\n\"0.0, 0.0, 0.0; 1.3108194, -1.920798, 1.0303818; 2.1567743, -9.152235, 1.2710682; 3.3155196, -16.336124, -1.06595; 2.8677154, -17.716515, 1.0966445; 2.5390198, -17.340273, 2.2630234; -1.6336907, -1.634741, 0.9860569; -1.2770442, -8.823972, 1.5249511; -0.7495315, -15.81717, -1.7891141; -1.6576753, -17.089529, 0.3140391; -2.1086133, -17.169718, 1.5076237; 0.16519025, 2.4804838, -0.28058174; 0.07249616, 4.9936714, -0.40556115; -0.29818863, 7.514615, -0.40023303; -0.27149677, 9.080785, -0.11022702; -0.040026724, 10.643375, 0.038123682; -0.29068708, 12.256404, 0.07254431; 3.4639366, 9.233673, -1.340217; 3.8205583, 12.959594, 1.9145678; 1.966561, 14.579092, 4.1838946; 1.0417106, 15.3899975, 5.319499; 0.46543235, 16.38563, 5.1494102; -0.018176526, 17.18852, 5.127236; 0.057404846, 16.235268, 5.6721163; -4.4322023, 7.6246467, -0.34042382; -5.5372214, 2.8948803, -1.2174007; -4.103981, 0.07412219, -0.6259061; -3.387361, -1.3362548, -0.33015883; -3.8815572, -2.4902558, -0.21524984; -4.162417, -3.4600196, -0.09854708; -3.3613951, -2.6596508, 0.27923927\",\n\"0.0, 0.0, 0.0; 1.3115244, -1.9218054, 1.0276021; 2.1606045, -9.152821, 1.2699645; 3.3231783, -16.335426, -1.0690925; 2.860011, -17.717855, 1.0889585; 2.5246587, -17.345863, 2.2548053; -1.633102, -1.63693, 0.98339695; -1.265965, -8.827147, 1.5016989; -0.73610777, -15.813009, -1.8274287; -1.6588767, -17.083176, 0.2706772; -2.1160774, -17.1612, 1.4620206; 0.15057829, 2.4815211, -0.27963084; 0.045542173, 4.9940963, -0.4071325; -0.32532305, 7.5150185, -0.40598804; -0.2975839, 9.079714, -0.108221054; -0.06667949, 10.641573, 0.048473388; -0.31803828, 12.25428, 0.091730006; 3.4197488, 9.230324, -1.4181545; 3.921358, 13.197804, 1.5162573; 2.2185233, 14.966099, 3.792969; 1.3694533, 15.8515625, 4.932068; 0.78755736, 16.836424, 4.722894; 0.30658102, 17.639448, 4.6698136; 0.41212595, 16.729313, 5.2795753; -4.457697, 7.625065, -0.27511218; -5.5299025, 2.8948565, -1.1896333; -4.086315, 0.07475376, -0.62060237; -3.3645236, -1.3352969, -0.33608797; -3.8560884, -2.4911346, -0.22859041; -4.1347623, -3.4622388, -0.11794935; -3.3361263, -2.6621957, 0.26553488\",\n\"0.0, 0.0, 0.0; 1.3129371, -1.9222482, 1.0249667; 2.1642892, -9.152862, 1.2712979; 3.3320708, -16.334225, -1.0689852; 2.8510714, -17.71751, 1.0846117; 2.50803, -17.345808, 2.248312; -1.6319088, -1.6396313, 0.9808744; -1.2559881, -8.830688, 1.4808965; -0.72256655, -15.809824, -1.8617427; -1.660575, -17.077856, 0.23088932; -2.1246397, -17.156706, 1.4195213; 0.13513914, 2.4825945, -0.2779846; 0.018626153, 4.994603, -0.40667248; -0.34982836, 7.5158787, -0.40824085; -0.32124057, 9.078548, -0.10010117; -0.09063539, 10.639402, 0.0667216; -0.34191126, 12.251827, 0.11986334; 3.378708, 9.223812, -1.4914293; 4.0308146, 13.4120035, 1.0848262; 2.5064487, 15.322034, 3.3734982; 1.7468573, 16.278553, 4.5183153; 1.1590041, 17.25211, 4.275568; 0.6819453, 18.055174, 4.194907; 0.8252623, 17.19402, 4.8651085; -4.479206, 7.6304817, -0.206107; -5.5203676, 2.900724, -1.1580625; -4.0649033, 0.082090616, -0.61249095; -3.337171, -1.327224, -0.33970562; -3.8253617, -2.4853754, -0.24219874; -4.1012444, -3.4581654, -0.13967161; -3.3058991, -2.658653, 0.25167835\",\n\"0.0, 0.0, 0.0; 1.3135849, -1.923418, 1.0219377; 2.1665854, -9.153555, 1.2763934; 3.3410149, -16.333899, -1.0636919; 2.841172, -17.719185, 1.0843208; 2.4896443, -17.353415, 2.2473683; -1.6313673, -1.6418997, 0.9779759; -1.2455151, -8.833614, 1.4606826; -0.7115155, -15.806413, -1.895066; -1.6646385, -17.070286, 0.19324851; -2.1352448, -17.150023, 1.3792466; 0.11883669, 2.4837494, -0.27510187; -0.010446884, 4.995181, -0.4028486; -0.37728828, 7.5166917, -0.40448058; -0.34930584, 9.077013, -0.08460525; -0.11914472, 10.636821, 0.09231202; -0.36988842, 12.248991, 0.15486422; 3.3333733, 9.21941, -1.5551572; 4.126441, 13.607706, 0.61675024; 2.8160086, 15.646552, 2.9266849; 2.1636987, 16.667723, 4.081768; 1.5694196, 17.630182, 3.8119302; 1.097682, 18.433634, 3.7073631; 1.2887918, 17.626934, 4.4312477; -4.502561, 7.634572, -0.13248932; -5.515148, 2.9061866, -1.1213717; -4.04651, 0.09021115, -0.5978202; -3.3121934, -1.3177755, -0.33604464; -3.796749, -2.478351, -0.2498912; -4.069688, -3.4528613, -0.15620203; -3.2792354, -2.6535559, 0.24535029\",\n\"0.0, 0.0, 0.0; 1.314559, -1.9237367, 1.0200833; 2.1682355, -9.153407, 1.2853324; 3.3494601, -16.33331, -1.0526834; 2.829462, -17.720314, 1.0894277; 2.4688418, -17.360579, 2.251573; -1.6305422, -1.6437745, 0.9762014; -1.2381679, -8.836136, 1.443762; -0.69925785, -15.802707, -1.9241129; -1.6697197, -17.062038, 0.15895307; -2.14815, -17.142443, 1.3417715; 0.100257374, 2.4849074, -0.27202588; -0.041900955, 4.9957705, -0.3972447; -0.40385827, 7.5179873, -0.3969118; -0.3785314, 9.075793, -0.06479052; -0.14956951, 10.634544, 0.12267947; -0.39937577, 12.246438, 0.1953009; 3.2892694, 9.211434, -1.6156654; 4.2034545, 13.765944, 0.12329936; 3.1405363, 15.925292, 2.4508183; 2.6122906, 17.006966, 3.6141968; 2.0120866, 17.959742, 3.3238835; 1.5478971, 18.764627, 3.1986268; 1.7978178, 18.016966, 3.966635; -4.523477, 7.644413, -0.05265686; -5.5083995, 2.9183693, -1.0799284; -4.0258565, 0.10603428, -0.576383; -3.284585, -1.3001308, -0.32460994; -3.7652607, -2.463219, -0.25160745; -4.035081, -3.4395223, -0.16810608; -3.2502437, -2.6407766, 0.24539736\",\n\"0.0, 0.0, 0.0; 1.3160616, -1.9241525, 1.0173585; 2.1697996, -9.153153, 1.3000793; 3.359862, -16.332253, -1.0359194; 2.8157413, -17.720705, 1.0992503; 2.4442565, -17.364305, 2.2589989; -1.6292677, -1.6465825, 0.973594; -1.2319869, -8.839508, 1.4281596; -0.68414086, -15.799648, -1.9515475; -1.6743238, -17.054533, 0.124910235; -2.1618147, -17.134056, 1.3040829; 0.08210301, 2.4858544, -0.2694468; -0.072810076, 4.996129, -0.39129034; -0.4309464, 7.518885, -0.38578522; -0.40945905, 9.073854, -0.040369242; -0.18211225, 10.631488, 0.1580438; -0.4310674, 12.243034, 0.24061075; 3.244462, 9.2064905, -1.6647207; 4.25162, 13.883406, -0.3549924; 3.464715, 16.15956, 1.970912; 3.0747092, 17.299849, 3.1328704; 2.4701598, 18.245596, 2.8289127; 2.0159655, 19.053238, 2.6859994; 2.3337767, 18.365343, 3.4841797; -4.5442486, 7.6515694, 0.025179863; -5.5042467, 2.928667, -1.0394514; -4.0064855, 0.12132764, -0.55336857; -3.2576067, -1.2823409, -0.31032753; -3.7345846, -2.4477806, -0.25206184; -4.0015125, -3.425766, -0.17968968; -3.2235358, -2.6278467, 0.2481255\",\n\"0.0, 0.0, 0.0; 1.3166236, -1.9249225, 1.0151724; 2.1708667, -9.153014, 1.3188288; 3.37177, -16.331717, -1.0128388; 2.802405, -17.721956, 1.1145716; 2.41912, -17.37358, 2.2729177; -1.6287961, -1.6482838, 0.9715017; -1.227754, -8.841681, 1.4151716; -0.6684456, -15.795332, -1.9759967; -1.6791141, -17.044123, 0.094255924; -2.176343, -17.125996, 1.2691941; 0.065368675, 2.4863958, -0.26903; -0.10225903, 4.9960947, -0.3857992; -0.45818058, 7.5191107, -0.36846253; -0.44209373, 9.070991, -0.009136766; -0.21740496, 10.627565, 0.2003042; -0.46628475, 12.23856, 0.2932143; 3.1971993, 9.206872, -1.7033683; 4.288536, 13.958263, -0.78873616; 3.7910426, 16.346464, 1.504498; 3.5458374, 17.542877, 2.6494796; 2.9392862, 18.485119, 2.3386965; 2.4972098, 19.296772, 2.1812418; 2.8883595, 18.664333, 2.9926107; -4.5640974, 7.6540437, 0.110064596; -5.503594, 2.9351883, -0.9902078; -3.9906585, 0.13337207, -0.5194926; -3.234192, -1.2675345, -0.28413582; -3.7074656, -2.4351687, -0.24177295; -3.971589, -3.4147096, -0.18109272; -3.201978, -2.6176624, 0.26316345\",\n\"0.0, 0.0, 0.0; 1.317544, -1.9254612, 1.012954; 2.1708825, -9.15265, 1.3397644; 3.3826704, -16.3311, -0.9870384; 2.7871158, -17.723162, 1.131994; 2.3916135, -17.381077, 2.2881055; -1.6280154, -1.6503035, 0.96937907; -1.2273192, -8.844239, 1.4045525; -0.6519783, -15.791187, -1.997653; -1.6843939, -17.034698, 0.06503272; -2.1923683, -17.120274, 1.2351005; 0.049905628, 2.4863393, -0.27283892; -0.13146196, 4.9953737, -0.38317165; -0.48969668, 7.5178213, -0.34421507; -0.4791491, 9.06641, 0.029234946; -0.2569186, 10.621973, 0.24858339; -0.50587094, 12.232369, 0.35116518; 3.1419985, 9.218133, -1.7269824; 4.32369, 14.003056, -1.1689382; 4.1165066, 16.491886, 1.0610223; 4.0164404, 17.73861, 2.1737566; 3.411625, 18.681768, 1.8623762; 2.9835265, 19.498709, 1.6940169; 3.4452734, 18.910738, 2.5017154; -4.587535, 7.6450315, 0.20102766; -5.509768, 2.9305935, -0.9322908; -3.9824324, 0.13445616, -0.47449112; -3.2187657, -1.2636108, -0.24559097; -3.6884122, -2.4331965, -0.2200112; -3.9498422, -3.414143, -0.17161739; -3.189134, -2.618456, 0.29006842\",\n\"0.0, 0.0, 0.0; 1.3181474, -1.9261504, 1.0108566; 2.1716998, -9.152042, 1.3646808; 3.3959222, -16.330479, -0.9556513; 2.7718525, -17.72416, 1.1540904; 2.3629045, -17.38924, 2.3076193; -1.6275046, -1.6519845, 0.96737176; -1.2256161, -8.846297, 1.3951527; -0.6334853, -15.786926, -2.0170555; -1.6882612, -17.024158, 0.038079023; -2.2072477, -17.11304, 1.2030566; 0.037394166, 2.4860897, -0.27708244; -0.15731987, 4.994467, -0.3793313; -0.52175283, 7.515499, -0.31471527; -0.51780194, 9.060378, 0.07391909; -0.29881233, 10.61505, 0.30263954; -0.5488471, 12.224702, 0.41391847; 3.0844398, 9.2371025, -1.7373086; 4.373752, 14.020973, -1.5016387; 4.4517193, 16.59415, 0.6390629; 4.4941406, 17.882961, 1.706621; 3.8967319, 18.832302, 1.3997617; 3.4853787, 19.656347, 1.2244253; 4.008351, 19.097954, 2.015623; -4.611388, 7.6267633, 0.29212546; -5.521875, 2.9173212, -0.8710666; -3.9789813, 0.12790799, -0.4245526; -3.2075348, -1.2667967, -0.2012971; -3.674237, -2.4378104, -0.19300559; -3.9335847, -3.4198518, -0.15727073; -3.181582, -2.6264431, 0.32225356\",\n\"0.0, 0.0, 0.0; 1.3197387, -1.926135, 1.0088077; 2.170796, -9.150875, 1.3910053; 3.408871, -16.32884, -0.92342615; 2.7570117, -17.725363, 1.1760075; 2.334493, -17.400028, 2.3273864; -1.626147, -1.6544665, 0.9654109; -1.226018, -8.84924, 1.387035; -0.61510247, -15.783722, -2.0343466; -1.6928942, -17.014917, 0.012454748; -2.2231977, -17.105429, 1.1721984; 0.025349148, 2.4858484, -0.2805883; -0.18198878, 4.993569, -0.37371135; -0.55277944, 7.5128536, -0.28254217; -0.55731565, 9.053768, 0.12151945; -0.3425026, 10.607658, 0.35933626; -0.59399176, 12.216518, 0.4785052; 3.0295346, 9.257391, -1.7371669; 4.445202, 14.01087, -1.7972589; 4.801449, 16.647516, 0.23525476; 4.9828906, 17.967916, 1.2482378; 4.400968, 18.92921, 0.94892216; 4.011045, 19.762802, 0.7697855; 4.5814457, 19.218084, 1.5373936; -4.634427, 7.606691, 0.37859392; -5.530049, 2.9024582, -0.81677234; -3.9737208, 0.11910963, -0.37912673; -3.1955576, -1.2725629, -0.16030288; -3.659837, -2.4445376, -0.16883652; -3.9176235, -3.4273543, -0.14514525; -3.1749148, -2.6363764, 0.35253626\",\n\"0.0, 0.0, 0.0; 1.3203931, -1.9266759, 1.0069166; 2.1706161, -9.149832, 1.4197094; 3.4204662, -16.32893, -0.8848579; 2.7403378, -17.72705, 1.204521; 2.3042946, -17.40852, 2.3527555; -1.6255913, -1.6560667, 0.9636013; -1.2274343, -8.851244, 1.3801742; -0.59466296, -15.780439, -2.0479398; -1.6958156, -17.00637, -0.010434151; -2.2379181, -17.099174, 1.1436592; 0.013598582, 2.4858878, -0.28105476; -0.20613839, 4.992939, -0.36311224; -0.5828983, 7.51029, -0.24654332; -0.59669477, 9.047234, 0.17216644; -0.38704038, 10.600574, 0.418042; -0.6409732, 12.208572, 0.5434867; 2.9791958, 9.277346, -1.7234715; 4.5543795, 13.969286, -2.0517519; 5.172346, 16.648573, -0.14139545; 5.48451, 17.990084, 0.81013757; 4.926243, 18.96774, 0.5188675; 4.562487, 19.812689, 0.33791327; 5.1639447, 19.267403, 1.0810196; -4.6576567, 7.586873, 0.45789382; -5.53712, 2.8883667, -0.7715074; -3.9683242, 0.11080003, -0.34171396; -3.1839266, -1.277981, -0.12681693; -3.6463585, -2.4504538, -0.15165216; -3.9030757, -3.4337623, -0.13965072; -3.1690793, -2.6458032, 0.3754403\",\n\"0.0, 0.0, 0.0; 1.3219231, -1.9267199, 1.0048225; 2.1709144, -9.1481, 1.4499394; 3.4316797, -16.328934, -0.8432447; 2.7238533, -17.729424, 1.235319; 2.2743945, -17.417812, 2.3802748; -1.6242819, -1.6585146, 0.9615972; -1.2270831, -8.853945, 1.374716; -0.57639337, -15.778286, -2.059845; -1.6998518, -16.996868, -0.030121803; -2.2532048, -17.095345, 1.1181476; 7.2575686E-4, 2.4861917, -0.27868456; -0.23135635, 4.992496, -0.34867984; -0.6129925, 7.507947, -0.20920722; -0.635095, 9.040693, 0.22427292; -0.43132532, 10.59356, 0.4779579; -0.6891165, 12.200529, 0.60862195; 2.9321637, 9.295039, -1.7026882; 4.700462, 13.8933525, -2.2788162; 5.5616, 16.59328, -0.4959116; 5.9952097, 17.94485, 0.39164436; 5.47006, 18.942192, 0.105570465; 5.1388326, 19.799849, -0.07805006; 5.755984, 19.243647, 0.6437948; -4.6817293, 7.5692277, 0.5306411; -5.543653, 2.8768435, -0.73405886; -3.962199, 0.10519719, -0.31251284; -3.171473, -1.2806244, -0.10174063; -3.6334724, -2.45288, -0.14080682; -3.890344, -3.4362195, -0.13874039; -3.1643143, -2.6514885, 0.39232203\",\n\"0.0, 0.0, 0.0; 1.3227407, -1.9271383, 1.0029427; 2.1692598, -9.146734, 1.4805384; 3.4434025, -16.328915, -0.80100584; 2.7078292, -17.731657, 1.2663755; 2.2445214, -17.428648, 2.4081154; -1.6235843, -1.6602392, 0.9597978; -1.2285815, -8.855896, 1.3710637; -0.55772996, -15.775517, -2.069127; -1.7022017, -16.986197, -0.046426773; -2.2662158, -17.089312, 1.0962346; -0.012112895, 2.486583, -0.27490383; -0.2566894, 4.9920564, -0.33065623; -0.64308554, 7.505272, -0.16623075; -0.67376983, 9.033734, 0.28161496; -0.47610122, 10.586482, 0.5407978; -0.7379203, 12.192588, 0.67403555; 2.8853595, 9.31382, -1.6733956; 4.8825397, 13.781734, -2.4810472; 5.9666643, 16.481997, -0.82479167; 6.5116262, 17.833431, -6.854534E-4; 6.027689, 18.851511, -0.28639182; 5.7345357, 19.721786, -0.4752999; 6.3543663, 19.148502, 0.23071104; -4.705689, 7.55027, 0.6077066; -5.5584807, 2.8649812, -0.68908113; -3.9610868, 0.100681305, -0.2795717; -3.1623912, -1.2814672, -0.074816614; -3.6233778, -2.4536302, -0.12656426; -3.879865, -3.437048, -0.13343559; -3.1611261, -2.6551185, 0.4114952\",\n\"0.0, 0.0, 0.0; 1.3242478, -1.9269987, 1.0012206; 2.1667519, -9.144818, 1.5116295; 3.4540055, -16.328882, -0.75658643; 2.6928742, -17.732803, 1.3007184; 2.2167702, -17.435255, 2.438624; -1.6222918, -1.6624528, 0.9581499; -1.229362, -8.858168, 1.370394; -0.5383423, -15.77327, -2.074889; -1.7041168, -16.977957, -0.060795307; -2.278848, -17.083466, 1.0762938; -0.024319036, 2.4871879, -0.26854953; -0.2815128, 4.9917254, -0.30684608; -0.6745614, 7.5019765, -0.1151606; -0.71198684, 9.026492, 0.34544367; -0.52052593, 10.579418, 0.60819304; -0.78768444, 12.184579, 0.7422193; 2.8373675, 9.336352, -1.6296686; 5.0839567, 13.638428, -2.6535163; 6.3759413, 16.319967, -1.1205317; 7.024695, 17.661724, -0.3580867; 6.5892806, 18.699883, -0.64955205; 6.3395133, 19.581478, -0.8480729; 6.952856, 18.988506, -0.1527375; -4.7316527, 7.5264826, 0.6880588; -5.58086, 2.848703, -0.6378657; -3.9646063, 0.09328008, -0.24278593; -3.15648, -1.2844298, -0.045246825; -3.6177344, -2.4559922, -0.10720447; -3.8748863, -3.4391623, -0.12110613; -3.1620307, -2.6600437, 0.43545485\",\n\"0.0, 0.0, 0.0; 1.3257785, -1.9266126, 0.9999371; 2.1639094, -9.142547, 1.5431468; 3.4648902, -16.328726, -0.71049094; 2.6787505, -17.734339, 1.3362269; 2.1897733, -17.443792, 2.4704766; -1.6209729, -1.6644452, 0.95692205; -1.2322886, -8.860142, 1.3734769; -0.518756, -15.771111, -2.075508; -1.7047641, -16.969208, -0.06931257; -2.2899356, -17.078547, 1.0620756; -0.03626056, 2.488021, -0.25933036; -0.30569404, 4.991498, -0.2774858; -0.705118, 7.4984655, -0.058023855; -0.7485769, 9.019206, 0.41437805; -0.5638962, 10.572668, 0.6788099; -0.83750427, 12.176852, 0.81151307; 2.7909696, 9.358863, -1.5774356; 5.2886753, 13.46668, -2.7983341; 6.783958, 16.107613, -1.3842888; 7.5342255, 17.428757, -0.68130374; 7.153061, 18.484827, -0.9841839; 6.950891, 19.375298, -1.1967757; 7.552209, 18.761997, -0.5086071; -4.756796, 7.502267, 0.7724252; -5.6066103, 2.831627, -0.5780504; -3.9717836, 0.08478713, -0.19998634; -3.1543713, -1.2886312, -0.010954469; -3.614925, -2.4600356, -0.08062886; -3.8718154, -3.4431832, -0.09990835; -3.163797, -2.6658049, 0.46519482\",\n\"0.0, 0.0, 0.0; 1.3266438, -1.9270444, 0.9979551; 2.160768, -9.140991, 1.5728102; 3.475089, -16.329212, -0.6665311; 2.667273, -17.735945, 1.3709567; 2.166951, -17.450779, 2.5016189; -1.6202312, -1.6662563, 0.95502496; -1.2371411, -8.861783, 1.3796176; -0.5006032, -15.769335, -2.0713758; -1.705023, -16.962688, -0.07333815; -2.2998228, -17.074455, 1.0527796; -0.04794375, 2.4890604, -0.24717212; -0.33013937, 4.9911933, -0.24273194; -0.73700285, 7.4942966, 0.0053144246; -0.78611773, 9.010476, 0.49161792; -0.60875165, 10.564782, 0.7560947; -0.88989806, 12.168012, 0.88450944; 2.7426279, 9.382925, -1.5170424; 5.4834013, 13.271996, -2.9193907; 7.1841764, 15.85052, -1.6276867; 8.037032, 17.140167, -0.9858447; 7.7143264, 18.211683, -1.3021088; 7.562876, 19.108208, -1.5308266; 8.150549, 18.473038, -0.8507557; -4.7832365, 7.474892, 0.86168426; -5.6412125, 2.8122225, -0.51098925; -3.987265, 0.07413316, -0.15315509; -3.1602929, -1.2949102, 0.025761694; -3.6193652, -2.46658, -0.04903853; -3.875148, -3.449933, -0.07217262; -3.169905, -2.6735272, 0.49771783\",\n\"0.0, 0.0, 0.0; 1.3281289, -1.9270797, 0.99591; 2.1584976, -9.138812, 1.6030753; 3.4858563, -16.329956, -0.6191261; 2.6577702, -17.73825, 1.4091239; 2.146537, -17.45778, 2.536074; -1.6189535, -1.668617, 0.9530682; -1.2398926, -8.863723, 1.3882862; -0.48305458, -15.768272, -2.064322; -1.7033303, -16.955729, -0.072401166; -2.3066993, -17.074429, 1.0484359; -0.059970886, 2.4902694, -0.23189606; -0.35466582, 4.9907827, -0.20172192; -0.768336, 7.489609, 0.07637043; -0.8239654, 9.000884, 0.57702637; -0.65465623, 10.556294, 0.84029156; -0.94383496, 12.158564, 0.9627147; 2.6948824, 9.406734, -1.447789; 5.6559844, 13.064588, -3.0147178; 7.5698643, 15.553165, -1.8511144; 8.529083, 16.797577, -1.2733172; 8.268106, 17.881691, -1.6033119; 8.169706, 18.78097, -1.8495212; 8.744869, 18.121504, -1.1819975; -4.808797, 7.4469166, 0.9587546; -5.678774, 2.7924027, -0.43390006; -4.008691, 0.0613842, -0.09762332; -3.1736512, -1.3041238, 0.07051532; -3.63095, -2.4762876, -0.007345259; -3.8852432, -3.4599633, -0.033048213; -3.1811733, -2.683981, 0.5388662\",\n\"0.0, 0.0, 0.0; 1.3293817, -1.9267434, 0.994888; 2.1573873, -9.136154, 1.6321054; 3.4960692, -16.33087, -0.5716641; 2.6502852, -17.73998, 1.4487007; 2.1294723, -17.46261, 2.5720253; -1.6178709, -1.6702247, 0.95208997; -1.2427347, -8.8647585, 1.3999726; -0.46770817, -15.768127, -2.050962; -1.7020986, -16.95086, -0.064935565; -2.313062, -17.074007, 1.0512984; -0.07228444, 2.4916725, -0.21250348; -0.3796102, 4.9901533, -0.15362597; -0.7998481, 7.484524, 0.15314424; -0.8598562, 8.990889, 0.66789377; -0.69796467, 10.547532, 0.92851996; -0.99538827, 12.148888, 1.0428808; 2.6480403, 9.429129, -1.3709598; 5.7972875, 12.853172, -3.0918486; 7.935142, 15.218214, -2.069067; 9.006109, 16.400644, -1.5617194; 8.809569, 17.496082, -1.8989112; 8.765772, 18.395924, -2.15847; 9.329304, 17.704826, -1.5134029; -4.834895, 7.419044, 1.0586045; -5.7234077, 2.7739916, -0.35379803; -4.0406356, 0.047736406, -0.043102086; -3.1992505, -1.3153893, 0.1122466; -3.6536746, -2.4886422, 0.033958666; -3.9053638, -3.472961, 0.007255364; -3.200627, -2.696327, 0.5774615\",\n\"0.0, 0.0, 0.0; 1.3302706, -1.9268514, 0.9934905; 2.1572185, -9.133967, 1.6574858; 3.505392, -16.332521, -0.52788866; 2.6453664, -17.742285, 1.4859985; 2.1165173, -17.469536, 2.606697; -1.6171037, -1.6717287, 0.9507526; -1.2524865, -8.865854, 1.41364; -0.45504177, -15.769308, -2.0320125; -1.700317, -16.94886, -0.050897002; -2.3178062, -17.077747, 1.0610899; -0.084694654, 2.4929967, -0.19133656; -0.40447524, 4.9889917, -0.10148519; -0.8304589, 7.4783983, 0.23613289; -0.89066684, 8.981175, 0.7612426; -0.7344337, 10.539318, 1.0163058; -1.0397534, 12.139835, 1.1212041; 2.6008048, 9.451074, -1.2894149; 5.908019, 12.640495, -3.1584268; 8.272823, 14.846833, -2.2925727; 9.4569645, 15.949753, -1.8637486; 9.327027, 17.05573, -2.1987667; 9.338512, 17.954514, -2.4653425; 9.889759, 17.222664, -1.8555719; -4.859003, 7.389759, 1.1681873; -5.7694144, 2.7558699, -0.2667582; -4.0793347, 0.0309906, 0.014993638; -3.2342963, -1.3314476, 0.1558694; -3.6857839, -2.5059876, 0.07992853; -3.934644, -3.491045, 0.053957716; -3.2269228, -2.7131572, 0.6187321\",\n\"0.0, 0.0, 0.0; 1.3310876, -1.9271226, 0.99186826; 2.1577432, -9.132042, 1.6796372; 3.5112512, -16.335518, -0.4861257; 2.6411984, -17.745417, 1.5233543; 2.1068826, -17.469866, 2.6407695; -1.6163987, -1.6732922, 0.9492; -1.2598485, -8.866718, 1.4289263; -0.4463585, -15.771558, -2.0101929; -1.6996555, -16.948734, -0.032725096; -2.3219912, -17.082066, 1.0760312; -0.09796534, 2.4942842, -0.16662672; -0.43036726, 4.9872236, -0.04381197; -0.8611231, 7.4716387, 0.3232318; -0.9179957, 8.971113, 0.85806406; -0.76663125, 10.530962, 1.1055211; -1.0805218, 12.130563, 1.1984069; 2.5544944, 9.470395, -1.2034788; 5.9967594, 12.419171, -3.2181284; 8.58149, 14.432404, -2.528204; 9.87522, 15.4386835, -2.1873615; 9.814944, 16.55529, -2.506524; 9.882648, 17.452454, -2.7701879; 10.417095, 16.668907, -2.21187; -4.8831983, 7.36143, 1.2805816; -5.812501, 2.739387, -0.18022656; -4.1191764, 0.013349056, 0.06894995; -3.2725158, -1.3496686, 0.19353826; -3.7206342, -2.5258222, 0.122790255; -3.9661295, -3.5117848, 0.09926465; -3.2531395, -2.731881, 0.654552\",\n\"0.0, 0.0, 0.0; 1.331002, -1.9280547, 0.99017066; 2.1591713, -9.130799, 1.69858; 3.5167322, -16.339403, -0.44749832; 2.6397836, -17.74891, 1.5592573; 2.101475, -17.471, 2.674169; -1.6164776, -1.6741363, 0.94757557; -1.264818, -8.866503, 1.4464236; -0.44063216, -15.773835, -1.9851354; -1.697964, -16.947414, -0.008091807; -2.3231568, -17.088282, 1.0981222; -0.111941844, 2.4953823, -0.13910659; -0.45647162, 4.984703, 0.01870893; -0.88924754, 7.4642673, 0.41501486; -0.9440643, 8.960174, 0.9599595; -0.7978418, 10.5217085, 1.1997575; -1.1197214, 12.120374, 1.2806344; 2.5114608, 9.485684, -1.1151389; 6.069585, 12.186766, -3.2708745; 8.855048, 13.97721, -2.775466; 10.248722, 14.872094, -2.5318112; 10.263006, 15.998918, -2.8188212; 10.389025, 16.894142, -3.0672088; 10.896804, 16.04919, -2.5778081; -4.9040785, 7.336091, 1.400132; -5.850541, 2.7258244, -0.08664179; -4.15671, -0.002994299, 0.1259707; -3.3097959, -1.3674021, 0.23227662; -3.7546358, -2.5452733, 0.16991049; -3.9968243, -3.5321586, 0.15131521; -3.2778888, -2.749048, 0.6942869\",\n\"0.0, 0.0, 0.0; 1.3317825, -1.9283866, 0.9884736; 2.1607642, -9.129339, 1.7139577; 3.519995, -16.343204, -0.41330326; 2.642055, -17.75141, 1.593933; 2.1028402, -17.467234, 2.7068257; -1.6158059, -1.6757026, 0.9459511; -1.2683502, -8.866633, 1.4679031; -0.44113994, -15.778717, -1.9533451; -1.6980165, -16.949142, 0.02585733; -2.323594, -17.096256, 1.1310405; -0.12588054, 2.496306, -0.106891476; -0.4818036, 4.9813337, 0.08875916; -0.91582036, 7.4561, 0.5127323; -0.9677426, 8.948015, 1.0687875; -0.82594824, 10.511317, 1.2995583; -1.1552771, 12.109103, 1.3666342; 2.4690552, 9.498669, -1.0244234; 6.119748, 11.948075, -3.3214064; 9.079772, 13.487115, -3.03937; 10.560291, 14.256381, -2.902243; 10.656202, 15.390114, -3.1425753; 10.844088, 16.281277, -3.3651323; 11.311874, 15.369495, -2.963727; -4.9224777, 7.3108716, 1.5282907; -5.8841715, 2.7133121, 0.012229681; -4.193388, -0.020195007, 0.18516989; -3.3479981, -1.3869476, 0.2716393; -3.7904053, -2.5663025, 0.2211375; -4.029933, -3.5539489, 0.2099635; -3.3030486, -2.7671702, 0.73681\",\n\"0.0, 0.0, 0.0; 1.3317277, -1.9292768, 0.98680866; 2.1597414, -9.129046, 1.7250214; 3.5208776, -16.347347, -0.38591313; 2.6468356, -17.752775, 1.6249673; 2.1091404, -17.460583, 2.7365189; -1.6158569, -1.6765517, 0.9443579; -1.2728198, -8.865748, 1.4924552; -0.44830924, -15.7833, -1.9183767; -1.69946, -16.95065, 0.06626165; -2.3229082, -17.108475, 1.1711702; -0.14136094, 2.4966993, -0.07296299; -0.5082654, 4.976694, 0.1622574; -0.9396678, 7.4468246, 0.6149595; -0.9898319, 8.934553, 1.1822802; -0.8530694, 10.499628, 1.4038897; -1.1896733, 12.096401, 1.4576651; 2.430563, 9.506641, -0.93133175; 6.1491275, 11.706246, -3.3679895; 9.249326, 12.969575, -3.3160305; 10.799529, 13.601148, -3.2937188; 10.987655, 14.7342415, -3.4754202; 11.243668, 15.616399, -3.6631954; 11.651901, 14.638389, -3.366315; -4.937138, 7.289163, 1.6643052; -5.9113593, 2.7041998, 0.11839008; -4.2258406, -0.03488779, 0.24933551; -3.383082, -1.4044299, 0.3148075; -3.824503, -2.5846834, 0.27872172; -4.062587, -3.5727403, 0.2768937; -3.326217, -2.7824934, 0.78504527\",\n\"0.0, 0.0, 0.0; 1.331864, -1.930068, 0.9850758; 2.1606145, -9.128807, 1.7324533; 3.5207806, -16.351353, -0.36453843; 2.6548235, -17.75361, 1.652045; 2.1211824, -17.447727, 2.7618654; -1.6157442, -1.6775934, 0.94269997; -1.275293, -8.86466, 1.5195915; -0.45894408, -15.789195, -1.8790125; -1.7010599, -16.954416, 0.11253965; -2.3204515, -17.11955, 1.218661; -0.1550874, 2.4967027, -0.03519149; -0.530592, 4.9711676, 0.24111132; -0.9576385, 7.4371643, 0.7197388; -1.008108, 8.920912, 1.297364; -0.87600267, 10.487721, 1.509329; -1.218166, 12.083706, 1.549772; 2.4001489, 9.510359, -0.8357174; 6.161314, 11.4664345, -3.41073; 9.361802, 12.431908, -3.5969129; 10.96181, 12.914783, -3.6934445; 11.25248, 14.0343275, -3.8136077; 11.582718, 14.898719, -3.9645164; 11.909942, 13.863996, -3.7812984; -4.94631, 7.270653, 1.8007231; -5.932061, 2.6986675, 0.2239871; -4.254897, -0.047241688, 0.31243637; -3.4163158, -1.4201945, 0.35666054; -3.8574562, -2.6009479, 0.33743426; -4.094749, -3.5891504, 0.347006; -3.3486867, -2.7950952, 0.83467\",\n\"0.0, 0.0, 0.0; 1.3310387, -1.9313096, 0.9837568; 2.1611829, -9.129285, 1.7369239; 3.5207963, -16.355433, -0.34798312; 2.667632, -17.754593, 1.6761901; 2.1398108, -17.438301, 2.7858758; -1.6164633, -1.6776094, 0.9414378; -1.2778139, -8.862373, 1.5473393; -0.4715243, -15.794919, -1.8373052; -1.7005734, -16.958658, 0.1632005; -2.3140066, -17.132153, 1.2713608; -0.16780102, 2.4961264, 0.0031792745; -0.5500646, 4.9645514, 0.32110417; -0.9699748, 7.426568, 0.82582295; -1.0220349, 8.906123, 1.4139645; -0.8947948, 10.474663, 1.6158773; -1.241813, 12.069886, 1.6426858; 2.3766332, 9.510069, -0.73992133; 6.16267, 11.222517, -3.448561; 9.4177685, 11.881575, -3.8727114; 11.044825, 12.211497, -4.088007; 11.446916, 13.300805, -4.1515665; 11.856974, 14.135766, -4.268598; 12.08152, 13.060773, -4.1960363; -4.9492865, 7.254694, 1.9399551; -5.9450026, 2.694922, 0.33437824; -4.2779226, -0.058140278, 0.38142535; -3.4443846, -1.4346702, 0.4049481; -3.8862011, -2.6153245, 0.40255153; -4.1235466, -3.6033406, 0.423409; -3.3670812, -2.8065457, 0.89012843\",\n\"0.0, 0.0, 0.0; 1.3296201, -1.9329977, 0.9823587; 2.1634831, -9.130373, 1.7371403; 3.5214615, -16.359814, -0.3373934; 2.682323, -17.755846, 1.6947871; 2.1610858, -17.427696, 2.804142; -1.6177009, -1.6771669, 0.9400997; -1.2786674, -8.8594475, 1.5745683; -0.4848103, -15.800172, -1.7962265; -1.69963, -16.96403, 0.21288395; -2.3064423, -17.144518, 1.3235693; -0.17872585, 2.495019, 0.041860472; -0.5656044, 4.9571486, 0.40042186; -0.97654176, 7.415663, 0.9290335; -1.032032, 8.891379, 1.5264325; -0.9098581, 10.461569, 1.7184033; -1.260824, 12.056094, 1.7321602; 2.3612432, 9.5058, -0.64666724; 6.161489, 10.966626, -3.4799352; 9.427098, 11.317503, -4.130018; 11.059231, 11.493602, -4.4581122; 11.57617, 12.535043, -4.4801164; 12.06806, 13.32771, -4.573532; 12.174173, 12.232454, -4.594782; -4.946946, 7.242047, 2.0742407; -5.9510193, 2.6946073, 0.43916345; -4.2949758, -0.06549907, 0.44649863; -3.4669547, -1.4455506, 0.45016712; -3.9092298, -2.6259518, 0.46424934; -4.146503, -3.6136925, 0.4960801; -3.379953, -2.8145335, 0.94183195\",\n\"0.0, 0.0, 0.0; 1.3280134, -1.9347588, 0.9810646; 2.1664724, -9.131744, 1.7344843; 3.524312, -16.364197, -0.3296162; 2.7017472, -17.756763, 1.7116977; 2.1878974, -17.418108, 2.8213413; -1.6190965, -1.6765133, 0.93886125; -1.2763326, -8.856207, 1.600038; -0.4981109, -15.80534, -1.75705; -1.6955235, -16.96721, 0.2636261; -2.2939892, -17.156738, 1.3773305; -0.18675679, 2.4935215, 0.079291776; -0.5754162, 4.949313, 0.4772305; -0.9761835, 7.404359, 1.0292522; -1.0360646, 8.8764515, 1.6351097; -0.91857487, 10.448222, 1.8167902; -1.2723548, 12.042185, 1.8172336; 2.355971, 9.499048, -0.55231047; 6.163582, 10.687251, -3.5007942; 9.400171, 10.739595, -4.3561764; 11.01768, 10.766676, -4.7868085; 11.646713, 11.744744, -4.789687; 12.21833, 12.482972, -4.8749933; 12.198366, 11.385903, -4.9606495; -4.938918, 7.231347, 2.200813; -5.9530926, 2.694662, 0.542264; -4.30742, -0.07148242, 0.511835; -3.484584, -1.4545529, 0.4966196; -3.9273098, -2.6345363, 0.52465236; -4.164556, -3.621961, 0.5652772; -3.3879578, -2.8217785, 0.99136627\",\n\"0.0, 0.0, 0.0; 1.3273065, -1.9359416, 0.9796871; 2.1716018, -9.132695, 1.7287905; 3.5277631, -16.368149, -0.32587242; 2.7222366, -17.756529, 1.7250662; 2.2165332, -17.402237, 2.8335698; -1.6197125, -1.6766561, 0.93754345; -1.2734923, -8.853872, 1.6233542; -0.5079657, -15.811594, -1.7188308; -1.6891521, -16.973042, 0.31161523; -2.2799654, -17.17012, 1.4280913; -0.19307087, 2.4915404, 0.11731989; -0.5816917, 4.940759, 0.5539251; -0.972177, 7.392596, 1.1271704; -1.0362006, 8.86283, 1.7371014; -0.9226788, 10.436075, 1.9082419; -1.2784598, 12.029551, 1.8967158; 2.3585408, 9.489527, -0.45444763; 6.164963, 10.379189, -3.5077963; 9.341933, 10.141697, -4.5375457; 10.929566, 10.024086, -5.05533; 11.661628, 10.927567, -5.0661855; 12.305929, 11.601772, -5.162752; 12.160614, 10.516871, -5.277511; -4.9295835, 7.222411, 2.3170106; -5.95869, 2.6963873, 0.6386504; -4.3222876, -0.07468748, 0.57500535; -3.5040867, -1.460223, 0.543183; -3.9464173, -2.6400807, 0.5810253; -4.183001, -3.6274276, 0.6270471; -3.3973916, -2.827274, 1.0363407\",\n\"0.0, 0.0, 0.0; 1.3265302, -1.9373631, 0.97792655; 2.178096, -9.13397, 1.7201706; 3.5334735, -16.372694, -0.32345974; 2.7442007, -17.758116, 1.7357811; 2.2457705, -17.391275, 2.8434968; -1.6203895, -1.6769437, 0.93585825; -1.2718376, -8.851968, 1.6430893; -0.51484764, -15.817678, -1.684366; -1.6800097, -16.978941, 0.35542345; -2.263423, -17.184593, 1.4742426; -0.19680214, 2.489283, 0.15346968; -0.5834583, 4.931888, 0.62728465; -0.96401286, 7.38014, 1.2221231; -1.0313647, 8.849559, 1.8336592; -0.9209324, 10.424235, 1.9932631; -1.2780726, 12.017264, 1.9690405; 2.3701534, 9.478788, -0.34992063; 6.162237, 10.051559, -3.4956036; 9.25531, 9.522381, -4.662991; 10.800949, 9.25917, -5.249703; 11.622577, 10.080863, -5.2950525; 12.32885, 10.684251, -5.421956; 12.065001, 9.621265, -5.5303125; -4.919098, 7.2136283, 2.4201746; -5.9661875, 2.699057, 0.7222067; -4.339283, -0.07686901, 0.6320144; -3.525831, -1.4648302, 0.5869181; -3.9662013, -2.6452568, 0.6295739; -4.2008753, -3.633001, 0.6768263; -3.4076042, -2.8336072, 1.0726033\",\n\"0.0, 0.0, 0.0; 1.3249384, -1.9391503, 0.976541; 2.18437, -9.135742, 1.709821; 3.5385513, -16.37814, -0.32154965; 2.7648463, -17.759678, 1.7461913; 2.273685, -17.377012, 2.851798; -1.6217712, -1.6763467, 0.9345327; -1.2745582, -8.849497, 1.6611716; -0.5190557, -15.822957, -1.6503505; -1.6706693, -16.987324, 0.39535463; -2.2482176, -17.198488, 1.5161878; -0.19640571, 2.4871228, 0.1856319; -0.57846653, 4.9236994, 0.69302464; -0.9498872, 7.368372, 1.308016; -1.0240183, 8.836935, 1.9208229; -0.9170669, 10.412852, 2.0702276; -1.2744547, 12.005606, 2.0343473; 2.3930135, 9.467176, -0.2451576; 6.153569, 9.707389, -3.4706507; 9.142289, 8.88514, -4.73611; 10.635719, 8.47564, -5.3721027; 11.53085, 9.210611, -5.476346; 12.286164, 9.737913, -5.6508665; 11.914805, 8.704028, -5.717733; -4.9061193, 7.207115, 2.5029955; -5.9742055, 2.7037687, 0.7883798; -4.3556705, -0.07623148, 0.6758533; -3.546403, -1.4662296, 0.6195902; -3.983569, -2.647861, 0.6618439; -4.215358, -3.636424, 0.7061204; -3.4159803, -2.83843, 1.0923198\",\n\"0.0, 0.0, 0.0; 1.3250598, -1.9399211, 0.9748444; 2.192937, -9.136441, 1.6988182; 3.5473328, -16.382809, -0.31820393; 2.7862468, -17.761549, 1.756077; 2.3004298, -17.368376, 2.8603573; -1.621672, -1.6773471, 0.9329089; -1.2760966, -8.84897, 1.6752264; -0.51779574, -15.829421, -1.6208923; -1.658052, -16.99607, 0.4298687; -2.230876, -17.21373, 1.5518836; -0.18902083, 2.4856954, 0.21072137; -0.5606839, 4.9180937, 0.7451636; -0.9234052, 7.3595343, 1.3779292; -1.0091145, 8.825142, 1.9962759; -0.907467, 10.402221, 2.1368675; -1.2651784, 11.994555, 2.0879672; 2.4340515, 9.455476, -0.14746594; 6.1409683, 9.346111, -3.4414134; 9.007581, 8.234009, -4.7664366; 10.439935, 7.679792, -5.432559; 11.390273, 8.324672, -5.6150317; 12.179748, 8.772234, -5.8504505; 11.715769, 7.7742352, -5.8460884; -4.88439, 7.206581, 2.5581646; -5.9760036, 2.715077, 0.82737803; -4.36368, -0.06784797, 0.69907606; -3.5575178, -1.459308, 0.63492453; -3.991519, -2.6423023, 0.6712554; -4.2205305, -3.6318083, 0.7083403; -3.4164257, -2.8364007, 1.0900352\",\n\"0.0, 0.0, 0.0; 1.3242695, -1.9413099, 0.9731524; 2.2032714, -9.137213, 1.6898079; 3.5586267, -16.388172, -0.3099929; 2.8075235, -17.7638, 1.7699858; 2.3258865, -17.359055, 2.8719141; -1.6223598, -1.6775818, 0.93128926; -1.2745435, -8.847742, 1.6865802; -0.5120534, -15.834625, -1.5949128; -1.6440663, -17.003761, 0.45899582; -2.2136433, -17.226585, 1.5816492; -0.17614374, 2.4848344, 0.23105282; -0.5339627, 4.914237, 0.7880919; -0.8891095, 7.3526187, 1.43675; -0.98968035, 8.81356, 2.0638404; -0.89358866, 10.391624, 2.1970806; -1.2504207, 11.983669, 2.1342902; 2.4873838, 9.44389, -0.052610874; 6.11695, 8.969616, -3.399938; 8.847467, 7.5775304, -4.7476397; 10.211748, 6.883459, -5.4255157; 11.1988535, 7.434648, -5.697772; 12.00762, 7.7991753, -6.0011225; 11.467853, 6.845024, -5.9034314; -4.8579063, 7.2096643, 2.5917244; -5.973442, 2.7300663, 0.8454069; -4.3662043, -0.055359602, 0.7078944; -3.5625877, -1.4480716, 0.6391374; -3.9923334, -2.632904, 0.6645033; -4.2177134, -3.6235902, 0.6907434; -3.4114342, -2.83083, 1.0733577\",\n\"0.0, 0.0, 0.0; 1.3233835, -1.9426252, 0.9717321; 2.2140543, -9.137721, 1.6820517; 3.5705748, -16.393658, -0.298815; 2.8280392, -17.767004, 1.785742; 2.349743, -17.351856, 2.8852527; -1.623129, -1.6775914, 0.9299301; -1.2691823, -8.84627, 1.6963673; -0.5018552, -15.83912, -1.5712583; -1.6274672, -17.00908, 0.48569632; -2.194561, -17.236696, 1.6086457; -0.16059592, 2.484134, 0.24920234; -0.502859, 4.910988, 0.82674646; -0.8512614, 7.346383, 1.4901137; -0.96468914, 8.804106, 2.1224759; -0.8734532, 10.383087, 2.248051; -1.2296556, 11.974691, 2.1719456; 2.5480037, 9.431275, 0.04424393; 6.0757856, 8.581085, -3.3373551; 8.658532, 6.9235716, -4.6760097; 9.948888, 6.096832, -5.3498015; 10.955464, 6.550763, -5.714574; 11.769703, 6.8298426, -6.086239; 11.171044, 5.9286537, -5.8843417; -4.8302717, 7.215138, 2.610828; -5.9687448, 2.7464676, 0.8513644; -4.3650465, -0.0407629, 0.70917416; -3.5631971, -1.4343758, 0.6380796; -3.9881692, -2.621141, 0.6498914; -4.2095304, -3.61298, 0.66397995; -3.403994, -2.8223133, 1.0524466\",\n\"0.0, 0.0, 0.0; 1.3228693, -1.9435544, 0.97057265; 2.2242277, -9.137807, 1.6759329; 3.5836077, -16.398462, -0.28559136; 2.8466203, -17.769064, 1.8027387; 2.3705494, -17.340113, 2.8979082; -1.6235764, -1.6777732, 0.9288205; -1.2648654, -8.845293, 1.7038221; -0.48851216, -15.843483, -1.5502088; -1.610776, -17.01551, 0.50739956; -2.1770253, -17.245844, 1.6302207; -0.1441331, 2.4835532, 0.26458237; -0.46971864, 4.9083233, 0.860239; -0.8108879, 7.340929, 1.5374563; -0.9354366, 8.796313, 2.1731043; -0.84805626, 10.376186, 2.289896; -1.2031797, 11.967284, 2.1994963; 2.6141438, 9.416521, 0.13981962; 6.0266304, 8.206245, -3.2503796; 8.448444, 6.294416, -4.5502467; 9.65829, 5.3405237, -5.205133; 10.670826, 5.693931, -5.654781; 11.480093, 5.8860717, -6.087415; 10.836505, 5.0469675, -5.7824645; -4.8014097, 7.2245107, 2.6181664; -5.964875, 2.7667584, 0.84739184; -4.3616095, -0.02065444, 0.70390546; -3.5599766, -1.4143586, 0.63216305; -3.980552, -2.6027422, 0.62853974; -4.19824, -3.595493, 0.6297438; -3.3956647, -2.806952, 1.0285232\",\n\"0.0, 0.0, 0.0; 1.3219714, -1.9444242, 0.97005457; 2.2325003, -9.137646, 1.6741506; 3.5976841, -16.40311, -0.26541114; 2.863658, -17.77274, 1.8245986; 2.3876963, -17.336678, 2.9170036; -1.6243533, -1.6772959, 0.92832434; -1.2627077, -8.843839, 1.7109547; -0.47207344, -15.847021, -1.5288684; -1.5943729, -17.021141, 0.5275264; -2.1616004, -17.254194, 1.6492923; -0.1281006, 2.4829974, 0.27772; -0.43720764, 4.9059296, 0.88941896; -0.7708322, 7.3360386, 1.5792415; -0.90453947, 8.790325, 2.2155414; -0.82041514, 10.37103, 2.3231146; -1.1746892, 11.961431, 2.2182639; 2.6840653, 9.3987255, 0.23710787; 5.978078, 7.850095, -3.1325364; 8.227268, 5.7016497, -4.3715897; 9.350785, 4.629433, -4.9965477; 10.361454, 4.8809724, -5.513834; 11.160001, 4.986889, -5.9935308; 10.479261, 4.2168703, -5.59988; -4.7747383, 7.238284, 2.6111968; -5.9614987, 2.7894788, 0.8333955; -4.3553967, 0.0035362244, 0.693107; -3.5523465, -1.389433, 0.62296206; -3.96847, -2.579216, 0.60270876; -4.1824827, -3.5726998, 0.59121054; -3.3864005, -2.7856536, 1.00565\",\n\"0.0, 0.0, 0.0; 1.321316, -1.9451376, 0.96951675; 2.241061, -9.136951, 1.6760101; 3.6120105, -16.407549, -0.2401073; 2.876524, -17.774786, 1.8509545; 2.3993554, -17.327633, 2.9383383; -1.6249198, -1.6770318, 0.9278099; -1.2603613, -8.842823, 1.7159547; -0.4532491, -15.8503895, -1.5102967; -1.5787123, -17.025646, 0.54371846; -2.1484153, -17.261185, 1.6637095; -0.11377315, 2.482615, 0.28721598; -0.4060772, 4.904145, 0.91257656; -0.7290205, 7.3318653, 1.6157633; -0.87062705, 8.786222, 2.250189; -0.7887623, 10.367674, 2.3480918; -1.1411787, 11.957498, 2.2291737; 2.759482, 9.375927, 0.33339012; 5.9287043, 7.5016747, -2.9902358; 7.995862, 5.141746, -4.159646; 9.028401, 3.9637527, -4.75016; 10.036322, 4.1152806, -5.3100214; 10.824188, 4.138485, -5.8176947; 10.106612, 3.440823, -5.3598204; -4.746617, 7.2593255, 2.5952575; -5.9582086, 2.8181958, 0.8150151; -4.345964, 0.035439014, 0.68215597; -3.5398433, -1.3559381, 0.61572635; -3.9524662, -2.5465355, 0.5786807; -4.163659, -3.5404136, 0.5552835; -3.376336, -2.7549756, 0.9890554\",\n\"0.0, 0.0, 0.0; 1.3204474, -1.9459442, 0.96908164; 2.2504146, -9.135725, 1.6828464; 3.6285796, -16.411856, -0.20691025; 2.8883433, -17.776594, 1.8841077; 2.4084697, -17.318062, 2.9655457; -1.6256713, -1.6765342, 0.92739326; -1.2555032, -8.841581, 1.719676; -0.42913663, -15.852764, -1.4938176; -1.56085, -17.027437, 0.5570948; -2.134475, -17.266794, 1.6742709; -0.100262195, 2.4823353, 0.29457238; -0.37550476, 4.9027996, 0.93168867; -0.68586504, 7.3284574, 1.6475463; -0.8349979, 8.783125, 2.2795331; -0.7551593, 10.365275, 2.367279; -1.1053514, 11.954387, 2.2332323; 2.838488, 9.349047, 0.42751944; 5.870677, 7.1545477, -2.8272138; 7.749667, 4.6100254, -3.924815; 8.688238, 3.3396842, -4.4796386; 9.697483, 3.3952231, -5.0546594; 10.478625, 3.3409593, -5.5702915; 9.718147, 2.7159994, -5.0779552; -4.7170424, 7.286251, 2.5714393; -5.9550514, 2.8514447, 0.7936107; -4.332541, 0.07422495, 0.6702014; -3.5212865, -1.3143833, 0.6084971; -3.9305446, -2.5054994, 0.5546199; -4.1391287, -3.4996047, 0.52011245; -3.3631809, -2.715518, 0.97625065\",\n\"0.0, 0.0, 0.0; 1.3197896, -1.9464039, 0.9690539; 2.2582922, -9.134047, 1.6931086; 3.643423, -16.415737, -0.1699549; 2.895884, -17.778044, 1.9200507; 2.4124887, -17.306852, 2.994456; -1.6262362, -1.6760007, 0.9273672; -1.2501317, -8.840474, 1.7220412; -0.40422678, -15.854942, -1.4791778; -1.5451547, -17.028688, 0.56715477; -2.1240828, -17.2707, 1.6810182; -0.088123016, 2.482298, 0.29874092; -0.34694177, 4.9019985, 0.9455669; -0.64406765, 7.325411, 1.6745248; -0.79965353, 8.781862, 2.3008223; -0.7208832, 10.364584, 2.378678; -1.0680639, 11.953173, 2.2312708; 2.917138, 9.319924, 0.5203825; 5.803644, 6.8157806, -2.641995; 7.4879675, 4.1100006, -3.6675353; 8.329429, 2.75898, -4.186379; 9.346388, 2.723804, -4.7492876; 10.126636, 2.5982742, -5.253728; 9.313696, 2.0447333, -4.7597456; -4.6884723, 7.316239, 2.5396607; -5.953772, 2.8872595, 0.7665262; -4.3181267, 0.11717248, 0.6569668; -3.5003042, -1.2678688, 0.60218674; -3.9058783, -2.4595015, 0.53382206; -4.1117396, -3.4538517, 0.49100962; -3.3504138, -2.6696408, 0.97095263\",\n\"0.0, 0.0, 0.0; 1.3195734, -1.9464091, 0.9693383; 2.2662344, -9.131742, 1.7056037; 3.658483, -16.418892, -0.13060677; 2.900363, -17.779444, 1.9567293; 2.4119966, -17.297632, 3.0241537; -1.6264215, -1.6756704, 0.9276392; -1.2423874, -8.839698, 1.7225411; -0.3764434, -15.856466, -1.4682589; -1.5281937, -17.028713, 0.5728638; -2.1131265, -17.272612, 1.683173; -0.07764427, 2.4824157, 0.30066198; -0.32087368, 4.902008, 0.95391273; -0.6041434, 7.32419, 1.6924139; -0.7651799, 8.782453, 2.3130922; -0.68714386, 10.365664, 2.381133; -1.0312785, 11.953587, 2.2200449; 2.9935324, 9.288784, 0.60181093; 5.7261753, 6.476571, -2.435854; 7.219753, 3.6369967, -3.3929174; 7.9661627, 2.2190154, -3.87739; 8.996479, 2.0969949, -4.402622; 9.781356, 1.9049696, -4.878121; 8.9073105, 1.4230334, -4.4143558; -4.6606607, 7.3513427, 2.4984431; -5.9513702, 2.9275875, 0.7305896; -4.3021097, 0.16491246, 0.63955224; -3.4774806, -1.2164234, 0.59403235; -3.8784657, -2.408711, 0.5114844; -4.0809927, -3.403379, 0.46087086; -3.3361745, -2.618501, 0.96501493\",\n\"0.0, 0.0, 0.0; 1.3190657, -1.9463522, 0.97014344; 2.2722101, -9.129434, 1.7198763; 3.6692328, -16.422087, -0.09068751; 2.899343, -17.779549, 1.9943511; 2.4063697, -17.284416, 3.0535302; -1.6268562, -1.674821, 0.9284098; -1.2343884, -8.83862, 1.7212472; -0.34978765, -15.85721, -1.4604161; -1.5152669, -17.026793, 0.57443285; -2.10744, -17.271986, 1.680611; -0.06994883, 2.482717, 0.30006367; -0.29878113, 4.902791, 0.956723; -0.56591845, 7.324691, 1.7021284; -0.731726, 8.785126, 2.3164108; -0.65411955, 10.368728, 2.3751972; -0.99479616, 11.956028, 2.2011409; 3.067644, 9.254585, 0.6701162; 5.6556034, 6.1536646, -2.2091267; 6.957019, 3.1994398, -3.0972705; 7.607775, 1.7240733, -3.5470734; 8.653138, 1.5177388, -4.0128536; 9.445364, 1.2626972, -4.444521; 8.506488, 0.8543867, -4.040676; -4.632673, 7.392657, 2.4522216; -5.9408197, 2.9724398, 0.6883395; -4.2830224, 0.21423101, 0.6196781; -3.4541245, -1.1648715, 0.58534575; -3.850608, -2.3576796, 0.4896262; -4.0500183, -3.3526053, 0.43216175; -3.3225284, -2.5669556, 0.95985675\",\n\"0.0, 0.0, 0.0; 1.318987, -1.9457527, 0.97145206; 2.2758896, -9.1268425, 1.7353449; 3.6792068, -16.424274, -0.050931334; 2.8941264, -17.779356, 2.0299864; 2.3947284, -17.27543, 3.081984; -1.6269201, -1.6740644, 0.9296621; -1.2263212, -8.837915, 1.7179464; -0.3241387, -15.857439, -1.4567138; -1.5051274, -17.022879, 0.5715586; -2.1052032, -17.26967, 1.6731131; -0.06449291, 2.4831672, 0.29754883; -0.28019148, 4.904353, 0.95455366; -0.5305855, 7.3270683, 1.7031157; -0.70126736, 8.790334, 2.3092732; -0.6237238, 10.374224, 2.359806; -0.96028805, 11.96112, 2.1744285; 3.1388757, 9.21851, 0.72853; 5.5994234, 5.856805, -1.9636676; 6.7025175, 2.8023596, -2.7782063; 7.2546363, 1.2768143, -3.190988; 8.311014, 0.98470235, -3.5796337; 9.109037, 0.666361, -3.9548955; 8.108794, 0.33782536, -3.6341565; -4.606599, 7.439029, 2.3954525; -5.926342, 3.0205722, 0.63580453; -4.262676, 0.26539326, 0.59194356; -3.4308438, -1.1121949, 0.57001394; -3.822135, -2.30571, 0.4624728; -4.017967, -3.3009932, 0.3991882; -3.3084593, -2.5139542, 0.94884\",\n\"0.0, 0.0, 0.0; 1.3198057, -1.9445086, 0.97283036; 2.2780914, -9.123738, 1.7523143; 3.6869783, -16.426088, -0.009306908; 2.885953, -17.77959, 2.0665557; 2.3797088, -17.2686, 3.1118522; -1.6262105, -1.6740209, 0.9309807; -1.2198997, -8.83815, 1.7138021; -0.29853874, -15.85795, -1.4547324; -1.497241, -17.02045, 0.56481695; -2.1064157, -17.265547, 1.6617461; -0.059138015, 2.4839106, 0.2924132; -0.26239496, 4.907091, 0.9460223; -0.49791574, 7.3315034, 1.6939166; -0.6716076, 8.79734, 2.292963; -0.5933459, 10.381422, 2.3358011; -0.9258411, 11.967756, 2.1386492; 3.2052193, 9.184886, 0.7751788; 5.544775, 5.5885334, -1.7140006; 6.4516864, 2.4486217, -2.4409068; 6.9062448, 0.8801999, -2.8096106; 7.9644003, 0.5004481, -3.1069396; 8.762756, 0.11702222, -3.414536; 7.712952, -0.12575825, -3.1903381; -4.5821557, 7.486049, 2.327046; -5.911454, 3.0678682, 0.5739087; -4.24477, 0.31420898, 0.55827886; -3.411429, -1.0626191, 0.5504623; -3.7974796, -2.256732, 0.43125054; -3.9897578, -3.2523096, 0.36198202; -3.29769, -2.4643319, 0.9321418\",\n\"0.0, 0.0, 0.0; 1.3204685, -1.943209, 0.9745261; 2.2797837, -9.120347, 1.7718084; 3.6954508, -16.427536, 0.03587067; 2.8755786, -17.78002, 2.105029; 2.361109, -17.262817, 3.14323; -1.6256355, -1.6736758, 0.9326039; -1.2132436, -8.838087, 1.7096424; -0.27190977, -15.857615, -1.4536195; -1.4894562, -17.016272, 0.5568459; -2.1082, -17.26111, 1.648464; -0.05161715, 2.484906, 0.28529334; -0.24168672, 4.911002, 0.9320182; -0.4640965, 7.3382235, 1.6747978; -0.64242136, 8.806028, 2.2676325; -0.5634704, 10.390223, 2.304649; -0.891179, 11.976229, 2.097116; 3.2702775, 9.154123, 0.80919135; 5.486185, 5.3330803, -1.4475032; 6.206061, 2.1244047, -2.0768738; 6.5675974, 0.52140224, -2.39654; 7.6132736, 0.051744908, -2.592224; 8.401887, -0.39990348, -2.8226736; 7.3189473, -0.5519125, -2.6984527; -4.5554357, 7.5336947, 2.247934; -5.891567, 3.1138072, 0.504318; -4.224045, 0.36065435, 0.5198049; -3.3902845, -1.0159202, 0.52754855; -3.7705538, -2.21073, 0.3972533; -3.9588377, -3.2066443, 0.32210222; -3.2835054, -2.417759, 0.9107747\",\n\"0.0, 0.0, 0.0; 1.3212042, -1.941673, 0.9765881; 2.2809677, -9.116588, 1.7931076; 3.7045064, -16.42823, 0.082547426; 2.865433, -17.78076, 2.1439636; 2.3417711, -17.26268, 3.1771188; -1.624994, -1.673198, 0.9345773; -1.2079152, -8.83793, 1.706139; -0.24575031, -15.857067, -1.4517201; -1.4829534, -17.011482, 0.54916155; -2.1116483, -17.256418, 1.6350567; -0.04011578, 2.486362, 0.27424443; -0.21499512, 4.916504, 0.9099729; -0.4265346, 7.347098, 1.6448576; -0.6116418, 8.81539, 2.2343988; -0.5324886, 10.399656, 2.2677126; -0.85507226, 11.985428, 2.0505779; 3.336929, 9.127315, 0.83277154; 5.424572, 5.094682, -1.162952; 5.9625454, 1.8304555, -1.6780586; 6.233585, 0.1994257, -1.9403408; 7.2497144, -0.3591553, -2.0285273; 8.015384, -0.87988865, -2.175467; 6.916746, -0.939681, -2.1486876; -4.52415, 7.580831, 2.1554139; -5.8676753, 3.1583138, 0.4241917; -4.2007294, 0.4052136, 0.47370714; -3.3672574, -0.9713348, 0.49846518; -3.7412472, -2.1668668, 0.35708815; -3.9250689, -3.1631112, 0.2755408; -3.2651105, -2.3737636, 0.8807962\",\n\"0.0, 0.0, 0.0; 1.3219528, -1.9403493, 0.97820437; 2.2808664, -9.112888, 1.8163133; 3.7130167, -16.429005, 0.13227284; 2.852563, -17.783272, 2.183711; 2.3181014, -17.267826, 3.212645; -1.6243432, -1.672965, 0.93612397; -1.2027702, -8.838059, 1.7018538; -0.21861422, -15.855836, -1.4522495; -1.4768305, -17.005295, 0.5383563; -2.1160655, -17.25038, 1.6180469; -0.02707246, 2.488053, 0.26014024; -0.1853435, 4.923007, 0.8816499; -0.385565, 7.3574257, 1.6069832; -0.5793805, 8.8260565, 2.1928709; -0.5005151, 10.410377, 2.224263; -0.817453, 11.996229, 1.9995399; 3.40651, 9.100397, 0.849005; 5.3624706, 4.8753085, -0.8615891; 5.714537, 1.5676684, -1.2430224; 5.8930492, -0.08536899, -1.4382482; 6.8612647, -0.72904205, -1.4147412; 7.5889525, -1.3173236, -1.4730443; 6.490833, -1.2854073, -1.5394566; -4.4882526, 7.6306095, 2.0531592; -5.840485, 3.2030349, 0.34175634; -4.1734576, 0.45085502, 0.42687237; -3.339945, -0.9252335, 0.46943054; -3.7076147, -2.121481, 0.3178932; -3.886933, -3.1180477, 0.2304689; -3.2416303, -2.3282204, 0.8507155\",\n\"0.0, 0.0, 0.0; 1.3233926, -1.937984, 0.980943; 2.2783308, -9.108409, 1.8413771; 3.7203856, -16.428484, 0.18319035; 2.837583, -17.78404, 2.2242544; 2.291963, -17.270319, 3.2481823; -1.623092, -1.6727108, 0.93874484; -1.1978054, -8.838293, 1.6978222; -0.19011295, -15.853968, -1.4535235; -1.4716612, -16.998287, 0.52512276; -2.1225758, -17.24163, 1.598209; -0.013248731, 2.4898195, 0.24379598; -0.15490685, 4.9299545, 0.8487748; -0.3456956, 7.3685703, 1.5624571; -0.547488, 8.837272, 2.1454668; -0.46852764, 10.421603, 2.1760292; -0.7797692, 12.007525, 1.9439584; 3.474042, 9.075265, 0.8630893; 5.2961655, 4.68157, -0.543535; 5.4509497, 1.3447595, -0.7708323; 5.531206, -0.3232218, -0.8887728; 6.434122, -1.0433726, -0.7529971; 7.1093197, -1.6930618, -0.7211171; 6.026636, -1.5730704, -0.8782611; -4.452755, 7.6795974, 1.9380548; -5.814477, 3.245232, 0.25194645; -4.146904, 0.49479437, 0.37447098; -3.313118, -0.8804226, 0.43573216; -3.675348, -2.0771194, 0.27492613; -3.850879, -3.0738754, 0.18213725; -3.2189214, -2.2839935, 0.81590784\",\n\"0.0, 0.0, 0.0; 1.3248783, -1.9350961, 0.98463124; 2.270216, -9.103817, 1.8695235; 3.7204075, -16.428608, 0.23950052; 2.8145154, -17.786085, 2.2691393; 2.2572699, -17.275162, 3.2881944; -1.6217991, -1.6719806, 0.94227415; -1.1999722, -8.8382, 1.697261; -0.16814208, -15.8530445, -1.4481169; -1.4731103, -16.994192, 0.5170078; -2.1359687, -17.235832, 1.5831449; -0.001579713, 2.4912443, 0.22915863; -0.12912495, 4.935837, 0.81909186; -0.31231952, 7.3784585, 1.5209677; -0.521299, 8.847957, 2.0994198; -0.44164556, 10.432264, 2.129391; -0.74695945, 12.018423, 1.8911409; 3.532724, 9.051657, 0.8819335; 5.2128024, 4.5143676, -0.210599; 5.1587124, 1.1671584, -0.26708335; 5.1348333, -0.50643075, -0.2993568; 5.9588385, -1.289205, -0.053207293; 6.5703, -1.9895327, 0.06787011; 5.5165405, -1.7900034, -0.17926317; -4.4225817, 7.724068, 1.8243631; -5.795516, 3.2811208, 0.17024231; -4.1261034, 0.53374004, 0.33049923; -3.291398, -0.83994853, 0.41062942; -3.649671, -2.036807, 0.24233562; -3.8225849, -3.0336194, 0.14533338; -3.2017722, -2.243957, 0.79029393\",\n\"0.0, 0.0, 0.0; 1.3257455, -1.9318769, 0.9897725; 2.2646174, -9.0986, 1.8974339; 3.7229135, -16.427336, 0.29256165; 2.7944357, -17.786903, 2.3105607; 2.2256, -17.28052, 3.32547; -1.6210339, -1.669941, 0.9471945; -1.1984385, -8.83684, 1.695273; -0.14409363, -15.849588, -1.4473125; -1.4720842, -16.985876, 0.50516427; -2.1464372, -17.22615, 1.5643789; 0.009402921, 2.4926155, 0.21352676; -0.1048512, 4.9415054, 0.78816354; -0.28060317, 7.388007, 1.4783322; -0.4928486, 8.860438, 2.0480714; -0.41141853, 10.444669, 2.077357; -0.71138227, 12.031218, 1.8349507; 3.588106, 9.028392, 0.8999369; 5.113677, 4.3714633, 0.13251758; 4.841989, 1.0365832, 0.25370148; 4.709529, -0.6312697, 0.3105674; 5.444037, -1.4601562, 0.66518605; 5.9832535, -2.1981068, 0.87418; 4.970636, -1.9307823, 0.53589135; -4.3925915, 7.7672486, 1.709593; -5.777041, 3.3144116, 0.092066765; -4.106787, 0.5701251, 0.29172945; -3.271662, -0.80201685, 0.39156067; -3.6279688, -1.9986585, 0.21764454; -3.799867, -2.995359, 0.11773032; -3.1879404, -2.206237, 0.77178055\",\n\"0.0, 0.0, 0.0; 1.3280946, -1.9274542, 0.9952305; 2.2662096, -9.091828, 1.9220186; 3.7318723, -16.42337, 0.33679557; 2.7820635, -17.787268, 2.341905; 2.2014678, -17.290274, 3.354794; -1.6189845, -1.668958, 0.95241797; -1.1897523, -8.8365555, 1.6899514; -0.11455083, -15.845072, -1.4550059; -1.4630785, -16.974947, 0.48708773; -2.1474109, -17.215649, 1.5397853; 0.024975287, 2.4941046, 0.19398893; -0.073153585, 4.948028, 0.74982506; -0.2439708, 7.3985424, 1.4268706; -0.4567458, 8.874586, 1.9869821; -0.37241882, 10.458673, 2.0158546; -0.6672, 12.045683, 1.7701288; 3.645308, 9.010155, 0.9086739; 5.0090604, 4.2611356, 0.47246066; 4.5154395, 0.96276, 0.76739293; 4.272155, -0.6872585, 0.91149074; 4.910649, -1.54326, 1.3718126; 5.372988, -2.3038425, 1.6663635; 4.412542, -1.985001, 1.2337216; -4.356633, 7.8066883, 1.585547; -5.7547755, 3.3429842, 0.010302663; -4.0841875, 0.6019201, 0.24784209; -3.2488956, -0.76861084, 0.36661297; -3.605498, -1.9648243, 0.19037265; -3.7782676, -2.96135, 0.09022006; -3.1735377, -2.1722002, 0.75089633\",\n\"0.0, 0.0, 0.0; 1.3294291, -1.9234358, 1.0012053; 2.2691212, -9.085152, 1.946749; 3.7411358, -16.419447, 0.38026226; 2.7725976, -17.78923, 2.3723578; 2.1803243, -17.307348, 3.385788; -1.6178111, -1.6668221, 0.958135; -1.1792897, -8.834959, 1.684876; -0.08669317, -15.83963, -1.462652; -1.4542458, -16.96327, 0.46973217; -2.1477454, -17.202538, 1.5167416; 0.04077238, 2.495462, 0.17268887; -0.041418843, 4.954418, 0.7085086; -0.20723069, 7.408863, 1.3724349; -0.4173759, 8.8886385, 1.9236231; -0.32967708, 10.472533, 1.952982; -0.6202518, 12.060002, 1.7052181; 3.700348, 8.99315, 0.9107202; 4.9026775, 4.1818805, 0.81390136; 4.1873345, 0.94260764, 1.2670269; 3.8332992, -0.67824996, 1.490616; 4.3707886, -1.5417883, 2.0542789; 4.7529635, -2.3098073, 2.4325554; 3.8547304, -1.9578093, 1.902866; -4.31918, 7.84417, 1.4626045; -5.731789, 3.3691387, -0.06692922; -4.062189, 0.6308141, 0.20644522; -3.2273893, -0.7383462, 0.3431322; -3.5866196, -1.9339224, 0.16790742; -3.762161, -2.930199, 0.07012195; -3.1623917, -2.140465, 0.7346113\",\n\"0.0, 0.0, 0.0; 1.3309864, -1.9187746, 1.0080562; 2.270979, -9.078644, 1.9671849; 3.748207, -16.415096, 0.415776; 2.7638164, -17.789032, 2.3972137; 2.1623282, -17.315796, 3.4092903; -1.6164404, -1.6643682, 0.9646922; -1.1684225, -8.832886, 1.6818244; -0.06183052, -15.834139, -1.4684165; -1.4458468, -16.953512, 0.45469952; -2.1473436, -17.189463, 1.4971241; 0.05754789, 2.4965885, 0.15016094; -0.008749209, 4.960323, 0.66585493; -0.1712223, 7.4181757, 1.3178934; -0.37623936, 8.901947, 1.8602002; -0.28542757, 10.485631, 1.891403; -0.5736531, 12.073622, 1.6442403; 3.7510803, 8.980065, 0.90757424; 4.7862597, 4.135716, 1.1604959; 3.85856, 0.9732146, 1.7503142; 3.3984313, -0.60960567, 2.0426733; 3.8321476, -1.4607891, 2.7057614; 4.1327176, -2.2209697, 3.1648767; 3.3052516, -1.8562517, 2.5375195; -4.281678, 7.8754663, 1.3459932; -5.7113028, 3.388506, -0.13191211; -4.042025, 0.6532128, 0.17206469; -3.2073882, -0.71443284, 0.32405385; -3.572589, -1.9089428, 0.15397406; -3.7535424, -2.9047656, 0.061581858; -3.1547413, -2.114139, 0.7258828\",\n\"0.0, 0.0, 0.0; 1.3332934, -1.9136238, 1.0147765; 2.2728114, -9.072145, 1.984376; 3.7562108, -16.40991, 0.44510984; 2.7590797, -17.788982, 2.416583; 2.148996, -17.327932, 3.429139; -1.6144174, -1.662591, 0.9711231; -1.1550834, -8.8313055, 1.6790695; -0.041793227, -15.829639, -1.475296; -1.4383392, -16.940601, 0.44363594; -2.1453261, -17.176357, 1.4823892; 0.07549044, 2.497411, 0.12670535; 0.024448946, 4.965767, 0.62161505; -0.13839267, 7.4266443, 1.2620491; -0.335427, 8.914942, 1.7948264; -0.2404716, 10.498344, 1.827883; -0.5269146, 12.086889, 1.582211; 3.7948902, 8.9730835, 0.9013183; 4.6488304, 4.125839, 1.5163729; 3.5215082, 1.052712, 2.2199078; 2.9616442, -0.48572803, 2.5695748; 3.2903168, -1.3047588, 3.3268542; 3.5088875, -2.0420165, 3.8632138; 2.7590468, -1.686003, 3.140518; -4.247168, 7.8985662, 1.2303545; -5.695861, 3.400105, -0.19301498; -4.0282583, 0.6669028, 0.13778347; -3.194458, -0.69969666, 0.3031829; -3.5677464, -1.8929478, 0.14206177; -3.7557065, -2.888193, 0.057789534; -3.1544561, -2.0960212, 0.71802485\",\n\"0.0, 0.0, 0.0; 1.3346636, -1.908907, 1.0218346; 2.273558, -9.066303, 2.000305; 3.762354, -16.405186, 0.4716196; 2.755175, -17.788887, 2.4347243; 2.13801, -17.338137, 3.447626; -1.6132077, -1.6598037, 0.9778773; -1.1434748, -8.828581, 1.6783204; -0.023084879, -15.824298, -1.4793336; -1.4315321, -16.931156, 0.43326056; -2.1441042, -17.163519, 1.4689573; 0.09228237, 2.4979155, 0.103518546; 0.055537846, 4.970612, 0.5775908; -0.10703933, 7.4346557, 1.2058021; -0.29507285, 8.927538, 1.7289195; -0.196464, 10.51066, 1.7646234; -0.48222384, 12.099785, 1.5219282; 3.835855, 8.966244, 0.8893578; 4.479402, 4.146109, 1.8668195; 3.1757736, 1.1696763, 2.673868; 2.527769, -0.32065332, 3.0757637; 2.751561, -1.0886319, 3.9198225; 2.8883312, -1.7884917, 4.5285044; 2.2201033, -1.4613633, 3.7174835; -4.213419, 7.9203734, 1.1193421; -5.6813335, 3.409595, -0.24409258; -4.01531, 0.67813206, 0.10832167; -3.1822987, -0.68759763, 0.28452837; -3.5641282, -1.8797454, 0.13572383; -3.7592833, -2.8744354, 0.061900355; -3.1531372, -2.0796247, 0.7144428\",\n\"0.0, 0.0, 0.0; 1.3370138, -1.9034907, 1.0288419; 2.274215, -9.060453, 2.0120935; 3.7694678, -16.399677, 0.49136484; 2.7543125, -17.78811, 2.447005; 2.1307683, -17.348692, 3.4609785; -1.6111434, -1.6578436, 0.9845833; -1.1306282, -8.826579, 1.6781119; -0.0071128607, -15.819555, -1.4844993; -1.424319, -16.920681, 0.42493105; -2.1406705, -17.15083, 1.458513; 0.10885346, 2.4980867, 0.080796; 0.08638917, 4.974986, 0.5333295; -0.07628694, 7.4426165, 1.1472752; -0.25450984, 8.94025, 1.6601434; -0.15211764, 10.523068, 1.6985731; -0.43751794, 12.112812, 1.4595335; 3.8747497, 8.9609, 0.8707956; 4.3063025, 4.2052393, 2.2127109; 2.8321521, 1.3361511, 3.1100063; 2.0988798, -0.10070896, 3.5575075; 2.2183871, -0.8009899, 4.478178; 2.2736928, -1.4504933, 5.1520405; 1.6897357, -1.1700857, 4.2622867; -4.1798387, 7.9400687, 1.0088804; -5.6724763, 3.4177737, -0.28793466; -4.007501, 0.68772316, 0.08003548; -3.175015, -0.6773008, 0.26401985; -3.5657008, -1.8683895, 0.13050985; -3.7680752, -2.862476, 0.0690275; -3.1541164, -2.064369, 0.7101424\",\n\"0.0, 0.0, 0.0; 1.3385527, -1.8991148, 1.0349097; 2.2742925, -9.055791, 2.0216417; 3.77421, -16.394875, 0.50483584; 2.754039, -17.786636, 2.455494; 2.1264365, -17.354336, 3.4700236; -1.6097852, -1.6557026, 0.99039006; -1.1205335, -8.824387, 1.6783215; 0.0049940348, -15.815231, -1.4882842; -1.4186654, -16.914692, 0.41730094; -2.1379929, -17.140953, 1.4496734; 0.12412607, 2.4979787, 0.059231486; 0.114630766, 4.9788237, 0.49009228; -0.04813438, 7.450274, 1.08845; -0.21642447, 8.95274, 1.5904245; -0.11018104, 10.535239, 1.6314373; -0.3953385, 12.125693, 1.3968749; 3.9098654, 8.956442, 0.8475926; 4.1282773, 4.302467, 2.5493844; 2.4937506, 1.5501137, 3.5306096; 1.6802478, 0.17146313, 4.020557; 1.6978705, -0.44655496, 5.0054693; 1.6730494, -1.0341046, 5.7356563; 1.1729693, -0.81526494, 4.7799754; -4.148518, 7.957889, 0.90155154; -5.669036, 3.4236479, -0.31890863; -4.0063686, 0.69286704, 0.054047078; -3.1750355, -0.672521, 0.24052529; -3.574695, -1.8626175, 0.1260918; -3.7841659, -2.8560455, 0.07954592; -3.1597953, -2.0536177, 0.70502156\",\n\"0.0, 0.0, 0.0; 1.3407279, -1.8946145, 1.0403286; 2.2739964, -9.051516, 2.0277607; 3.7796106, -16.38973, 0.5123979; 2.758246, -17.785906, 2.4592748; 2.1278589, -17.36176, 3.4755182; -1.6078734, -1.6544496, 0.9955757; -1.1107148, -8.82293, 1.6799464; 0.013338923, -15.812197, -1.490665; -1.4139036, -16.909082, 0.41372335; -2.1346416, -17.133305, 1.4455569; 0.13737687, 2.4976583, 0.04055938; 0.140086, 4.9821186, 0.45016047; -0.021512568, 7.4581165, 1.0297403; -0.18016198, 8.965009, 1.5214816; -0.06943025, 10.547127, 1.5652466; -0.3531958, 12.138449, 1.3349241; 3.9432728, 8.951016, 0.81987846; 3.9542625, 4.437607, 2.8771343; 2.1682334, 1.8110788, 3.9360855; 1.278914, 0.49522114, 4.465369; 1.1975701, -0.027763903, 5.5008297; 1.0940329, -0.5428677, 6.2773294; 0.67559856, -0.39724138, 5.2698565; -4.1181865, 7.9764013, 0.79651713; -5.6667786, 3.430233, -0.34149313; -4.0074563, 0.6969452, 0.027976394; -3.1777954, -0.6696967, 0.21271032; -3.5846052, -1.8591456, 0.1185321; -3.799425, -2.8520303, 0.087290905; -3.1631908, -2.044877, 0.6944637\",\n\"0.0, 0.0, 0.0; 1.3414394, -1.8913788, 1.0452875; 2.2734087, -9.04871, 2.0308309; 3.7840552, -16.385303, 0.51262605; 2.763817, -17.783947, 2.458321; 2.1325426, -17.365017, 3.4761758; -1.6072392, -1.6522018, 1.0003211; -1.1046473, -8.820497, 1.6826663; 0.017030835, -15.8084955, -1.491576; -1.4103965, -16.905382, 0.41267323; -2.1310844, -17.126364, 1.4452405; 0.14951567, 2.4971774, 0.02377489; 0.16262549, 4.9848604, 0.41311198; 0.0014194548, 7.4653196, 0.97340286; -0.14644606, 8.977231, 1.4529486; -0.0315231, 10.558989, 1.4988853; -0.3151581, 12.151099, 1.2739137; 3.9715054, 8.947602, 0.7901762; 3.7849245, 4.6125803, 3.193519; 1.8598877, 2.120572, 4.3310843; 0.9009539, 0.8719164, 4.9001336; 0.72555596, 0.45443693, 5.971234; 0.5465074, 0.020584464, 6.782848; 0.20610249, 0.08279137, 5.738075; -4.0916514, 7.991283, 0.69793344; -5.672543, 3.4354596, -0.35378063; -4.0153193, 0.6996808, 0.006560236; -3.186709, -0.66820705, 0.18673097; -3.598875, -1.8573602, 0.11471357; -3.8174067, -2.849816, 0.09992094; -3.1686773, -2.0370674, 0.6860428\",\n\"0.0, 0.0, 0.0; 1.3429663, -1.8886006, 1.0483454; 2.2725654, -9.046824, 2.0296328; 3.7878127, -16.380997, 0.50433433; 2.7738757, -17.782867, 2.4510007; 2.1437397, -17.37123, 3.4725292; -1.6058965, -1.6517329, 1.003248; -1.0996466, -8.819649, 1.6868598; 0.015541434, -15.8077755, -1.4893887; -1.4079694, -16.907114, 0.4163785; -2.1267288, -17.12539, 1.4508641; 0.15979491, 2.4966292, 0.0110993525; 0.18158798, 4.9872594, 0.38070628; 0.019785404, 7.472826, 0.9177084; -0.1159683, 8.989805, 1.384667; 0.0038204566, 10.571125, 1.4331805; -0.2797151, 12.16415, 1.2146506; 3.9934866, 8.947561, 0.75287646; 3.6232622, 4.8241076, 3.4847898; 1.572732, 2.475036, 4.704263; 0.55088866, 1.2978637, 5.314685; 0.28736508, 0.9941618, 6.4058447; 0.03682688, 0.6487636, 7.2406707; -0.23029947, 0.61959183, 6.1733894; -4.070156, 8.00237, 0.60511315; -5.681949, 3.4401402, -0.36906868; -4.0264926, 0.70226765, -0.016595513; -3.1987653, -0.6666671, 0.15964016; -3.614946, -1.8555692, 0.11006346; -3.8359368, -2.8475897, 0.11144659; -3.1736636, -2.0295835, 0.6746594\",\n\"0.0, 0.0, 0.0; 1.3444678, -1.8864083, 1.050366; 2.2704337, -9.045912, 2.0257351; 3.7885494, -16.377243, 0.48966277; 2.7830691, -17.780565, 2.439667; 2.156196, -17.370922, 3.464002; -1.6045765, -1.6518403, 1.0051814; -1.0984073, -8.819633, 1.6901512; 0.009145021, -15.809092, -1.4858396; -1.4081103, -16.913397, 0.42171705; -2.1240156, -17.128765, 1.4587877; 0.16716029, 2.4961715, 7.5820234E-4; 0.19461524, 4.9894686, 0.35153064; 0.030831367, 7.4800386, 0.86419713; -0.090947814, 9.002238, 1.3178301; 0.03454878, 10.583047, 1.3685081; -0.24897197, 12.176988, 1.1567348; 4.0065193, 8.950813, 0.71238923; 3.4676769, 5.066457, 3.74961; 1.3056383, 2.8675559, 5.0535846; 0.22783267, 1.7655611, 5.70662; -0.116286784, 1.5806518, 6.801928; -0.4327812, 1.328361, 7.647614; -0.6323912, 1.2019732, 6.5726824; -4.056564, 8.009065, 0.51911086; -5.6985316, 3.4429913, -0.38408262; -4.0428877, 0.7045641, -0.03683576; -3.215067, -0.66464806, 0.13678712; -3.6334062, -1.85351, 0.10936626; -3.8553205, -2.8451765, 0.12655109; -3.1804385, -2.0217474, 0.66641\",\n\"0.0, 0.0, 0.0; 1.3458486, -1.8850776, 1.0509865; 2.2672386, -9.0462055, 2.018735; 3.787478, -16.374441, 0.47004223; 2.7923608, -17.778292, 2.424976; 2.170104, -17.368128, 3.4519138; -1.6033659, -1.652654, 1.0057752; -1.1006925, -8.820518, 1.692578; -7.902384E-4, -15.812416, -1.4806997; -1.4106209, -16.92453, 0.427822; -2.1233683, -17.135021, 1.4680642; 0.16962716, 2.4959955, -0.0069394433; 0.1993412, 4.991845, 0.32498667; 0.034810305, 7.4878664, 0.8101671; -0.07115968, 9.015466, 1.2493881; 0.060606398, 10.595711, 1.3017267; -0.22306931, 12.190552, 1.0970628; 4.012085, 8.954588, 0.6607325; 3.324991, 5.3373566, 3.9844084; 1.0652847, 3.2915444, 5.369437; -0.06156397, 2.2662344, 6.063313; -0.47839794, 2.201469, 7.1469936; -0.8547095, 2.043978, 7.991144; -0.99230784, 1.8166423, 6.923117; -4.0506325, 8.015566, 0.44078898; -5.7184505, 3.4464812, -0.39748108; -4.0623417, 0.70768857, -0.05537191; -3.2342875, -0.6617056, 0.11568269; -3.6529527, -1.8507497, 0.10888109; -3.8743467, -2.842172, 0.1406635; -3.188696, -2.0133557, 0.6582498\",\n\"0.0, 0.0, 0.0; 1.3468527, -1.8840954, 1.0514612; 2.2698717, -9.047337, 2.0018642; 3.7937074, -16.369596, 0.42863894; 2.8116486, -17.774254, 2.3895874; 2.1957612, -17.361393, 3.41928; -1.6024837, -1.653233, 1.0062293; -1.0975182, -8.82163, 1.6857438; -0.006343007, -15.813113, -1.4914575; -1.4049475, -16.931522, 0.42163968; -2.1124089, -17.139584, 1.4659712; 0.17386745, 2.4956286, -0.020554474; 0.20664875, 4.9944744, 0.28769436; 0.040606186, 7.495634, 0.7451008; -0.04874584, 9.028981, 1.167672; 0.089542925, 10.608659, 1.220293; -0.19454604, 12.204328, 1.0227766; 4.0181003, 8.961159, 0.5898827; 3.2063477, 5.6270976, 4.1715555; 0.862442, 3.740819, 5.640564; -0.30674005, 2.7954686, 6.376661; -0.78522617, 2.8489249, 7.435199; -1.2126452, 2.7853298, 8.267228; -1.297048, 2.4562242, 7.220394; -4.0439253, 8.01872, 0.35943308; -5.7317142, 3.4467392, -0.4210873; -4.073477, 0.7087829, -0.08261451; -3.2443604, -0.6601944, 0.08662179; -3.6629612, -1.8492235, 0.098264076; -3.8836083, -2.8403137, 0.14297163; -3.188255, -2.0070384, 0.6400479\",\n\"0.0, 0.0, 0.0; 1.3473829, -1.8841033, 1.0507677; 2.2734988, -9.049461, 1.9820046; 3.8014035, -16.365105, 0.38216758; 2.8322325, -17.770855, 2.3487365; 2.2224495, -17.35709, 3.3816943; -1.6020204, -1.6540855, 1.0055658; -1.0962336, -8.823341, 1.6753317; -0.0103799105, -15.814178, -1.505114; -1.3983512, -16.940615, 0.41101575; -2.1010625, -17.145552, 1.4591652; 0.17780945, 2.495208, -0.03370054; 0.2125665, 4.996977, 0.2496141; 0.043532133, 7.503282, 0.6767599; -0.029810362, 9.04234, 1.081266; 0.11478866, 10.621426, 1.1346906; -0.16975453, 12.217987, 0.9452046; 4.0205817, 8.969483, 0.51660657; 3.1068368, 5.919782, 4.3202467; 0.6915469, 4.204838, 5.880781; -0.5136032, 3.3453975, 6.662758; -1.0430272, 3.5115206, 7.6847277; -1.5131315, 3.5380805, 8.495468; -1.5534092, 3.1105573, 7.4821086; -4.0400925, 8.019057, 0.2721152; -5.7429695, 3.444302, -0.4577293; -4.08196, 0.7076988, -0.121914; -3.2514575, -0.66060174, 0.045993194; -3.6691647, -1.8496715, 0.07403291; -3.888464, -2.8404822, 0.13011727; -3.1848013, -2.0032194, 0.6084461\",\n\"0.0, 0.0, 0.0; 1.3480961, -1.8839968, 1.0500435; 2.277564, -9.051604, 1.9603919; 3.808461, -16.360207, 0.33150148; 2.8518484, -17.767569, 2.3030596; 2.2479973, -17.354721, 3.3398619; -1.601395, -1.655112, 1.0048727; -1.097977, -8.825803, 1.6609297; -0.015540719, -15.815412, -1.523377; -1.3921404, -16.950228, 0.39600897; -2.0898256, -17.152805, 1.4479679; 0.18020724, 2.4948177, -0.047160156; 0.21506526, 4.9992867, 0.21119136; 0.041474298, 7.510172, 0.60857546; -0.016772874, 9.054901, 0.9934442; 0.1337232, 10.633459, 1.0461831; -0.15156332, 12.230703, 0.86370325; 4.0173078, 8.979366, 0.44568503; 3.0206566, 6.2146506, 4.441473; 0.54599714, 4.6820135, 6.095865; -0.6891241, 3.913986, 6.924793; -1.2579904, 4.186443, 7.9017615; -1.7616577, 4.298755, 8.684519; -1.7679906, 3.777208, 7.715372; -4.041282, 8.016125, 0.183296; -5.756461, 3.438933, -0.5010445; -4.0913477, 0.70490956, -0.16454333; -3.258792, -0.66210055, 0.0037067235; -3.6751313, -1.8512661, 0.044930186; -3.892807, -2.8418834, 0.11003271; -3.1825595, -2.0014212, 0.5727645\",\n\"0.0, 0.0, 0.0; 1.3497106, -1.8837273, 1.0484521; 2.281043, -9.0539255, 1.9362187; 3.8115826, -16.355574, 0.27610326; 2.8695824, -17.762903, 2.2547085; 2.2736962, -17.34553, 3.2943034; -1.5999796, -1.6574035, 1.0033499; -1.10121, -8.829488, 1.6476188; -0.024392366, -15.818666, -1.5395389; -1.3885187, -16.963697, 0.38268304; -2.0807223, -17.161245, 1.4392097; 0.18106923, 2.4945087, -0.058781907; 0.2147286, 5.001384, 0.1752465; 0.035900444, 7.516558, 0.5420011; -0.008743901, 9.0665045, 0.90720916; 0.1475168, 10.644518, 0.9594682; -0.1380278, 12.242573, 0.78464717; 4.0094485, 8.990807, 0.36930823; 2.9655156, 6.540243, 4.5535917; 0.44367146, 5.1809816, 6.2864037; -0.81523097, 4.499858, 7.15459; -1.4129255, 4.8701615, 8.080844; -1.941491, 5.062014, 8.831054; -1.9231479, 4.4525166, 7.9148264; -4.0468836, 8.01003, 0.102555126; -5.771562, 3.4305396, -0.5413437; -4.101117, 0.6999929, -0.20304155; -3.265895, -0.66527843, -0.03389111; -3.6802897, -1.854702, 0.018082347; -3.8958995, -2.8452852, 0.090200156; -3.179708, -2.00234, 0.53904545\",\n\"0.0, 0.0, 0.0; 1.3504095, -1.8841636, 1.0467669; 2.285951, -9.056667, 1.9111727; 3.8138018, -16.351223, 0.21773112; 2.8890486, -17.759521, 2.2037687; 2.3022544, -17.338388, 3.2470129; -1.5993686, -1.6589681, 1.001737; -1.1070299, -8.832371, 1.6362001; -0.037551165, -15.821936, -1.5525793; -1.3854127, -16.978863, 0.3739885; -2.0704212, -17.171768, 1.4360482; 0.17964418, 2.494384, -0.067749254; 0.20980379, 5.003296, 0.1438514; 0.025555566, 7.522381, 0.4797871; -0.0061832108, 9.076765, 0.82704186; 0.15482315, 10.654329, 0.878444; -0.13220903, 12.252884, 0.71076983; 3.9961188, 9.002695, 0.2910782; 2.9452753, 6.9027452, 4.6601996; 0.38905, 5.7013774, 6.4580746; -0.8871193, 5.099372, 7.358904; -1.502954, 5.5590863, 8.231669; -2.0476842, 5.824318, 8.947159; -2.014514, 5.1339536, 8.090658; -4.0580163, 8.001937, 0.032328457; -5.78872, 3.4195724, -0.5738456; -4.1122017, 0.6928029, -0.23512256; -3.2739434, -0.67058, -0.06576136; -3.6861708, -1.8603097, -0.004406113; -3.8995621, -2.850927, 0.07359977; -3.177746, -2.0059729, 0.50946987\",\n\"0.0, 0.0, 0.0; 1.3506103, -1.8854508, 1.0441866; 2.2909746, -9.060173, 1.8846176; 3.8144922, -16.347336, 0.15581799; 2.909726, -17.756294, 2.1505735; 2.3337564, -17.327394, 3.1966815; -1.5991966, -1.6606219, 0.99926794; -1.1124082, -8.835134, 1.6254138; -0.054035783, -15.825709, -1.5648562; -1.3829966, -16.994492, 0.36767757; -2.0594063, -17.182465, 1.4361136; 0.17755571, 2.4943116, -0.07548299; 0.20342043, 5.0049186, 0.11558428; 0.0136820525, 7.5271873, 0.42340192; -0.010060858, 9.085279, 0.7542934; 0.15412702, 10.662511, 0.8058626; -0.13409235, 12.261744, 0.6469227; 3.9806812, 9.014353, 0.2146594; 2.9456549, 7.264827, 4.7391663; 0.36826253, 6.2304277, 6.6091914; -0.9185778, 5.712088, 7.546143; -1.542495, 6.254509, 8.363955; -2.0950844, 6.5883894, 9.043787; -2.0565388, 5.8233786, 8.25349; -4.0713534, 7.9923706, -0.025868893; -5.804329, 3.4066854, -0.59957045; -4.1231027, 0.68288445, -0.26029685; -3.2824907, -0.6790143, -0.09065963; -3.6912596, -1.8695203, -0.021696612; -3.9013932, -2.8604743, 0.06075123; -3.1751008, -2.013403, 0.48491904\",\n\"0.0, 0.0, 0.0; 1.3517675, -1.8859634, 1.0417608; 2.297126, -9.062565, 1.8602589; 3.8129892, -16.34257, 0.09495449; 2.9289615, -17.752464, 2.098329; 2.3644128, -17.315872, 3.147477; -1.5981833, -1.6629912, 0.99694616; -1.1164432, -8.838471, 1.6158533; -0.07167065, -15.831122, -1.5743501; -1.3813452, -17.01184, 0.36408567; -2.0488975, -17.193594, 1.4391481; 0.1750874, 2.494295, -0.081559755; 0.19607335, 5.0063143, 0.09060498; -3.607571E-4, 7.531271, 0.3709598; -0.020616975, 9.091853, 0.69014305; 0.14486893, 10.668899, 0.74321353; -0.14495055, 12.268669, 0.59282106; 3.9620416, 9.027282, 0.13936244; 2.9550543, 7.6194425, 4.787722; 0.36962867, 6.7654347, 6.736099; -0.9213424, 6.3374753, 7.712191; -1.5452741, 6.9566092, 8.473566; -2.0989323, 7.3550262, 9.116785; -2.0625174, 6.5216503, 8.398833; -4.0874233, 7.9799027, -0.07670584; -5.8204465, 3.3908396, -0.6225828; -4.1342926, 0.67012835, -0.28297323; -3.291217, -0.6902262, -0.11316955; -3.6955485, -1.8818994, -0.038446516; -3.9015963, -2.873486, 0.04666312; -3.170774, -2.0247355, 0.45954317\",\n\"0.0, 0.0, 0.0; 1.3519752, -1.8874477, 1.0387986; 2.3013706, -9.066345, 1.8320979; 3.8097389, -16.338562, 0.028692603; 2.9479728, -17.751308, 2.039744; 2.3946831, -17.312075, 3.0937757; -1.5980052, -1.6648585, 0.99411184; -1.1210926, -8.841344, 1.6050558; -0.09357238, -15.835844, -1.5866954; -1.3828281, -17.026915, 0.35908127; -2.040654, -17.202908, 1.4410756; 0.1696678, 2.494445, -0.08815123; 0.18349597, 5.0077124, 0.065533; -0.018742412, 7.534892, 0.32059312; -0.03878595, 9.097075, 0.6318592; 0.12716705, 10.673992, 0.6872626; -0.16366237, 12.27435, 0.5453069; 3.9391394, 9.038619, 0.06311992; 2.9808986, 7.982723, 4.8139243; 0.39925027, 7.307303, 6.836008; -0.8899199, 6.968815, 7.848914; -1.5081592, 7.656797, 8.553733; -2.0575366, 8.114008, 9.160483; -2.0275385, 7.219255, 8.520317; -4.1081257, 7.9684362, -0.12069911; -5.837965, 3.375628, -0.64473677; -4.1483145, 0.6572039, -0.30419216; -3.3034897, -0.7020062, -0.13391994; -3.7026868, -1.8951722, -0.055503286; -3.904086, -2.8876429, 0.030426972; -3.168942, -2.0376558, 0.43296173\",\n\"0.0, 0.0, 0.0; 1.3525279, -1.8887259, 1.0357519; 2.3054926, -9.069852, 1.8042158; 3.803084, -16.334705, -0.03744626; 2.9622898, -17.748285, 1.9818795; 2.4209292, -17.300198, 3.0383763; -1.5975246, -1.6670566, 0.99119574; -1.1229357, -8.844512, 1.5924836; -0.11627293, -15.8410225, -1.6015111; -1.3842322, -17.041328, 0.35256696; -2.0316308, -17.2115, 1.4417576; 0.16524564, 2.494529, -0.093984075; 0.17118257, 5.0088453, 0.042037316; -0.04028219, 7.5376444, 0.2723605; -0.06018466, 9.101343, 0.5759329; 0.106176525, 10.678099, 0.63458216; -0.18605241, 12.279017, 0.502151; 3.911148, 9.05398, -0.009138316; 3.0134766, 8.358783, 4.8193374; 0.44469357, 7.860053, 6.9080086; -0.83811045, 7.610076, 7.954162; -1.4467534, 8.359916, 8.60193; -1.9880321, 8.870961, 9.171889; -1.9670352, 7.922342, 8.614237; -4.1322985, 7.9509926, -0.16387466; -5.8581634, 3.3547592, -0.67070544; -4.1639533, 0.63912535, -0.33054954; -3.3168502, -0.7186905, -0.16047263; -3.7102902, -1.9135929, -0.079444304; -3.9066014, -2.9070668, 0.006667897; -3.1686344, -2.0554175, 0.400428\",\n\"0.0, 0.0, 0.0; 1.353364, -1.8899311, 1.0324557; 2.3082452, -9.073517, 1.7751174; 3.7976217, -16.33052, -0.103776455; 2.977173, -17.746119, 1.9224918; 2.446692, -17.291744, 2.9818177; -1.5967928, -1.6696283, 0.98804176; -1.1229923, -8.848102, 1.577683; -0.13840234, -15.846193, -1.6197243; -1.3859428, -17.053804, 0.34297574; -2.0230794, -17.219099, 1.4389474; 0.16040343, 2.494644, -0.099182636; 0.1583452, 5.009837, 0.019657217; -0.061980635, 7.539994, 0.2254597; -0.082439184, 9.104825, 0.5230983; 0.08422488, 10.681411, 0.58535236; -0.20911056, 12.2828665, 0.46218315; 3.8827212, 9.068324, -0.08413422; 3.053092, 8.746005, 4.795529; 0.50388765, 8.424168, 6.942132; -0.76916707, 8.2627945, 8.017215; -1.365547, 9.066716, 8.609119; -1.8958417, 9.625921, 9.143049; -1.8849075, 8.632149, 8.670194; -4.156935, 7.9335446, -0.20141149; -5.877206, 3.333674, -0.6940637; -4.1782827, 0.6208646, -0.35488; -3.3288226, -0.7355386, -0.18528797; -3.7164521, -1.9322553, -0.10303729; -3.907682, -2.926792, -0.017762043; -3.1675115, -2.0736709, 0.36860707\",\n\"0.0, 0.0, 0.0; 1.3541396, -1.8913969, 1.0287482; 2.3094432, -9.077497, 1.7461174; 3.7940714, -16.326422, -0.16740012; 2.992795, -17.745214, 1.8642995; 2.4715443, -17.289549, 2.9276462; -1.5961137, -1.6723713, 0.9844935; -1.1198709, -8.851726, 1.5612984; -0.1587326, -15.851528, -1.6394966; -1.3876798, -17.065287, 0.3311261; -2.0151582, -17.222725, 1.4338062; 0.15763484, 2.4946103, -0.104329035; 0.14758368, 5.010499, -0.0017328858; -0.084969774, 7.541278, 0.18175067; -0.10607259, 9.107061, 0.47429365; 0.06071736, 10.683473, 0.5404956; -0.23420735, 12.285319, 0.4265448; 3.8510334, 9.0865965, -0.15318574; 3.0898256, 9.133632, 4.748001; 0.5664182, 8.987671, 6.9436874; -0.6937628, 8.914377, 8.043271; -1.2772188, 9.76496, 8.580297; -1.7955613, 10.366832, 9.078369; -1.7941917, 9.337109, 8.689828; -4.1830735, 7.910285, -0.23674189; -5.895856, 3.3067045, -0.7207529; -4.1915956, 0.59717584, -0.38212132; -3.3394675, -0.7575877, -0.21280603; -3.7215261, -1.9561031, -0.13067955; -3.9079168, -2.9517121, -0.047222726; -3.1659293, -2.0974622, 0.33311993\",\n\"0.0, 0.0, 0.0; 1.3550192, -1.8925339, 1.0254939; 2.3120723, -9.080774, 1.7186701; 3.7928572, -16.322187, -0.22601974; 3.0072265, -17.744587, 1.809265; 2.4935384, -17.287268, 2.8755777; -1.5953428, -1.6749356, 0.9813788; -1.1151285, -8.855129, 1.5442758; -0.17326653, -15.85586, -1.660219; -1.3859403, -17.07651, 0.31622016; -2.005074, -17.227083, 1.4245614; 0.15732896, 2.494425, -0.10911515; 0.1399994, 5.010866, -0.022255406; -0.107449174, 7.5417447, 0.13903423; -0.13056184, 9.108349, 0.42699748; 0.036243588, 10.684567, 0.49760205; -0.25993317, 12.286811, 0.39284664; 3.818407, 9.107678, -0.21848513; 3.119986, 9.517381, 4.6751466; 0.6276171, 9.546724, 6.9105797; -0.61706007, 9.561216, 8.029991; -1.1877872, 10.452191, 8.512426; -1.6940252, 11.09211, 8.974196; -1.7010423, 10.034667, 8.669137; -4.208605, 7.8822803, -0.2736547; -5.9121766, 3.2748728, -0.75374657; -4.2031775, 0.56857276, -0.4131846; -3.3486776, -0.78457475, -0.24290356; -3.7261934, -1.9846349, -0.16234444; -3.9086707, -2.9811792, -0.081443235; -3.1657352, -2.1262443, 0.29549456\",\n\"0.0, 0.0, 0.0; 1.3549833, -1.8942051, 1.022451; 2.3159697, -9.083872, 1.6950881; 3.7961206, -16.318012, -0.27696276; 3.0237575, -17.745726, 1.7596788; 2.5155454, -17.291218, 2.8298104; -1.5953792, -1.6766033, 0.978467; -1.1054486, -8.857307, 1.5262756; -0.18289489, -15.858843, -1.6820736; -1.3825533, -17.083752, 0.29966664; -1.9946907, -17.22912, 1.4125798; 0.15701923, 2.4942055, -0.11444768; 0.13327783, 5.0110626, -0.042396672; -0.12655121, 7.5418687, 0.09938014; -0.15199772, 9.109056, 0.3839474; 0.014352143, 10.685115, 0.45906034; -0.28313166, 12.287658, 0.36294946; 3.7903433, 9.124676, -0.28137672; 3.1537895, 9.89105, 4.577713; 0.69667125, 10.09356, 6.8429914; -0.5303756, 10.1947565, 7.9772873; -1.0892094, 11.120148, 8.405849; -1.5839539, 11.793554, 8.831003; -1.5980887, 10.716227, 8.606365; -4.230479, 7.8584075, -0.3047685; -5.9182653, 3.2458072, -0.7907114; -4.2048874, 0.5430138, -0.4443509; -3.3481987, -0.8083806, -0.2711717; -3.7230566, -2.0094438, -0.1931875; -3.9032629, -3.0066204, -0.11503626; -3.1602092, -2.151625, 0.26153055\",\n\"0.0, 0.0, 0.0; 1.3556682, -1.8953559, 1.0194058; 2.3214421, -9.086128, 1.6731102; 3.8026824, -16.313515, -0.3227414; 3.0400875, -17.746065, 1.7141844; 2.535721, -17.294376, 2.787325; -1.594779, -1.6788712, 0.97555333; -1.094242, -8.860075, 1.5069839; -0.18627304, -15.861339, -1.7061166; -1.3762469, -17.092106, 0.27783167; -1.983156, -17.229507, 1.3946135; 0.15848346, 2.4937904, -0.121275425; 0.12897491, 5.010963, -0.06388548; -0.14543691, 7.541115, 0.061104506; -0.17204727, 9.108798, 0.34282264; -0.0064125806, 10.684691, 0.4228184; -0.3063382, 12.287278, 0.33542913; 3.761431, 9.144177, -0.33749947; 3.1765146, 10.249105, 4.4625306; 0.7645416, 10.629063, 6.7533703; -0.43993354, 10.819091, 7.9003844; -0.9874637, 11.774373, 8.27449; -1.4711689, 12.47793, 8.66184; -1.491518, 11.387227, 8.516072; -4.2518563, 7.8308673, -0.33778563; -5.919903, 3.2125363, -0.8372688; -4.204232, 0.51245546, -0.4812376; -3.3463984, -0.8375834, -0.30322155; -3.72022, -2.0391574, -0.22818643; -3.8995502, -3.0366926, -0.1526356; -3.1567237, -2.1821766, 0.22546539\",\n\"0.0, 0.0, 0.0; 1.3556888, -1.8971591, 1.0160187; 2.3267744, -9.088843, 1.651567; 3.8083649, -16.309856, -0.36695838; 3.0528045, -17.747845, 1.6687565; 2.551266, -17.29825, 2.7441; -1.594768, -1.6807606, 0.97231156; -1.0832125, -8.862555, 1.4849393; -0.19171941, -15.86284, -1.7348995; -1.3715887, -17.096869, 0.25305355; -1.9728341, -17.2302, 1.3733866; 0.15857813, 2.493418, -0.12858526; 0.121997505, 5.010786, -0.085666195; -0.16690904, 7.5400333, 0.024019442; -0.19557503, 9.108039, 0.3037355; -0.030409798, 10.683722, 0.3887002; -0.3318864, 12.286452, 0.30968678; 3.729525, 9.163315, -0.3943976; 3.1987631, 10.606416, 4.3214307; 0.8419838, 11.157832, 6.6347523; -0.33485568, 11.433701, 7.7929654; -0.872723, 12.414208, 8.111733; -1.3466063, 13.144407, 8.45994; -1.3710515, 12.04619, 8.391992; -4.275917, 7.8032856, -0.36650258; -5.9177303, 3.1778908, -0.88709825; -4.1999745, 0.48077345, -0.51886743; -3.341098, -0.867784, -0.33475423; -3.7157412, -2.0692747, -0.26253635; -3.8957965, -3.0668228, -0.18890554; -3.153772, -2.21318, 0.19272599\",\n\"0.0, 0.0, 0.0; 1.3580407, -1.8970529, 1.0130718; 2.3321023, -9.089778, 1.6320704; 3.8140404, -16.305012, -0.40676796; 3.0652735, -17.749615, 1.6267725; 2.5657492, -17.308142, 2.7064095; -1.5926857, -1.6843603, 0.9694912; -1.0708025, -8.8667965, 1.4623252; -0.1979348, -15.865976, -1.7650093; -1.3688295, -17.099707, 0.22842681; -1.9646378, -17.231544, 1.3518372; 0.15750736, 2.4930174, -0.13736765; 0.114303604, 5.010479, -0.108311355; -0.18796612, 7.5386543, -0.010571204; -0.21773264, 9.10682, 0.26812908; -0.053513154, 10.682307, 0.35839403; -0.35753423, 12.2849655, 0.28814143; 3.698376, 9.180799, -0.44877678; 3.2390378, 10.971352, 4.1540713; 0.93940115, 11.676384, 6.483133; -0.20876682, 12.029195, 7.6492147; -0.73722595, 13.031169, 7.9120617; -1.2009618, 13.785431, 8.220349; -1.2275811, 12.685223, 8.231731; -4.2994704, 7.777737, -0.3902084; -5.9089446, 3.144415, -0.94045055; -4.188505, 0.4512055, -0.55648416; -3.3282866, -0.8953978, -0.3644997; -3.704671, -2.0965276, -0.29540044; -3.8862581, -3.0939283, -0.22355816; -3.1456532, -2.2413568, 0.16319117\",\n\"0.0, 0.0, 0.0; 1.3595842, -1.8980476, 1.0091311; 2.337778, -9.091524, 1.6126976; 3.8198614, -16.3015, -0.44454932; 3.0759218, -17.75285, 1.585957; 2.5773888, -17.322603, 2.6705728; -1.5913209, -1.6878132, 0.96572036; -1.0578108, -8.870772, 1.4380631; -0.20350099, -15.868393, -1.7976091; -1.3654871, -17.099533, 0.2026298; -1.9558076, -17.232525, 1.3287979; 0.15531252, 2.4925683, -0.14763056; 0.10467796, 5.0100164, -0.13293713; -0.2101516, 7.537018, -0.044980258; -0.24051471, 9.105244, 0.23331666; -0.07726118, 10.680493, 0.32929203; -0.38393065, 12.283014, 0.26799154; 3.666262, 9.197012, -0.5034039; 3.2969365, 11.33642, 3.9563959; 1.0550108, 12.183544, 6.29436; -0.0641619, 12.607561, 7.464905; -0.58403707, 13.627375, 7.669892; -1.0379249, 14.40328, 7.936275; -1.0645704, 13.306897, 8.028635; -4.32408, 7.753551, -0.41166592; -5.8969183, 3.1120439, -0.9977043; -4.1734447, 0.42323828, -0.5968526; -3.3117077, -0.9211621, -0.39642686; -3.690868, -2.1216354, -0.331205; -3.8748994, -3.1187315, -0.2613806; -3.1363444, -2.267623, 0.13244629\",\n\"0.0, 0.0, 0.0; 1.3617467, -1.8983159, 1.0057048; 2.3434548, -9.092489, 1.5950891; 3.823885, -16.29819, -0.4782673; 3.0842965, -17.756294, 1.5489868; 2.5869389, -17.334135, 2.6373134; -1.5894021, -1.6914899, 0.9624415; -1.0427575, -8.874835, 1.4134146; -0.20819128, -15.870333, -1.8319856; -1.3635095, -17.09818, 0.1741308; -1.9492512, -17.231977, 1.3025919; 0.1506843, 2.4921978, -0.15829971; 0.09234591, 5.0095215, -0.15709975; -0.23197405, 7.535578, -0.076805785; -0.2611775, 9.103927, 0.2009223; -0.0995238, 10.678971, 0.30278978; -0.41021216, 12.281057, 0.25110894; 3.6357932, 9.209005, -0.5588119; 3.3720906, 11.685686, 3.7306864; 1.1899555, 12.66887, 6.0719604; 0.10083318, 13.16109, 7.244157; -0.41055346, 14.195233, 7.3902407; -0.8543292, 14.990398, 7.613353; -0.87952095, 13.903906, 7.7871203; -4.3483377, 7.7347407, -0.42556697; -5.8782835, 3.0843654, -1.0533547; -4.1524835, 0.3999083, -0.6337991; -3.289585, -0.9423189, -0.42402107; -3.6722395, -2.141896, -0.36284146; -3.8593504, -3.1385527, -0.29495484; -3.1231222, -2.2891397, 0.10680914\",\n\"0.0, 0.0, 0.0; 1.3640074, -1.8982867, 1.0026915; 2.348865, -9.093073, 1.5791882; 3.8290706, -16.294462, -0.50925267; 3.0918965, -17.760054, 1.5134763; 2.594286, -17.352106, 2.6070948; -1.5873901, -1.6950145, 0.9595574; -1.0299597, -8.878845, 1.389075; -0.20976305, -15.871814, -1.8654268; -1.3610709, -17.099186, 0.1432848; -1.9438562, -17.231222, 1.2734826; 0.14377895, 2.4920385, -0.16699068; 0.07563267, 5.0090957, -0.17710863; -0.25883725, 7.534032, -0.1035092; -0.2802503, 9.103256, 0.16995336; -0.11984867, 10.678054, 0.27746361; -0.437474, 12.279094, 0.2366963; 3.5995998, 9.2219305, -0.609253; 3.449993, 12.016988, 3.4856906; 1.3331742, 13.136536, 5.825694; 0.27685547, 13.697113, 6.997213; -0.22562271, 14.742382, 7.082285; -0.65847445, 15.554842, 7.259916; -0.6807186, 14.484914, 7.5169272; -4.377595, 7.7149453, -0.43344188; -5.862608, 3.0562391, -1.1057825; -4.1329193, 0.37736988, -0.6669704; -3.2680755, -0.96206295, -0.44756514; -3.6549315, -2.1605544, -0.39177075; -3.845753, -3.1566985, -0.32674935; -3.1120672, -2.3096395, 0.08452356\",\n\"0.0, 0.0, 0.0; 1.3670917, -1.8979498, 0.9991226; 2.3541083, -9.0933, 1.5648007; 3.832562, -16.291426, -0.53609467; 3.0952759, -17.763084, 1.4821837; 2.597065, -17.363873, 2.5787487; -1.5846379, -1.6995134, 0.9561426; -1.0152212, -8.883656, 1.3641874; -0.21078122, -15.873807, -1.9002837; -1.3593508, -17.096884, 0.11261141; -1.9395577, -17.230007, 1.2440077; 0.13693611, 2.4917638, -0.1765646; 0.05936505, 5.0084705, -0.19879301; -0.28510928, 7.532241, -0.13161668; -0.29979393, 9.102002, 0.13919383; -0.14051831, 10.676449, 0.2533104; -0.4642791, 12.276507, 0.2238003; 3.5634987, 9.234295, -0.6641065; 3.5317652, 12.324622, 3.2156043; 1.4872792, 13.582718, 5.549528; 0.467273, 14.212739, 6.7179346; -0.026173264, 15.265463, 6.742283; -0.44785997, 16.092428, 6.8738623; -0.4662717, 15.045028, 7.2113667; -4.406328, 7.695149, -0.43946853; -5.8424225, 3.0283337, -1.1601043; -4.1096826, 0.35467315, -0.7019855; -3.2433138, -0.9821557, -0.4729272; -3.633971, -2.1797037, -0.42375392; -3.8282213, -3.1754203, -0.36244494; -3.0980797, -2.3306904, 0.059779465\",\n\"0.0, 0.0, 0.0; 1.3695419, -1.8975873, 0.99645156; 2.357968, -9.093529, 1.5520537; 3.8340049, -16.28867, -0.56073046; 3.0955977, -17.765049, 1.4536865; 2.5968513, -17.370907, 2.5518408; -1.5824445, -1.7029897, 0.95358616; -1.0014875, -8.887442, 1.3393015; -0.21377695, -15.874361, -1.9361526; -1.3600959, -17.091852, 0.081406; -1.9378355, -17.2266, 1.2138721; 0.12760472, 2.491462, -0.18747947; 0.039459765, 5.0076876, -0.22157075; -0.3126951, 7.53051, -0.15875584; -0.3202159, 9.100446, 0.111338705; -0.16216731, 10.674497, 0.23241806; -0.49215558, 12.27345, 0.21411015; 3.5266187, 9.243479, -0.72242355; 3.6167138, 12.603323, 2.9254; 1.6519197, 14.001803, 5.247848; 0.671894, 14.702167, 6.410411; 0.18882143, 15.759389, 6.375327; -0.22003466, 16.598715, 6.461189; -0.2333584, 15.579855, 6.8771725; -4.4364486, 7.679346, -0.43850327; -5.821538, 3.004929, -1.208049; -4.0853195, 0.33675694, -0.73147386; -3.2172108, -0.99732745, -0.49318737; -3.6109848, -2.1941688, -0.45238167; -3.8081255, -3.18962, -0.39620233; -3.082231, -2.3474307, 0.03824368\",\n\"0.0, 0.0, 0.0; 1.3725646, -1.897113, 0.99319035; 2.3611088, -9.093665, 1.5406064; 3.8368874, -16.285933, -0.5821196; 3.0952666, -17.767385, 1.4273859; 2.5945368, -17.382425, 2.527892; -1.5797311, -1.7072482, 0.9504657; -0.98592174, -8.891754, 1.3150381; -0.21415329, -15.875599, -1.9707497; -1.3603448, -17.088266, 0.04978478; -1.9366903, -17.223557, 1.1828964; 0.11771942, 2.4911604, -0.19767584; 0.018901587, 5.0068064, -0.2433242; -0.34052393, 7.5287085, -0.18490486; -0.3439064, 9.09814, 0.08818768; -0.1859434, 10.671718, 0.21536545; -0.5189897, 12.27011, 0.20538513; 3.488723, 9.2518, -0.78501904; 3.7012432, 12.85932, 2.612615; 1.8224533, 14.395285, 4.91932; 0.885586, 15.164543, 6.0738907; 0.4136569, 16.223461, 5.9828606; 0.018487722, 17.07262, 6.024965; 0.011069178, 16.086365, 6.513372; -4.466873, 7.664075, -0.4312144; -5.7999573, 2.9830198, -1.2506368; -4.0605755, 0.31984067, -0.7579435; -3.190887, -1.0117482, -0.51159644; -3.5871656, -2.2080388, -0.47990113; -3.786737, -3.2033072, -0.42934674; -3.0660791, -2.3634768, 0.018186778\",\n\"0.0, 0.0, 0.0; 1.3754121, -1.8963107, 0.9907809; 2.3635688, -9.093359, 1.5323424; 3.8390248, -16.283035, -0.59936976; 3.0935957, -17.76907, 1.405339; 2.590849, -17.390337, 2.5070856; -1.5771697, -1.7108946, 0.9481594; -0.96747035, -8.895174, 1.2902775; -0.21339071, -15.87558, -2.0069048; -1.3597796, -17.07941, 0.018795013; -1.9346474, -17.217306, 1.1523432; 0.10697607, 2.490837, -0.20760733; -0.0029250905, 5.005808, -0.26388133; -0.36889336, 7.526849, -0.20900294; -0.36926806, 9.095432, 0.068936706; -0.21037754, 10.66843, 0.20199706; -0.5444075, 12.266646, 0.19916621; 3.4501722, 9.258967, -0.84682655; 3.7825015, 13.099717, 2.2743084; 1.9995141, 14.763428, 4.568421; 1.1107659, 15.596741, 5.7165623; 0.65039134, 16.654922, 5.5729856; 0.26974, 17.511724, 5.5732994; 0.27042076, 16.561787, 6.1291003; -4.497584, 7.6501, -0.41989595; -5.7791147, 2.963006, -1.2857345; -4.035317, 0.3053453, -0.77905154; -3.1634207, -1.0234845, -0.5257101; -3.5609639, -2.2195916, -0.50474775; -3.7619994, -3.214888, -0.46100828; -3.0481634, -2.377182, 0.0011991858\",\n\"0.0, 0.0, 0.0; 1.3776332, -1.8960838, 0.9881255; 2.36481, -9.093624, 1.5249107; 3.8405628, -16.280771, -0.6151042; 3.0904634, -17.770298, 1.3852656; 2.5854974, -17.396122, 2.487554; -1.5751654, -1.7141446, 0.94561833; -0.953048, -8.898315, 1.267027; -0.21323049, -15.875401, -2.0404005; -1.3610059, -17.070631, -0.010397673; -1.9350686, -17.208672, 1.1235408; 0.094604515, 2.4905007, -0.21741822; -0.027408004, 5.004656, -0.28421175; -0.3987766, 7.5249767, -0.23262945; -0.39527196, 9.092471, 0.051368147; -0.23519172, 10.664842, 0.19028808; -0.5701558, 12.262859, 0.19424552; 3.409546, 9.264241, -0.9137726; 3.861462, 13.310091, 1.9199798; 2.1827726, 15.100691, 4.197189; 1.3463812, 15.997613, 5.3367023; 0.89715654, 17.052809, 5.144172; 0.5312595, 17.915117, 5.104828; 0.5434225, 17.004507, 5.7228394; -4.5296645, 7.6379704, -0.40217453; -5.7605715, 2.9454193, -1.3108438; -4.010565, 0.29404616, -0.7927539; -3.135562, -1.0316383, -0.5337081; -3.5336578, -2.227716, -0.5252821; -3.7355986, -3.2231603, -0.4898625; -3.0292046, -2.3880196, -0.011849314\",\n\"0.0, 0.0, 0.0; 1.3800552, -1.8949819, 0.986859; 2.3640184, -9.09333, 1.5186893; 3.8425372, -16.277557, -0.6292058; 3.0859888, -17.770008, 1.3665512; 2.5778456, -17.400822, 2.4690623; -1.572975, -1.716822, 0.94440633; -0.94114894, -8.901033, 1.2453219; -0.21214712, -15.874148, -2.0728617; -1.3622447, -17.06241, -0.040084124; -1.9363194, -17.20247, 1.0936005; 0.0822515, 2.490143, -0.22635508; -0.0511527, 5.003456, -0.3024012; -0.42653725, 7.523244, -0.25396684; -0.41809997, 9.089291, 0.03780377; -0.25667757, 10.661024, 0.18227702; -0.59275556, 12.258784, 0.19184631; 3.3710604, 9.267378, -0.9809898; 3.9435136, 13.483366, 1.5687219; 2.3755727, 15.404766, 3.818101; 1.5947149, 16.367203, 4.943485; 1.1543944, 17.416702, 4.704784; 0.8016019, 18.28188, 4.6272635; 0.8289167, 17.412613, 5.3017454; -4.5592093, 7.6283507, -0.379355; -5.7392316, 2.9300804, -1.3252176; -3.9830513, 0.28441048, -0.79892623; -3.1049635, -1.0384238, -0.5357815; -3.5034027, -2.2344024, -0.5415861; -3.7061317, -3.2299829, -0.5158168; -3.0077868, -2.3980656, -0.02066335\",\n\"0.0, 0.0, 0.0; 1.3824214, -1.8942434, 0.9849632; 2.3639336, -9.093211, 1.5129261; 3.8435583, -16.274797, -0.6430268; 3.081153, -17.769192, 1.3490436; 2.5706468, -17.400686, 2.4506907; -1.5708301, -1.7197802, 0.9425921; -0.9288055, -8.903872, 1.2241516; -0.21034157, -15.872976, -2.104736; -1.3631421, -17.05313, -0.06876874; -1.9373741, -17.195135, 1.0645941; 0.07124966, 2.4897726, -0.23403071; -0.07287162, 5.002249, -0.31778622; -0.4530078, 7.521353, -0.27086577; -0.43858382, 9.085811, 0.029079258; -0.2747157, 10.656792, 0.17887774; -0.61104655, 12.2544565, 0.19390875; 3.3325205, 9.271733, -1.0443374; 4.0278654, 13.634817, 1.2102767; 2.5824661, 15.682482, 3.4301453; 1.8630304, 16.708143, 4.5405245; 1.4273682, 17.74873, 4.258237; 1.084615, 18.613855, 4.143866; 1.1334146, 17.7883, 4.870069; -4.587038, 7.6175528, -0.3501917; -5.716073, 2.9131331, -1.3272111; -3.954154, 0.2722051, -0.7963063; -3.0731957, -1.0482572, -0.53085387; -3.470938, -2.244299, -0.55177355; -3.6737022, -3.2400823, -0.5360981; -2.9854174, -2.4110389, -0.02238679\",\n\"0.0, 0.0, 0.0; 1.3853599, -1.892626, 0.9839429; 2.364573, -9.092069, 1.5096946; 3.8455822, -16.271545, -0.652323; 3.075795, -17.767477, 1.3357502; 2.5621562, -17.401274, 2.4367085; -1.5681598, -1.7227496, 0.9416154; -0.9157945, -8.906587, 1.2053374; -0.20845544, -15.8717785, -2.1341066; -1.3642972, -17.04334, -0.09490466; -1.9387934, -17.186766, 1.0381457; 0.05956351, 2.4894993, -0.24012461; -0.09478592, 5.001166, -0.32973593; -0.47790608, 7.5198355, -0.28375208; -0.45691025, 9.082524, 0.024900854; -0.2905489, 10.652803, 0.17924707; -0.62715274, 12.250364, 0.19855793; 3.295609, 9.273782, -1.1062927; 4.1211257, 13.757748, 0.84712934; 2.8112884, 15.927338, 3.035081; 2.1597664, 17.014027, 4.1292205; 1.7236621, 18.042397, 3.8058336; 1.3869835, 18.904463, 3.65586; 1.4636178, 18.124605, 4.4286757; -4.612722, 7.6101093, -0.31379512; -5.692127, 2.9000974, -1.3195369; -3.924111, 0.26412582, -0.7842873; -3.0401032, -1.053858, -0.5166627; -3.4360611, -2.2501016, -0.55369306; -3.6379745, -3.2461705, -0.5490559; -2.9602578, -2.4202394, -0.016621232\",\n\"0.0, 0.0, 0.0; 1.3875191, -1.8919185, 0.98225963; 2.3641658, -9.0917635, 1.5072789; 3.8482113, -16.268698, -0.66109014; 3.071112, -17.766054, 1.3230618; 2.5540729, -17.404284, 2.423894; -1.5661933, -1.7254161, 0.9400048; -0.9043707, -8.909013, 1.1861255; -0.20650595, -15.870548, -2.1629212; -1.3644886, -17.033316, -0.119903564; -1.9390358, -17.179852, 1.0127227; 0.04875952, 2.48925, -0.24509358; -0.11552492, 5.0000954, -0.3399131; -0.5018264, 7.5182953, -0.29484516; -0.4742766, 9.079185, 0.02228263; -0.30578053, 10.648835, 0.18065462; -0.6431323, 12.246189, 0.203701; 3.2584748, 9.275923, -1.1684551; 4.217145, 13.853352, 0.4842353; 3.057602, 16.14325, 2.634061; 2.481327, 17.290115, 3.708826; 2.0396433, 18.303047, 3.3466213; 1.7049024, 19.159153, 3.1621335; 1.8151747, 18.42693, 3.9763715; -4.6368256, 7.602401, -0.27340633; -5.671132, 2.8881235, -1.3061917; -3.8967328, 0.25709748, -0.7677422; -3.0095353, -1.0584149, -0.4985183; -3.4037411, -2.2546158, -0.5519793; -3.604941, -3.2508187, -0.5584433; -2.938783, -2.4282377, -0.006589353\",\n\"0.0, 0.0, 0.0; 1.3897607, -1.8906225, 0.98158574; 2.3629363, -9.090969, 1.5061681; 3.849494, -16.265839, -0.6673095; 3.0648894, -17.763834, 1.3134038; 2.544689, -17.403126, 2.4130945; -1.564147, -1.7276222, 0.9393601; -0.8939319, -8.91096, 1.1698108; -0.20457041, -15.868971, -2.1883118; -1.3660696, -17.022366, -0.14197946; -1.9413275, -17.171244, 0.98998034; 0.036796715, 2.4890113, -0.24956362; -0.13817772, 4.998975, -0.34851182; -0.5273669, 7.516735, -0.30372483; -0.49476108, 9.076149, 0.02011326; -0.3238135, 10.645262, 0.18116102; -0.66066396, 12.242673, 0.20736556; 3.2189863, 9.277653, -1.229101; 4.317748, 13.919564, 0.13055503; 3.3222194, 16.326859, 2.2338347; 2.8280134, 17.53239, 3.2850084; 2.3754766, 18.526834, 2.886761; 2.0380719, 19.374123, 2.669358; 2.1863196, 18.69047, 3.5190263; -4.6618643, 7.5952535, -0.22946961; -5.6534004, 2.8783398, -1.291746; -3.872581, 0.2529695, -0.7469216; -2.9821725, -1.0597137, -0.47450894; -3.3732388, -2.2560472, -0.5452575; -3.5725372, -3.2524805, -0.56382036; -2.917934, -2.4335618, 0.0069821477\",\n\"0.0, 0.0, 0.0; 1.3905401, -1.8903981, 0.980914; 2.362215, -9.090862, 1.5066648; 3.8509917, -16.263664, -0.6721127; 3.0579047, -17.761848, 1.3050756; 2.534174, -17.40353, 2.4038718; -1.5634364, -1.7286144, 0.9387171; -0.8823975, -8.91143, 1.1531696; -0.20331508, -15.866098, -2.2139597; -1.3676522, -17.009655, -0.16372299; -1.943202, -17.160393, 0.96784234; 0.02498633, 2.4887521, -0.2535798; -0.16093439, 4.9978004, -0.35572574; -0.5527501, 7.5151377, -0.310071; -0.5148758, 9.073271, 0.019307077; -0.3418171, 10.641971, 0.18211177; -0.67873466, 12.23932, 0.21111436; 3.179485, 9.279281, -1.2850244; 4.426903, 13.957682, -0.20808434; 3.6043255, 16.477646, 1.8371732; 3.1966157, 17.739428, 2.8590302; 2.7305155, 18.714209, 2.4290738; 2.3878255, 19.551126, 2.1818163; 2.5755465, 18.914831, 3.0599883; -4.686093, 7.5885735, -0.18423802; -5.641112, 2.870709, -1.2753544; -3.8528814, 0.25148797, -0.725234; -2.9587677, -1.0581213, -0.45017448; -3.3465998, -2.2543619, -0.53819394; -3.5438855, -3.2508903, -0.5690632; -2.9001656, -2.4361835, 0.019856751\",\n\"0.0, 0.0, 0.0; 1.3921351, -1.8896683, 0.98005754; 2.3621747, -9.090255, 1.5071468; 3.8516376, -16.261473, -0.67636895; 3.0515842, -17.759573, 1.2980744; 2.5251656, -17.402723, 2.3960633; -1.5619774, -1.7303774, 0.93789744; -0.87437636, -8.912949, 1.1391972; -0.20335686, -15.864862, -2.2352285; -1.3699793, -17.00072, -0.18201256; -1.945782, -17.152557, 0.94927704; 0.012090334, 2.4885612, -0.25638103; -0.18539995, 4.9966187, -0.36110973; -0.5798681, 7.5135365, -0.31514633; -0.53662074, 9.070259, 0.020189732; -0.3609076, 10.638505, 0.1845227; -0.69723165, 12.235926, 0.21632683; 3.1365614, 9.280528, -1.343838; 4.539271, 13.969569, -0.5384945; 3.8976886, 16.592552, 1.4409637; 3.5804777, 17.90573, 2.4296281; 3.101693, 18.861599, 1.9720407; 2.7542825, 19.688103, 1.6978099; 2.9810765, 19.097345, 2.5982914; -4.711231, 7.5819087, -0.13371417; -5.6343374, 2.863998, -1.2517685; -3.838612, 0.25090122, -0.69695497; -2.9407516, -1.0556458, -0.41954762; -3.3252702, -2.2516122, -0.52425104; -3.5204434, -3.248112, -0.5671405; -2.8869348, -2.4378517, 0.038742125\",\n\"0.0, 0.0, 0.0; 1.3927978, -1.8892223, 0.97997576; 2.362176, -9.08978, 1.5086715; 3.853763, -16.259064, -0.6797404; 3.046786, -17.757654, 1.2915106; 2.517324, -17.40433, 2.3891768; -1.5613694, -1.7309687, 0.9378189; -0.8661837, -8.913158, 1.1262668; -0.20193517, -15.862209, -2.2553878; -1.3700778, -16.991455, -0.19939089; -1.9459045, -17.14454, 0.9317181; -0.0015129228, 2.4881396, -0.2607163; -0.21128847, 4.9950786, -0.36830223; -0.60810345, 7.5115967, -0.3207103; -0.55935156, 9.066353, 0.022888958; -0.38089794, 10.6341095, 0.18892293; -0.71658593, 12.231619, 0.2228927; 3.0923362, 9.281452, -1.4008381; 4.6570606, 13.95697, -0.8582073; 4.19994, 16.67097, 1.0484047; 3.9749546, 18.029518, 2.000373; 3.487585, 18.969713, 1.5199437; 3.1386719, 19.787483, 1.2224269; 3.40142, 19.237635, 2.1389022; -4.736792, 7.5754037, -0.084895; -5.6331787, 2.8583179, -1.2278914; -3.829357, 0.25173974, -0.66869724; -2.9274468, -1.0515476, -0.38910127; -3.3091493, -2.246871, -0.5101702; -3.5025318, -3.2431254, -0.5651613; -2.8775437, -2.4380932, 0.05633831\",\n\"0.0, 0.0, 0.0; 1.393478, -1.888696, 0.9800233; 2.3614008, -9.089332, 1.5103328; 3.8533177, -16.257545, -0.681355; 3.0404313, -17.755552, 1.2879114; 2.5088456, -17.402002, 2.3844776; -1.5607458, -1.7315061, 0.93786496; -0.8593262, -8.913358, 1.1157887; -0.20247298, -15.859865, -2.2725306; -1.3723598, -16.980873, -0.21302056; -1.9482822, -17.135841, 0.91778314; -0.015788278, 2.4877288, -0.2641428; -0.23836471, 4.993488, -0.3734853; -0.63753253, 7.509589, -0.32359013; -0.58535165, 9.062396, 0.028224736; -0.4049173, 10.629813, 0.19532573; -0.73989356, 12.22744, 0.23079461; 3.0462992, 9.282557, -1.4542046; 4.7761374, 13.922506, -1.1681786; 4.5068083, 16.713411, 0.66164124; 4.375714, 18.110256, 1.574961; 3.886505, 19.039768, 1.0759703; 3.541785, 19.851772, 0.75844574; 3.836807, 19.337063, 1.6854479; -4.762847, 7.5687914, -0.0337103; -5.634068, 2.8523283, -1.198528; -3.823046, 0.25126648, -0.6369274; -2.9175363, -1.0492635, -0.35612822; -3.2972248, -2.2437015, -0.49143285; -3.489459, -3.239546, -0.5568787; -2.8719668, -2.439441, 0.07832521\",\n\"0.0, 0.0, 0.0; 1.3934476, -1.8887098, 0.98004; 2.3626347, -9.089027, 1.5123467; 3.8538527, -16.256386, -0.6826136; 3.0364652, -17.754532, 1.2846833; 2.502901, -17.407078, 2.382237; -1.5607736, -1.7314724, 0.937881; -0.85465205, -8.913072, 1.1071851; -0.2029525, -15.857623, -2.2861323; -1.3738271, -16.971647, -0.22339678; -1.9497056, -17.128706, 0.9071411; -0.029282937, 2.4872642, -0.2673447; -0.2646268, 4.9918165, -0.37758803; -0.66683835, 7.5073566, -0.3239678; -0.6145216, 9.058481, 0.03516963; -0.43370506, 10.625891, 0.20192896; -0.7684594, 12.223556, 0.23775364; 2.9992697, 9.285062, -1.5036852; 4.9041424, 13.864681, -1.4609507; 4.819327, 16.719063, 0.28697324; 4.7804637, 18.147469, 1.1591294; 4.298932, 19.072796, 0.64511865; 3.9664946, 19.883, 0.3103643; 4.2886505, 19.395958, 1.2432646; -4.7880945, 7.560652, 0.019774169; -5.6398087, 2.8453774, -1.1641258; -3.8206244, 0.25039458, -0.60078526; -2.9110346, -1.0470963, -0.31911537; -3.2896307, -2.2403848, -0.46703374; -3.4814591, -3.2356596, -0.5416895; -2.8704627, -2.4403882, 0.105748296\",\n\"0.0, 0.0, 0.0; 1.3935364, -1.8884895, 0.9803376; 2.3641467, -9.088465, 1.514677; 3.853363, -16.255383, -0.6830764; 3.0323846, -17.752686, 1.2833657; 2.4977083, -17.407587, 2.3811214; -1.5606929, -1.731391, 0.93816537; -0.8490193, -8.912632, 1.0992402; -0.20302558, -15.8554, -2.2988153; -1.3744674, -16.963306, -0.23310947; -1.9501255, -17.122269, 0.8972746; -0.04385236, 2.4868279, -0.26940405; -0.29247046, 4.990115, -0.3792388; -0.6970756, 7.5051746, -0.3212732; -0.64477587, 9.055325, 0.042051405; -0.4638285, 10.622886, 0.20722978; -0.79846084, 12.220568, 0.24343729; 2.9503598, 9.286911, -1.5516992; 5.039602, 13.781735, -1.738526; 5.137006, 16.687363, -0.07787311; 5.189194, 18.14119, 0.7504829; 4.724706, 19.067951, 0.2235375; 4.4127026, 19.879593, -0.12702581; 4.7585425, 19.413548, 0.80811775; -4.813323, 7.5534754, 0.07863498; -5.646505, 2.8392186, -1.1223809; -3.8191776, 0.24967694, -0.56035846; -2.9055154, -1.0450926, -0.2793477; -3.2846453, -2.2369347, -0.43722472; -3.47737, -3.2314718, -0.5190585; -2.8710449, -2.4407413, 0.13825738\",\n\"0.0, 0.0, 0.0; 1.3933939, -1.8886566, 0.98021847; 2.3668962, -9.088141, 1.5159024; 3.8550153, -16.254656, -0.68390906; 3.031045, -17.752254, 1.2810562; 2.4948783, -17.414389, 2.380334; -1.560823, -1.7313354, 0.9380517; -0.8404573, -8.911873, 1.0916616; -0.20407963, -15.852705, -2.312158; -1.3734989, -16.950169, -0.23974204; -1.9474931, -17.113134, 0.89091814; -0.05853351, 2.486441, -0.27018404; -0.32047066, 4.98841, -0.3791036; -0.7272742, 7.50303, -0.31754425; -0.6754199, 9.051914, 0.051201433; -0.4945342, 10.619669, 0.2146037; -0.8290356, 12.217397, 0.24999253; 2.9013813, 9.288199, -1.5975217; 5.1797647, 13.675381, -2.0035982; 5.458197, 16.619007, -0.43278122; 5.60083, 18.091625, 0.35052162; 5.161771, 19.024624, -0.18711048; 4.877041, 19.840181, -0.55152535; 5.241491, 19.386816, 0.38278264; -4.837907, 7.5467405, 0.13692275; -5.656762, 2.83386, -1.0792503; -3.8204098, 0.2497127, -0.52183354; -2.9022346, -1.0423596, -0.24312693; -3.2826123, -2.2329106, -0.40760565; -3.4769351, -3.2267866, -0.49358895; -2.875894, -2.4389303, 0.17197928\",\n\"0.0, 0.0, 0.0; 1.3935711, -1.8879024, 0.9814188; 2.3718796, -9.086465, 1.5207372; 3.858275, -16.25345, -0.67870307; 3.0289867, -17.752247, 1.2831098; 2.4901066, -17.423458, 2.3838117; -1.5606608, -1.7308589, 0.9392002; -0.83167654, -8.910697, 1.0846174; -0.1991306, -15.848533, -2.3260193; -1.3706465, -16.936098, -0.24957347; -1.9449501, -17.099354, 0.8808876; -0.07268423, 2.485879, -0.27191418; -0.34700957, 4.9865694, -0.3796951; -0.7553072, 7.500831, -0.31356633; -0.7023198, 9.048453, 0.060283422; -0.52178764, 10.616516, 0.22110187; -0.8572651, 12.214091, 0.25404146; 2.8556669, 9.28905, -1.638501; 5.325985, 13.546702, -2.2494097; 5.784786, 16.513842, -0.7676822; 6.017507, 17.998003, -0.029021502; 5.6118236, 18.939825, -0.5773833; 5.3610144, 19.76009, -0.9558842; 5.740983, 19.313751, -0.024379134; -4.8600616, 7.540902, 0.19154447; -5.676572, 2.8288307, -1.029335; -3.8280897, 0.25176024, -0.47929788; -2.9038503, -1.0367742, -0.20428061; -3.286643, -2.225929, -0.3731984; -3.4834702, -3.2190876, -0.46173406; -2.8860688, -2.4337192, 0.21002239\",\n\"0.0, 0.0, 0.0; 1.3933815, -1.8881112, 0.9812864; 2.3767748, -9.085773, 1.5233731; 3.860572, -16.253613, -0.67504406; 3.029636, -17.75235, 1.2861156; 2.489902, -17.430504, 2.3884497; -1.560834, -1.7307715, 0.9390731; -0.8340642, -8.910859, 1.0832508; -0.19585937, -15.847155, -2.329463; -1.3686275, -16.933393, -0.25303006; -1.9437735, -17.098719, 0.8767017; -0.08700082, 2.4856381, -0.26990414; -0.37449294, 4.9850073, -0.37394893; -0.78536665, 7.4987173, -0.30297458; -0.7308352, 9.045167, 0.07547447; -0.55039775, 10.613549, 0.23325595; -0.8868246, 12.210978, 0.26354134; 2.8064528, 9.291716, -1.6727567; 5.465829, 13.399963, -2.4810278; 6.111827, 16.375927, -1.0895339; 6.43804, 17.864286, -0.39607477; 6.068199, 18.815512, -0.95347655; 5.852883, 19.639948, -1.3445622; 6.2464333, 19.194883, -0.4181006; -4.88359, 7.5332475, 0.25301224; -5.7126317, 2.8217058, -0.96144766; -3.8486242, 0.2520888, -0.42922103; -2.9166212, -1.032718, -0.16310877; -3.3014424, -2.2211852, -0.3322573; -3.5002189, -3.2139912, -0.4203938; -2.9041848, -2.4291332, 0.25317153\",\n\"0.0, 0.0, 0.0; 1.3927158, -1.8880711, 0.98230827; 2.3824887, -9.084787, 1.5253303; 3.8638897, -16.253466, -0.671967; 3.0309916, -17.75287, 1.2878511; 2.4900193, -17.44025, 2.392232; -1.5614431, -1.7296906, 0.9400517; -0.83059907, -8.909413, 1.0818012; -0.19460446, -15.843575, -2.33566; -1.3661458, -16.922043, -0.2544899; -1.9404933, -17.09191, 0.8749745; -0.099554956, 2.4854045, -0.26770917; -0.39933926, 4.983536, -0.36667225; -0.81366736, 7.4964895, -0.28929508; -0.7578305, 9.041493, 0.094825774; -0.5775029, 10.610249, 0.24897982; -0.9149014, 12.20755, 0.27480388; 2.7601388, 9.296632, -1.6963173; 5.6021566, 13.23782, -2.692943; 6.443509, 16.205093, -1.3901232; 6.8672833, 17.688898, -0.7410836; 6.534378, 18.649153, -1.3062339; 6.354929, 19.47666, -1.708769; 6.760758, 19.028305, -0.78921604; -4.9057093, 7.5236397, 0.31087792; -5.7522597, 2.812573, -0.8933021; -3.873684, 0.2488451, -0.38440782; -2.9343975, -1.0330174, -0.12996048; -3.3209968, -2.2212942, -0.29636943; -3.5212204, -3.2140024, -0.3823034; -2.9236188, -2.4285803, 0.28921214\",\n\"0.0, 0.0, 0.0; 1.3919369, -1.8884406, 0.98270196; 2.3880684, -9.084154, 1.527381; 3.8655972, -16.254517, -0.66701937; 3.0318046, -17.752695, 1.2933546; 2.4909, -17.44043, 2.3978686; -1.5621561, -1.7288421, 0.9404281; -0.8272947, -8.908143, 1.0827521; -0.19407707, -15.840618, -2.3386407; -1.3639169, -16.911942, -0.25282836; -1.937237, -17.085848, 0.8765433; -0.11146825, 2.4852881, -0.2640687; -0.4225986, 4.982271, -0.3567927; -0.8395759, 7.494566, -0.2725451; -0.78194755, 9.038131, 0.11705738; -0.60251284, 10.607315, 0.26784888; -0.9421348, 12.204214, 0.28903383; 2.718689, 9.301247, -1.7102427; 5.7416053, 13.0577965, -2.8736863; 6.7836494, 16.001486, -1.6658937; 7.30762, 17.473286, -1.0644182; 7.010295, 18.440235, -1.6379294; 6.865025, 19.268505, -2.052499; 7.2832794, 18.815388, -1.140883; -4.9259467, 7.515445, 0.3653353; -5.7928367, 2.8046079, -0.82519346; -3.9008408, 0.24507594, -0.3457475; -2.954845, -1.034689, -0.106023535; -3.3424716, -2.2233253, -0.26739824; -3.5430956, -3.2162187, -0.35020223; -2.9399214, -2.4296637, 0.3149753\",\n\"0.0, 0.0, 0.0; 1.3920097, -1.8878814, 0.9836723; 2.3927565, -9.0829, 1.5290748; 3.8672042, -16.255186, -0.6611115; 3.032417, -17.753145, 1.2990084; 2.490925, -17.446815, 2.404896; -1.5620892, -1.7283973, 0.9413566; -0.8258559, -8.907498, 1.0866311; -0.19283223, -15.838593, -2.337597; -1.3614881, -16.906809, -0.24952817; -1.9342252, -17.083466, 0.8797121; -0.120808184, 2.4853406, -0.25942597; -0.44268498, 4.9812384, -0.34434307; -0.86607075, 7.4921794, -0.25209016; -0.80696964, 9.034132, 0.14362952; -0.6285049, 10.6038, 0.2904961; -0.97078323, 12.200202, 0.30539775; 2.6768553, 9.311702, -1.711312; 5.878334, 12.867794, -3.0182247; 7.1243267, 15.773441, -1.9161155; 7.750089, 17.226006, -1.3674917; 7.486153, 18.198725, -1.9475479; 7.37238, 19.026804, -2.372217; 7.8009143, 18.565672, -1.4694366; -4.94786, 7.500314, 0.41475463; -5.8399954, 2.790525, -0.7611836; -3.9369316, 0.23296714, -0.3162491; -2.9853997, -1.0458095, -0.09378299; -3.3728478, -2.2355795, -0.2470276; -3.5724866, -3.2290573, -0.32506457; -2.960327, -2.440107, 0.32897428\",\n\"0.0, 0.0, 0.0; 1.3904064, -1.8885337, 0.98468745; 2.3974402, -9.082563, 1.5315665; 3.867291, -16.2575, -0.6530212; 3.0331686, -17.754774, 1.3079035; 2.4920564, -17.452282, 2.4150329; -1.5635549, -1.7265415, 0.942328; -0.82742697, -8.90553, 1.0936077; -0.19477224, -15.835896, -2.3321626; -1.3615507, -16.89951, -0.24069715; -1.9334128, -17.080238, 0.8883426; -0.13096592, 2.485481, -0.25307298; -0.46356773, 4.98028, -0.32842997; -0.89090204, 7.4902143, -0.22740613; -0.8320887, 9.030667, 0.17415313; -0.6550908, 10.600844, 0.3172957; -0.99948555, 12.196837, 0.32603687; 2.6393702, 9.319715, -1.7047083; 6.0093346, 12.660553, -3.148807; 7.464447, 15.507659, -2.1555483; 8.194582, 16.930752, -1.6613603; 7.9629283, 17.907894, -2.2477374; 7.879214, 18.734413, -2.6823187; 8.317574, 18.26348, -1.7893696; -4.9683747, 7.4892907, 0.46538997; -5.885201, 2.7807894, -0.6966294; -3.9742668, 0.22305799, -0.28789768; -3.0188017, -1.0558066, -0.08353141; -3.405128, -2.2472405, -0.22632454; -3.6027596, -3.2415712, -0.29838026; -2.979252, -2.4493032, 0.3407588\",\n\"0.0, 0.0, 0.0; 1.3904392, -1.8881938, 0.9852931; 2.400823, -9.081677, 1.5331659; 3.8668017, -16.259464, -0.64465046; 3.0337148, -17.754223, 1.3186327; 2.493616, -17.449228, 2.4255698; -1.5635251, -1.7262518, 0.9429078; -0.82778704, -8.905121, 1.1015528; -0.19524688, -15.834578, -2.3260765; -1.3599923, -16.892683, -0.2306869; -1.9309212, -17.078354, 0.8980228; -0.1392671, 2.4857125, -0.24627466; -0.4815942, 4.979493, -0.31104195; -0.91516876, 7.487913, -0.19954652; -0.856044, 9.026773, 0.20802993; -0.68038654, 10.597452, 0.34726748; -1.0273665, 12.192908, 0.34919614; 2.6031494, 9.331867, -1.6873577; 6.1164503, 12.450844, -3.2785797; 7.786862, 15.21347, -2.391142; 8.624496, 16.59413, -1.9499347; 8.426356, 17.576124, -2.540474; 8.373197, 18.400904, -2.9830992; 8.819342, 17.915752, -2.1016922; -4.9892964, 7.4736776, 0.5125144; -5.9314656, 2.7672963, -0.6377639; -4.017017, 0.20653105, -0.2661627; -3.0597937, -1.0738502, -0.0803626; -3.4445136, -2.2673922, -0.2092047; -3.6395733, -3.2627928, -0.27302274; -3.0024965, -2.4658885, 0.3466753\",\n\"0.0, 0.0, 0.0; 1.3888956, -1.8886377, 0.98661816; 2.403171, -9.081495, 1.5355179; 3.8657084, -16.261955, -0.6357875; 3.034453, -17.754736, 1.3297758; 2.4954834, -17.449076, 2.43708; -1.5649345, -1.7242807, 0.9441756; -0.8318894, -8.903214, 1.1120644; -0.19758797, -15.832433, -2.3157208; -1.3601876, -16.887907, -0.21781445; -1.9301763, -17.07569, 0.9110215; -0.1479224, 2.4859881, -0.23831943; -0.50016475, 4.9786644, -0.2913534; -0.9387347, 7.485732, -0.16946341; -0.8797951, 9.022799, 0.24485044; -0.7062227, 10.594039, 0.38031662; -1.0564101, 12.188786, 0.3750096; 2.568995, 9.342451, -1.6663743; 6.2041054, 12.235001, -3.4048831; 8.093653, 14.886196, -2.6234107; 9.040702, 16.210953, -2.2353003; 8.879202, 17.19885, -2.8271494; 8.858745, 18.021927, -3.2756257; 9.310632, 17.51663, -2.4085789; -5.009666, 7.4601135, 0.56033903; -5.9740305, 2.7565203, -0.5829297; -4.0599813, 0.19066906, -0.24596551; -3.1029587, -1.0922557, -0.077485114; -3.4854054, -2.2880883, -0.19093606; -3.677287, -3.2846391, -0.24581596; -3.0254798, -2.4826758, 0.35163775\",\n\"0.0, 0.0, 0.0; 1.3881814, -1.8889784, 0.98697126; 2.404861, -9.081445, 1.5365586; 3.8641691, -16.264755, -0.62748456; 3.03524, -17.75446, 1.3413931; 2.4977868, -17.446514, 2.4488013; -1.5655869, -1.723503, 0.94451356; -0.8388658, -8.902788, 1.1244478; -0.19831651, -15.832216, -2.3017507; -1.3604021, -16.887978, -0.2037046; -1.9305577, -17.078718, 0.92455065; -0.15569492, 2.4863253, -0.22969435; -0.51706016, 4.9779253, -0.27052256; -0.96113765, 7.4834642, -0.13762698; -0.9044837, 9.018505, 0.28444564; -0.73354816, 10.590365, 0.4160183; -1.0866864, 12.184415, 0.402731; 2.5371513, 9.3541765, -1.639201; 6.277047, 12.016754, -3.5172706; 8.38258, 14.531107, -2.8429656; 9.437454, 15.787264, -2.508566; 9.317953, 16.783115, -3.0970452; 9.333987, 17.60522, -3.5474775; 9.786687, 17.071735, -2.6979167; -5.029524, 7.4454083, 0.6057019; -6.0161057, 2.745592, -0.5341377; -4.1048026, 0.17356968, -0.23026088; -3.1491518, -1.1124398, -0.07832286; -3.5298512, -2.31043, -0.17340179; -3.719113, -3.3080425, -0.21691331; -3.0525534, -2.5001297, 0.35573313\",\n\"0.0, 0.0, 0.0; 1.3866171, -1.8894407, 0.9882846; 2.40637, -9.08143, 1.5384068; 3.8626523, -16.267555, -0.6183176; 3.0363345, -17.753164, 1.3547469; 2.500846, -17.439194, 2.4614146; -1.5670109, -1.7215188, 0.94577044; -0.846831, -8.901143, 1.1380615; -0.20065033, -15.831179, -2.2858508; -1.360692, -16.887794, -0.18710303; -1.930341, -17.082418, 0.940745; -0.16402465, 2.4865916, -0.22084595; -0.5342642, 4.977072, -0.24830899; -0.98193854, 7.481287, -0.103101045; -0.929129, 9.013893, 0.32821432; -0.76182425, 10.58639, 0.4568228; -1.1182325, 12.179629, 0.4358986; 2.5092537, 9.3642, -1.6059422; 6.3399754, 11.792153, -3.6143978; 8.65306, 14.145996, -3.0496054; 9.811489, 15.321756, -2.7700677; 9.740903, 16.327858, -3.3489356; 9.798424, 17.149693, -3.7964644; 10.246577, 16.578178, -2.9695263; -5.048204, 7.4334574, 0.65118563; -6.0631332, 2.7378826, -0.48121965; -4.153996, 0.16025853, -0.21332425; -3.1994286, -1.1285522, -0.07937743; -3.578567, -2.3284364, -0.15477453; -3.7654846, -3.3269544, -0.18588021; -3.0844064, -2.5129943, 0.36051765\",\n\"0.0, 0.0, 0.0; 1.3852358, -1.890053, 0.9890506; 2.4089956, -9.081473, 1.5391849; 3.8609252, -16.270752, -0.6099473; 3.0381813, -17.753172, 1.3670055; 2.5047855, -17.437843, 2.4742973; -1.5682695, -1.7199689, 0.9465039; -0.85576487, -8.899977, 1.1525939; -0.20374072, -15.830929, -2.2683518; -1.3608588, -16.888763, -0.16860414; -1.9296408, -17.088087, 0.9588604; -0.17142102, 2.486895, -0.21162054; -0.5497452, 4.9762745, -0.22516236; -1.0010844, 7.479027, -0.06668723; -0.9535131, 9.009186, 0.37382856; -0.7902518, 10.582312, 0.49990332; -1.1497699, 12.174747, 0.4721333; 2.483675, 9.374874, -1.5681965; 6.388806, 11.567097, -3.7006593; 8.900335, 13.734756, -3.2496676; 10.15772, 14.81733, -3.0271134; 10.143773, 15.835676, -3.58844; 10.248234, 16.657547, -4.0273247; 10.68611, 16.03672, -3.2309985; -5.0655437, 7.4209733, 0.69656193; -6.112461, 2.7304354, -0.4275651; -4.205315, 0.14795446, -0.19452693; -3.2517428, -1.1432842, -0.07800811; -3.6296036, -2.3447137, -0.13223635; -3.8146136, -3.3439236, -0.14938867; -3.1205301, -2.5235481, 0.3704009\",\n\"0.0, 0.0, 0.0; 1.3843918, -1.8900175, 0.990299; 2.4116263, -9.080959, 1.5401957; 3.8608599, -16.273178, -0.6009066; 3.0429733, -17.752958, 1.3800347; 2.511879, -17.436995, 2.4882512; -1.569036, -1.7186116, 0.94769853; -0.8607327, -8.89865, 1.166786; -0.20574915, -15.830918, -2.2509284; -1.3594071, -16.887993, -0.14889598; -1.9268926, -17.092167, 0.9783541; -0.1780911, 2.4872217, -0.20205262; -0.5631348, 4.9756074, -0.20109992; -1.0169873, 7.4770117, -0.029098898; -0.9753899, 9.00457, 0.42094648; -0.8169045, 10.578409, 0.5441853; -1.1800213, 12.169876, 0.5087381; 2.4633005, 9.384399, -1.5263584; 6.4360604, 11.33408, -3.7667181; 9.130793, 13.294055, -3.4398465; 10.479456, 14.272759, -3.2793536; 10.530467, 15.304169, -3.8140516; 10.687431, 16.125793, -4.23749; 11.105926, 15.445259, -3.4805014; -5.080171, 7.4105306, 0.7402328; -6.158463, 2.7250834, -0.3754369; -4.254685, 0.13731384, -0.17594054; -3.3027966, -1.1565691, -0.07619415; -3.678807, -2.359358, -0.10886792; -3.8615685, -3.3591251, -0.11160609; -3.1558495, -2.5322058, 0.38146007\",\n\"0.0, 0.0, 0.0; 1.3827621, -1.8907603, 0.9911574; 2.4144301, -9.081166, 1.5397692; 3.8596363, -16.276382, -0.59397006; 3.047584, -17.750938, 1.3932571; 2.5201693, -17.426245, 2.5007076; -1.5705152, -1.7168062, 0.94852; -0.86848277, -8.897003, 1.1820889; -0.20668429, -15.83082, -2.231169; -1.3578064, -16.892075, -0.1298523; -1.9245775, -17.096794, 0.99765813; -0.18407586, 2.4874277, -0.19399324; -0.5757956, 4.974723, -0.17842826; -1.0326138, 7.474395, 0.010112777; -0.9994326, 8.999965, 0.46754175; -0.8457662, 10.574575, 0.5869671; -1.2112497, 12.165315, 0.5439842; 2.443143, 9.395759, -1.4797841; 6.4850864, 11.079266, -3.810402; 9.338551, 12.821279, -3.6285753; 10.766203, 13.691075, -3.5404081; 10.889276, 14.734507, -4.0388184; 11.103066, 15.554536, -4.4398785; 11.492368, 14.806079, -3.733088; -5.094636, 7.397776, 0.78461796; -6.2061343, 2.7177877, -0.3213318; -4.3074594, 0.1240263, -0.15353774; -3.3581228, -1.1728528, -0.0696397; -3.732732, -2.376471, -0.08073726; -3.913724, -3.376495, -0.069009095; -3.1965942, -2.5437875, 0.39711526\",\n\"0.0, 0.0, 0.0; 1.3814815, -1.8910626, 0.992366; 2.4181416, -9.080825, 1.540006; 3.859497, -16.279034, -0.5862342; 3.0539773, -17.750223, 1.4061404; 2.5298574, -17.423634, 2.5145974; -1.5716769, -1.7151029, 0.9496764; -0.87429696, -8.895313, 1.1964319; -0.20823568, -15.830851, -2.2124977; -1.3549044, -16.892239, -0.108814955; -1.9198799, -17.099293, 1.0191703; -0.1910592, 2.4877985, -0.18212467; -0.58693916, 4.9743013, -0.15202838; -1.040472, 7.4738073, 0.046386376; -1.0178366, 8.998373, 0.5077876; -0.8703868, 10.573895, 0.62294775; -1.238313, 12.16386, 0.5727524; 2.4382083, 9.396469, -1.434989; 6.5342846, 10.814545, -3.846318; 9.527083, 12.315267, -3.8160007; 11.024051, 13.064561, -3.8033319; 11.22659, 14.115828, -4.2573423; 11.501499, 14.930747, -4.630619; 11.849949, 14.1096735, -3.9858577; -5.1027827, 7.3995132, 0.8196027; -6.243843, 2.7247405, -0.27827096; -4.3516083, 0.12456131, -0.13957593; -3.4054914, -1.1755263, -0.07022737; -3.7775996, -2.3799424, -0.06188713; -3.9560103, -3.3802, -0.0374272; -3.2287695, -2.5423336, 0.40308344\",\n\"0.0, 0.0, 0.0; 1.3805654, -1.8911203, 0.99353015; 2.4226909, -9.080184, 1.5399668; 3.8590045, -16.281433, -0.5793774; 3.0606823, -17.748594, 1.418857; 2.540725, -17.41375, 2.5268111; -1.5725073, -1.7137244, 0.9507901; -0.8797533, -8.893908, 1.2109804; -0.20874459, -15.831396, -2.1930044; -1.3505344, -16.8951, -0.087837934; -1.9136977, -17.106468, 1.0402534; -0.19768155, 2.4881217, -0.1702565; -0.5968406, 4.973877, -0.12536032; -1.0461482, 7.4732924, 0.08353776; -1.0333129, 8.997658, 0.545977; -0.89139384, 10.574071, 0.6557728; -1.2610903, 12.16338, 0.5983125; 2.4364052, 9.396257, -1.3883119; 6.5701094, 10.553474, -3.8735926; 9.679334, 11.789299, -3.99764; 11.234219, 12.4063225, -4.061892; 11.5219, 13.4575815, -4.467359; 11.860671, 14.261599, -4.81057; 12.155759, 13.369417, -4.237654; -5.108878, 7.402701, 0.8548957; -6.2767553, 2.7329912, -0.23630583; -4.3934345, 0.12509656, -0.12358009; -3.4517748, -1.178849, -0.067217514; -3.8213277, -2.3837705, -0.039885238; -3.997193, -3.3841043, -0.0031799823; -3.2598784, -2.541784, 0.41132307\",\n\"0.0, 0.0, 0.0; 1.378273, -1.8920938, 0.994859; 2.4270563, -9.080417, 1.5382814; 3.8602123, -16.284027, -0.5751641; 3.0714955, -17.749392, 1.4281955; 2.5556035, -17.417198, 2.5388446; -1.5745816, -1.7111115, 0.95206213; -0.8849015, -8.891113, 1.2251337; -0.20981634, -15.830753, -2.1736557; -1.3453507, -16.896973, -0.066380024; -1.9060273, -17.112953, 1.0620762; -0.20323503, 2.4884357, -0.15873624; -0.60476136, 4.973485, -0.09848802; -1.0487359, 7.472813, 0.12250304; -1.0454876, 8.997026, 0.5856103; -0.9090892, 10.574337, 0.6893502; -1.2805356, 12.16293, 0.6239315; 2.4390059, 9.395408, -1.3374982; 6.5913777, 10.303362, -3.8941977; 9.792111, 11.247626, -4.165479; 11.392524, 11.719036, -4.3031907; 11.769887, 12.759285, -4.660665; 12.174393, 13.544581, -4.974811; 12.402532, 12.5889225, -4.478863; -5.1121264, 7.4073105, 0.89082277; -6.303889, 2.7423806, -0.19498515; -4.4324484, 0.12506366, -0.10508235; -3.4967294, -1.1835933, -0.060131066; -3.862876, -2.3890858, -0.016804695; -4.0355835, -3.3895645, 0.02964988; -3.2891603, -2.5436978, 0.41992027\",\n\"0.0, 0.0, 0.0; 1.3768859, -1.8925798, 0.9958543; 2.431407, -9.080321, 1.5358647; 3.8596396, -16.28646, -0.57228625; 3.0800982, -17.746958, 1.4382068; 2.5694366, -17.40428, 2.5480874; -1.5758338, -1.7094274, 0.95301497; -0.8899406, -8.889252, 1.2399168; -0.2107181, -15.831796, -2.1521113; -1.3404315, -16.9022, -0.043828487; -1.8988352, -17.120459, 1.0853167; -0.20789069, 2.4887161, -0.14794542; -0.61074036, 4.973139, -0.072579466; -1.0492947, 7.4722347, 0.16147712; -1.0552567, 8.995684, 0.62706614; -0.9242265, 10.573811, 0.7251469; -1.2974269, 12.161633, 0.65152025; 2.4435318, 9.394828, -1.2863196; 6.5956364, 10.064311, -3.9159784; 9.859087, 10.693621, -4.320686; 11.490672, 11.007703, -4.5251255; 11.960065, 12.023934, -4.8401685; 12.430672, 12.781405, -5.1295996; 12.579164, 11.775135, -4.7092824; -5.1132565, 7.411663, 0.9271767; -6.3231926, 2.7511353, -0.15743709; -4.468385, 0.12144208, -0.08586754; -3.5409822, -1.1934026, -0.050082732; -3.9027722, -2.399604, 0.0076978765; -4.071629, -3.400312, 0.06260246; -3.3170857, -2.5511315, 0.42935276\",\n\"0.0, 0.0, 0.0; 1.375354, -1.8931633, 0.9968615; 2.4349403, -9.080425, 1.5333209; 3.8596148, -16.289062, -0.5686879; 3.0894766, -17.74427, 1.4492497; 2.5840328, -17.390387, 2.558002; -1.5772147, -1.7076154, 0.9539787; -0.89443505, -8.887162, 1.2549154; -0.2133587, -15.8329525, -2.130087; -1.3355713, -16.906336, -0.019313574; -1.8908315, -17.12866, 1.1105881; -0.21157806, 2.489071, -0.13629295; -0.6147806, 4.972927, -0.045684256; -1.0474824, 7.4718986, 0.20028755; -1.061349, 8.993475, 0.67179346; -0.93541455, 10.5723, 0.7652093; -1.3107028, 12.1591835, 0.68253237; 2.4522748, 9.393043, -1.2326192; 6.5877013, 9.8388605, -3.9349842; 9.883148, 10.131301, -4.4492188; 11.53055, 10.277105, -4.7086825; 12.092605, 11.254994, -4.991766; 12.628632, 11.974386, -5.2640786; 12.686314, 10.933667, -4.910706; -5.1127276, 7.417598, 0.9596212; -6.3370748, 2.761149, -0.12633824; -4.4995766, 0.119015455, -0.06757536; -3.5808287, -1.2020496, -0.038194045; -3.9383252, -2.40889, 0.031701155; -4.1034894, -3.4098153, 0.093451425; -3.3421848, -2.557929, 0.43936157\",\n\"0.0, 0.0, 0.0; 1.3730435, -1.8939644, 0.9985231; 2.4386477, -9.0806675, 1.530527; 3.8606684, -16.291546, -0.565586; 3.1004717, -17.741749, 1.4597121; 2.600283, -17.377258, 2.567411; -1.5792954, -1.7048008, 0.955569; -0.89908326, -8.88397, 1.2709777; -0.21570432, -15.833218, -2.1064584; -1.3299341, -16.90889, 0.0073759556; -1.8817365, -17.132948, 1.1386281; -0.21435626, 2.489447, -0.12457237; -0.61681014, 4.97278, -0.017748654; -1.0423819, 7.471628, 0.24155381; -1.0663737, 8.991115, 0.71935105; -0.94538134, 10.570583, 0.8083134; -1.321242, 12.156835, 0.71659243; 2.466425, 9.390125, -1.1726444; 6.5723777, 9.625387, -3.945565; 9.866011, 9.565538, -4.544166; 11.512319, 9.535412, -4.846285; 12.16521, 10.460774, -5.1103816; 12.764508, 11.131691, -5.3744206; 12.723218, 10.074102, -5.0725956; -5.1094475, 7.4255238, 0.9916215; -6.3435473, 2.772111, -0.09631145; -4.5253096, 0.11647582, -0.047989275; -3.6161914, -1.2113398, -0.023828477; -3.9690464, -2.418896, 0.05650896; -4.1303086, -3.4201074, 0.12369521; -3.3627326, -2.5659704, 0.4496187\",\n\"0.0, 0.0, 0.0; 1.3716881, -1.8944045, 0.99955046; 2.4398081, -9.081451, 1.5217866; 3.854255, -16.29444, -0.5721899; 3.1120112, -17.738527, 1.4641067; 2.621245, -17.360863, 2.5716069; -1.5805125, -1.7031206, 0.95655227; -0.90898955, -8.882187, 1.2922747; -0.23016381, -15.838009, -2.0725193; -1.3303523, -16.922571, 0.044125557; -1.8759575, -17.148851, 1.1779385; -0.21849017, 2.4898326, -0.10867435; -0.62092286, 4.9722614, 0.017495662; -1.0390995, 7.4709024, 0.29046392; -1.0727965, 8.988335, 0.77416694; -0.9570639, 10.568476, 0.8580422; -1.3340776, 12.153988, 0.75860035; 2.473758, 9.386863, -1.1171033; 6.534156, 9.422381, -3.9658206; 9.788267, 9.002944, -4.6327214; 11.414641, 8.793329, -4.9695926; 12.15365, 9.651811, -5.232622; 12.8117695, 10.263226, -5.501052; 12.667363, 9.206381, -5.2299023; -5.10553, 7.432413, 1.0443952; -6.3534455, 2.7826095, -0.04320693; -4.553369, 0.11441898, -0.008490175; -3.653333, -1.2196752, 0.008866791; -4.0017853, -2.42773, 0.1001728; -4.15942, -3.4290895, 0.17348304; -3.3864355, -2.5725887, 0.4798329\",\n\"0.0, 0.0, 0.0; 1.3694451, -1.8951519, 1.0012087; 2.4419613, -9.082152, 1.5150024; 3.8518393, -16.297064, -0.5754248; 3.1244156, -17.73454, 1.470873; 2.6414974, -17.34265, 2.5768795; -1.5825254, -1.7003574, 0.9581383; -0.9147416, -8.878935, 1.3113115; -0.23741484, -15.839987, -2.0429533; -1.3261678, -16.930916, 0.07633066; -1.8667679, -17.159126, 1.2121524; -0.22053704, 2.4901965, -0.09539205; -0.6206242, 4.9720335, 0.04861577; -1.0295436, 7.4706078, 0.3358484; -1.0748574, 8.986089, 0.82469153; -0.965263, 10.566918, 0.9037016; -1.3434026, 12.151635, 0.79618543; 2.492508, 9.381313, -1.0557964; 6.5148845, 9.158332, -3.9495919; 9.699877, 8.423688, -4.674886; 11.2916, 8.056721, -5.0413065; 12.109742, 8.835951, -5.3165393; 12.821333, 9.378048, -5.5972047; 12.573626, 8.339064, -5.3317823; -5.097081, 7.443333, 1.0842799; -6.3547907, 2.7971692, -0.0075901747; -4.5719357, 0.117378, 0.021852113; -3.680509, -1.222516, 0.03657447; -4.0251083, -2.430926, 0.13731538; -4.179605, -3.4323478, 0.21623945; -3.4031887, -2.5735204, 0.507001\",\n\"0.0, 0.0, 0.0; 1.3676492, -1.8954762, 1.0030476; 2.444911, -9.082281, 1.5096017; 3.8497882, -16.299679, -0.5756022; 3.1360602, -17.730534, 1.4801368; 2.660615, -17.322222, 2.583437; -1.5841328, -1.6978661, 0.9598988; -0.9186323, -8.875827, 1.3295407; -0.2441839, -15.841945, -2.0147724; -1.3219588, -16.936714, 0.108139515; -1.8576338, -17.168365, 1.2455969; -0.21816136, 2.4908202, -0.083876014; -0.61286825, 4.9725246, 0.07635403; -1.0139153, 7.4707823, 0.37711927; -1.0724698, 8.983559, 0.8728862; -0.9701517, 10.565125, 0.94672346; -1.3503406, 12.148636, 0.82913464; 2.520717, 9.377053, -0.9884651; 6.494194, 8.8448515, -3.9093425; 9.591241, 7.836529, -4.6849146; 11.138945, 7.3328667, -5.0766435; 12.026839, 8.021765, -5.375593; 12.784515, 8.485591, -5.6752534; 12.437364, 7.4800262, -5.39308; -5.084564, 7.4537888, 1.1087474; -6.3526015, 2.8116488, 0.011722684; -4.5861015, 0.12103486, 0.039912563; -3.7028532, -1.2242708, 0.05400715; -4.0453963, -2.4325242, 0.1632778; -4.1982603, -3.4337611, 0.24754688; -3.4185853, -2.5735552, 0.5252186\",\n\"0.0, 0.0, 0.0; 1.3663185, -1.8956902, 1.0044558; 2.4476328, -9.0824795, 1.5025297; 3.8494163, -16.301744, -0.57828796; 3.1491919, -17.726171, 1.4865388; 2.680842, -17.302353, 2.587023; -1.585323, -1.6959918, 0.9612462; -0.9214227, -8.873283, 1.346432; -0.24835163, -15.844221, -1.9881039; -1.3156633, -16.942919, 0.13806248; -1.8466873, -17.17723, 1.2771544; -0.21494831, 2.4914045, -0.07426076; -0.6028586, 4.973158, 0.101096734; -0.9947776, 7.471058, 0.4165098; -1.0661317, 8.981194, 0.9186091; -0.9706159, 10.56344, 0.986775; -1.3523134, 12.145796, 0.85896087; 2.553746, 9.37134, -0.92110854; 6.4597435, 8.513323, -3.855435; 9.453302, 7.247471, -4.659272; 10.949229, 6.6151323, -5.0653067; 11.895756, 7.203376, -5.3975215; 12.690351, 7.5807395, -5.721897; 12.250045, 6.623085, -5.4051566; -5.068632, 7.4664025, 1.1302626; -6.347751, 2.8284016, 0.028604746; -4.595224, 0.12867379, 0.057514682; -3.7189605, -1.2211882, 0.0719697; -4.061432, -2.4287019, 0.18934238; -4.214305, -3.4294636, 0.2790606; -3.4312718, -2.5688403, 0.5457727\",\n\"0.0, 0.0, 0.0; 1.3634559, -1.8968418, 1.0061703; 2.4491267, -9.083547, 1.495915; 3.8488078, -16.304722, -0.5796896; 3.1616883, -17.721485, 1.4947902; 2.7003262, -17.280657, 2.591537; -1.5878764, -1.6926692, 0.962887; -0.9231251, -8.869066, 1.3629706; -0.25197452, -15.844769, -1.9619732; -1.3089244, -16.947493, 0.16728306; -1.8353013, -17.183403, 1.308201; -0.2107651, 2.4920208, -0.064999305; -0.5914446, 4.97384, 0.12467953; -0.9738381, 7.4714975, 0.4534253; -1.0574249, 8.979244, 0.96078724; -0.96738, 10.562003, 1.024352; -1.3490493, 12.143644, 0.8879048; 2.5894833, 9.364061, -0.8554903; 6.412166, 8.179644, -3.7859397; 9.285832, 6.6640363, -4.595201; 10.72179, 5.9068823, -5.0041704; 11.714822, 6.385199, -5.3748612; 12.536128, 6.669165, -5.726746; 12.010188, 5.772857, -5.364372; -5.0510798, 7.480636, 1.1475214; -6.340962, 2.8468504, 0.04068601; -4.6020803, 0.1383512, 0.07300669; -3.7326398, -1.2158962, 0.08916813; -4.075883, -2.4224586, 0.21384615; -4.2294445, -3.4226317, 0.30880117; -3.4436817, -2.5618784, 0.56692743\",\n\"0.0, 0.0, 0.0; 1.3618358, -1.8973279, 1.0074465; 2.4517603, -9.083865, 1.4901481; 3.8491855, -16.307083, -0.5798547; 3.1742163, -17.716671, 1.5034835; 2.7194364, -17.258032, 2.5956664; -1.5893202, -1.6906179, 0.9641083; -0.92555064, -8.866276, 1.3788222; -0.25346935, -15.846731, -1.935943; -1.3017281, -16.953316, 0.19560516; -1.8243368, -17.189934, 1.3381073; -0.20514075, 2.4926822, -0.05715807; -0.5771486, 4.974755, 0.14594212; -0.9502795, 7.4719267, 0.48872295; -1.0455976, 8.978612, 0.9971708; -0.9597186, 10.561729, 1.0574963; -1.3399116, 12.143291, 0.91610426; 2.6287036, 9.356916, -0.78799534; 6.355896, 7.8502007, -3.6933572; 9.092436, 6.0920672, -4.487238; 10.459828, 5.213708, -4.8887777; 11.486902, 5.575755, -5.2966385; 12.324467, 5.762323, -5.674372; 11.720992, 4.93819, -5.2645917; -5.03127, 7.4948487, 1.1600956; -6.332981, 2.86523, 0.049680352; -4.6060157, 0.14919591, 0.08799315; -3.7425334, -1.2088194, 0.107149884; -4.088571, -2.4138823, 0.2384281; -4.2444777, -3.4131992, 0.33843908; -3.4556227, -2.5533714, 0.5901389\",\n\"0.0, 0.0, 0.0; 1.3602331, -1.897634, 1.0090343; 2.453673, -9.084101, 1.4847903; 3.850226, -16.309258, -0.5790243; 3.1865783, -17.712414, 1.5122778; 2.7376235, -17.238073, 2.6001563; -1.5907449, -1.6884093, 0.9656278; -0.92752266, -8.863268, 1.3947911; -0.253958, -15.848431, -1.9097407; -1.2933624, -16.959429, 0.22384691; -1.8121848, -17.19761, 1.3677491; -0.19916959, 2.4933171, -0.05015213; -0.5609224, 4.975893, 0.16496474; -0.9220875, 7.473115, 0.5199754; -1.0270864, 8.978461, 1.030479; -0.943794, 10.561822, 1.0879678; -1.3212013, 12.143593, 0.94154096; 2.6744125, 9.345327, -0.7259482; 6.292427, 7.526042, -3.5901146; 8.873745, 5.535687, -4.355107; 10.163554, 4.541273, -4.742463; 11.213123, 4.7817054, -5.1816735; 12.057138, 4.868046, -5.580658; 11.3824, 4.125322, -5.128568; -5.0065866, 7.5150123, 1.1687181; -6.321928, 2.8898964, 0.055603623; -4.60659, 0.16661048, 0.100848205; -3.748921, -1.1950305, 0.12347055; -4.099168, -2.398283, 0.26008224; -4.258594, -3.396635, 0.3641014; -3.4656456, -2.5389762, 0.6102786\",\n\"0.0, 0.0, 0.0; 1.3588502, -1.8977419, 1.0106934; 2.456452, -9.084018, 1.4796987; 3.8515744, -16.311241, -0.5778384; 3.1998858, -17.708344, 1.5212624; 2.756866, -17.22, 2.605371; -1.5919719, -1.6863426, 0.96721554; -0.928421, -8.860359, 1.4097328; -0.25443363, -15.849901, -1.8854413; -1.285341, -16.964237, 0.25052643; -1.8004556, -17.204742, 1.3956176; -0.19127148, 2.494031, -0.04515301; -0.5415246, 4.977263, 0.18113036; -0.89139163, 7.4741216, 0.5497513; -1.0036376, 8.978593, 1.0612903; -0.9217398, 10.562099, 1.1167489; -1.2961612, 12.144275, 0.9670526; 2.722588, 9.334628, -0.6626766; 6.213241, 7.212388, -3.4759881; 8.623281, 5.0048723, -4.2029757; 9.827527, 3.9019337, -4.571526; 10.889702, 4.0187984, -5.0302587; 11.732069, 4.0050616, -5.4416375; 10.990744, 3.3501897, -4.9590654; -4.979451, 7.534058, 1.1741927; -6.3134565, 2.9136453, 0.06375873; -4.6084533, 0.18398929, 0.11536485; -3.7559533, -1.1808373, 0.14116679; -4.1112556, -2.382152, 0.28172192; -4.274898, -3.3795042, 0.38874188; -3.4776392, -2.5247257, 0.630983\",\n\"0.0, 0.0, 0.0; 1.356644, -1.8984114, 1.0123984; 2.457268, -9.084672, 1.4744989; 3.854638, -16.31327, -0.5766741; 3.2141206, -17.705935, 1.5288047; 2.775779, -17.207817, 2.6103659; -1.5939277, -1.6835561, 0.9688469; -0.9320252, -8.856892, 1.4246864; -0.25433725, -15.850861, -1.8603187; -1.2771592, -16.970495, 0.27676487; -1.7889658, -17.212597, 1.4230022; -0.18367055, 2.4946582, -0.041953135; -0.5211189, 4.978788, 0.1937402; -0.85594326, 7.4757833, 0.5751822; -0.9734952, 8.979299, 1.0883381; -0.89169556, 10.562849, 1.1426607; -1.2620294, 12.145754, 0.9905381; 2.7784357, 9.318209, -0.6034086; 6.122698, 6.894884, -3.350534; 8.352925, 4.4928956, -4.033515; 9.467391, 3.292751, -4.3801155; 10.534747, 3.2882285, -4.841678; 11.3699045, 3.1779025, -5.2531934; 10.565097, 2.6142192, -4.7573686; -4.947337, 7.5605454, 1.1743999; -6.301409, 2.9444838, 0.070174575; -4.6052704, 0.20945287, 0.12883803; -3.7572024, -1.1580611, 0.15816943; -4.11884, -2.357152, 0.30153048; -4.287745, -3.353376, 0.4108598; -3.4859314, -2.5022798, 0.65102535\",\n\"0.0, 0.0, 0.0; 1.3549541, -1.8985932, 1.0143185; 2.4596677, -9.0845175, 1.4718595; 3.8580089, -16.314886, -0.57240367; 3.227908, -17.702808, 1.5393405; 2.7940886, -17.195171, 2.6182957; -1.5954199, -1.6810824, 0.97068447; -0.9322818, -8.853506, 1.4389002; -0.2529953, -15.85232, -1.8354385; -1.2682369, -16.974846, 0.3037429; -1.7768047, -17.219126, 1.4509593; -0.17356664, 2.495382, -0.04192842; -0.495729, 4.980862, 0.2008126; -0.8147313, 7.4779377, 0.5950756; -0.9359464, 8.979844, 1.1120753; -0.8533054, 10.563347, 1.1665169; -1.2191153, 12.1471405, 1.0127008; 2.8406734, 9.300532, -0.5488125; 6.025804, 6.58529, -3.2107077; 8.067694, 4.0086737, -3.8444755; 9.088167, 2.7212358, -4.166424; 10.1549635, 2.6003487, -4.6132355; 10.979162, 2.3990183, -5.0121927; 10.113644, 1.9278055, -4.5221605; -4.909221, 7.589263, 1.1682312; -6.2793646, 2.9772844, 0.06677258; -4.596118, 0.23460627, 0.13831016; -3.7544951, -1.1367309, 0.17407934; -4.1230936, -2.3334818, 0.31925064; -4.297773, -3.3285263, 0.4302331; -3.491406, -2.4815512, 0.6697206\",\n\"0.0, 0.0, 0.0; 1.3520511, -1.8997201, 1.0160806; 2.460651, -9.085334, 1.4690759; 3.8618472, -16.31692, -0.5689206; 3.243399, -17.702158, 1.5480237; 2.8136811, -17.19106, 2.6269855; -1.5979841, -1.677669, 0.9723711; -0.9360677, -8.849376, 1.4531376; -0.25317514, -15.853138, -1.8098497; -1.2609661, -16.980724, 0.33019257; -1.7665122, -17.22383, 1.4789932; -0.16224298, 2.4961038, -0.044240784; -0.46786368, 4.9830894, 0.20439686; -0.7694663, 7.4800253, 0.6129752; -0.89502025, 8.980779, 1.1322815; -0.8113896, 10.5642185, 1.187045; -1.1720033, 12.149208, 1.0332814; 2.9074688, 9.280708, -0.49607998; 5.935299, 6.308032, -3.064878; 7.7717886, 3.568365, -3.6406012; 8.689813, 2.19944, -3.933497; 9.7521515, 1.9703983, -4.347363; 10.563694, 1.6858602, -4.7207813; 9.640701, 1.3057418, -4.2572184; -4.866475, 7.620375, 1.1612216; -6.249086, 3.012103, 0.05983007; -4.5824156, 0.2598369, 0.14905557; -3.7490802, -1.1162938, 0.19366883; -4.1246877, -2.3106976, 0.3401996; -4.305186, -3.304557, 0.4524828; -3.4943075, -2.4618273, 0.6917142\",\n\"0.0, 0.0, 0.0; 1.34898, -1.9006909, 1.0183445; 2.4607153, -9.086054, 1.4676185; 3.8658419, -16.318573, -0.5643461; 3.2577314, -17.70085, 1.5575235; 2.831662, -17.184107, 2.6352437; -1.6006879, -1.6738298, 0.97453725; -0.9389316, -8.844732, 1.4673569; -0.25322962, -15.853594, -1.7840712; -1.2526455, -16.984856, 0.35795736; -1.7546687, -17.230974, 1.507661; -0.14896926, 2.496857, -0.048249483; -0.4359436, 4.985593, 0.20505524; -0.718921, 7.4823685, 0.627696; -0.8496585, 8.981892, 1.1492735; -0.7655442, 10.565287, 1.2045767; -1.1211193, 12.151445, 1.0511302; 2.981627, 9.258069, -0.44242018; 5.86273, 6.0607204, -2.9080822; 7.4795074, 3.1732674, -3.4165823; 8.288, 1.7304815, -3.6758535; 9.343197, 1.4035943, -4.039192; 10.141874, 1.0447589, -4.3743863; 9.166348, 0.7521994, -3.9571886; -4.818522, 7.6548734, 1.1466073; -6.212374, 3.049984, 0.04523492; -4.564149, 0.28730202, 0.1532203; -3.7400367, -1.094037, 0.20721233; -4.1224008, -2.2861712, 0.35474697; -4.3084946, -3.2788618, 0.4682291; -3.4938016, -2.4400463, 0.70825577\",\n\"0.0, 0.0, 0.0; 1.3466843, -1.9010886, 1.020638; 2.4609206, -9.086128, 1.4689033; 3.868208, -16.320354, -0.5554793; 3.2712522, -17.69988, 1.5713422; 2.8491163, -17.179512, 2.6488652; -1.6027026, -1.6706197, 0.9767322; -0.9412317, -8.840671, 1.4821701; -0.25299847, -15.854883, -1.7571602; -1.2454784, -16.989513, 0.38631177; -1.7446364, -17.237036, 1.5369608; -0.1348414, 2.4975872, -0.051871806; -0.4013651, 4.98812, 0.20607021; -0.6639186, 7.484832, 0.64205956; -0.80091417, 8.983664, 1.164018; -0.716046, 10.567003, 1.2197661; -1.0655284, 12.154665, 1.06788; 3.0607367, 9.232034, -0.39067602; 5.807761, 5.830213, -2.7326314; 7.19886, 2.8160892, -3.1683242; 7.894893, 1.3099723, -3.3911738; 8.940624, 0.89721805, -3.6884778; 9.726813, 0.47372466, -3.9740715; 8.70608, 0.26261613, -3.620754; -4.7653437, 7.6928368, 1.132771; -6.175362, 3.0916877, 0.036358237; -4.5442667, 0.31958222, 0.1615797; -3.7287192, -1.0664684, 0.22418956; -4.1175146, -2.2562933, 0.3735456; -4.3089128, -3.2477078, 0.48933598; -3.491759, -2.4118576, 0.73133415\",\n\"0.0, 0.0, 0.0; 1.34388, -1.9020113, 1.0226135; 2.461292, -9.086583, 1.470464; 3.8728883, -16.321983, -0.54670405; 3.2868016, -17.700165, 1.584008; 2.8678544, -17.179995, 2.6628704; -1.6051582, -1.6671522, 0.97862273; -0.94390035, -8.8361845, 1.4985859; -0.25323826, -15.856348, -1.7273092; -1.2379816, -16.993568, 0.41835737; -1.7338653, -17.241417, 1.5703512; -0.11919279, 2.498297, -0.055848055; -0.3640827, 4.990575, 0.20664603; -0.60586, 7.486907, 0.656603; -0.7494385, 8.9852295, 1.178253; -0.6636628, 10.568516, 1.2341214; -1.0067276, 12.157773, 1.0843; 3.1428018, 9.204616, -0.33804744; 5.7609825, 5.609629, -2.5345194; 6.92896, 2.4920948, -2.890515; 7.5138283, 0.9342185, -3.0734432; 8.546653, 0.44704646, -3.293093; 9.31968, -0.032290637, -3.5204008; 8.263037, -0.16900542, -3.244522; -4.7085695, 7.731314, 1.118974; -6.1358852, 3.1328106, 0.033903837; -4.5205827, 0.35217237, 0.17379636; -3.712932, -1.0381447, 0.2437425; -4.1079683, -2.225568, 0.39581084; -4.304515, -3.2156043, 0.5147266; -3.485255, -2.382296, 0.75836515\",\n\"0.0, 0.0, 0.0; 1.340933, -1.9027876, 1.0250348; 2.4620047, -9.086671, 1.4747764; 3.877774, -16.323483, -0.53438795; 3.3033226, -17.700054, 1.60053; 2.8879118, -17.17911, 2.680386; -1.607733, -1.6633048, 0.9809399; -0.94552, -8.831099, 1.5165126; -0.25187564, -15.857396, -1.6953585; -1.2288473, -16.998243, 0.45193434; -1.7215236, -17.247517, 1.6049966; -0.10272912, 2.49894, -0.059665304; -0.32517934, 4.9928665, 0.20710988; -0.54579866, 7.4888163, 0.66987705; -0.6942001, 8.986804, 1.1911403; -0.60709554, 10.570005, 1.2473469; -0.9441284, 12.160798, 1.100155; 3.227116, 9.175091, -0.28611124; 5.713948, 5.396446, -2.3210068; 6.6676035, 2.198585, -2.5933125; 7.1456904, 0.6004354, -2.734249; 8.160477, 0.04803419, -2.866046; 8.917974, -0.48046738, -3.0269399; 7.8357644, -0.54873025, -2.8386374; -4.6493263, 7.7711215, 1.1024462; -6.0924244, 3.1740289, 0.032374024; -4.49195, 0.3856399, 0.18757807; -3.6917143, -1.008553, 0.2651798; -4.0922437, -2.1937864, 0.41993976; -4.293321, -3.1825294, 0.54199857; -3.4725795, -2.3511965, 0.7873911\",\n\"0.0, 0.0, 0.0; 1.3385824, -1.9032284, 1.0272869; 2.4651918, -9.08596, 1.4815633; 3.8842483, -16.324818, -0.5178993; 3.3199105, -17.701012, 1.6199579; 2.9072125, -17.183323, 2.702417; -1.6097802, -1.6600492, 0.9830955; -0.94630474, -8.82651, 1.5347054; -0.2490552, -15.858715, -1.6634276; -1.2191818, -17.003662, 0.48478627; -1.7091368, -17.253342, 1.6389195; -0.08692798, 2.4994416, -0.0636365; -0.28683698, 4.994935, 0.20631061; -0.48564523, 7.4906855, 0.67990863; -0.63778865, 8.988578, 1.2003663; -0.5486891, 10.571633, 1.2575566; -0.8793869, 12.164076, 1.1138815; 3.3131702, 9.142201, -0.23322612; 5.63212, 5.1620398, -2.0728087; 6.4089527, 1.9110861, -2.2671213; 6.7988787, 0.28623545, -2.368759; 7.7880435, -0.32412744, -2.4050825; 8.525095, -0.8968989, -2.4927883; 7.4286947, -0.90128905, -2.3969612; -4.589775, 7.81372, 1.076798; -6.0498114, 3.218112, 0.02345848; -4.4646916, 0.42177272, 0.19257462; -3.6721332, -0.9763957, 0.27713284; -4.077544, -2.159433, 0.43593436; -4.2826433, -3.1467955, 0.5623971; -3.4612417, -2.3165126, 0.80913335\",\n\"0.0, 0.0, 0.0; 1.3348547, -1.9044095, 1.0299447; 2.467177, -9.086003, 1.4879953; 3.8898528, -16.326542, -0.5027791; 3.33746, -17.702477, 1.6383623; 2.9282415, -17.186062, 2.7227492; -1.6130185, -1.655391, 0.98563856; -0.94747347, -8.820327, 1.5543101; -0.24685723, -15.858538, -1.629843; -1.2090161, -17.007175, 0.51998425; -1.6956822, -17.258863, 1.6750726; -0.07283934, 2.4998255, -0.0661885; -0.25081792, 4.99673, 0.20605473; -0.42535797, 7.493063, 0.68610495; -0.57891506, 8.990474, 1.2075317; -0.48739997, 10.573368, 1.2653773; -0.8121693, 12.167241, 1.1240625; 3.399878, 9.104032, -0.18834525; 5.532218, 4.9314814, -1.8150706; 6.1435485, 1.6412771, -1.9187835; 6.450895, -0.0033859015, -1.9747661; 7.4040804, -0.6664724, -1.9110284; 8.112883, -1.2800708, -1.9210632; 7.0137672, -1.2231542, -1.919794; -4.528871, 7.8616385, 1.0481591; -6.0083838, 3.2677288, 0.014773726; -4.4383435, 0.46370435, 0.19681756; -3.6533232, -0.9383055, 0.28783917; -4.0629973, -2.1193612, 0.450403; -4.2716274, -3.105489, 0.58066815; -3.4490168, -2.27641, 0.827425\",\n\"0.0, 0.0, 0.0; 1.3325715, -1.9049385, 1.0319213; 2.471009, -9.085248, 1.494916; 3.8976583, -16.327753, -0.48583698; 3.355558, -17.704794, 1.6572232; 2.948815, -17.194439, 2.7454038; -1.6149948, -1.652334, 0.9875297; -0.95010525, -8.815839, 1.5746961; -0.24395013, -15.859736, -1.5956311; -1.1982605, -17.012512, 0.5554788; -1.6817884, -17.266102, 1.7114686; -0.05983615, 2.5001454, -0.067127116; -0.21550901, 4.998269, 0.20758733; -0.3643933, 7.49536, 0.69231695; -0.5183774, 8.993016, 1.2129128; -0.42444134, 10.575765, 1.2708671; -0.74368584, 12.17098, 1.132136; 3.4879217, 9.062132, -0.14267403; 5.421217, 4.7160277, -1.5487435; 5.8738194, 1.3986425, -1.5430434; 6.1018867, -0.2598195, -1.5439336; 7.0068107, -0.9713146, -1.3790191; 7.6772823, -1.6229362, -1.3092995; 6.58672, -1.5055492, -1.3998002; -4.4663463, 7.9125814, 1.0173709; -5.9678316, 3.3203745, 0.008398771; -4.4127393, 0.5089228, 0.20371409; -3.6351953, -0.89680195, 0.3013707; -4.049087, -2.0759487, 0.46707964; -4.26123, -3.060944, 0.60020757; -3.4362974, -2.2337995, 0.84570056\",\n\"0.0, 0.0, 0.0; 1.3311013, -1.904529, 1.0345714; 2.4758759, -9.083451, 1.5034134; 3.9049551, -16.328074, -0.4678254; 3.372031, -17.705765, 1.6771166; 2.967759, -17.19916, 2.7679663; -1.6162614, -1.6495757, 0.9900661; -0.9511853, -8.811674, 1.5939356; -0.23880595, -15.860195, -1.5647; -1.186626, -17.016129, 0.5875846; -1.6676066, -17.27137, 1.7442733; -0.045276124, 2.5004025, -0.068934835; -0.1781348, 4.999701, 0.20706907; -0.30353522, 7.4974823, 0.69487345; -0.4557047, 8.995862, 1.2139189; -0.35885546, 10.578453, 1.2713667; -0.67335665, 12.174775, 1.1345347; 3.5749679, 9.0215025, -0.09689194; 5.31068, 4.527564, -1.2780385; 5.6042, 1.1949589, -1.1456921; 5.7527504, -0.47132444, -1.0828829; 6.597512, -1.2253648, -0.8180986; 7.219597, -1.9107039, -0.66868484; 6.1479626, -1.7346461, -0.84728944; -4.4036303, 7.961069, 0.9778235; -5.929889, 3.3708906, -0.0028100014; -4.3906937, 0.55171895, 0.20663927; -3.6210957, -0.8578645, 0.3113648; -4.0382967, -2.0354338, 0.47996628; -4.253209, -3.019509, 0.615436; -3.4257536, -2.1941996, 0.8586032\",\n\"0.0, 0.0, 0.0; 1.3296025, -1.9047041, 1.0361747; 2.4792998, -9.082662, 1.50774; 3.9073105, -16.329432, -0.45636308; 3.389457, -17.707655, 1.6919261; 2.9904437, -17.203499, 2.7858424; -1.617554, -1.6473855, 0.99160045; -0.95648134, -8.808036, 1.6166656; -0.2407285, -15.862562, -1.5277693; -1.1775274, -17.02389, 0.626436; -1.6538503, -17.28025, 1.7848033; -0.03198295, 2.5005872, -0.069678076; -0.14355141, 5.0007153, 0.2082367; -0.24629998, 7.4988403, 0.69956553; -0.39441958, 8.998345, 1.2165282; -0.29383218, 10.580755, 1.2725425; -0.60375047, 12.1781845, 1.1381989; 3.6544304, 8.982846, -0.05828911; 5.192086, 4.3655066, -1.0169716; 5.322125, 1.0312054, -0.7422881; 5.388907, -0.63613045, -0.6079613; 6.165407, -1.4250236, -0.2515844; 6.7318196, -2.1379924, -0.028299555; 5.6870594, -1.9070115, -0.28602004; -4.343375, 8.005569, 0.9504631; -5.898556, 3.4180355, 0.0034751296; -4.3756695, 0.59079695, 0.22315621; -3.614229, -0.8228216, 0.33299762; -4.0337768, -1.9990464, 0.5051241; -4.2506876, -2.9823973, 0.64265287; -3.419201, -2.1593864, 0.87978566\",\n\"0.0, 0.0, 0.0; 1.3280824, -1.905011, 1.037559; 2.4819088, -9.082225, 1.510362; 3.909341, -16.330584, -0.4482968; 3.4072745, -17.709879, 1.7030497; 3.01369, -17.211147, 2.8014107; -1.618862, -1.6453013, 0.9929255; -0.9643284, -8.804653, 1.6393902; -0.24505764, -15.864624, -1.4919977; -1.169422, -17.031775, 0.6644304; -1.6404301, -17.288647, 1.8248559; -0.016356809, 2.5006425, -0.073029965; -0.10625558, 5.0016603, 0.20473331; -0.18932636, 7.4998055, 0.6996706; -0.33255038, 9.000504, 1.2145464; -0.22825167, 10.582727, 1.2689869; -0.5344212, 12.181114, 1.1374654; 3.7316024, 8.947817, -0.02275294; 5.0802236, 4.2321167, -0.7621268; 5.0368457, 0.91217065, -0.33084688; 5.016879, -0.7481841, -0.11792475; 5.7202015, -1.5624744, 0.3231854; 6.22643, -2.295509, 0.6154121; 5.2145195, -2.0154378, 0.285421; -4.2833524, 8.045177, 0.9170854; -5.8669033, 3.46032, 0.0047837496; -4.362256, 0.62424994, 0.2360058; -3.6099336, -0.79378355, 0.35161626; -4.0318584, -1.9686804, 0.5269712; -4.2508364, -2.9513998, 0.6657345; -3.4138122, -2.1316967, 0.8947023\",\n\"0.0, 0.0, 0.0; 1.3266623, -1.905098, 1.0392148; 2.4839952, -9.081755, 1.5119007; 3.908411, -16.331165, -0.44505918; 3.4245272, -17.711777, 1.7096075; 3.0377612, -17.218075, 2.812653; -1.6200824, -1.6431417, 0.9945098; -0.9718905, -8.801006, 1.6634433; -0.25197405, -15.866623, -1.4550335; -1.1612203, -17.039879, 0.70450735; -1.6255258, -17.297895, 1.8673776; -0.0018681969, 2.500594, -0.07642334; -0.07095699, 5.002433, 0.19989511; -0.1341874, 7.500985, 0.6957083; -0.2715822, 9.003409, 1.207126; -0.16257393, 10.585365, 1.2601033; -0.464081, 12.184974, 1.1327246; 3.8046782, 8.913009, 1.1968613E-4; 4.9765596, 4.1223793, -0.5288906; 4.750034, 0.83602834, 0.0698666; 4.638433, -0.8077154, 0.36679128; 5.2692823, -1.6351566, 0.8860978; 5.7158155, -2.3785896, 1.2423549; 4.7399254, -2.0599585, 0.8456077; -4.224344, 8.084121, 0.8862982; -5.8361006, 3.502201, 0.009315789; -4.3515177, 0.6564901, 0.25151604; -3.609227, -0.76636374, 0.3726168; -4.033035, -1.9398881, 0.55256134; -4.2537265, -2.9219737, 0.69308543; -3.4100084, -2.1059656, 0.9103863\",\n\"0.0, 0.0, 0.0; 1.3257492, -1.9046866, 1.0411325; 2.4848633, -9.081119, 1.5128567; 3.905674, -16.330694, -0.44611275; 3.4415305, -17.71183, 1.712556; 3.062556, -17.21937, 2.818856; -1.620863, -1.641259, 0.9963452; -0.982845, -8.797742, 1.6894002; -0.26134312, -15.86955, -1.414644; -1.1534426, -17.050207, 0.7480123; -1.6102172, -17.30876, 1.9137425; 0.0114958435, 2.5005262, -0.07778669; -0.038330246, 5.0028563, 0.19823089; -0.083441615, 7.501841, 0.6938428; -0.21184416, 9.006908, 1.1997974; -0.09761664, 10.588596, 1.2496861; -0.39557716, 12.189156, 1.1259606; 3.8715525, 8.880381, 0.023048222; 4.844426, 4.0260434, -0.28061345; 4.4581933, 0.7870681, 0.47423056; 4.2666316, -0.8331218, 0.8494651; 4.827325, -1.6612358, 1.4428952; 5.2159925, -2.4053175, 1.860368; 4.2776327, -2.0592318, 1.4010181; -4.1696115, 8.119689, 0.8588659; -5.8082304, 3.5407104, 0.017007232; -4.3456144, 0.68443084, 0.26828098; -3.614306, -0.7437067, 0.39391887; -4.039513, -1.9156489, 0.58074206; -4.261591, -2.896953, 0.7245028; -3.4105563, -2.0846505, 0.9266249\",\n\"0.0, 0.0, 0.0; 1.3243736, -1.9044017, 1.0434022; 2.4846182, -9.080937, 1.5107539; 3.8999834, -16.329346, -0.45645905; 3.460339, -17.710806, 1.7071261; 3.091419, -17.218754, 2.8170006; -1.6220406, -1.6387737, 0.9985175; -0.99363774, -8.793667, 1.716331; -0.27424717, -15.871898, -1.3735304; -1.145304, -17.06005, 0.7935953; -1.592546, -17.318836, 1.9629637; 0.022949923, 2.5005198, -0.0754302; -0.00995145, 5.00291, 0.20256852; -0.03817817, 7.502467, 0.69653904; -0.15374316, 9.011463, 1.1938109; -0.03334184, 10.592841, 1.2387681; -0.32850695, 12.194201, 1.1187623; 3.9302816, 8.85027, 0.043034792; 4.725886, 3.9549403, -0.034707062; 4.175567, 0.7780738, 0.867843; 3.9019196, -0.8111973, 1.3171164; 4.397554, -1.6264241, 1.9819933; 4.7326813, -2.3607068, 2.458986; 3.8314655, -2.000701, 1.9398501; -4.120205, 8.151692, 0.84253436; -5.7828674, 3.5755076, 0.03325385; -4.344017, 0.7081013, 0.2948093; -3.6245918, -0.72559965, 0.42558688; -4.052155, -1.895116, 0.62198895; -4.2765193, -2.875142, 0.77082765; -3.4167037, -2.0676062, 0.9539992\",\n]\n\n\nexport const seq3 = [\n\"0.0, 0.0, 0.0; 1.3196042, -1.9361438, 0.9896419; 1.6738738, -8.990025, 2.7741618; 2.5750217, -16.384193, 1.0633717; 1.8688039, -17.829922, 3.111283; 1.4298456, -17.554525, 4.269519; -1.6263283, -1.6648564, 0.9470694; -1.5868261, -8.820924, 1.891408; -0.7740273, -16.029102, -0.8558862; -2.1413271, -17.210587, 1.0418658; -2.837081, -17.314205, 2.1093907; -0.103834495, 2.488555, 0.23479207; -0.34361604, 4.91786, 0.8522922; -0.604733, 7.3408093, 1.5964198; -0.7262408, 8.863613, 2.0480928; -0.49984485, 10.432776, 1.9868846; -0.671891, 12.03174, 1.7047648; 3.2883973, 9.017949, 1.4445848; 4.2963767, 4.1905127, 1.9766765; 3.860541, 0.9816413, 2.8270407; 3.641881, -0.62266374, 3.2523706; 3.6167645, -1.2050753, 4.258589; 3.6020033, -1.7716029, 5.0054708; 3.294019, -1.7179652, 3.9502149; -4.7227826, 7.6918507, 1.4408923; -5.674539, 3.2186508, -0.41530955; -4.3296204, 0.41962934, 0.43168098; -3.6571617, -0.97987974, 0.85517555; -4.106847, -2.1573567, 0.8771699; -4.3526335, -3.142249, 0.92736715; -3.6234314, -2.3280334, 1.4072275\",\n\"0.0, 0.0, 0.0; 1.3497776, -1.911552, 0.9967292; 1.9054692, -8.981312, 2.6631482; 2.8026161, -16.27206, 0.5530019; 2.2243896, -17.833471, 2.5556178; 1.8426163, -17.701788, 3.7585092; -1.6000313, -1.6863269, 0.95385194; -1.2872338, -8.869372, 1.5931141; -0.7091468, -16.039652, -1.3084412; -1.9441576, -17.17217, 0.7062614; -2.5594633, -17.3107, 1.8182989; -0.26665592, 2.4860263, 0.08592105; -0.60719895, 4.9436026, 0.51565933; -0.80413395, 7.413533, 1.1100094; -0.9110265, 8.934167, 1.5725584; -0.75384414, 10.510506, 1.484665; -1.0143006, 12.102614, 1.2332067; 2.8032799, 9.208159, -0.2159617; 4.8645873, 5.5448565, -2.8493068; 6.1646113, 2.6117017, -3.8066297; 6.8145533, 1.1458536, -4.287647; 7.8673463, 0.69290197, -4.4845505; 8.66103, 0.24412724, -4.70289; 7.593999, 0.07044543, -4.4965506; -4.829226, 7.601115, 2.0423157; -5.862006, 3.2024384, 0.05589831; -4.257144, 0.47890615, 0.66212493; -3.4547138, -0.88285804, 0.9652387; -3.8360655, -2.084332, 0.9516977; -4.0233903, -3.0831625, 0.9655077; -3.3163207, -2.2509284, 1.4475738\",\n\"0.0, 0.0, 0.0; 1.3639977, -1.8948697, 1.009147; 1.8620794, -8.970651, 2.668208; 2.6816711, -16.24096, 0.45834947; 1.990531, -17.781782, 2.4410272; 1.5752072, -17.534597, 3.6142468; -1.5873904, -1.6915017, 0.9657355; -1.161748, -8.886224, 1.3625238; -0.6840584, -16.02407, -1.6356516; -2.002843, -17.038347, 0.3889284; -2.6470838, -17.183977, 1.4835356; -0.32619828, 2.4796298, -0.062003344; -0.8119334, 4.9432273, 0.12527177; -1.1974932, 7.441087, 0.44874045; -1.2902219, 8.960972, 0.91677225; -1.198349, 10.544163, 0.86837506; -1.5561074, 12.130696, 0.7241633; 1.8195821, 9.375265, -1.820297; 5.5692744, 8.764414, -5.0093336; 8.744314, 8.215767, -5.9192967; 10.3309765, 7.9409714, -6.377013; 11.117928, 8.673137, -6.820804; 11.807297, 9.168726, -7.2185035; 11.600094, 8.201178, -6.736619; -4.948867, 7.361416, 2.1884525; -6.232411, 2.9125924, 0.47926128; -4.4314055, 0.25517154, 0.7142397; -3.5309038, -1.0735372, 0.83172905; -3.87738, -2.2850204, 0.86934733; -4.0335107, -3.288592, 0.9069041; -3.2877836, -2.4367933, 1.2854265\",\n\"0.0, 0.0, 0.0; 1.3661666, -1.8942409, 1.0073924; 1.6917042, -8.991901, 2.6150267; 2.4004426, -16.336023, 0.62149477; 1.6183925, -17.811243, 2.6202304; 1.168494, -17.624012, 3.7917995; -1.5854535, -1.6942736, 0.96405643; -1.2080617, -8.893519, 1.3261054; -0.6159386, -16.002674, -1.7194517; -2.140255, -16.91831, 0.20537174; -2.8822043, -17.054432, 1.2375546; -0.22251353, 2.4859667, -0.17108777; -0.7130108, 4.9552536, -0.12252952; -1.2913754, 7.427914, 0.087314025; -1.4424549, 8.957991, 0.50414073; -1.3368284, 10.540848, 0.4780171; -1.6812406, 12.129516, 0.32507128; 1.9451828, 9.521774, -1.682646; 5.102044, 12.694524, -3.8206763; 7.6969357, 14.800951, -3.6221101; 8.994837, 15.853984, -3.5267885; 8.91904, 16.98642, -3.780077; 8.970884, 17.893303, -4.012195; 9.568909, 17.067715, -3.597386; -5.2697153, 7.136696, 1.1799046; -6.4237175, 2.530261, -0.16541505; -4.7173405, -0.15798378, 0.30611274; -3.8641536, -1.5021049, 0.54187703; -4.2442236, -2.6888466, 0.73251694; -4.428121, -3.6762443, 0.8879882; -3.6315732, -2.8184934, 1.1219201\",\n\"0.0, 0.0, 0.0; 1.3553077, -1.9193957, 0.9738891; 1.7975991, -9.080733, 2.2335982; 2.5483847, -16.423473, 0.25039828; 2.0795505, -17.79999, 2.4110036; 1.7806268, -17.492987, 3.6053371; -1.5951786, -1.7030629, 0.93199414; -1.2569478, -8.886705, 1.5512807; -0.7601548, -16.027279, -1.4372852; -2.2528458, -16.979774, 0.49442375; -2.9786487, -17.108074, 1.539014; -0.09236182, 2.4991825, -0.06611725; -0.5367551, 4.974537, 0.05821652; -1.238693, 7.4144077, 0.27478728; -1.3964096, 8.967234, 0.59347236; -1.249524, 10.545143, 0.51666164; -1.5585084, 12.134335, 0.3048216; 2.168575, 9.693911, -0.8145739; 3.7683482, 14.386887, -0.67318076; 3.808551, 17.289454, 0.9951754; 3.8305683, 18.741606, 1.8278122; 3.1884947, 19.61876, 1.4147112; 2.7502835, 20.396805, 1.1290169; 3.3850844, 20.005331, 1.9383821; -5.330825, 6.9457364, 0.6496999; -6.3988113, 2.231686, -0.349289; -4.783125, -0.49621606, 0.20643324; -3.9752815, -1.8601648, 0.48429355; -4.4280343, -3.0111442, 0.72804314; -4.674619, -3.9802878, 0.9094269; -3.7812738, -3.1976418, 1.0292103\",\n\"0.0, 0.0, 0.0; 1.3471844, -1.9297416, 0.96467096; 1.9549366, -9.130151, 1.887711; 2.7403507, -16.430117, -0.23507237; 2.5295072, -17.775606, 1.9848428; 2.3390985, -17.301706, 3.146394; -1.6023799, -1.7011062, 0.9231729; -1.5638679, -8.845138, 1.9546635; -0.9224125, -15.995679, -0.9820707; -2.338684, -17.142965, 0.9006883; -3.0429068, -17.252811, 1.9620192; -0.007172545, 2.5003872, 0.082618915; -0.38527107, 4.976053, 0.34423533; -1.1049099, 7.406784, 0.6016472; -1.2763755, 8.970598, 0.85222316; -1.1077858, 10.540668, 0.6981632; -1.3892672, 12.115485, 0.37167275; 2.4588993, 9.694473, 0.36069992; 2.3144858, 12.726589, 4.2835436; 0.5530788, 14.18779, 6.7273655; -0.3277787, 14.918224, 7.949277; -1.0870216, 15.797393, 7.8952184; -1.6954896, 16.506943, 7.9680886; -1.3555318, 15.5979595, 8.487198; -5.194332, 6.9890366, 0.14572531; -6.2327332, 2.2578616, -0.80219555; -4.7345085, -0.4939897, -0.06506729; -3.9853978, -1.869914, 0.3034961; -4.513852, -3.0016928, 0.4736897; -4.822227, -3.9599683, 0.6135347; -3.92711, -3.2122095, 0.86764324\",\n\"0.0, 0.0, 0.0; 1.3347878, -1.9288967, 0.98341125; 1.994571, -9.116709, 1.9669245; 2.6925507, -16.37311, -0.32874072; 2.6392922, -17.736355, 1.8897151; 2.5327017, -17.456, 3.1226294; -1.6132027, -1.6809304, 0.9411068; -1.8594067, -8.783595, 2.2037168; -1.0108898, -15.925068, -0.70239854; -2.3259463, -17.168047, 1.1929914; -2.9963958, -17.23453, 2.279498; 0.011294544, 2.498255, 0.13194181; -0.31493396, 4.96688, 0.5058255; -0.9644996, 7.3995266, 0.89683014; -1.1782851, 8.964698, 1.1023531; -1.0195606, 10.527499, 0.87934375; -1.287967, 12.084476, 0.46744737; 2.6890516, 9.516302, 1.300737; 2.144018, 8.6359825, 6.1516404; 0.19778574, 7.8321066, 8.754694; -0.7751821, 7.430087, 10.056318; -1.5043375, 8.02244, 10.741708; -2.0876918, 8.408323, 11.366044; -1.7752447, 7.4363847, 10.954938; -4.9780264, 7.23012, -0.087373555; -5.7583165, 2.5458827, -1.4327047; -4.490212, -0.2133739, -0.36540234; -3.8561604, -1.5930008, 0.16824752; -4.415604, -2.7162354, 0.28874314; -4.752396, -3.666716, 0.41563457; -3.9253383, -2.900496, 0.8078479\",\n\"0.0, 0.0, 0.0; 1.3280115, -1.9287326, 0.99286216; 2.0875506, -9.128569, 1.8007672; 2.7078483, -16.297808, -0.77408385; 2.9548483, -17.673838, 1.4232674; 2.9768138, -17.326038, 2.643346; -1.6190643, -1.6701722, 0.9501515; -1.786942, -8.767666, 2.2540052; -1.0389582, -15.929176, -0.63033295; -2.0898197, -17.198942, 1.4068854; -2.6324272, -17.274105, 2.5620246; -0.061753396, 2.4916875, 0.21562357; -0.38188037, 4.9387236, 0.7154801; -0.89608526, 7.380018, 1.233424; -1.0657275, 8.956208, 1.3901095; -0.91841125, 10.508856, 1.0988033; -1.2136669, 12.054136, 0.6619841; 2.8694732, 9.302769, 1.57389; 3.8603692, 5.1176434, 4.04495; 3.190424, 2.4318898, 5.928518; 2.8534842, 1.08933, 6.870068; 2.335783, 0.79482174, 7.868847; 1.9432238, 0.44706315, 8.645999; 2.138827, 0.20684576, 7.5899067; -4.9485526, 7.4427757, 0.4092136; -5.5368676, 2.8735976, -1.3620417; -4.3183475, 0.11696243, -0.23204613; -3.709087, -1.2613531, 0.3329513; -4.2363377, -2.404355, 0.40154824; -4.549896, -3.3660421, 0.50045633; -3.8043857, -2.564895, 0.97724426\",\n\"0.0, 0.0, 0.0; 1.3515034, -1.9184648, 0.98098457; 2.243576, -9.126483, 1.5430604; 2.766892, -16.197239, -1.3105627; 3.2149847, -17.666988, 0.79226124; 3.3178735, -17.277874, 1.9956079; -1.5985354, -1.6961721, 0.9387846; -1.5167878, -8.829096, 2.042121; -0.98095274, -15.962208, -0.9574964; -1.8585116, -17.231411, 1.160495; -2.3042665, -17.326384, 2.3549414; -0.19522564, 2.489867, 0.14582095; -0.5370439, 4.9468293, 0.5780468; -0.8799427, 7.4203253, 1.0848294; -1.0304903, 8.987485, 1.3278334; -0.89626926, 10.545361, 1.0589797; -1.1947627, 12.101854, 0.66641486; 2.933323, 9.225279, 0.64498496; 4.2697473, 4.6620817, -0.7672776; 4.790903, 1.359247, -0.93933964; 5.0514555, -0.29217565, -1.0255232; 5.791345, -1.0969709, -0.62906706; 6.3422585, -1.8168492, -0.38974822; 5.343759, -1.5830832, -0.7893088; -5.011848, 7.591806, 1.0239255; -5.5893393, 3.1168222, -0.9765427; -4.1863155, 0.38087702, -0.024256945; -3.4848042, -0.98709416, 0.4518841; -3.9601026, -2.1546571, 0.4455141; -4.230499, -3.133652, 0.4829116; -3.5270247, -2.329995, 1.0160238\",\n\"0.0, 0.0, 0.0; 1.4026579, -1.8872384, 0.9696811; 2.4404974, -9.067959, 1.6234305; 2.9259224, -16.042137, -1.4649017; 3.3338552, -17.669228, 0.5273304; 3.4228456, -17.306208, 1.7399044; -1.5523014, -1.7443819, 0.9279672; -1.20353, -8.914522, 1.6830133; -0.92387754, -16.041016, -1.3667418; -1.7984204, -17.25171, 0.7864572; -2.2269948, -17.39858, 1.9819372; -0.33997238, 2.4781811, 0.0430183; -0.813528, 4.938464, 0.2941685; -1.1949493, 7.4381514, 0.60829014; -1.3020296, 8.987376, 0.9634516; -1.1478531, 10.552792, 0.7561363; -1.4230624, 12.132867, 0.45035735; 2.1063209, 9.348844, -1.2472923; 4.425433, 6.134012, -4.22888; 6.5107393, 3.789713, -5.3975058; 7.552254, 2.6174297, -5.983604; 8.539188, 2.6073382, -6.5985584; 9.312286, 2.4867947, -7.1150784; 8.632552, 1.9546692, -6.4323635; -5.130625, 7.4020605, 1.87908; -6.0755615, 2.974206, -0.08612919; -4.2639694, 0.36606908, 0.43967992; -3.3581736, -0.93799734, 0.70258385; -3.782302, -2.1250782, 0.71292394; -4.0061293, -3.1157398, 0.7508; -3.2848666, -2.2942898, 1.2303298\",\n\"0.0, 0.0, 0.0; 1.4407096, -1.8420897, 1.0002303; 2.6106625, -8.967165, 1.9655037; 3.2984154, -15.948786, -1.0670815; 3.359072, -17.655405, 0.8992827; 3.2877088, -17.381315, 2.1361418; -1.5165428, -1.7599697, 0.95720273; -1.0013416, -8.945042, 1.4175885; -0.68191254, -16.051771, -1.6740904; -1.8081526, -17.095234, 0.4495015; -2.355834, -17.285051, 1.58899; -0.3829331, 2.4685218, -0.13629855; -0.9406811, 4.9229107, -0.064083956; -1.4483634, 7.4110727, 0.14543808; -1.545843, 8.954118, 0.529122; -1.3555408, 10.521474, 0.37274003; -1.5993681, 12.113337, 0.10366917; 1.6800722, 9.402029, -1.9140023; 5.694416, 9.280426, -4.824937; 8.990105, 9.419211, -5.398614; 10.637386, 9.486801, -5.6891403; 11.18308, 10.276849, -6.345153; 11.707879, 10.834816, -6.885766; 11.782096, 10.031021, -6.1376343; -5.3321657, 7.2273865, 1.5554352; -6.624773, 2.6760488, 0.14996779; -4.6298914, 0.15419745, 0.29637182; -3.6324525, -1.1067272, 0.3695725; -3.961032, -2.3037295, 0.58951205; -4.1028805, -3.2958837, 0.75819147; -3.3142183, -2.415566, 0.92552817\",\n\"0.0, 0.0, 0.0; 1.4524634, -1.8327057, 1.0004696; 2.5943196, -8.970121, 1.9064031; 3.5257504, -15.98296, -0.9858527; 3.5559323, -17.669416, 0.99852896; 3.4372816, -17.38106, 2.2284927; -1.5052538, -1.7695106, 0.95743126; -1.0392886, -8.945403, 1.5835998; -0.55147827, -16.067106, -1.4511168; -1.8136728, -17.095127, 0.6023953; -2.43407, -17.300045, 1.7012744; -0.29640785, 2.4791687, -0.1571005; -0.82779205, 4.9395947, -0.0918451; -1.4416122, 7.402335, 0.13337862; -1.5381838, 8.949513, 0.500282; -1.304793, 10.513351, 0.36908388; -1.5131195, 12.110519, 0.10162938; 1.869535, 9.559897, -1.4072537; 5.2906895, 12.581276, -3.3489695; 7.56449, 14.986148, -2.8426604; 8.70318, 16.187675, -2.5932121; 8.645282, 17.241896, -3.080629; 8.714191, 18.096594, -3.4597678; 9.1793375, 17.439678, -2.7091708; -5.4726024, 7.054201, 0.99109346; -6.7104573, 2.4102688, -0.13249785; -4.7924237, -0.14848185, 0.23446435; -3.8334088, -1.4278562, 0.41794524; -4.1695795, -2.6079612, 0.70689857; -4.3178835, -3.5880342, 0.931413; -3.5200248, -2.7070007, 1.0416421\",\n\"0.0, 0.0, 0.0; 1.4379148, -1.8560182, 0.97826177; 2.562089, -9.026577, 1.6000082; 3.6350229, -16.12344, -1.0260048; 3.7099133, -17.693117, 1.0508494; 3.5828683, -17.270468, 2.2404985; -1.5192096, -1.7689552, 0.9361787; -1.0863196, -8.912369, 1.8779267; -0.46665782, -16.067604, -1.0520452; -1.7742589, -17.13665, 0.9514996; -2.4241989, -17.323246, 2.0364785; -0.15982732, 2.4963188, -0.040766507; -0.6074105, 4.969136, 0.1178703; -1.2750602, 7.41636, 0.35855672; -1.3919927, 8.974215, 0.6701971; -1.1354966, 10.533602, 0.5295; -1.3165576, 12.127623, 0.2258665; 2.2311366, 9.653736, -0.47393617; 4.083245, 14.232164, -0.014619321; 4.2259283, 17.027779, 1.822256; 4.2994246, 18.426472, 2.7391896; 3.7451103, 19.38982, 2.3971305; 3.3779168, 20.22538, 2.1826286; 3.923906, 19.695238, 2.9777026; -5.390007, 7.0207644, 0.48688355; -6.481131, 2.3506045, -0.67926526; -4.6722507, -0.23308754, -0.036453605; -3.7678103, -1.5249314, 0.28495136; -4.18223, -2.6952133, 0.50369596; -4.3947115, -3.6722846, 0.685704; -3.5822, -2.8274124, 0.9114582\",\n\"0.0, 0.0, 0.0; 1.4177419, -1.8667754, 0.987196; 2.5841765, -9.0362625, 1.539592; 3.7944438, -16.262688, -0.6344936; 3.76823, -17.746449, 1.5057373; 3.5881004, -17.351748, 2.698131; -1.5382645, -1.7478161, 0.9447287; -1.3015159, -8.849712, 2.2134516; -0.402187, -16.043907, -0.54351807; -1.7444259, -17.224995, 1.3722844; -2.432043, -17.343218, 2.4435573; -0.059922636, 2.5000842, 0.069302276; -0.43746564, 4.9724617, 0.3610813; -1.1276394, 7.4038982, 0.68414116; -1.2561703, 8.967555, 0.9601136; -1.0102975, 10.527149, 0.8036298; -1.2060703, 12.10916, 0.450372; 2.4790545, 9.636354, 0.66943765; 2.543131, 12.4491825, 4.7544317; 0.8216665, 13.906997, 7.228551; -0.038990498, 14.635862, 8.465699; -0.6747617, 15.609202, 8.492423; -1.1854026, 16.383364, 8.629986; -0.97625136, 15.393061, 9.062249; -5.20218, 7.075392, 0.054893613; -6.247802, 2.4428105, -1.2892485; -4.560384, -0.1491108, -0.3974613; -3.7166755, -1.4450696, 0.04843217; -4.165473, -2.6119418, 0.21011779; -4.407517, -3.587562, 0.36019588; -3.6189249, -2.7522948, 0.68484944\",\n\"0.0, 0.0, 0.0; 1.4247847, -1.841859, 1.0232023; 2.5985188, -9.004987, 1.6389937; 3.8619943, -16.215757, -0.556689; 3.8909633, -17.692057, 1.5886595; 3.7278397, -17.307142, 2.7866874; -1.5316476, -1.7346128, 0.97918665; -1.5110438, -8.806073, 2.4271724; -0.39698136, -16.020847, -0.19427967; -1.6650048, -17.253387, 1.7395862; -2.3345335, -17.302303, 2.8275928; -0.08724756, 2.4979398, 0.1072315; -0.4375784, 4.9620485, 0.4890173; -1.0420147, 7.401373, 0.90966475; -1.2035933, 8.969238, 1.1407384; -1.0038726, 10.529217, 0.9313282; -1.2381425, 12.095028, 0.53229094; 2.6503615, 9.467749, 1.2075996; 2.17903, 7.9345384, 5.9012547; 0.16346121, 7.1380005, 8.4533; -0.84417, 6.7395997, 9.729415; -1.4776977, 7.4062896, 10.441087; -2.015133, 7.8454676, 11.071396; -1.9081744, 6.888914, 10.537672; -5.0861773, 7.289471, 0.050610006; -6.0121813, 2.6694164, -1.4185603; -4.402795, 0.09241867, -0.3556968; -3.5981035, -1.1960799, 0.17573303; -4.0655727, -2.3606806, 0.29544127; -4.3271723, -3.3333795, 0.43096274; -3.5994759, -2.486387, 0.8528756\",\n\"0.0, 0.0, 0.0; 1.4300857, -1.8410408, 1.0172621; 2.7174003, -8.997825, 1.4537423; 3.9062796, -16.062675, -1.2084088; 4.2306347, -17.626204, 0.849015; 4.183497, -17.203594, 2.0445137; -1.5266427, -1.7422079, 0.97350144; -1.3285377, -8.823363, 2.3593733; -0.3358119, -16.041557, -0.30113244; -1.3055253, -17.278309, 1.7957647; -1.8274993, -17.366995, 2.9594216; -0.21721491, 2.4904926, 0.095282465; -0.59672457, 4.9457912, 0.50492257; -1.0494125, 7.401263, 1.0131752; -1.1846147, 8.976484, 1.2083769; -1.018711, 10.534188, 0.9567634; -1.2981162, 12.098889, 0.5832385; 2.7429724, 9.301094, 0.9853681; 3.6539402, 4.6994243, 2.5972166; 3.1156225, 1.7987711, 4.1803627; 2.8456802, 0.34864986, 4.972064; 2.715112, 0.009835124, 6.076811; 2.6031656, -0.37191173, 6.9257755; 2.3308496, -0.5110024, 5.868518; -5.1576204, 7.4786644, 0.5415964; -5.9827743, 2.895422, -1.0935948; -4.332814, 0.32805824, -0.07036698; -3.5078344, -0.9556215, 0.44124657; -3.9474394, -2.1341586, 0.52461493; -4.186521, -3.1160846, 0.6323416; -3.4891534, -2.261199, 1.0881898\",\n\"0.0, 0.0, 0.0; 1.4291941, -1.8634427, 0.9769258; 2.777543, -9.01293, 1.3430293; 3.75664, -15.800049, -2.0317261; 4.376523, -17.52133, -0.17814648; 4.4429545, -17.06976, 1.0057917; -1.5274892, -1.7624897, 0.93490064; -1.0443231, -8.877707, 2.049746; -0.36225593, -16.09741, -0.7028508; -0.9924366, -17.342278, 1.5152676; -1.3331056, -17.519068, 2.7347383; -0.31236356, 2.4808216, 0.082263835; -0.7599634, 4.9286304, 0.46724457; -1.1743273, 7.388879, 0.9850015; -1.2906511, 8.963017, 1.2000831; -1.1451049, 10.520856, 0.93696743; -1.4445324, 12.096017, 0.6286051; 2.43894, 9.392237, 0.024182022; 3.7266383, 5.0555778, -2.0101502; 4.5350924, 1.9018161, -2.791249; 4.939302, 0.32513344, -3.1826549; 5.8887653, -0.3462838, -3.1774364; 6.5918717, -0.9637517, -3.2355628; 5.4939327, -0.8995832, -3.194234; -5.281567, 7.3312817, 1.467715; -6.189215, 2.857738, -0.40963233; -4.3621817, 0.30360484, 0.29681778; -3.448666, -0.9734603, 0.65004313; -3.827679, -2.1741993, 0.71109676; -4.0140376, -3.17007, 0.79144496; -3.3257544, -2.3019783, 1.2360036\",\n\"0.0, 0.0, 0.0; 1.4330134, -1.8506087, 0.9955495; 2.8336158, -8.976847, 1.5632604; 3.727908, -15.555574, -2.2226586; 4.388097, -17.452772, -0.565068; 4.4784107, -17.062733, 0.63898826; -1.5238686, -1.756068, 0.9527231; -0.9494783, -8.89571, 1.8461607; -0.42430687, -16.0825, -1.0244396; -0.9884946, -17.315063, 1.2181828; -1.2852601, -17.5744, 2.434363; -0.3931706, 2.4706736, 0.0020762826; -0.96905005, 4.9070687, 0.27164096; -1.4887109, 7.3691254, 0.67266476; -1.5636857, 8.9237385, 1.0121652; -1.3861631, 10.486154, 0.8009285; -1.6434623, 12.081967, 0.57059336; 1.4901147, 9.532705, -1.4339522; 4.1671576, 7.243741, -4.926426; 6.632361, 5.5544267, -6.4360332; 7.8631735, 4.709311, -7.1932597; 8.692506, 5.068993, -7.924796; 9.374469, 5.246802, -8.543112; 9.022038, 4.480976, -7.8355813; -5.2789354, 7.040101, 2.2949142; -6.350611, 2.6213675, 0.3747183; -4.333498, 0.13787293, 0.7271819; -3.3249426, -1.1038728, 0.90341336; -3.684908, -2.3102844, 0.9678231; -3.8547485, -3.3091502, 1.047604; -3.1676302, -2.4334059, 1.4787524\",\n\"0.0, 0.0, 0.0; 1.4336205, -1.837308, 1.0190344; 2.8307815, -8.940976, 1.8271747; 3.811683, -15.560585, -1.8648713; 4.3417625, -17.462406, -0.16636789; 4.3748174, -17.080412, 1.0431883; -1.5232927, -1.7441906, 0.9751975; -0.8592403, -8.893842, 1.7128723; -0.370586, -16.063036, -1.2077425; -1.152262, -17.234814, 1.0019624; -1.5489943, -17.510029, 2.1857188; -0.3304487, 2.4765286, -0.12815487; -0.9208369, 4.920671, 0.005756259; -1.5750921, 7.3637342, 0.3155689; -1.718117, 8.898111, 0.7192204; -1.516273, 10.46614, 0.58572716; -1.7288828, 12.074224, 0.3993478; 1.4506681, 9.620413, -1.6195011; 5.244706, 10.727384, -4.6166964; 8.352513, 11.829612, -5.19683; 9.906384, 12.378726, -5.4908886; 10.110613, 13.302411, -6.167207; 10.380804, 14.001261, -6.730776; 10.769515, 13.27408, -6.0017977; -5.454512, 6.893952, 1.6702478; -6.6255274, 2.3215332, 0.22714138; -4.551098, -0.11201143, 0.5950007; -3.5138845, -1.3287828, 0.77893007; -3.8657115, -2.5276678, 0.94639707; -4.0269303, -3.5193696, 1.0996274; -3.303757, -2.6232634, 1.4142108\",\n\"0.0, 0.0, 0.0; 1.4257194, -1.8444084, 1.0172907; 2.7978287, -8.964448, 1.7170041; 3.6650457, -15.7253275, -1.7400231; 4.176969, -17.522038, 0.07452595; 4.226783, -17.114096, 1.2750009; -1.5307671, -1.73857, 0.97352874; -0.90338755, -8.886632, 1.7572713; -0.4083582, -16.079174, -1.1042652; -1.2826861, -17.240559, 1.0760124; -1.7250597, -17.493256, 2.2485604; -0.267295, 2.4849339, -0.1116776; -0.83485603, 4.9339266, 0.031957135; -1.5531014, 7.360044, 0.3330698; -1.6320103, 8.913591, 0.6765369; -1.3649278, 10.473094, 0.5586639; -1.5439328, 12.08557, 0.37493533; 1.7040914, 9.704229, -1.0409052; 4.0313625, 13.838098, -2.4894314; 5.932109, 16.46191, -1.645216; 6.884035, 17.774302, -1.2281086; 6.521153, 18.828707, -1.5580395; 6.3413267, 19.707067, -1.83217; 7.0739527, 19.104528, -1.2740469; -5.5861583, 6.8202214, 1.0738778; -6.671847, 2.1652298, -0.15623832; -4.6798086, -0.30933475, 0.36244518; -3.6837897, -1.5466145, 0.6217874; -4.054835, -2.7382812, 0.79901147; -4.2315054, -3.726881, 0.9552218; -3.4772515, -2.8479252, 1.2441623\",\n\"0.0, 0.0, 0.0; 1.4178939, -1.8544086, 1.0100222; 2.783874, -8.986934, 1.583116; 3.7510347, -15.879969, -1.5733478; 4.2197857, -17.576262, 0.3464651; 4.240809, -17.127644, 1.5331998; -1.5381179, -1.7359617, 0.9665726; -0.9238445, -8.860939, 1.9463726; -0.2972529, -16.065783, -0.8578588; -1.2359302, -17.286255, 1.2625679; -1.7193997, -17.471539, 2.431476; -0.123107396, 2.4983668, -0.042683635; -0.58307046, 4.9658017, 0.1586183; -1.3242114, 7.3842583, 0.46581566; -1.4044474, 8.947403, 0.7622011; -1.130556, 10.502907, 0.6116437; -1.316097, 12.104795, 0.3558973; 2.1454587, 9.741023, -0.16613692; 3.3036025, 14.287434, 1.4438727; 3.0815613, 16.500803, 3.9461963; 2.9735649, 17.609598, 5.1957655; 2.3977008, 18.60395, 5.017013; 2.001708, 19.451532, 4.9553914; 2.489979, 18.771208, 5.6695666; -5.428939, 6.877943, 0.441175; -6.4189124, 2.2214122, -0.8617145; -4.5179815, -0.26518703, -0.11070979; -3.5675182, -1.5084857, 0.264792; -3.9468584, -2.7061286, 0.36921754; -4.1325674, -3.699057, 0.48123837; -3.427939, -2.8219647, 0.88018286\",\n\"0.0, 0.0, 0.0; 1.4100702, -1.8669871, 0.9977273; 2.8178687, -8.992441, 1.5574167; 3.8486738, -15.985378, -1.3492792; 4.310287, -17.630255, 0.6164553; 4.3209248, -17.153711, 1.7923943; -1.5454193, -1.7359883, 0.9548068; -1.0372683, -8.837728, 2.1421237; -0.19006824, -16.050766, -0.58192515; -1.1344159, -17.306362, 1.5153491; -1.6356266, -17.485893, 2.677664; -0.034419924, 2.5013614, 0.02864428; -0.37996954, 4.981322, 0.29456633; -1.039685, 7.420637, 0.62183833; -1.142779, 8.995739, 0.836621; -0.89127624, 10.547434, 0.62152684; -1.0949901, 12.130131, 0.2759107; 2.5954266, 9.6065645, 0.62199664; 2.6353445, 11.395234, 5.2482643; 1.2468947, 11.538818, 8.291538; 0.55464715, 11.611742, 9.814032; -0.048134744, 12.520305, 10.218355; -0.5000315, 13.2189245, 10.650471; -0.17958194, 12.175209, 10.789273; -5.1164455, 7.14608, -0.018779635; -6.0761933, 2.489789, -1.3449335; -4.3105183, -0.005168915, -0.33582687; -3.4276822, -1.2526464, 0.16872674; -3.8317137, -2.445603, 0.22131616; -4.0437374, -3.4355311, 0.31093693; -3.403864, -2.5605307, 0.810822\",\n\"0.0, 0.0, 0.0; 1.4053221, -1.8807093, 0.9784687; 2.8604631, -9.0118, 1.2905132; 3.880721, -15.974134, -1.6923641; 4.525985, -17.607529, 0.23077857; 4.6013317, -17.113516, 1.3971032; -1.5498313, -1.7420827, 0.9363772; -0.91688645, -8.831746, 2.135836; -0.09642941, -16.039768, -0.60959363; -0.850619, -17.284618, 1.5694938; -1.2547069, -17.540897, 2.755012; -0.028196702, 2.5004363, 0.076404765; -0.29487416, 4.983451, 0.39865494; -0.80376565, 7.4511805, 0.7780371; -0.9350226, 9.032885, 0.9147379; -0.71819276, 10.57855, 0.62982166; -0.9411613, 12.14761, 0.23711717; 2.9652224, 9.387423, 0.9729965; 3.5612533, 7.3904486, 5.474121; 2.5854578, 5.2926903, 7.8942785; 2.0978782, 4.243836, 9.10452; 1.2886968, 4.169197, 9.936363; 0.6906891, 4.0117617, 10.641066; 1.3352964, 3.4911423, 9.916681; -4.8632965, 7.469146, -0.012936294; -5.8796883, 2.8180017, -1.3147256; -4.2087803, 0.2884791, -0.23292029; -3.3733275, -0.97628105, 0.3079812; -3.785442, -2.16669, 0.35531265; -4.0050406, -3.155154, 0.44283056; -3.3692017, -2.283037, 0.95280033\",\n\"0.0, 0.0, 0.0; 1.4032619, -1.8833367, 0.9763696; 2.7938232, -9.034034, 0.94288427; 3.6089163, -15.78368, -2.5486047; 4.610353, -17.423105, -0.7901324; 4.8325953, -16.9461, 0.3644725; -1.55174, -1.7414622, 0.93436825; -0.7767671, -8.833515, 2.0320244; -0.0543468, -16.006378, -0.8305385; -0.45430544, -17.273771, 1.427917; -0.68120193, -17.558857, 2.6533408; -0.12923072, 2.497037, 0.0831863; -0.3617506, 4.9788246, 0.43954068; -0.63006663, 7.473257, 0.88496935; -0.74724096, 9.059822, 0.96734905; -0.55686474, 10.599131, 0.63334286; -0.7932297, 12.17108, 0.2605363; 3.2900822, 9.089952, 0.7798616; 5.335844, 4.913959, 2.5059037; 5.2138815, 1.5782883, 2.767345; 5.156155, -0.08959234, 2.8990817; 5.0346193, -0.8886652, 3.7351563; 4.990203, -1.6065503, 4.336548; 4.990006, -1.3738027, 3.2608504; -4.725792, 7.8377957, 0.44011113; -5.844097, 3.2125564, -0.8703873; -4.15218, 0.6291001, 0.037297368; -3.3062234, -0.66262734, 0.49113774; -3.703782, -1.8557397, 0.5782166; -3.9063652, -2.8460963, 0.6835611; -3.2177787, -1.9741485, 1.1200293\",\n\n]\n\n\nexport const seq4 = [\n\"-0.0, 0.0, 0.0; 1.5048172, -1.8113654, 0.96118706; 2.6599863, -8.435525, 3.763569; 2.303055, -15.195787, 0.21616817; 3.395903, -16.691078, 2.0471807; 3.8764086, -16.48547, 3.203415; -1.5685632, -1.6911402, 0.99663734; -1.0156, -8.744303, 2.428337; -0.26882195, -16.068401, -0.014207363; -0.53400326, -16.695787, 2.5161958; -0.70469266, -16.207237, 3.685214; 0.07312737, 2.493997, -0.18288061; 0.04504688, 5.010455, -0.26637903; -0.022591159, 7.553593, -0.40944016; 0.051019788, 9.144667, -0.38166657; 0.096075624, 10.729088, -0.45134485; 0.1570875, 12.334974, -0.739936; 4.127901, 8.298554, 0.049649686; 5.285333, 3.510768, 0.6333728; 5.2403116, 0.9954698, 2.842711; 5.2183537, -0.26495957, 3.9442317; 5.430119, -0.79184324, 4.959051; 5.4999104, -1.2725142, 5.760979; 4.761268, -0.8308644, 5.07494; -4.1475167, 7.72473, -0.16154128; -5.2566414, 2.9193563, 0.036121637; -5.5529613, 0.14959216, 1.6489824; -5.701678, -1.2349683, 2.455859; -5.93463, -1.7151741, 3.5979135; -6.0210576, -2.1753047, 4.4999967; -5.212265, -1.8285173, 3.6934347\",\n\"-0.0, 0.0, 0.0; 1.5267802, -1.763561, 1.013999; 3.052781, -7.4473696, 5.3073545; 2.5434723, -13.764783, 1.0361137; 3.0234466, -15.896946, 2.4525614; 3.3162405, -16.102448, 3.6699681; -1.5477136, -1.6771337, 1.0513976; -0.9803085, -8.756075, 2.343406; -0.19255537, -16.131626, 0.074750185; -0.26371792, -16.758406, 2.6181648; -0.36709282, -16.278675, 3.7986698; -0.062326092, 2.494886, -0.17456749; -0.20172049, 5.009024, -0.17337766; -0.29565185, 7.555202, -0.20068514; -0.28132504, 9.144572, -0.093911916; -0.25275525, 10.730907, -0.09498708; -0.20780876, 12.347108, -0.3224795; 3.8754187, 8.315737, -0.32745844; 4.891187, 3.487574, -0.83769983; 5.5030503, 0.28043365, -0.09621477; 5.8085217, -1.3239751, 0.27130687; 6.2995462, -2.233988, 0.80335987; 6.594391, -3.023054, 1.2149978; 5.6900916, -2.420593, 1.0401255; -4.3393493, 7.681822, 0.6585165; -5.195241, 3.0177813, 2.0278316; -4.9119377, 0.9310944, 4.4622097; -4.770702, -0.111735106, 5.679885; -4.6303506, -0.16285738, 6.9316196; -4.4177256, -0.27870554, 7.918693; -3.9016933, -0.23375091, 6.8432217\",\n\"-0.0, 0.0, 0.0; 1.6240903, -1.6141714, 1.1073302; 3.2686684, -5.8289127, 6.8168454; 2.4447482, -11.941362, 2.3033423; 2.5418074, -14.326089, 3.3456855; 2.6933148, -14.917851, 4.457846; -1.4503617, -1.7005258, 1.1481706; -0.88149893, -8.815784, 2.2215438; -0.16659975, -16.249598, 0.12548733; -0.093179405, -16.90477, 2.661672; -0.13394609, -16.438751, 3.8514552; -0.2254049, 2.489587, -0.09981386; -0.45093384, 4.9928074, 0.052992; -0.5397283, 7.5379024, 0.13783923; -0.54099566, 9.121669, 0.30926192; -0.5149462, 10.707651, 0.34470955; -0.4838593, 12.327771, 0.14440115; 3.5556326, 8.315228, -0.64708006; 4.3442254, 3.582519, -1.9052016; 5.053098, 0.33806944, -2.3306124; 5.4067106, -1.2841715, -2.5446339; 5.9199824, -2.327137, -2.511708; 6.2267604, -3.212924, -2.4952064; 5.3671885, -2.586408, -2.2125232; -4.38562, 7.6197705, 1.6571052; -4.6178846, 3.2729821, 3.9835472; -3.5560129, 2.0571723, 6.768319; -3.0254865, 1.4498322, 8.161105; -2.6745539, 1.7828739, 9.325185; -2.2873042, 1.9831663, 10.243261; -1.9680668, 1.7573831, 9.115406\",\n\"-0.0, 0.0, 0.0; 1.7362586, -1.3938227, 1.2296599; 3.2180583, -3.4916553, 8.046597; 2.2144504, -9.827511, 3.8918033; 2.0897949, -12.197316, 4.9647903; 2.1303992, -12.854171, 6.049655; -1.3226048, -1.7142615, 1.2750123; -0.8626954, -8.837769, 2.3458877; -0.25579852, -16.296614, 0.30543923; -0.038357303, -17.041214, 2.80847; -0.0023276024, -16.680958, 4.034576; -0.40932512, 2.4671643, 0.06609162; -0.70818526, 4.9367595, 0.4560985; -0.76014745, 7.4760118, 0.6612558; -0.78923404, 9.049147, 0.910466; -0.7565785, 10.63489, 0.9508236; -0.7210139, 12.252412, 0.7311961; 3.1105356, 8.288744, -0.87158376; 3.7470336, 3.7847505, -2.8495107; 4.409132, 0.656091, -3.8409944; 4.7390914, -0.9081043, -4.337917; 5.2494164, -1.9309043, -4.5518274; 5.5538926, -2.801528, -4.720089; 4.7644444, -2.2445312, -4.193001; -4.23726, 7.491228, 2.9007223; -3.3175726, 3.627237, 5.8306704; -1.5257795, 3.2733717, 8.481137; -0.6303357, 3.0969632, 9.806745; -0.12721813, 3.772985, 10.744305; 0.3892296, 4.2676654, 11.466466; 0.5010455, 3.8283088, 10.362196\",\n\"-0.0, 0.0, 0.0; 1.8379059, -1.064244, 1.3996018; 2.826591, -0.6865023, 8.607033; 2.043879, -7.682506, 5.6311464; 1.718398, -9.84922, 7.0390635; 1.619937, -10.291565, 8.224254; -1.1750546, -1.681319, 1.4512218; -0.8561877, -8.815105, 2.5048103; -0.32983875, -16.280632, 0.4664302; -0.020596355, -17.107569, 2.9336996; 0.06101487, -16.764688, 4.1625986; -0.5305442, 2.4304867, 0.2647083; -0.8354909, 4.8404565, 0.92756295; -0.86190164, 7.3643117, 1.2769175; -0.9048631, 8.912665, 1.6490186; -0.84445465, 10.497732, 1.6835164; -0.7800161, 12.105993, 1.4092486; 2.6941695, 8.307173, -0.8344054; 3.3010857, 4.0242834, -3.2617078; 4.1229444, 1.0045085, -4.4514275; 4.5331144, -0.50537217, -5.046854; 5.062111, -1.5107677, -5.2951517; 5.383478, -2.370656, -5.4857273; 4.606979, -1.8411556, -4.913037; -3.9146934, 7.2156053, 4.0633316; -1.7609582, 4.0497427, 7.177747; 0.6265466, 4.565534, 9.274054; 1.8198297, 4.8238363, 10.3226385; 2.389671, 5.752486, 10.956707; 2.9551787, 6.465313, 11.409501; 2.8625553, 5.8389854, 10.397531\",\n\"-0.0, 0.0, 0.0; 1.8598813, -0.7126779, 1.5818758; 1.8875713, 1.9441361, 8.364782; 1.7613195, -5.6261406, 7.3219185; 1.2471218, -7.437936, 9.120756; 0.9528135, -7.5000696, 10.35346; -1.0979114, -1.554961, 1.6402191; -0.7897681, -8.723123, 2.4308836; -0.24120349, -16.221935, 0.5248445; -0.02978304, -17.104795, 2.9830418; 0.006372981, -16.748507, 4.2103033; -0.591226, 2.3895872, 0.44624993; -0.86876225, 4.726244, 1.3425382; -0.8484321, 7.229128, 1.8197684; -0.9266968, 8.75029, 2.286292; -0.83947337, 10.334128, 2.3197849; -0.72209746, 11.932196, 2.006286; 2.539378, 8.264955, -0.51306725; 3.1788538, 4.3009644, -3.425306; 4.3293343, 1.314004, -4.407339; 4.90307, -0.17951238, -4.900034; 5.54347, -1.1357343, -5.0668783; 5.9605007, -1.9664536, -5.1893306; 5.1198316, -1.4856963, -4.666412; -3.6757712, 6.9501853, 4.8254457; -0.67086935, 4.617032, 7.9699335; 1.9136531, 5.751522, 9.517156; 3.2054656, 6.319186, 10.291204; 3.7569408, 7.376648, 10.699619; 4.3016415, 8.194141, 10.960291; 4.135366, 7.4187007, 10.068107\",\n\"-0.0, 0.0, 0.0; 1.825463, -0.4977293, 1.6998084; 1.413694, 3.7381463, 7.612088; 1.3399633, -3.8641424, 8.39463; 0.8269252, -5.158376, 10.595669; 0.5302703, -4.9216266, 11.806447; -1.1137534, -1.4024179, 1.7625008; -0.7549614, -8.584154, 2.3922362; -0.12330967, -16.084183, 0.5169456; 0.004066378, -16.990957, 2.9722273; -0.007945605, -16.596073, 4.1880984; -0.5794995, 2.3413932, 0.663982; -0.79962265, 4.6117983, 1.730345; -0.69686884, 7.090066, 2.3136325; -0.7809817, 8.602471, 2.8068469; -0.674433, 10.184692, 2.856818; -0.5206347, 11.783486, 2.5634193; 2.6275437, 8.14508, -0.10039806; 3.4224567, 4.434963, -3.2951488; 4.7362576, 1.474314, -4.142739; 5.391319, -0.0061130524, -4.5690517; 6.1978436, -0.84270287, -4.6131473; 6.760053, -1.5926073, -4.6369705; 5.813657, -1.2303082, -4.2075872; -3.4168098, 6.747846, 5.4104953; 0.15147734, 5.0990105, 8.395376; 2.6946704, 6.6067104, 9.668063; 3.9657998, 7.3609743, 10.304844; 4.474942, 8.485223, 10.561733; 4.980623, 9.356938, 10.693425; 4.7854686, 8.49318, 9.892934\",\n\"-0.0, 0.0, 0.0; 1.795525, -0.48112562, 1.7360897; 1.5668606, 4.337066, 7.1950264; 1.0287638, -3.1228633, 8.767446; 0.5695629, -4.0827084, 11.144555; 0.35769325, -3.8419526, 12.372231; -1.1662635, -1.3088272, 1.8001202; -0.8323972, -8.482582, 2.5270414; -0.018742442, -15.942631, 0.5644549; 0.071519606, -16.901108, 3.0016766; 0.03215678, -16.596712, 4.2427297; -0.51278275, 2.3346946, 0.73828787; -0.6589019, 4.5675917, 1.8929064; -0.46769297, 7.0130963, 2.582499; -0.5387677, 8.496847, 3.1579444; -0.4123028, 10.074163, 3.2735064; -0.22527388, 11.678365, 3.0338464; 2.8963232, 8.0504, 0.21612859; 3.9980426, 4.40847, -2.9659848; 5.3178754, 1.440552, -3.7780368; 5.97642, -0.043338895, -4.18657; 6.7634826, -0.899388, -4.191225; 7.3076496, -1.6627871, -4.2016106; 6.3191347, -1.3055888, -3.8752; -3.2029634, 6.636206, 5.661785; 0.56004024, 5.1065946, 8.465522; 2.8987067, 7.0310626, 9.555377; 4.067481, 7.993773, 10.1006565; 4.4403677, 9.191155, 10.228656; 4.8383102, 10.125907, 10.257375; 4.735254, 9.167555, 9.553181\",\n\"-0.0, 0.0, 0.0; 1.7878164, -0.6605747, 1.6842664; 1.7553385, 3.7850392, 7.4551167; 0.6901392, -3.6752546, 8.728679; 0.17588824, -4.7007537, 11.06678; -0.006028101, -4.458091, 12.298876; -1.2114544, -1.3402041, 1.7463855; -0.9399575, -8.464627, 2.8740025; 0.15938199, -15.796295, 0.5927272; 0.13087986, -16.72157, 3.044243; 0.011786848, -16.384333, 4.2716417; -0.37394366, 2.3607144, 0.7389234; -0.4174498, 4.592477, 1.9041126; -0.15877658, 7.020404, 2.6327057; -0.19548178, 8.497469, 3.2282197; -0.032770857, 10.067481, 3.389039; 0.20123433, 11.672651, 3.2031724; 3.3101528, 7.9640465, 0.38139868; 4.587033, 4.281924, -2.6869617; 5.913026, 1.3271992, -3.5362391; 6.575151, -0.15004432, -3.9626832; 7.323208, -1.0385983, -3.9061904; 7.8349013, -1.8238444, -3.8824837; 6.8261223, -1.4381925, -3.6705081; -2.997211, 6.7046475, 5.6242504; 0.5750773, 4.827366, 8.465979; 2.8169343, 6.851604, 9.5783; 3.9372373, 7.864277, 10.134708; 4.2829027, 9.0748625, 10.199141; 4.662959, 10.017338, 10.183614; 4.6110926, 9.012209, 9.541761\",\n\"-0.0, 0.0, 0.0; 1.7858173, -0.8510664, 1.5987315; 1.8724724, 2.44088, 8.096642; 0.7502203, -5.115796, 8.319784; 0.27492902, -6.4337754, 10.515199; 0.12870154, -6.3197536, 11.77045; -1.2348423, -1.4285808, 1.6576954; -0.93041664, -8.537752, 2.8699899; 0.2700867, -15.840731, 0.5480473; 0.056077197, -16.706743, 3.0120068; -0.14574474, -16.34532, 4.2215767; -0.29324737, 2.3956668, 0.6584838; -0.28312212, 4.660394, 1.7590432; 0.00428465, 7.091462, 2.4660766; -0.01786684, 8.604444, 2.9641743; 0.17037159, 10.173568, 3.1044931; 0.44819513, 11.774355, 2.9427118; 3.658876, 7.8790455, 0.4620831; 4.985815, 3.9816613, -2.304306; 6.2504253, 0.99421597, -3.13247; 6.881747, -0.4993682, -3.5485854; 7.6126957, -1.4025652, -3.501066; 8.108614, -2.1979694, -3.481041; 7.114457, -1.7885152, -3.2458901; -3.0546088, 6.9241705, 5.244734; -0.046529293, 4.5888386, 8.384563; 2.2590506, 6.4578257, 9.63032; 3.4112484, 7.3929157, 10.253393; 3.8078809, 8.586215, 10.342118; 4.2325497, 9.509489, 10.354952; 4.1860304, 8.503201, 9.714508\",\n\"-0.0, 0.0, 0.0; 1.8029784, -1.0061061, 1.485402; 2.3041327, 0.10110724, 8.668032; 1.5798839, -7.3928447, 7.353213; 1.3571684, -9.1919, 9.223137; 1.3189608, -9.290812, 10.487572; -1.2212063, -1.5652832, 1.5401865; -0.8417559, -8.678375, 2.7074823; 0.23500031, -16.008862, 0.41168547; -0.06790474, -16.84231, 2.8775496; -0.290833, -16.4922, 4.0867414; -0.2896114, 2.4380503, 0.48046824; -0.27647144, 4.7734165, 1.4218578; 0.014165968, 7.2340994, 2.01613; 0.01987399, 8.764988, 2.456643; 0.21128151, 10.336133, 2.5668342; 0.48599133, 11.9349985, 2.3823326; 3.7593734, 7.876147, 0.13105392; 4.9796767, 3.7746148, -2.3772478; 6.1439857, 0.69155645, -2.968061; 6.7251253, -0.849936, -3.2657025; 7.379963, -1.8026648, -3.1399848; 7.8094487, -2.631473, -3.0526774; 6.8507576, -2.1259682, -2.8611782; -3.1597664, 7.2444077, 4.6678843; -0.5853145, 4.7360864, 8.050393; 1.802836, 6.410547, 9.411878; 2.9963696, 7.2484145, 10.092781; 3.4971578, 8.401218, 10.189771; 4.004938, 9.281223, 10.216116; 3.9016793, 8.272086, 9.586887\",\n\"-0.0, 0.0, 0.0; 1.8170514, -1.1510792, 1.3574756; 2.6647756, -2.806538, 8.400775; 2.6131623, -9.990083, 5.791825; 2.767848, -12.156723, 7.228683; 2.8670342, -12.663576, 8.3876915; -1.2102791, -1.6934229, 1.4075422; -0.7109093, -8.826242, 2.3955464; 0.12689036, -16.180862, 0.07740569; -0.22234306, -16.962763, 2.5540042; -0.43938446, -16.605476, 3.762168; -0.30855653, 2.4640496, 0.30342343; -0.3206601, 4.8843555, 0.9978986; -0.046897292, 7.387282, 1.3890566; -0.03895763, 8.944287, 1.7257693; 0.12421349, 10.521469, 1.7818718; 0.3622831, 12.120975, 1.5565188; 3.7636285, 7.8702826, -0.41064286; 4.872081, 3.6052632, -2.6875322; 5.9470954, 0.44167757, -2.901994; 6.4834733, -1.14032, -3.011972; 7.0938497, -2.0997322, -2.7685015; 7.484704, -2.9305258, -2.5787156; 6.551536, -2.3608773, -2.4522471; -3.3124323, 7.620667, 3.91642; -1.0857666, 4.9449863, 7.4154973; 1.3422589, 6.4789743, 8.868871; 2.555764, 7.2466183, 9.595715; 3.1219683, 8.369108, 9.688358; 3.680433, 9.21787, 9.714128; 3.530627, 8.20761, 9.096161\",\n\"-0.0, 0.0, 0.0; 1.8029116, -1.3188759, 1.216337; 2.7933166, -5.535214, 7.0737114; 3.1240628, -12.465894, 3.8692017; 3.4582968, -14.715906, 5.1374893; 3.6102805, -15.073103, 6.345525; -1.2368714, -1.7869415, 1.2611979; -0.66568583, -8.945751, 1.9877299; -0.01562643, -16.306564, -0.3706566; -0.4191124, -17.021198, 2.1179924; -0.6377735, -16.63269, 3.3161864; -0.31390527, 2.4788592, 0.124637626; -0.36950123, 4.9608417, 0.54534525; -0.12916255, 7.490823, 0.7297987; -0.120724484, 9.068113, 0.9529312; 0.0077110976, 10.649487, 0.9589814; 0.20163016, 12.250226, 0.7022605; 3.7639737, 7.8528056, -0.9148215; 4.893008, 3.4126768, -2.815826; 5.9147263, 0.22772527, -2.6671536; 6.4245415, -1.3652285, -2.5957482; 6.9991956, -2.3086877, -2.2324755; 7.360143, -3.1247556, -1.9448056; 6.4377375, -2.5250688, -1.915838; -3.5182698, 7.910967, 3.062862; -1.7011807, 4.963646, 6.5802946; 0.7179532, 6.321236, 8.212918; 1.9270408, 7.0007052, 9.029376; 2.548682, 8.085041, 9.19348; 3.1513433, 8.8987055, 9.281193; 2.9833837, 7.9179707, 8.621725\",\n\"-0.0, 0.0, 0.0; 1.7475746, -1.5090964, 1.0667756; 2.619919, -7.405534, 5.254649; 3.0150566, -14.333422, 2.0513964; 3.5221825, -16.458155, 3.4695473; 3.7724483, -16.982973, 4.5973644; -1.3106445, -1.8363934, 1.1061199; -0.80773216, -8.994542, 1.8875495; -0.25908905, -16.270824, -0.7431921; -0.72557986, -16.938454, 1.747497; -0.953673, -16.532772, 2.9382172; -0.2963573, 2.48413, -0.009218386; -0.3964983, 4.9952583, 0.14740212; -0.21546587, 7.5367727, 0.124557756; -0.2138916, 9.1265745, 0.22570881; -0.12156321, 10.710246, 0.19862527; 0.032323226, 12.314508, -0.063173145; 3.7923925, 7.8482594, -1.2290907; 5.0345573, 3.2688098, -2.674412; 5.9897532, 0.10776901, -2.1218286; 6.466572, -1.4735283, -1.8485972; 6.9792423, -2.3974192, -1.3628979; 7.28958, -3.1957724, -0.98168087; 6.385624, -2.5763001, -1.0837327; -3.7907932, 8.076561, 2.132396; -2.5637388, 4.7620006, 5.5775194; -0.19787574, 5.8308263, 7.480418; 0.98461413, 6.365928, 8.432026; 1.663568, 7.3806596, 8.745864; 2.311814, 8.133693, 8.959549; 2.1419551, 7.222401, 8.207456\",\n\"0.0, 0.0, 0.0; 1.649715, -1.6982561, 0.9293903; 2.1392791, -8.461255, 3.5919876; 2.1976879, -15.4994, 0.61311126; 2.628958, -17.068258, 2.6467063; 2.8099136, -16.904518, 3.89189; -1.4230772, -1.8329833, 0.96366805; -1.0022278, -8.988251, 1.816711; -0.47600496, -16.140202, -1.1394339; -1.0857749, -16.739004, 1.33776; -1.3569416, -16.315163, 2.5130243; -0.24064602, 2.4859488, -0.14477979; -0.3702498, 4.9995327, -0.21841374; -0.25301424, 7.539834, -0.3787797; -0.26004493, 9.132792, -0.36700037; -0.1985053, 10.717225, -0.42233342; -0.071388915, 12.322775, -0.6905292; 3.874378, 7.901399, -1.2877457; 5.2391615, 3.1961703, -2.0632887; 6.013611, 0.10909438, -1.0240029; 6.4005346, -1.4356002, -0.5075525; 6.8240585, -2.3184533, 0.11974901; 7.0642004, -3.0839515, 0.60487604; 6.1939893, -2.4711359, 0.32472244; -4.0477624, 8.0802355, 1.1747978; -3.749255, 4.320984, 4.359098; -1.655716, 4.831957, 6.750065; -0.60932314, 5.0881715, 7.9457197; 0.10225415, 5.9617143, 8.511169; 0.77487534, 6.5932927, 8.937354; 0.6546936, 5.8059254, 8.048221\",\n\"0.0, 0.0, 0.0; 1.5841439, -1.7875296, 0.8744285; 1.687204, -8.803342, 2.832746; 1.4595017, -15.947119, 0.12586641; 1.811764, -17.038908, 2.4639697; 1.9743034, -16.689157, 3.6728098; -1.4915588, -1.8074343, 0.9066785; -1.2065752, -8.976672, 1.6962646; -0.7188256, -16.006332, -1.545973; -1.5066091, -16.520935, 0.8997284; -1.827044, -16.066029, 2.0507288; -0.1586017, 2.484345, -0.24837312; -0.2646845, 4.9914455, -0.4569816; -0.18001454, 7.5283003, -0.6801189; -0.20966636, 9.118663, -0.76713276; -0.1672394, 10.701957, -0.8601621; -0.038181365, 12.306645, -1.132551; 4.026947, 7.970586, -0.9934406; 5.2924004, 3.1748295, -1.0447737; 5.679665, 0.253469, 0.5444417; 5.8735, -1.2090108, 1.3357021; 6.173161, -2.0202265, 2.1131604; 6.314593, -2.727108, 2.712593; 5.5158243, -2.1281152, 2.2494817; -4.1710744, 8.014387, 0.28988683; -4.943239, 3.8850675, 2.880896; -3.5396156, 3.5296097, 5.75565; -2.8380227, 3.3527308, 7.1932364; -2.1610117, 3.916836, 8.094676; -1.5287158, 4.281687, 8.801804; -1.5410231, 3.6996527, 7.759674\",\n\"0.0, 0.0, 0.0; 1.580344, -1.777265, 0.9017994; 1.3144081, -8.817337, 2.75488; 1.0453602, -16.004831, 0.17028499; 1.1329716, -17.081396, 2.540127; 1.1964555, -16.766808, 3.7677436; -1.4953873, -1.7897242, 0.9350595; -1.5280486, -8.912799, 2.102698; -1.0278326, -15.726786, -1.5695591; -2.0479894, -16.432306, 0.73877287; -2.4342892, -15.976985, 1.8692039; -0.043201983, 2.489049, -0.24816021; -0.07534586, 4.9987946, -0.44932404; -0.02358045, 7.535931, -0.679212; -0.042675752, 9.124401, -0.79796654; -0.0074658543, 10.707352, -0.8994604; 0.1230195, 12.313677, -1.1613239; 4.1720786, 8.086949, -0.38742486; 5.069324, 3.260561, 0.32265195; 4.77598, 0.71622944, 2.4790962; 4.6299973, -0.5587925, 3.5540476; 4.6814246, -1.1819017, 4.5345573; 4.6209025, -1.7303025, 5.292579; 4.0024567, -1.1760328, 4.570356; -4.1237693, 7.92167, -0.29788232; -5.7444263, 3.5273347, 1.2590818; -5.3403893, 2.211741, 4.168839; -5.1385593, 1.5547466, 5.6241045; -4.7623653, 1.7271565, 6.814863; -4.3797507, 1.7698007, 7.755465; -4.0878854, 1.4918609, 6.6318493\"\n]\n\nexport const seq5 = [\"0.0, 0.0, 0.0; 1.5409217, -1.891763, 0.71846503; 1.8910584, -8.736734, 3.1864653; 2.5820687, -16.13752, 1.4078522; 2.4915457, -17.285107, 3.7440171; 2.3735843, -16.939262, 4.9591365; -1.5345428, -1.8449498, 0.74496317; -0.5458775, -8.887186, 1.982742; 0.07292414, -16.129192, -0.7258605; -0.10175976, -16.8369, 1.7911834; -0.22800139, -16.310587, 2.9494047; -0.02254549, 2.488358, 0.25764352; -0.2390658, 4.970232, 0.62335473; -0.57077855, 7.482953, 0.8856324; -0.71785796, 9.032387, 1.2252332; -0.7647811, 10.616761, 1.2947445; -0.7269781, 12.235602, 1.0854574; 3.450423, 8.542631, 1.7218949; 4.3248215, 3.6647606, 1.5095533; 4.4703383, 0.38698816, 2.1766064; 4.5436344, -1.2522177, 2.5084863; 4.570217, -2.2001731, 3.1815262; 4.5182056, -3.012171, 3.6473138; 3.9311786, -2.343944, 2.99911; -4.6974907, 7.20741, 0.89418787; -4.923344, 2.2904248, 0.5293648; -5.1275234, -0.8931813, 0.95794654; -5.230257, -2.4848475, 1.1729305; -5.528681, -3.3962884, 1.9910817; -5.6574244, -4.1824203, 2.622244; -4.8139486, -3.481008, 2.151587\",\n\"0.0, 0.0, 0.0; 1.5279212, -1.8827269, 0.7682421; 1.9689051, -8.622244, 3.4980204; 2.6350076, -15.942748, 1.4053845; 2.8288445, -17.208546, 3.673203; 2.8392198, -16.940111, 4.9133134; -1.5470853, -1.8126293, 0.79657614; -0.5937317, -8.838087, 2.1518312; 0.0024878979, -16.078053, -0.56727386; 0.014132735, -16.836838, 1.9409096; -0.04630561, -16.31772, 3.1076503; -0.04453325, 2.4922266, 0.21362762; -0.27495894, 4.976055, 0.5568828; -0.58974034, 7.492297, 0.8059424; -0.6970313, 9.044801, 1.1464219; -0.7223551, 10.628897, 1.2317111; -0.6835878, 12.249729, 1.0386369; 3.4699583, 8.554104, 1.4254024; 4.463189, 3.7051563, 1.1021649; 4.842013, 0.41413736, 1.587565; 5.0318637, -1.2316271, 1.8282474; 5.2108073, -2.1747446, 2.4846146; 5.2733183, -2.9868681, 2.9488897; 4.5597563, -2.3523781, 2.40158; -4.711098, 7.2246614, 1.0262473; -5.1774225, 2.3165326, 1.2578906; -5.2872367, -0.5378132, 2.741593; -5.342779, -1.9647552, 3.4838364; -5.610086, -2.5161967, 4.585477; -5.713786, -3.018538, 5.462884; -4.890746, -2.534053, 4.746763\",\n\"-0.0, 0.0, 0.0; 1.5536088, -1.8079984, 0.8870406; 2.1450524, -7.7442017, 5.0678225; 2.577119, -14.75889, 2.0644822; 3.1920528, -16.70683, 3.6800957; 3.4683645, -16.90466, 4.902615; -1.5219771, -1.7751803, 0.9197568; -0.6015012, -8.819666, 2.1967025; -0.06713784, -16.133904, -0.3296597; 0.21872908, -16.934261, 2.1491668; 0.26581264, -16.44039, 3.3274255; -0.10579199, 2.4946578, 0.15590091; -0.35115644, 4.9746, 0.51646596; -0.61696213, 7.492648, 0.80172396; -0.6945703, 9.048442, 1.1351718; -0.6949469, 10.631379, 1.2427984; -0.6513169, 12.255697, 1.0829078; 3.4946854, 8.530828, 0.8957992; 4.6765156, 3.7840018, 0.074703515; 5.289006, 0.5013921, 0.31812924; 5.59537, -1.140058, 0.43769246; 5.936562, -2.106382, 0.9873424; 6.1227365, -2.9385288, 1.377053; 5.2915487, -2.3208122, 1.0044285; -4.6777296, 7.249037, 1.5477632; -5.1088095, 2.5456438, 2.9806314; -4.6638374, 0.84673584, 5.6781173; -4.441996, -0.0024728775, 7.0271187; -4.495297, 0.09632039, 8.282726; -4.421016, 0.12902121, 9.295819; -3.7677822, 0.21544375, 8.300447\",\n\"-0.0, 0.0, 0.0; 1.6339166, -1.6552464, 1.0295024; 2.5304918, -5.8868217, 6.891001; 2.3955832, -12.616276, 3.270387; 2.768802, -14.860511, 4.538037; 2.9966478, -15.441368, 5.6429033; -1.4399706, -1.7608572, 1.0674729; -0.5689936, -8.826941, 2.2568023; -0.16395038, -16.21042, -0.08547521; 0.43958288, -17.036928, 2.3268902; 0.63128453, -16.58526, 3.5074267; -0.20321946, 2.490785, 0.11621907; -0.46222323, 4.960971, 0.53024864; -0.6662912, 7.477292, 0.8753193; -0.73172486, 9.026537, 1.240374; -0.71397513, 10.606479, 1.3844001; -0.6704608, 12.23396, 1.2607496; 3.3989396, 8.5091095, 0.24162477; 4.634315, 3.9362292, -1.2300739; 5.31609, 0.65825987, -1.2351528; 5.656778, -0.98076653, -1.2411916; 6.124851, -1.9747404, -0.8600975; 6.403944, -2.8275735, -0.5884603; 5.503231, -2.2073982, -0.71253645; -4.52956, 7.233984, 2.3319266; -4.1884313, 3.1394033, 5.066682; -3.0178685, 3.0675964, 8.064239; -2.433229, 3.0319533, 9.5632715; -2.3467371, 3.7192974, 10.616471; -2.153483, 4.247194, 11.463183; -1.6627179, 3.9182696, 10.425924\",\n\"-0.0, 0.0, 0.0; 1.736425, -1.4478886, 1.1652663; 2.612949, -3.2946045, 8.157305; 2.0595489, -10.301032, 5.1545844; 2.0834355, -12.469037, 6.5974984; 2.164002, -12.879889, 7.7953086; -1.3231771, -1.7615285, 1.2082433; -0.56081367, -8.846363, 2.3600113; -0.29301918, -16.25672, 0.08382726; 0.49518466, -17.103119, 2.435256; 0.7802365, -16.671186, 3.6042726; -0.35063744, 2.4713662, 0.16797657; -0.63691497, 4.9172506, 0.69335234; -0.7581279, 7.433407, 1.0765681; -0.8167718, 8.991223, 1.4043984; -0.79307485, 10.5699215, 1.5606796; -0.7586965, 12.200189, 1.4774679; 3.1347923, 8.441728, -0.27279294; 4.2175155, 3.9638553, -2.1111758; 4.9732556, 0.71183634, -2.3624818; 5.3505545, -0.91410017, -2.490888; 5.82864, -1.9452509, -2.244979; 6.111918, -2.8232045, -2.0777814; 5.217631, -2.181849, -2.0633092; -4.2992992, 7.208939, 3.2015321; -2.854508, 4.0115767, 6.672886; -1.3715559, 5.2901506, 9.227651; -0.63073236, 5.929629, 10.505314; -0.5829406, 6.9791923, 11.201938; -0.4198669, 7.8242173, 11.74257; -0.007741034, 7.2126484, 10.803909\",\n\"-0.0, 0.0, 0.0; 1.805101, -1.1683784, 1.3586395; 2.4348395, -0.49342215, 8.584642; 1.7110472, -8.001628, 7.3535557; 1.5128317, -9.788345, 9.23801; 1.4871486, -9.896156, 10.502034; -1.2275887, -1.6799062, 1.4087489; -0.5891617, -8.8022785, 2.3920424; -0.31406772, -16.245136, 0.22540855; 0.46651787, -17.100838, 2.5760117; 0.7285981, -16.569126, 3.7087145; -0.4555967, 2.4431274, 0.28700915; -0.7460259, 4.8447456, 0.98572564; -0.79938394, 7.3601503, 1.3888191; -0.85663766, 8.91469, 1.7320896; -0.83107483, 10.490067, 1.9186621; -0.80105484, 12.1218815, 1.8722181; 2.86581, 8.3560095, -0.4998139; 3.7908056, 3.9767618, -2.6375365; 4.514416, 0.729959, -3.0177782; 4.875303, -0.89328766, -3.2110221; 5.4083896, -1.9114723, -3.0337424; 5.734391, -2.781752, -2.9098887; 4.83046, -2.1669254, -2.7826362; -4.0020165, 7.144106, 3.9969258; -1.6219664, 4.707053, 7.568618; -0.19854295, 6.8444123, 9.509309; 0.5125439, 7.913172, 10.480021; 0.4390857, 9.093688, 10.91607; 0.49707532, 10.060792, 11.223138; 0.8834083, 9.318242, 10.37207\",\n\"-0.0, 0.0, 0.0; 1.8113819, -0.9033052, 1.5402386; 2.0573006, 1.8440965, 8.282535; 1.4201171, -5.7174416, 9.193434; 0.99690044, -6.9355636, 11.45615; 0.82453257, -6.708896, 12.692657; -1.2008458, -1.5234988, 1.5970452; -0.6546003, -8.667179, 2.4757276; -0.08921021, -16.081335, 0.26739264; 0.3437839, -16.92598, 2.7099257; 0.43441463, -16.362791, 3.854052; -0.5033379, 2.4197598, 0.3875918; -0.7746587, 4.7833924, 1.212182; -0.78609514, 7.294629, 1.6436353; -0.8734801, 8.838761, 2.0253751; -0.8441244, 10.411252, 2.2343903; -0.7992551, 12.043086, 2.203032; 2.6409414, 8.31848, -0.6365988; 3.3397074, 4.05629, -3.0756052; 3.9735715, 0.82004404, -3.6542702; 4.2892637, -0.79773545, -3.9469137; 4.8350334, -1.8162332, -3.8161194; 5.1699433, -2.6866894, -3.720488; 4.2812185, -2.0709057, -3.5148804; -3.6735315, 7.0448275, 4.594239; -0.54959464, 5.053187, 7.8554096; 0.64160776, 7.692278, 9.261453; 1.2365663, 9.011916, 9.964839; 1.0251946, 10.234531, 10.187741; 0.9637972, 11.241924, 10.3074665; 1.3792046, 10.405581, 9.563884\",\n\"-0.0, 0.0, 0.0; 1.7915658, -0.72012526, 1.65563; 1.7480688, 3.486915, 7.6025763; 1.2351596, -3.6489768, 10.291176; 0.70092225, -4.3090773, 12.753222; 0.44911847, -3.7636404, 13.870869; -1.2128308, -1.3768227, 1.7166926; -0.76471496, -8.5499115, 2.3864965; 0.057168543, -15.937019, 0.1681056; 0.19808866, -16.755941, 2.653339; 0.15546256, -16.210299, 3.8087077; -0.54605216, 2.4122074, 0.3766923; -0.8047327, 4.7607346, 1.247225; -0.74233824, 7.263933, 1.7191315; -0.84402514, 8.7995825, 2.1304028; -0.80883455, 10.370394, 2.350826; -0.7472144, 12.001781, 2.3251987; 2.5026774, 8.279573, -0.8167436; 2.8914304, 4.209266, -3.6247244; 3.4087615, 1.0268283, -4.527157; 3.6659446, -0.56378007, -4.9813967; 4.184623, -1.603783, -4.940457; 4.4956036, -2.487772, -4.911162; 3.647322, -1.8553355, -4.6082788; -3.383048, 7.002846, 4.8915496; 0.20073152, 5.2542324, 7.80011; 1.2835413, 8.073084, 8.914702; 1.8242021, 9.482685, 9.472274; 1.5560148, 10.71267, 9.538339; 1.446471, 11.72302, 9.526611; 1.8895259, 10.816402, 8.888883\",\n\"-0.0, 0.0, 0.0; 1.7661407, -0.6406439, 1.7145618; 1.5452427, 4.177086, 7.174226; 0.79955274, -2.5189857, 10.7824335; 0.18704265, -2.7550852, 13.302732; -0.0695782, -1.9956764, 14.28634; -1.244833, -1.2662764, 1.7777983; -0.91174203, -8.444038, 2.4644034; 0.050464153, -15.771619, 0.10923052; 0.110691644, -16.610954, 2.5909162; 0.029764049, -16.137527, 3.7757106; -0.53191876, 2.4229167, 0.32457766; -0.76153445, 4.7870398, 1.160355; -0.6456046, 7.2848845, 1.6501746; -0.739248, 8.808269, 2.1065047; -0.69348997, 10.376775, 2.3409603; -0.61340487, 12.007301, 2.3118253; 2.5696464, 8.262946, -0.93785; 2.5625165, 4.414733, -4.067465; 2.9043548, 1.3120406, -5.2784038; 3.0731783, -0.23832786, -5.886983; 3.5920992, -1.2649913, -6.057255; 3.9041967, -2.13968, -6.185779; 3.118197, -1.5648966, -5.672822; -3.23147, 7.0454097, 4.869135; 0.3937335, 5.2112503, 7.6717415; 1.4610451, 8.045424, 8.762164; 1.9938891, 9.46274, 9.307571; 1.7226248, 10.693207, 9.346568; 1.6128668, 11.703158, 9.316664; 2.0793192, 10.788208, 8.708192\",\n\"-0.0, 0.0, 0.0; 1.7560855, -0.6277396, 1.729597; 1.578997, 3.8491395, 7.4735894; 0.50400925, -2.947726, 10.79919; -0.25189048, -3.258216, 13.272048; -0.5422151, -2.501287, 14.248167; -1.2598614, -1.2288789, 1.7933872; -1.1256237, -8.3846855, 2.7309637; 0.02225566, -15.570245, 0.044661045; -0.009396218, -16.422434, 2.5224922; -0.13700208, -16.020496, 3.729382; -0.48178607, 2.4466925, 0.20097871; -0.67887115, 4.8368626, 0.9681612; -0.551506, 7.3428807, 1.4111532; -0.64050746, 8.873547, 1.8434079; -0.5949775, 10.44404, 2.0642016; -0.507388, 12.073889, 2.0217807; 2.7619836, 8.233128, -1.0829521; 2.485979, 4.5140934, -4.3534093; 2.6275074, 1.4985514, -5.801305; 2.6960566, -0.007918358, -6.5281906; 3.1449056, -1.0435361, -6.808083; 3.3985863, -1.9202571, -7.022583; 2.6755733, -1.3480344, -6.421659; -3.2493832, 7.197299, 4.542609; 0.13972116, 5.2688007, 7.5684495; 1.2742428, 8.086572, 8.633226; 1.8407148, 9.495704, 9.165797; 1.5703497, 10.72608, 9.21303; 1.4631834, 11.736562, 9.193392; 1.9466952, 10.828934, 8.587276\",\n\"-0.0, 0.0, 0.0; 1.774383, -0.75737697, 1.6575114; 1.977389, 2.2334034, 8.296885; 1.106823, -5.115741, 10.206019; 0.49688327, -6.015921, 12.57255; 0.25669292, -5.512483, 13.712241; -1.2440507, -1.3461915, 1.7186439; -1.0179827, -8.513883, 2.5406828; 0.03852749, -15.779724, 0.03919506; -0.08695868, -16.608433, 2.5220103; -0.2423313, -16.17954, 3.716301; -0.43088332, 2.4585197, 0.16980776; -0.59048057, 4.8782935, 0.8477068; -0.4514957, 7.399484, 1.1895733; -0.49124897, 8.949175, 1.5564289; -0.43920597, 10.525595, 1.7280886; -0.3585363, 12.154008, 1.6406797; 2.97518, 8.148074, -1.1957617; 2.5246973, 4.2620015, -4.245154; 2.54472, 1.2822475, -5.7717814; 2.553093, -0.20671785, -6.5369115; 2.8976912, -1.2795033, -6.8244743; 3.0637233, -2.1753893, -7.0454392; 2.4004178, -1.539013, -6.440173; -3.2810717, 7.4156685, 4.206026; -0.31532192, 5.1264696, 7.41924; 1.0313963, 7.8438387, 8.497653; 1.7039982, 9.202834, 9.037016; 1.5911313, 10.45836, 9.028653; 1.6147078, 11.47266, 8.96879; 2.0032558, 10.48755, 8.417848\",\n\"-0.0, 0.0, 0.0; 1.8112974, -0.986378, 1.4885093; 2.4250667, -0.4627177, 8.72842; 2.098768, -8.097012, 8.574531; 1.9801574, -9.678532, 10.640334; 1.9560497, -9.527571, 11.899964; -1.2077782, -1.5725118, 1.5434085; -0.7799409, -8.750073, 2.1776004; 0.036576807, -16.119938, -0.09934735; -0.1703378, -16.904438, 2.3923633; -0.33242524, -16.460999, 3.5804324; -0.39486507, 2.4695904, 0.063391425; -0.53943586, 4.933239, 0.56324863; -0.39913383, 7.4683876, 0.7775562; -0.4412427, 9.032318, 1.0776427; -0.3949945, 10.614411, 1.1877145; -0.31538275, 12.238175, 1.0362898; 3.169746, 8.068577, -1.4349501; 2.8084612, 3.964715, -4.19739; 2.8606825, 0.8371229, -5.3912773; 2.8850691, -0.72579944, -5.990603; 3.208087, -1.8287117, -6.168235; 3.3555248, -2.7448428, -6.3022857; 2.6894794, -2.0395973, -5.782374; -3.4028938, 7.662585, 3.6140091; -0.95811415, 4.883194, 6.8788037; 0.6551795, 7.3859453, 8.101193; 1.4610958, 8.63774, 8.712488; 1.5353527, 9.896154, 8.718045; 1.7121258, 10.896159, 8.676982; 1.9870176, 9.868293, 8.135804\",\n\"-0.0, 0.0, 0.0; 1.8098723, -1.2638816, 1.2634733; 2.6988025, -3.5874715, 8.110223; 2.9233239, -10.963182, 6.119976; 3.2641225, -12.942929, 7.7774673; 3.4358492, -13.139802, 9.0191555; -1.2255348, -1.759377, 1.3100723; -0.63497037, -8.93071, 1.8809092; -0.0600186, -16.341774, -0.33532238; -0.2962368, -17.078306, 2.1683939; -0.44418067, -16.678476, 3.373661; -0.37573674, 2.473373, -0.007817765; -0.5467087, 4.9707346, 0.2647178; -0.45901966, 7.5168724, 0.31035525; -0.49398518, 9.098858, 0.49420917; -0.45318258, 10.684581, 0.52726436; -0.38337758, 12.301594, 0.3121469; 3.2732508, 8.031295, -1.6384497; 3.1942124, 3.620685, -3.9063911; 3.4435964, 0.38971233, -4.7481446; 3.5666473, -1.2252972, -5.1713653; 3.9795766, -2.3124018, -5.1697745; 4.2016625, -3.2231922, -5.1578474; 3.4656398, -2.5038347, -4.767858; -3.6908748, 7.848885, 2.8697755; -1.8402959, 4.6274176, 6.119138; 0.08047283, 6.7502675, 7.59049; 1.0401976, 7.8122334, 8.3262415; 1.2954854, 9.04201, 8.434082; 1.6178988, 10.004664, 8.481931; 1.7799971, 8.98606, 7.8809996\",\n\"-0.0, 0.0, 0.0; 1.7616283, -1.5496441, 0.98217547; 2.6050327, -6.2811656, 6.456536; 3.0562582, -13.274591, 3.4067826; 3.5014582, -15.518167, 4.652168; 3.7171326, -16.004616, 5.8040752; -1.2943408, -1.8976763, 1.0184002; -0.69103956, -9.033949, 1.919666; -0.19152015, -16.374357, -0.5369563; -0.4806596, -17.06074, 1.9754434; -0.6392441, -16.686483, 3.18755; -0.34505576, 2.4774723, -0.043369558; -0.56223357, 4.986025, -0.025471373; -0.55317503, 7.5274873, -0.2084427; -0.5643424, 9.116878, -0.10158746; -0.52774954, 10.702865, -0.125679; -0.46896112, 12.31067, -0.40385813; 3.3994904, 8.017508, -1.667426; 3.8040693, 3.38561, -3.3951778; 4.311944, 0.1045928, -3.827516; 4.5645638, -1.535807, -4.046111; 5.063679, -2.5757658, -3.8988755; 5.3580384, -3.4578185, -3.779127; 4.52258, -2.7816381, -3.5423026; -4.1198545, 7.9548526, 1.8414135; -2.8679314, 4.4078693, 5.0371046; -0.8377769, 6.10878, 6.8663387; 0.17671084, 6.9597816, 7.781098; 0.54855514, 8.128226, 8.073709; 0.9640558, 9.033752, 8.274522; 1.0668955, 8.090202, 7.5505843\",\n\"-0.0, 0.0, 0.0; 1.6908207, -1.7277468, 0.7908324; 2.373263, -7.991213, 4.447404; 2.5386944, -14.80592, 0.9912503; 2.9496922, -16.901209, 2.4824457; 3.152856, -17.2521, 3.6847928; -1.3780204, -1.9345005, 0.8199997; -0.8865514, -9.035808, 2.0168886; -0.41835725, -16.270613, -0.74073696; -0.7504785, -16.93856, 1.7713172; -0.92014855, -16.584618, 2.988016; -0.32827294, 2.4785368, -0.088913046; -0.59388655, 4.977186, -0.25178373; -0.64515275, 7.504212, -0.57443374; -0.66119665, 9.097133, -0.5672834; -0.6427411, 10.680843, -0.6610724; -0.59826607, 12.278077, -0.99684525; 3.449505, 8.079076, -1.5208075; 4.2160044, 3.2708793, -2.4679122; 4.9191713, -0.002077341, -2.5248184; 5.269871, -1.638724, -2.5549767; 5.8489957, -2.6041288, -2.2635698; 6.2128797, -3.4367418, -2.032598; 5.298296, -2.8321168, -1.9363599; -4.467857, 7.8907127, 0.9563512; -3.7275252, 4.0225925, 3.9313135; -1.6797853, 5.2456884, 6.0926833; -0.6564621, 5.8577566, 7.1735888; -0.22924078, 6.9144697, 7.7120976; 0.23078251, 7.7263036, 8.114898; 0.33493298, 6.923817, 7.2373343\",\n\"-0.0, 0.0, 0.0; 1.6255234, -1.82448, 0.70593554; 2.0479224, -8.725867, 2.999336; 1.8835949, -15.611023, -0.31430745; 2.1460347, -17.172733, 1.7533011; 2.2784772, -17.115051, 3.0139241; -1.4488806, -1.9179661, 0.7319719; -1.0235434, -9.019208, 1.9543006; -0.6102528, -16.18766, -0.9797404; -1.0630523, -16.845064, 1.5161898; -1.2703496, -16.458189, 2.7169292; -0.26301217, 2.4867399, -0.07591635; -0.5173638, 4.982286, -0.2947268; -0.5991245, 7.4988623, -0.68556154; -0.6756308, 9.082711, -0.8381228; -0.6965753, 10.658605, -1.0208713; -0.6645967, 12.245892, -1.4021527; 3.5641394, 8.1807995, -1.1265961; 4.484569, 3.3176098, -1.4513757; 5.193727, 0.07160616, -1.03848; 5.5476513, -1.5518026, -0.83404493; 6.093731, -2.4472125, -0.331703; 6.433491, -3.227065, 0.06250045; 5.5052032, -2.6479425, -0.056642763; -4.593435, 7.7988, 0.34462106; -4.557906, 3.518661, 2.8022609; -2.6258962, 4.111093, 5.3076715; -1.6603808, 4.4078918, 6.5606136; -1.1752369, 5.3136735, 7.29092; -0.67131656, 5.9930544, 7.8543463; -0.5620321, 5.310209, 6.8813467\",\n\"0.0, 0.0, 0.0; 1.5795989, -1.8537618, 0.7333716; 1.8189741, -8.8948765, 2.5861144; 1.4196606, -15.916859, -0.40469098; 1.6679366, -17.207499, 1.8437369; 1.8104818, -16.879438, 3.0611503; -1.4961742, -1.8699883, 0.7604199; -1.0928122, -8.977624, 1.9526672; -0.7911306, -16.072754, -1.1673031; -1.4131179, -16.680275, 1.3047254; -1.6670152, -16.263927, 2.486508; -0.16873442, 2.4953675, -0.059021316; -0.38638318, 4.9979944, -0.23168635; -0.51155984, 7.519623, -0.57565093; -0.61823237, 9.095148, -0.7855218; -0.6696309, 10.663273, -1.0213552; -0.6514838, 12.242353, -1.4361472; 3.643608, 8.359684, -0.43008476; 4.6191416, 3.4976215, -0.32069135; 5.028036, 0.34521127, 0.7305174; 5.2325563, -1.2321528, 1.2526342; 5.605539, -2.053309, 1.9867294; 5.807004, -2.7715244, 2.5546923; 4.9612427, -2.1929388, 2.1531665; -4.6171756, 7.65076, -0.09349528; -5.3006077, 3.0468197, 1.5489119; -3.7488847, 2.79908, 4.3580933; -2.9734416, 2.6758614, 5.76297; -2.4869196, 3.3252292, 6.7277346; -1.9879572, 3.7844892, 7.484742; -1.8221483, 3.2913256, 6.4103837\"\n]\n\nexport const seq6 = [\n  \"-0.0, 0.0, 0.0; 1.3696347, -1.9017509, 0.9883538; 1.5417879, -9.11618, 1.9831467; 1.1830394, -16.197296, -0.87022257; 1.1037607, -17.567686, 1.3430476; 1.0886887, -17.771362, 2.5953765; -1.5823708, -1.707374, 0.9458372; -1.6676929, -8.720402, 2.6525307; -1.2111459, -15.37113, -1.3130078; -2.0415764, -16.772337, 0.73976517; -2.454013, -17.061377, 1.9148277; 0.15482126, 2.496625, -0.04133476; 0.3304613, 4.992091, 0.24523826; 0.4696681, 7.488534, 0.7361421; 0.30819732, 9.050152, 1.0062943; 0.663599, 10.569888, 0.7210456; 0.7280704, 12.172138, 0.413614; 4.5894375, 8.4758415, 0.5239255; 5.0658064, 3.5785642, -0.10299766; 5.3155656, 0.8959594, 1.8847592; 5.4269705, -0.44475865, 2.8810406; 5.0844407, -1.104471, 3.7753348; 4.9214773, -1.6558869, 4.5158668; 5.630165, -1.5005988, 3.6882539; -3.5302317, 8.496097, 0.43386152; -3.9482443, 4.0066814, -1.5739396; -4.356726, 2.391549, 1.1801863; -4.560964, 1.5839849, 2.5572486; -4.3250346, 0.98727876, 3.6423438; -4.2411976, 0.5589767, 4.560207; -5.04998, 0.93512994, 3.7669048\",\n  \"-0.0, 0.0, 0.0; 1.3720827, -1.9006324, 0.9871089; 1.5411693, -9.114288, 1.9880176; 1.1812223, -16.197338, -0.8603952; 1.1057246, -17.566792, 1.3535864; 1.0924174, -17.772532, 2.605598; -1.5801724, -1.7100676, 0.94464546; -1.6884762, -8.733244, 2.607745; -1.2096231, -15.358665, -1.3973258; -2.081437, -16.761723, 0.6369424; -2.5146103, -17.069477, 1.799727; 0.1522156, 2.4966168, -0.050492432; 0.32667404, 4.9935036, 0.22418126; 0.46576744, 7.491703, 0.7060969; 0.30367494, 9.0546, 0.9683635; 0.6589342, 10.573724, 0.67969906; 0.7234283, 12.175557, 0.37010708; 4.5856876, 8.478038, 0.49228442; 5.0549493, 3.580504, -0.13798279; 5.273703, 0.928319, 1.8937626; 5.3696394, -0.39702678, 2.9119804; 5.0236425, -1.0372005, 3.819049; 4.857716, -1.5742357, 4.5694256; 5.562823, -1.4427615, 3.7346592; -3.5339367, 8.498352, 0.39823967; -3.9439309, 4.0028195, -1.5974898; -4.353646, 2.4135938, 1.1714838; -4.5585027, 1.6189814, 2.5559688; -4.3242216, 1.03223, 3.6468344; -4.241595, 0.6126243, 4.5688143; -5.0493155, 0.9830402, 3.7717395\",\n  \"-0.0, 0.0, 0.0; 1.3738452, -1.8997747, 0.9863086; 1.5399054, -9.112686, 1.9930806; 1.1794627, -16.19815, -0.8492532; 1.1077595, -17.566933, 1.3652694; 1.0961907, -17.774645, 2.6169724; -1.5785862, -1.7119544, 0.94387966; -1.7104003, -8.744816, 2.563794; -1.2053168, -15.345677, -1.4784367; -2.1275072, -16.750942, 0.5319536; -2.585659, -17.069641, 1.6821482; 0.15039392, 2.4965124, -0.060181182; 0.32412994, 4.9946795, 0.2030675; 0.4633088, 7.494299, 0.6775372; 0.29879132, 9.058289, 0.93165565; 0.65353245, 10.57689, 0.6396217; 0.7184489, 12.178349, 0.3281857; 4.583404, 8.479573, 0.46220917; 5.0473843, 3.5824065, -0.17478913; 5.233926, 0.96181774, 1.9006965; 5.3137918, -0.3475716, 2.9407125; 4.962263, -0.96817684, 3.859182; 4.791628, -1.4909077, 4.61855; 5.4946327, -1.3833935, 3.7785969; -3.536185, 8.5004225, 0.36526218; -3.9360244, 3.99718, -1.6150866; -4.347685, 2.4327798, 1.167701; -4.553514, 1.6505814, 2.5590937; -4.321126, 1.0748402, 3.6562128; -4.239908, 0.6648201, 4.58262; -5.046389, 1.0287628, 3.7813191\",\n  \"-0.0, 0.0, 0.0; 1.3762715, -1.8984065, 0.98556; 1.5401832, -9.1106615, 1.997371; 1.1790081, -16.198757, -0.8383031; 1.1128019, -17.566446, 1.3770661; 1.1039203, -17.773771, 2.6288552; -1.576399, -1.7143631, 0.9431631; -1.7300185, -8.756693, 2.5194347; -1.2012248, -15.3335495, -1.5587327; -2.1805816, -16.73883, 0.4244262; -2.666675, -17.06503, 1.5609682; 0.1494056, 2.4963708, -0.0680134; 0.32231987, 4.995723, 0.18429938; 0.45955998, 7.497223, 0.6493294; 0.29485887, 9.062519, 0.89514863; 0.64964074, 10.580586, 0.6003994; 0.7144215, 12.181846, 0.28790975; 4.5791106, 8.484446, 0.4325133; 5.0400844, 3.5881605, -0.21338278; 5.193518, 1.0008466, 1.9060962; 5.2568626, -0.29174995, 2.9680257; 4.8996167, -0.8919983, 3.8977497; 4.724093, -1.399724, 4.666131; 5.425298, -1.3165263, 3.821924; -3.5404356, 8.499458, 0.33103526; -3.9329157, 3.9898186, -1.6361858; -4.3447504, 2.4520497, 1.1613806; -4.550668, 1.6831665, 2.5601625; -4.3198314, 1.120331, 3.6642838; -4.239828, 0.7213485, 4.5956035; -5.045246, 1.0766835, 3.789385\",\n  \"-0.0, 0.0, 0.0; 1.3771118, -1.8982728, 0.9846431; 1.5400949, -9.109687, 2.0025797; 1.1790274, -16.200947, -0.8251853; 1.1179239, -17.567245, 1.3911884; 1.1114984, -17.773746, 2.6431289; -1.5756404, -1.7155424, 0.9422861; -1.7516145, -8.766933, 2.4751155; -1.1955487, -15.320606, -1.6366084; -2.2321825, -16.724674, 0.3180921; -2.7463763, -17.056324, 1.4406039; 0.14821969, 2.4962249, -0.075544745; 0.31982017, 4.9967046, 0.16627811; 0.45558858, 7.499921, 0.62242043; 0.2910841, 9.066584, 0.8595096; 0.6455393, 10.584181, 0.56195885; 0.70953554, 12.185294, 0.24856052; 4.574772, 8.488381, 0.4042735; 5.0328884, 3.592999, -0.25043863; 5.154567, 1.0395596, 1.911752; 5.20207, -0.23594987, 2.994956; 4.838265, -0.8145496, 3.9357946; 4.65713, -1.3062088, 4.7132683; 5.3572197, -1.2482948, 3.8660276; -3.5447257, 8.499046, 0.29840285; -3.9290135, 3.9822426, -1.6539426; -4.34161, 2.471397, 1.1581438; -4.5479074, 1.7159762, 2.564186; -4.3193035, 1.1674883, 3.6759658; -4.241067, 0.7807733, 4.6125946; -5.044938, 1.1265893, 3.8007135\",\n  \"-0.0, 0.0, 0.0; 1.379656, -1.8970985, 0.9833442; 1.5410205, -9.107705, 2.0072439; 1.179258, -16.202278, -0.8121073; 1.1234787, -17.567762, 1.4049084; 1.1195531, -17.77606, 2.6565614; -1.5733405, -1.7183332, 0.9410431; -1.771862, -8.7782545, 2.431259; -1.1913631, -15.309974, -1.7119024; -2.2834294, -16.71165, 0.21412075; -2.8249035, -17.052198, 1.3210322; 0.14745636, 2.4960425, -0.0827203; 0.3180042, 4.997547, 0.14903495; 0.45087165, 7.5024137, 0.5968975; 0.2872324, 9.07035, 0.8260324; 0.64182526, 10.5873785, 0.5257635; 0.70521903, 12.188328, 0.21140787; 4.5692363, 8.494299, 0.37883943; 5.0257397, 3.6005073, -0.28876114; 5.113856, 1.0824802, 1.9161656; 5.144613, -0.17517555, 3.0206423; 4.7740335, -0.7316444, 3.9721267; 4.5870905, -1.2067564, 4.758463; 5.2864866, -1.174092, 3.9093022; -3.5501769, 8.496405, 0.2662262; -3.9291327, 3.9726944, -1.6711128; -4.342009, 2.4915953, 1.156713; -4.5484467, 1.7510464, 2.5706244; -4.321214, 1.2187703, 3.690535; -4.2439766, 0.8459449, 4.6328616; -5.0469584, 1.1812525, 3.815709\",\n  \"-0.0, 0.0, 0.0; 1.3806034, -1.896784, 0.9826206; 1.5408976, -9.106722, 2.011384; 1.1798913, -16.204391, -0.8002629; 1.1302673, -17.568804, 1.4175596; 1.1293736, -17.774328, 2.6696768; -1.572481, -1.7194986, 0.94035023; -1.7915651, -8.787421, 2.3891816; -1.1848965, -15.297743, -1.783802; -2.3276923, -16.696808, 0.11448932; -2.8944259, -17.04887, 1.2050327; 0.14621246, 2.4959016, -0.088942535; 0.31513184, 4.9983606, 0.13351521; 0.44595596, 7.504863, 0.57274747; 0.2830733, 9.074007, 0.7940155; 0.63734436, 10.590612, 0.4912367; 0.69973654, 12.191504, 0.17638108; 4.5635366, 8.499301, 0.35153496; 5.0162106, 3.6065822, -0.32645524; 5.0737066, 1.1252513, 1.9206802; 5.0891886, -0.11391616, 3.046174; 4.7108197, -0.6477042, 4.007536; 4.5172048, -1.1057853, 4.802318; 5.21684, -1.0985448, 3.9527564; -3.5558684, 8.494491, 0.23839673; -3.927367, 3.9628406, -1.6817541; -4.339728, 2.5120678, 1.161824; -4.5459065, 1.786684, 2.5836124; -4.319304, 1.2720113, 3.7118483; -4.242514, 0.91411245, 4.659981; -5.0450964, 1.2372899, 3.8375654\",\n  \"-0.0, 0.0, 0.0; 1.3824235, -1.8963064, 0.9809823; 1.5406053, -9.105348, 2.01633; 1.1802535, -16.206497, -0.786602; 1.1379781, -17.568964, 1.4325683; 1.1406486, -17.772219, 2.6850538; -1.5708327, -1.7218604, 0.9387828; -1.8122463, -8.796934, 2.3486385; -1.1802799, -15.287891, -1.8506713; -2.3646207, -16.68659, 0.022255063; -2.9525099, -17.054651, 1.0961901; 0.14441827, 2.4958134, -0.09419578; 0.31166872, 4.9991217, 0.11980969; 0.44062608, 7.507066, 0.5512924; 0.2783934, 9.077398, 0.7644633; 0.63197684, 10.593562, 0.4586852; 0.692954, 12.194332, 0.14294016; 4.5574164, 8.503971, 0.32649875; 5.007114, 3.6127071, -0.36385864; 5.033865, 1.1688476, 1.9245384; 5.034007, -0.051449656, 3.0705693; 4.646965, -0.5618487, 4.0411363; 4.4459376, -1.0022436, 4.8440337; 5.1467447, -1.0206116, 3.9956064; -3.561996, 8.492594, 0.2143906; -3.9299247, 3.9538736, -1.6896834; -4.3413787, 2.5367475, 1.1709425; -4.5471053, 1.8281841, 2.601253; -4.320825, 1.3306348, 3.7372084; -4.244163, 0.98733366, 4.690734; -5.046605, 1.2992499, 3.863846\",\n  \"-0.0, 0.0, 0.0; 1.3840973, -1.8957459, 0.97970426; 1.5443796, -9.103806, 2.021545; 1.1798825, -16.208488, -0.7718804; 1.1465368, -17.569916, 1.4480801; 1.1539389, -17.769442, 2.7011456; -1.5693119, -1.7239125, 0.9375595; -1.8314337, -8.80588, 2.3085747; -1.1748855, -15.277119, -1.9173136; -2.3959446, -16.6745, -0.067120075; -3.0027227, -17.065245, 0.98813236; 0.14244904, 2.4957418, -0.09897011; 0.30805314, 4.9998407, 0.10691474; 0.43567148, 7.5092278, 0.5303321; 0.27403864, 9.080444, 0.73735684; 0.62708026, 10.596153, 0.42871022; 0.68702394, 12.196678, 0.11152902; 4.5515456, 8.508281, 0.29842037; 4.997167, 3.6184645, -0.40472156; 4.993354, 1.2123616, 1.9234927; 4.9782443, 0.011074901, 3.0893373; 4.5826745, -0.47555646, 4.068635; 4.3743296, -0.89791787, 4.879318; 5.0761685, -0.94191086, 4.032688; -3.56796, 8.4909, 0.19416782; -3.9329557, 3.9449286, -1.693098; -4.3422832, 2.5632794, 1.1851336; -4.546948, 1.8724546, 2.624247; -4.3197556, 1.391834, 3.7672868; -4.242204, 1.0629278, 4.7258015; -5.045393, 1.3636177, 3.895487\",\n  \"-0.0, 0.0, 0.0; 1.3843211, -1.896453, 0.9780186; 1.5450801, -9.103461, 2.0270405; 1.1816366, -16.211216, -0.75869656; 1.1566101, -17.571373, 1.4621508; 1.1679692, -17.77008, 2.7153168; -1.56911, -1.7249725, 0.9359461; -1.8497381, -8.813742, 2.2675765; -1.1699462, -15.265053, -1.9850204; -2.423243, -16.661224, -0.15558624; -3.0464644, -17.07224, 0.88223815; 0.14078872, 2.4956572, -0.103384934; 0.304212, 5.000474, 0.09538088; 0.42992893, 7.511009, 0.5125121; 0.26921776, 9.083311, 0.71187145; 0.62123895, 10.598688, 0.40044084; 0.6792804, 12.199229, 0.08298662; 4.5447536, 8.513101, 0.27514678; 4.9882073, 3.6249218, -0.44063497; 4.9523764, 1.2561393, 1.9252713; 4.921295, 0.07364726, 3.1098633; 4.5166616, -0.38811424, 4.097465; 4.3005223, -0.7915883, 4.9156923; 5.003485, -0.8620969, 4.071792; -3.574808, 8.488331, 0.17683357; -3.9362876, 3.935595, -1.6947374; -4.344942, 2.5899682, 1.2006054; -4.54927, 1.9171555, 2.648275; -4.3203883, 1.4525211, 3.7975707; -4.241451, 1.1369727, 4.7604527; -5.0458465, 1.4258214, 3.9271083\",\n  \"-0.0, 0.0, 0.0; 1.3846259, -1.8967032, 0.977101; 1.5482268, -9.102516, 2.0338674; 1.1815265, -16.213488, -0.74322057; 1.1672864, -17.57166, 1.4789371; 1.1845021, -17.759933, 2.7336464; -1.568834, -1.7256992, 0.93506885; -1.8677096, -8.82098, 2.2274694; -1.1669317, -15.251846, -2.0525985; -2.4497046, -16.64762, -0.24340332; -3.0878787, -17.081808, 0.77573025; 0.13857447, 2.4956431, -0.106659725; 0.29953817, 5.001149, 0.08530992; 0.4236706, 7.5130825, 0.4944225; 0.2628188, 9.086093, 0.6879914; 0.6131716, 10.601344, 0.37407625; 0.669062, 12.201841, 0.05601856; 4.5374365, 8.517724, 0.24959233; 4.9771357, 3.6310644, -0.47876516; 4.9121385, 1.3006284, 1.9243101; 4.8665056, 0.1374309, 3.1273901; 4.451874, -0.2997398, 4.122011; 4.2271643, -0.6843903, 4.9469676; 4.9325166, -0.78045833, 4.1075954; -3.5822008, 8.4861355, 0.15988103; -3.9428463, 3.9264755, -1.6949196; -4.350329, 2.617396, 1.217294; -4.5540695, 1.9628569, 2.673399; -4.321873, 1.5138067, 3.8282113; -4.240254, 1.2111585, 4.795003; -5.046988, 1.4878782, 3.9598053\",\n  \"-0.0, 0.0, 0.0; 1.3845321, -1.8978987, 0.9749109; 1.5491117, -9.102022, 2.0429704; 1.184219, -16.216507, -0.7253399; 1.1796498, -17.572289, 1.4983184; 1.2015893, -17.755327, 2.7537284; -1.5689211, -1.7267545, 0.9329722; -1.8852085, -8.828065, 2.1875637; -1.162252, -15.239643, -2.1176798; -2.4733338, -16.636044, -0.32938266; -3.1257715, -17.085072, 0.6741706; 0.13511948, 2.4957275, -0.109093145; 0.29294372, 5.001871, 0.07707371; 0.4164167, 7.514866, 0.47981828; 0.2560308, 9.088689, 0.66706663; 0.6039102, 10.60392, 0.35031947; 0.6563811, 12.204438, 0.03178063; 4.5292945, 8.520979, 0.22627357; 4.9667597, 3.6362014, -0.51592493; 4.8718166, 1.3453779, 1.9239604; 4.8112426, 0.20210683, 3.1453424; 4.386537, -0.20936021, 4.146656; 4.153176, -0.57421875, 4.9781756; 4.860974, -0.6964133, 4.144277; -3.5904522, 8.485066, 0.14896399; -3.950177, 3.9189725, -1.6901209; -4.3561563, 2.648556, 1.2393744; -4.559145, 2.0133476, 2.70412; -4.3230977, 1.5795516, 3.8639712; -4.2384505, 1.2893713, 4.8343186; -5.047839, 1.5533781, 3.9975753\",\n  \"-0.0, 0.0, 0.0; 1.3844489, -1.8988949, 0.97308725; 1.5535295, -9.10109, 2.0533798; 1.187143, -16.219154, -0.70552063; 1.1925143, -17.573421, 1.5190582; 1.2194781, -17.752647, 2.7749205; -1.5689974, -1.7276268, 0.93122774; -1.9026253, -8.834721, 2.1480117; -1.1586668, -15.226923, -2.1823916; -2.4959931, -16.623192, -0.4135313; -3.1614966, -17.093103, 0.5717136; 0.13162656, 2.4958382, -0.110818684; 0.2862515, 5.002589, 0.06977153; 0.40900254, 7.5167837, 0.46518075; 0.2484006, 9.091242, 0.6468192; 0.5939411, 10.606596, 0.3281063; 0.64349127, 12.207239, 0.009731472; 4.520979, 8.524302, 0.20275101; 4.9568243, 3.6418724, -0.5556762; 4.831734, 1.3912303, 1.9199831; 4.756112, 0.26816154, 3.15914; 4.3209443, -0.116777, 4.1664934; 4.078603, -0.46102467, 5.0042095; 4.7894697, -0.6094066, 4.1771984; -3.598852, 8.483963, 0.13743463; -3.9602113, 3.9109468, -1.6840439; -4.362202, 2.6800218, 1.2628098; -4.5631986, 2.064561, 2.7362351; -4.3221154, 1.6459653, 3.9006271; -4.233487, 1.3681393, 4.8742294; -5.046344, 1.6191556, 4.0368505\",\n  \"-0.0, 0.0, 0.0; 1.3842151, -1.8999985, 0.9712635; 1.5546553, -9.100024, 2.0657196; 1.191407, -16.221565, -0.6846082; 1.2068019, -17.574514, 1.5407252; 1.2384053, -17.75268, 2.79663; -1.569212, -1.7283715, 0.92948204; -1.9184618, -8.840918, 2.1094608; -1.1536659, -15.214764, -2.244308; -2.5163584, -16.612087, -0.49575675; -3.1944246, -17.100058, 0.47198856; 0.1282309, 2.4959917, -0.11134231; 0.2794071, 5.00328, 0.06465213; 0.40091503, 7.5186615, 0.45283276; 0.23884048, 9.093501, 0.6297996; 0.5817558, 10.608939, 0.30865803; 0.6286039, 12.209512, -0.010482997; 4.5116405, 8.528602, 0.18030623; 4.9455338, 3.6485538, -0.59439075; 4.7915926, 1.4388647, 1.9162871; 4.701572, 0.33638012, 3.1728444; 4.2559, -0.021510333, 4.1855636; 4.004538, -0.34460998, 5.0290256; 4.7186837, -0.51905596, 4.2099648; -3.6082597, 8.481846, 0.12950015; -3.97487, 3.902505, -1.6749607; -4.3699794, 2.714264, 1.2902867; -4.567535, 2.120144, 2.7729082; -4.3220625, 1.7163472, 3.9416013; -4.229946, 1.4506053, 4.918248; -5.0458283, 1.6893762, 4.0802307\",\n  \"-0.0, 0.0, 0.0; 1.3833067, -1.9012511, 0.97010607; 1.5569608, -9.098984, 2.0790417; 1.1951358, -16.223816, -0.66294026; 1.2211688, -17.57451, 1.5636632; 1.2580196, -17.746302, 2.820313; -1.5700387, -1.7282163, 0.92837435; -1.9358162, -8.846017, 2.0710769; -1.1495147, -15.202578, -2.304078; -2.5382695, -16.597908, -0.5745448; -3.228949, -17.102505, 0.37559402; 0.12455865, 2.4961457, -0.11205401; 0.27191556, 5.0039425, 0.059883513; 0.39233994, 7.520344, 0.4417403; 0.22852844, 9.095406, 0.6150878; 0.5685854, 10.611034, 0.29181245; 0.6125126, 12.211509, -0.028232604; 4.5019836, 8.53232, 0.16058528; 4.9359465, 3.6552649, -0.6326955; 4.752302, 1.4882348, 1.9129248; 4.647455, 0.4071796, 3.186832; 4.19165, 0.07706466, 4.204464; 3.9315715, -0.2241582, 5.053362; 4.648931, -0.42464763, 4.243118; -3.6179516, 8.480095, 0.122066885; -3.9897375, 3.8941083, -1.6643682; -4.374889, 2.749253, 1.319201; -4.5674634, 2.1768265, 2.8109841; -4.317994, 1.7891262, 3.9842727; -4.222618, 1.5367073, 4.9641356; -5.0413046, 1.7632476, 4.125458\",\n  \"-0.0, 0.0, 0.0; 1.3829356, -1.9023218, 0.96853507; 1.5605677, -9.09761, 2.0926008; 1.2008067, -16.225628, -0.6413584; 1.2386785, -17.574013, 1.5864747; 1.281156, -17.742868, 2.8433447; -1.5703777, -1.7287153, 0.92687064; -1.9504579, -8.851532, 2.0330634; -1.1433136, -15.192331, -2.361126; -2.5594301, -16.582848, -0.64999986; -3.2631176, -17.101465, 0.282888; 0.12120045, 2.4962685, -0.11299857; 0.26502532, 5.0045524, 0.054777943; 0.38406685, 7.5218973, 0.43080452; 0.21783835, 9.096888, 0.6024994; 0.5557086, 10.61273, 0.27793995; 0.5978981, 12.213065, -0.043034017; 4.492384, 8.536581, 0.14017054; 4.924767, 3.662434, -0.67163014; 4.7131805, 1.5383306, 1.9077773; 4.5943837, 0.47883415, 3.198462; 4.1282783, 0.1765854, 4.2200785; 3.8593576, -0.10248661, 5.073779; 4.580562, -0.32827365, 4.2736664; -3.6275604, 8.47768, 0.11603865; -4.003771, 3.8849201, -1.6519749; -4.377202, 2.7875955, 1.3508816; -4.563917, 2.2389328, 2.8523078; -4.3107224, 1.867211, 4.029961; -4.2122984, 1.6280324, 5.0128393; -5.033601, 1.8426057, 4.173572\",\n  \"-0.0, 0.0, 0.0; 1.3818213, -1.9037287, 0.96736; 1.5627099, -9.096359, 2.1077986; 1.2068652, -16.22779, -0.6177547; 1.2565784, -17.572805, 1.6118824; 1.3047097, -17.734003, 2.869554; -1.5713893, -1.7283984, 0.9257461; -1.9646155, -8.855955, 1.9962388; -1.1367078, -15.183659, -2.4129395; -2.5839639, -16.570868, -0.72534525; -3.302959, -17.092754, 0.19394714; 0.11754641, 2.496451, -0.11283073; 0.25701421, 5.0051875, 0.051827356; 0.37398928, 7.5234876, 0.42206073; 0.20486595, 9.09832, 0.5923667; 0.54049814, 10.614157, 0.26546317; 0.5810411, 12.214033, -0.058001727; 4.4807854, 8.541821, 0.122835636; 4.9136257, 3.671297, -0.7101914; 4.6731615, 1.5909886, 1.9021678; 4.5399446, 0.5534762, 3.2092004; 4.0642056, 0.27967113, 4.2343893; 3.7870128, 0.023417592, 5.092586; 4.5119777, -0.22733659, 4.303381; -3.6391199, 8.474362, 0.11134875; -4.019024, 3.874158, -1.6364039; -4.3800774, 2.8250062, 1.3851255; -4.5606046, 2.3004303, 2.8958883; -4.3039026, 1.9470546, 4.0784206; -4.202486, 1.723288, 5.064619; -5.0263295, 1.9254092, 4.224751\",\n  \"-0.0, 0.0, 0.0; 1.3822907, -1.9035985, 0.9669453; 1.5637078, -9.09384, 2.1222653; 1.2117677, -16.228157, -0.5962355; 1.2751001, -17.570251, 1.6348157; 1.3296618, -17.725595, 2.892961; -1.5709641, -1.7289972, 0.92534965; -1.9770458, -8.861259, 1.9590673; -1.130435, -15.177208, -2.4633932; -2.6098568, -16.561758, -0.8017061; -3.3450007, -17.07878, 0.107509375; 0.11379444, 2.4966075, -0.11320252; 0.24934709, 5.005747, 0.04856593; 0.364182, 7.5248737, 0.4138102; 0.19074687, 9.099377, 0.5828233; 0.52369034, 10.615355, 0.2538314; 0.5627141, 12.21488, -0.07154822; 4.469349, 8.547129, 0.10572797; 4.9042053, 3.680369, -0.74798703; 4.6348395, 1.6450431, 1.8967848; 4.4871936, 0.6301068, 3.219894; 4.002696, 0.3845115, 4.2481227; 3.7179408, 0.15089536, 5.1102953; 4.4458055, -0.124344826, 4.3319945; -3.650486, 8.470762, 0.10805243; -4.0362635, 3.8637152, -1.6202822; -4.3824186, 2.8661525, 1.420403; -4.5554943, 2.3673713, 2.9407434; -4.295631, 2.0328476, 4.1280584; -4.1915092, 1.8249049, 5.117433; -5.017642, 2.014279, 4.276843\",\n  \"-0.0, 0.0, 0.0; 1.3819325, -1.9038876, 0.96688807; 1.5660871, -9.091516, 2.13793; 1.2186188, -16.22931, -0.5720072; 1.2962337, -17.567448, 1.6609676; 1.357624, -17.712202, 2.920061; -1.5712886, -1.7287318, 0.9252951; -1.9890399, -8.865241, 1.9244757; -1.1265863, -15.173168, -2.5063639; -2.6367245, -16.553839, -0.86926126; -3.3874412, -17.059662, 0.0335055; 0.11040164, 2.4967837, -0.11267839; 0.24129847, 5.006302, 0.047032386; 0.35246685, 7.5263147, 0.40726867; 0.17627417, 9.100605, 0.5754101; 0.50660634, 10.616564, 0.24371216; 0.5432822, 12.215559, -0.084537715; 4.455514, 8.554748, 0.09160325; 4.892137, 3.6917734, -0.7825403; 4.5942516, 1.7024865, 1.8940113; 4.432365, 0.71065325, 3.2328806; 3.9395454, 0.49247256, 4.2633343; 3.6475954, 0.28094602, 5.128797; 4.378233, -0.01760596, 4.361769; -3.6641724, 8.464987, 0.105184644; -4.0541115, 3.8509088, -1.6033475; -4.3846846, 2.9086258, 1.4566436; -4.54997, 2.4374864, 2.9866376; -4.285876, 2.1241925, 4.178801; -4.178115, 1.9341161, 5.1713743; -5.007312, 2.109536, 4.330774\",\n  \"-0.0, 0.0, 0.0; 1.3822172, -1.9031674, 0.96789896; 1.568468, -9.088355, 2.1534905; 1.2268044, -16.229443, -0.54849625; 1.3189, -17.562836, 1.6867664; 1.3869272, -17.701038, 2.9462547; -1.5710292, -1.7284495, 0.92626196; -1.9983742, -8.869057, 1.8915366; -1.1217464, -15.171205, -2.544743; -2.6618912, -16.548786, -0.93319166; -3.428074, -17.034176, -0.032203496; 0.10628348, 2.4969995, -0.11185528; 0.23238352, 5.0068645, 0.046252683; 0.3402952, 7.527778, 0.4011348; 0.1602006, 9.101549, 0.5699998; 0.48747897, 10.617662, 0.23598942; 0.5217905, 12.216057, -0.09542638; 4.441437, 8.561566, 0.07827887; 4.880518, 3.7028666, -0.81811726; 4.555534, 1.761702, 1.8904232; 4.3801146, 0.79400444, 3.2451563; 3.879703, 0.6024743, 4.2772484; 3.5811884, 0.41256472, 5.1454806; 4.314475, 0.09199685, 4.389952; -3.6780863, 8.459933, 0.10206136; -4.0719004, 3.839212, -1.5875232; -4.3861976, 2.9519348, 1.4905732; -4.543348, 2.508298, 3.0296197; -4.2750206, 2.2172794, 4.226475; -4.1635566, 2.046026, 5.222061; -4.9958453, 2.2074118, 4.3817043\",\n  \"-0.0, 0.0, 0.0; 1.3835584, -1.901773, 0.96872336; 1.5705042, -9.084563, 2.1686487; 1.2340765, -16.229362, -0.5241685; 1.3420671, -17.558731, 1.7127788; 1.4175339, -17.687504, 2.9728427; -1.5698099, -1.7291338, 0.9270513; -2.0087266, -8.873309, 1.8601896; -1.119495, -15.172478, -2.5778122; -2.6846035, -16.546045, -0.9870192; -3.4635537, -17.004902, -0.0830794; 0.10224229, 2.4972308, -0.110450014; 0.22386721, 5.0073953, 0.04640697; 0.32824367, 7.5292177, 0.39584428; 0.14437893, 9.102584, 0.564415; 0.46814942, 10.618853, 0.2276991; 0.49939448, 12.21667, -0.10678765; 4.427522, 8.5685625, 0.06721437; 4.8696394, 3.714415, -0.8520629; 4.5184875, 1.8228964, 1.8881519; 4.3299975, 0.8800881, 3.2585886; 3.8219671, 0.71511245, 4.291544; 3.5168757, 0.54688084, 5.161958; 4.253145, 0.20499995, 4.418775; -3.691814, 8.454615, 0.09830549; -4.0904536, 3.82757, -1.5727396; -4.3868814, 2.9995806, 1.5235941; -4.5350947, 2.5855887, 3.07176; -4.2622995, 2.3169878, 4.272838; -4.146896, 2.164726, 5.2710576; -4.9824452, 2.3124325, 4.4314213\",\n  \"-0.0, 0.0, 0.0; 1.3847789, -1.9002012, 0.9700627; 1.5731333, -9.080371, 2.1853511; 1.242359, -16.229683, -0.49616766; 1.3664722, -17.554518, 1.7426322; 1.4494797, -17.671488, 3.0033727; -1.568699, -1.7294544, 0.92833257; -2.0170293, -8.876781, 1.8324077; -1.1150408, -15.176064, -2.6028578; -2.7064996, -16.546518, -1.0356982; -3.4986317, -16.968971, -0.12548935; 0.09796653, 2.4975314, -0.107486546; 0.2143842, 5.0079184, 0.04976079; 0.31412435, 7.530616, 0.3942025; 0.12597968, 9.10354, 0.562178; 0.446321, 10.619866, 0.22245547; 0.47470897, 12.217038, -0.11535084; 4.4113913, 8.576956, 0.06270501; 4.8575225, 3.727767, -0.88049304; 4.480906, 1.8861219, 1.890144; 4.279699, 0.9683145, 3.275661; 3.7641537, 0.82886636, 4.308655; 3.4525695, 0.68150693, 5.1805515; 4.1917467, 0.319432, 4.449925; -3.707711, 8.447924, 0.09564054; -4.109912, 3.8145914, -1.5570263; -4.3886757, 3.0467417, 1.5563992; -4.5280576, 2.6628163, 3.11311; -4.250173, 2.418975, 4.3182964; -4.130317, 2.287634, 5.31896; -4.9695377, 2.4201536, 4.480452\",\n  \"-0.0, 0.0, 0.0; 1.3859429, -1.8986018, 0.97153115; 1.5748769, -9.076455, 2.200341; 1.2522688, -16.229683, -0.471709; 1.3916789, -17.550459, 1.768589; 1.4813945, -17.664227, 3.029163; -1.5676386, -1.7296617, 0.92973787; -2.026853, -8.879699, 1.8065152; -1.1110222, -15.18136, -2.622528; -2.728098, -16.550842, -1.0809506; -3.5324812, -16.931238, -0.1629715; 0.09183687, 2.497853, -0.10540495; 0.20255312, 5.0084686, 0.05231557; 0.2997155, 7.5317388, 0.39328164; 0.10782522, 9.104237, 0.5610115; 0.4245369, 10.620552, 0.21785766; 0.4498339, 12.216994, -0.123624206; 4.3955293, 8.58226, 0.057083905; 4.844565, 3.7378683, -0.909103; 4.4447174, 1.9469177, 1.8913512; 4.231908, 1.0545194, 3.2916546; 3.7087054, 0.9415021, 4.324028; 3.3904905, 0.8158067, 5.196922; 4.1325545, 0.4331769, 4.479822; -3.7233934, 8.4440975, 0.09671712; -4.1270156, 3.8040228, -1.5365753; -4.3877993, 3.0973628, 1.5928566; -4.5181913, 2.744032, 3.1575704; -4.2346554, 2.524943, 4.3661895; -4.1098847, 2.414493, 5.3687744; -4.9531403, 2.5318587, 4.532058\",\n  \"-0.0, 0.0, 0.0; 1.3873585, -1.8968405, 0.97295; 1.577034, -9.072223, 2.215994; 1.2612247, -16.229187, -0.44684815; 1.4185239, -17.54474, 1.7953365; 1.5164648, -17.644758, 3.056464; -1.5663475, -1.7301005, 0.9310957; -2.0368237, -8.882422, 1.7829101; -1.1064229, -15.189621, -2.6352007; -2.7494228, -16.560226, -1.1223016; -3.5652256, -16.89091, -0.19519097; 0.086486414, 2.4981475, -0.10292467; 0.1912005, 5.008992, 0.05524268; 0.28368995, 7.5329943, 0.3920638; 0.08822918, 9.105156, 0.5588158; 0.4011359, 10.621415, 0.21194029; 0.42280406, 12.217124, -0.13319853; 4.3773823, 8.590742, 0.052703112; 4.829614, 3.75133, -0.93667006; 4.409402, 2.010969, 1.892551; 4.18642, 1.1439159, 3.3071218; 3.655917, 1.056527, 4.338257; 3.3314054, 0.9520265, 5.211627; 4.076674, 0.5502533, 4.508456; -3.7412486, 8.437227, 0.09544167; -4.149726, 3.7909756, -1.518975; -4.3891068, 3.1473393, 1.6257269; -4.508796, 2.8255215, 3.198076; -4.2185926, 2.6320474, 4.409481; -4.0880165, 2.5432644, 5.413479; -4.9360027, 2.645461, 4.579558\",\n  \"-0.0, 0.0, 0.0; 1.3873793, -1.895738, 0.97506654; 1.5811281, -9.068507, 2.23248; 1.2712798, -16.228622, -0.42257833; 1.4470786, -17.540657, 1.8202949; 1.5533962, -17.636204, 3.0810907; -1.5663263, -1.7290279, 0.9331213; -2.0452182, -8.883612, 1.7609128; -1.1020126, -15.19813, -2.6440082; -2.7688322, -16.568226, -1.1569233; -3.594863, -16.862488, -0.22659945; 0.08038492, 2.4984696, -0.10000762; 0.17864576, 5.00953, 0.058872744; 0.2678026, 7.5342903, 0.3908785; 0.067793444, 9.1059065, 0.5573834; 0.37617582, 10.622278, 0.2069669; 0.3939579, 12.217274, -0.14167371; 4.359738, 8.597201, 0.04649046; 4.8164787, 3.7632747, -0.96732616; 4.375593, 2.074748, 1.8900197; 4.142286, 1.2336571, 3.3185315; 3.6052775, 1.1724846, 4.3481865; 3.2751327, 1.0897267, 5.2217765; 4.023019, 0.66875756, 4.5327578; -3.7586331, 8.432259, 0.095544845; -4.171239, 3.7807918, -1.5027238; -4.388891, 3.1989791, 1.6555735; -4.4977183, 2.9080741, 3.2347202; -4.1992383, 2.742114, 4.4481945; -4.061626, 2.6763957, 5.453027; -4.9153657, 2.7613232, 4.623048\",\n  \"-0.0, 0.0, 0.0; 1.3872749, -1.89498, 0.9766872; 1.5839244, -9.0648155, 2.2502804; 1.2807375, -16.2276, -0.39833784; 1.4745972, -17.536388, 1.8449435; 1.5890348, -17.626244, 3.1054468; -1.5664207, -1.7281048, 0.9346723; -2.0542376, -8.884681, 1.7397186; -1.0963013, -15.20907, -2.6478295; -2.7836568, -16.577673, -1.1826903; -3.6176682, -16.834555, -0.24842268; 0.072975054, 2.4988115, -0.09711073; 0.16413736, 5.010065, 0.06295015; 0.25085756, 7.5353603, 0.39151567; 0.045253247, 9.106418, 0.5564741; 0.34942588, 10.622703, 0.20202553; 0.36442402, 12.216995, -0.14994526; 4.3412385, 8.602338, 0.041289657; 4.8020864, 3.7737713, -0.9959409; 4.344068, 2.137434, 1.8889413; 4.1022034, 1.3224788, 3.3311138; 3.5588317, 1.2864621, 4.358615; 3.2231817, 1.2246512, 5.23184; 3.973756, 0.7857101, 4.557107; -3.7768872, 8.428482, 0.099353194; -4.1915636, 3.7715082, -1.4822537; -4.38822, 3.2529824, 1.6884209; -4.486546, 2.993721, 3.2737565; -4.1776357, 2.8556814, 4.488117; -4.0312037, 2.8133602, 5.492961; -4.8921204, 2.880958, 4.6688237\",\n  \"-0.0, 0.0, 0.0; 1.3867849, -1.8945422, 0.9782314; 1.5903538, -9.06093, 2.2700112; 1.2894818, -16.225689, -0.3735323; 1.503987, -17.531769, 1.8694484; 1.6281323, -17.610579, 3.129772; -1.5668658, -1.7269005, 0.9361507; -2.061719, -8.885459, 1.7189662; -1.0927896, -15.221834, -2.6488287; -2.7960896, -16.584894, -1.1970333; -3.6349955, -16.806925, -0.25822616; 0.06593161, 2.49912, -0.09416494; 0.14990863, 5.010573, 0.06669325; 0.23374608, 7.5365105, 0.3910417; 0.022736639, 9.106873, 0.5557871; 0.32216674, 10.623041, 0.1968332; 0.3335726, 12.216362, -0.15964267; 4.3221884, 8.608352, 0.033115834; 4.7879443, 3.785665, -1.028981; 4.3128734, 2.201818, 1.8823183; 4.0624895, 1.4131455, 3.3375902; 3.5143707, 1.4029528, 4.363149; 3.1745894, 1.3627257, 5.2360377; 3.9268758, 0.90580904, 4.5752892; -3.7956047, 8.423806, 0.10331109; -4.213636, 3.7622766, -1.463928; -4.3875117, 3.30862, 1.7180028; -4.4744496, 3.08179, 3.3089662; -4.153397, 2.971704, 4.523033; -3.996721, 2.952806, 5.527045; -4.8659105, 3.0033157, 4.710401\",\n  \"-0.0, 0.0, 0.0; 1.3861378, -1.8938966, 0.98039585; 1.5962296, -9.056442, 2.292283; 1.298496, -16.221886, -0.34975672; 1.5342036, -17.524328, 1.8932111; 1.6681359, -17.593006, 3.1531255; -1.5674535, -1.7252423, 0.9382219; -2.0701513, -8.885424, 1.7009382; -1.0895938, -15.2368555, -2.642325; -2.8043318, -16.595913, -1.200274; -3.6448205, -16.777342, -0.25418627; 0.058482673, 2.499426, -0.09090867; 0.13453165, 5.0110197, 0.071684845; 0.21468577, 7.5374937, 0.39277005; -0.002976194, 9.107087, 0.5561871; 0.29132158, 10.6233425, 0.19337404; 0.29913878, 12.21603, -0.16601953; 4.301008, 8.615422, 0.028957397; 4.771376, 3.7985344, -1.057151; 4.2815695, 2.2680273, 1.8801204; 4.0238276, 1.5060631, 3.34828; 3.471997, 1.5216889, 4.371778; 3.1289573, 1.5030667, 5.24412; 3.882196, 1.0284443, 4.5970793; -3.816397, 8.417982, 0.108404964; -4.235732, 3.7507095, -1.4412957; -4.3887043, 3.364114, 1.7505475; -4.46519, 3.170817, 3.3464673; -4.132864, 3.0892766, 4.5597534; -3.9667284, 3.0941896, 5.5624094; -4.8435135, 3.1268525, 4.753008\",\n  \"-0.0, 0.0, 0.0; 1.3849801, -1.8937547, 0.9823044; 1.6028605, -9.051871, 2.3168983; 1.3078302, -16.216785, -0.32688212; 1.5638425, -17.51577, 1.915865; 1.7070987, -17.570438, 3.1754394; -1.5685074, -1.7232891, 0.9400479; -2.0774539, -8.885206, 1.6820452; -1.088448, -15.253059, -2.6351783; -2.8087707, -16.606653, -1.194641; -3.6455078, -16.73901, -0.23715895; 0.051173244, 2.499674, -0.08846295; 0.1191054, 5.011403, 0.07562837; 0.19537783, 7.5382786, 0.3944898; -0.030415043, 9.106902, 0.5561769; 0.25811416, 10.623213, 0.18898952; 0.26220205, 12.215164, -0.17370918; 4.2792764, 8.622959, 0.023602009; 4.753613, 3.811554, -1.0848505; 4.2488647, 2.3350677, 1.8774366; 3.9836605, 1.6001493, 3.3580022; 3.428994, 1.6385903, 4.379362; 3.0834436, 1.639056, 5.2509117; 3.8371208, 1.1489613, 4.6160307; -3.8376455, 8.411566, 0.115487665; -4.2586517, 3.7391005, -1.418026; -4.3897505, 3.4207106, 1.7823117; -4.455301, 3.2615151, 3.3824785; -4.1133165, 3.208504, 4.5946617; -3.9390934, 3.237149, 5.595546; -4.8223305, 3.2518396, 4.79266\",\n  \"-0.0, 0.0, 0.0; 1.3835342, -1.8938255, 0.98420346; 1.6113122, -9.046307, 2.3470612; 1.3166834, -16.210335, -0.29916382; 1.5945733, -17.506193, 1.9427876; 1.7479782, -17.544641, 3.2017665; -1.5698199, -1.7211002, 0.94186544; -2.0860324, -8.884442, 1.6648418; -1.087882, -15.271734, -2.6214533; -2.809701, -16.61984, -1.1775622; -3.639756, -16.702978, -0.20879167; 0.04467626, 2.4998915, -0.08578813; 0.1040376, 5.0116663, 0.0809008; 0.17430933, 7.538759, 0.39941823; -0.060355186, 9.106147, 0.5604589; 0.22267482, 10.622392, 0.18874624; 0.22346646, 12.213432, -0.17794931; 4.2552752, 8.633439, 0.0256432; 4.7330785, 3.8279128, -1.1065665; 4.2149124, 2.4042723, 1.8791794; 3.9430118, 1.6958115, 3.3713808; 3.387173, 1.7561991, 4.391041; 3.040517, 1.7749888, 5.2619486; 3.793407, 1.2700282, 4.637875; -3.8610382, 8.40209, 0.12304339; -4.280349, 3.7230897, -1.3908852; -4.3916383, 3.4745288, 1.8163804; -4.4472823, 3.35025, 3.4200115; -4.0947266, 3.3259425, 4.63008; -3.9117396, 3.378334, 5.628436; -4.8019624, 3.3744233, 4.833177\",\n  \"-0.0, 0.0, 0.0; 1.3827305, -1.8935593, 0.98584425; 1.6205808, -9.039642, 2.3801787; 1.3238454, -16.201204, -0.27247572; 1.6235971, -17.49548, 1.9675729; 1.7872078, -17.513353, 3.2257266; -1.5705494, -1.7195745, 0.94343555; -2.0940516, -8.884225, 1.6479714; -1.0898381, -15.292696, -2.6051648; -2.8092055, -16.633795, -1.1518558; -3.6325643, -16.682745, -0.17507339; 0.038320974, 2.5000882, -0.08309351; 0.08850327, 5.011902, 0.08600813; 0.15082419, 7.539273, 0.40397573; -0.09233621, 9.105415, 0.5645218; 0.18519068, 10.621682, 0.18877244; 0.18230285, 12.211931, -0.18133056; 4.2279787, 8.647057, 0.0272215; 4.706978, 3.8465729, -1.1256878; 4.1779428, 2.475511, 1.8826735; 3.9006152, 1.7933711, 3.3860986; 3.3440728, 1.8766036, 4.403764; 2.9967341, 1.9145963, 5.273773; 3.7488878, 1.3947377, 4.661149; -3.8874779, 8.389505, 0.13016042; -4.304992, 3.7036042, -1.3627764; -4.3959103, 3.5268266, 1.8498865; -4.441367, 3.4384375, 3.4562163; -4.0791736, 3.44388, 4.6636677; -3.8882077, 3.520855, 5.6589317; -4.784749, 3.4977612, 4.8711314\",\n  \"-0.0, 0.0, 0.0; 1.3802661, -1.894364, 0.98774934; 1.6315606, -9.032967, 2.4175973; 1.3337915, -16.191051, -0.24430943; 1.6548579, -17.484587, 1.9932125; 1.8282074, -17.486422, 3.250187; -1.5727826, -1.7165289, 0.94525886; -2.099898, -8.88259, 1.6325436; -1.0932647, -15.313293, -2.5863247; -2.8061676, -16.644655, -1.1165248; -3.622869, -16.672325, -0.13333982; 0.030849705, 2.5003083, -0.07950759; 0.07090031, 5.0120707, 0.09302798; 0.12629256, 7.5396147, 0.41090077; -0.125563, 9.104516, 0.5701429; 0.14630291, 10.620803, 0.19035536; 0.13966447, 12.210306, -0.18289286; 4.2001815, 8.658771, 0.032439113; 4.682769, 3.863192, -1.1392367; 4.144509, 2.5427117, 1.8900428; 3.8625789, 1.8858919, 3.403851; 3.305751, 1.9926391, 4.4191623; 2.9580548, 2.0503075, 5.287946; 3.708786, 1.5149956, 4.686997; -3.914481, 8.378555, 0.13872421; -4.3247805, 3.685207, -1.3326643; -4.398095, 3.580497, 1.883604; -4.4347525, 3.528143, 3.4917364; -4.062698, 3.5635247, 4.695678; -3.8636348, 3.6651235, 5.6871395; -4.7665796, 3.6223154, 4.9075193\",\n  \"-0.0, 0.0, 0.0; 1.3794191, -1.8940016, 0.9896261; 1.6456677, -9.0245075, 2.4566817; 1.3422174, -16.177626, -0.21790671; 1.6861053, -17.47234, 2.015538; 1.8700205, -17.448402, 3.2707834; -1.5735483, -1.7148365, 0.94705456; -2.1058807, -8.882049, 1.6181233; -1.0984433, -15.335499, -2.565675; -2.8020027, -16.655144, -1.0746031; -3.611407, -16.666378, -0.085079074; 0.02339887, 2.500467, -0.07701757; 0.053580783, 5.012129, 0.0989571; 0.10141553, 7.539607, 0.41857538; -0.15813573, 9.103292, 0.5773996; 0.10801758, 10.619462, 0.19312567; 0.09710217, 12.208054, -0.18388227; 4.171424, 8.671717, 0.03689918; 4.6546335, 3.8801546, -1.1508416; 4.1117673, 2.6106148, 1.8993207; 3.8275394, 1.9792863, 3.4235096; 3.2699957, 2.1097224, 4.435656; 2.921615, 2.1874049, 5.3026047; 3.671782, 1.6373163, 4.714431; -3.9422169, 8.366153, 0.15097332; -4.3438864, 3.6637774, -1.2937337; -4.398395, 3.6341052, 1.9244751; -4.4256473, 3.6192691, 3.5335777; -4.0432653, 3.6854568, 4.732976; -3.8357644, 3.812317, 5.7197857; -4.745352, 3.7490544, 4.9493327\",\n  \"-0.0, 0.0, 0.0; 1.3791579, -1.892873, 0.99214584; 1.6597111, -9.014177, 2.500646; 1.3523277, -16.160872, -0.19061232; 1.7177525, -17.458, 2.0380056; 1.9113098, -17.411562, 3.2911687; -1.5737833, -1.7132871, 0.94946593; -2.1117008, -8.881489, 1.6053433; -1.1034129, -15.358017, -2.5424328; -2.7961626, -16.66493, -1.0280186; -3.5986903, -16.664942, -0.032845914; 0.016900925, 2.5006175, -0.073763035; 0.03745369, 5.012106, 0.106029905; 0.076164484, 7.539641, 0.42643452; -0.19207859, 9.102032, 0.5835485; 0.06879124, 10.618128, 0.19537959; 0.05434971, 12.206008, -0.18449551; 4.142002, 8.686608, 0.04467237; 4.6270456, 3.8992462, -1.1591485; 4.080632, 2.680378, 1.910985; 3.7946343, 2.0743995, 3.4450996; 3.2357366, 2.2282143, 4.4532084; 2.8861363, 2.3257017, 5.317662; 3.6362352, 1.7613943, 4.743027; -3.9704664, 8.351609, 0.15952975; -4.361459, 3.6398997, -1.2574277; -4.3987417, 3.6846437, 1.9608524; -4.4173827, 3.7070158, 3.5699906; -4.025119, 3.8044055, 4.764058; -3.8095875, 3.956783, 5.745522; -4.725469, 3.8726878, 4.9845767\",\n  \"-0.0, 0.0, 0.0; 1.37968, -1.8914642, 0.9941052; 1.6733743, -9.002684, 2.5470235; 1.3633353, -16.140997, -0.16608644; 1.7508276, -17.441132, 2.0570464; 1.9539926, -17.376692, 3.3078904; -1.5733079, -1.7126832, 0.9513412; -2.117545, -8.881389, 1.5964066; -1.1120995, -15.380794, -2.5161266; -2.7910523, -16.672277, -0.97338235; -3.5860558, -16.666456, 0.027794361; 0.009563939, 2.500748, -0.0705847; 0.020511717, 5.0119877, 0.1134748; 0.050959133, 7.5393467, 0.43615383; -0.22385156, 9.10077, 0.5915283; 0.031003058, 10.616802, 0.19913739; 0.011184806, 12.203935, -0.18360847; 4.112714, 8.700253, 0.053058445; 4.5969954, 3.9161115, -1.1638031; 4.049307, 2.7482033, 1.9258494; 3.7626758, 2.1677253, 3.469676; 3.2028053, 2.345367, 4.473318; 2.8522987, 2.4630272, 5.3348894; 3.6019554, 1.8843713, 4.774115; -3.9985194, 8.338022, 0.17235252; -4.37687, 3.6155615, -1.2118663; -4.3979506, 3.7342014, 2.0046844; -4.40849, 3.7935207, 3.612958; -4.005999, 3.9232237, 4.8005314; -3.7821925, 4.1019645, 5.7756753; -4.7045236, 3.996204, 5.025296\",\n  \"-0.0, 0.0, 0.0; 1.3798873, -1.890032, 0.9965383; 1.6934636, -8.989279, 2.5995398; 1.3745049, -16.117863, -0.13800693; 1.7854046, -17.42561, 2.07644; 1.9990613, -17.336876, 3.3240442; -1.5731171, -1.7115635, 0.95366925; -2.124761, -8.880282, 1.5922608; -1.1187752, -15.402523, -2.4838252; -2.785369, -16.682793, -0.9184973; -3.5732155, -16.666595, 0.08820748; 0.0028665487, 2.5008717, -0.06668297; 0.0036987048, 5.0117817, 0.12213842; 0.023970425, 7.539017, 0.4465788; -0.25842157, 9.099274, 0.6000738; -0.008982331, 10.615219, 0.20388731; -0.033149324, 12.201682, -0.18137819; 4.08104, 8.716513, 0.06446445; 4.5655327, 3.9356174, -1.1650035; 4.0170984, 2.8190882, 1.9434543; 3.7300973, 2.26431, 3.4966328; 3.1683106, 2.4646323, 4.4949193; 2.8161047, 2.6015775, 5.3529406; 3.5660896, 2.0097098, 4.8065786; -4.0286775, 8.321583, 0.18316406; -4.3919263, 3.5879917, -1.1666553; -4.395619, 3.7809515, 2.046361; -4.3974657, 3.8774304, 3.6528673; -3.9862301, 4.0397296, 4.833417; -3.7553587, 4.245058, 5.801654; -4.683156, 4.117756, 5.061427\",\n  \"-0.0, 0.0, 0.0; 1.3811687, -1.8877401, 0.99910367; 1.7215867, -8.971903, 2.6622338; 1.3904793, -16.091087, -0.09823346; 1.8224084, -17.409649, 2.1057749; 2.0461926, -17.310051, 3.3507807; -1.5719535, -1.7112623, 0.95612466; -2.1309526, -8.879486, 1.5938805; -1.1253085, -15.423641, -2.4470148; -2.7803934, -16.6946, -0.86201096; -3.5612543, -16.666494, 0.14986145; -0.0045292224, 2.5009725, -0.06269212; -0.013389733, 5.0115104, 0.1308149; -0.00209059, 7.538625, 0.45663154; -0.290552, 9.097974, 0.6080401; -0.047052637, 10.613921, 0.2081829; -0.07687342, 12.199745, -0.17931119; 4.050689, 8.730807, 0.07454011; 4.5339184, 3.952952, -1.1671789; 3.9852982, 2.8879566, 1.9592772; 3.6982079, 2.3589664, 3.5214105; 3.1341558, 2.5810943, 4.513788; 2.7799294, 2.736529, 5.3678184; 3.530167, 2.131953, 4.8359094; -4.057547, 8.30686, 0.19426101; -4.403206, 3.5611115, -1.1169357; -4.3915143, 3.82695, 2.0908537; -4.385668, 3.9598687, 3.6947467; -3.9656615, 4.155025, 4.867206; -3.7277234, 4.3871007, 5.827659; -4.660954, 4.2381206, 5.098389\",\n  \"-0.0, 0.0, 0.0; 1.3827788, -1.8851987, 1.0016725; 1.7561246, -8.952031, 2.7301822; 1.4085664, -16.059448, -0.058440447; 1.8603449, -17.39047, 2.1340683; 2.0940866, -17.281786, 3.3764815; -1.5704911, -1.7112303, 0.9585829; -2.1363504, -8.878658, 1.5992208; -1.1346208, -15.4439335, -2.4082494; -2.7783742, -16.705364, -0.80396116; -3.552249, -16.666098, 0.21289444; -0.012533087, 2.501064, -0.05775366; -0.031367138, 5.0111427, 0.14092544; -0.028819738, 7.538166, 0.46763453; -0.32368293, 9.096575, 0.61637163; -0.08620517, 10.61253, 0.21293539; -0.1214585, 12.197868, -0.17608559; 4.019343, 8.744961, 0.08248043; 4.498624, 3.9691725, -1.168688; 3.9538255, 2.9548712, 1.9752448; 3.6686463, 2.451239, 3.5460854; 3.1021965, 2.6947415, 4.532062; 2.7458634, 2.868427, 5.3816876; 3.4967985, 2.251986, 4.864587; -4.08722, 8.291995, 0.20902845; -4.415558, 3.5339541, -1.0614401; -4.387342, 3.875359, 2.1390858; -4.3732333, 4.046063, 3.7393465; -3.9451456, 4.274502, 4.902837; -3.7006915, 4.5336795, 5.854684; -4.6388893, 4.3631525, 5.1365933\",\n  \"-0.0, 0.0, 0.0; 1.3846087, -1.882564, 1.004097; 1.7948954, -8.929901, 2.802416; 1.4276695, -16.023804, -0.01792097; 1.9014759, -17.369223, 2.1611092; 2.1464617, -17.253098, 3.40068; -1.5688273, -1.7114546, 0.9609034; -2.1372905, -8.878033, 1.6087034; -1.145944, -15.463106, -2.3687532; -2.7766051, -16.71489, -0.74368143; -3.542328, -16.665148, 0.2788713; -0.018946122, 2.5011442, -0.052279163; -0.047479764, 5.010712, 0.1516288; -0.05586838, 7.5376883, 0.4786023; -0.35737866, 9.094962, 0.6258906; -0.12614585, 10.610945, 0.21894887; -0.16717045, 12.195685, -0.17193809; 3.9866784, 8.76237, 0.09093237; 4.46263, 3.9886951, -1.1695379; 3.9214096, 3.0247123, 1.9908015; 3.6380208, 2.5462508, 3.5698133; 3.0696974, 2.810266, 4.549412; 2.711722, 3.0015397, 5.3945575; 3.4632738, 2.3741243, 4.8917494; -4.1177235, 8.27363, 0.22272524; -4.427471, 3.5030794, -1.0047725; -4.384031, 3.9173567, 2.1869678; -4.3623104, 4.1244936, 3.7828364; -3.9260325, 4.387402, 4.93596; -3.6750457, 4.674521, 5.8780384; -4.618208, 4.48129, 5.1723075\",\n  \"-0.0, 0.0, 0.0; 1.3860086, -1.8797177, 1.0074921; 1.8376806, -8.9054365, 2.8789933; 1.4488981, -15.983496, 0.02197814; 1.9437258, -17.34433, 2.186717; 2.1998067, -17.225595, 3.4237957; -1.567551, -1.7107967, 0.9641522; -2.1400287, -8.876248, 1.6208227; -1.1603868, -15.481134, -2.3265672; -2.775004, -16.725994, -0.6802949; -3.532205, -16.669544, 0.34823763; -0.026540395, 2.5012045, -0.04567836; -0.06490655, 5.0101824, 0.16379628; -0.08227149, 7.537312, 0.48922712; -0.3912597, 9.093209, 0.6355698; -0.16685794, 10.609444, 0.22575152; -0.21365577, 12.1937895, -0.16608408; 3.9553223, 8.776652, 0.09655771; 4.4242435, 4.0050993, -1.1745353; 3.890291, 3.0886626, 2.0011485; 3.6105351, 2.6339886, 3.5878181; 3.041492, 2.9175088, 4.5615306; 2.6828592, 3.125493, 5.40244; 3.4342997, 2.4877179, 4.912668; -4.1470795, 8.258115, 0.23716977; -4.4391565, 3.4753976, -0.9465345; -4.3773127, 3.964049, 2.234364; -4.346392, 4.2083755, 3.8248115; -3.9018016, 4.5040545, 4.9667683; -3.6442173, 4.817656, 5.8985662; -4.5923553, 4.602699, 5.205907\",\n  \"-0.0, 0.0, 0.0; 1.3867809, -1.8778528, 1.0099043; 1.8834999, -8.879868, 2.9572906; 1.4714422, -15.940575, 0.06087327; 1.9880929, -17.31832, 2.2097588; 2.2557068, -17.195782, 3.4440222; -1.566847, -1.7101393, 0.9664602; -2.1408968, -8.874371, 1.6349634; -1.177392, -15.498823, -2.2835064; -2.772612, -16.736795, -0.61330557; -3.5199254, -16.675648, 0.42216694; -0.033464503, 2.5012274, -0.039457224; -0.08158849, 5.0095873, 0.17533907; -0.1083653, 7.5367227, 0.50008607; -0.4255333, 9.091082, 0.6452619; -0.20861608, 10.607566, 0.23234928; -0.2617011, 12.191499, -0.16035423; 3.9238226, 8.79169, 0.10154641; 4.385697, 4.021649, -1.1777745; 3.8621278, 3.1525927, 2.0129218; 3.5875602, 2.721614, 3.6070933; 3.0175645, 3.0219371, 4.575195; 2.6581194, 3.244476, 5.4120216; 3.4101682, 2.5984545, 4.9341354; -4.1762943, 8.241594, 0.2533869; -4.448796, 3.44627, -0.88303584; -4.3687353, 4.0086007, 2.2852592; -4.328707, 4.2897644, 3.8694053; -3.8758383, 4.614806, 5.0000734; -3.6116982, 4.9520693, 5.921717; -4.5647335, 4.7175374, 5.2422557\",\n  \"-0.0, 0.0, 0.0; 1.3880957, -1.8750908, 1.013224; 1.9374682, -8.851059, 3.0383925; 1.4964267, -15.893557, 0.10218549; 2.0334132, -17.291277, 2.2331107; 2.3127806, -17.168747, 3.4647677; -1.565646, -1.7094405, 0.9696376; -2.139019, -8.872435, 1.6518345; -1.1947129, -15.514756, -2.2409754; -2.7674575, -16.747473, -0.5457585; -3.5034719, -16.682474, 0.49754262; -0.040127102, 2.5012164, -0.03346114; -0.09820756, 5.008864, 0.18711397; -0.13566127, 7.5358677, 0.51182777; -0.46050906, 9.08868, 0.65657604; -0.25117457, 10.605352, 0.24045256; -0.31094462, 12.188793, -0.15327534; 3.8905165, 8.808464, 0.108460456; 4.34434, 4.0389657, -1.1757565; 3.8314679, 3.2158606, 2.0288322; 3.562241, 2.8078632, 3.6299467; 2.9922137, 3.1225338, 4.593461; 2.632757, 3.3575382, 5.4268684; 3.3850498, 2.704706, 4.9587216; -4.2069273, 8.222918, 0.26994684; -4.4616933, 3.414936, -0.8159883; -4.363487, 4.0508575, 2.3378472; -4.314385, 4.368817, 3.9147635; -3.8541334, 4.720868, 5.0343084; -3.5842447, 5.079749, 5.9460692; -4.541544, 4.826533, 5.2794294\",\n  \"-0.0, 0.0, 0.0; 1.3874333, -1.8742446, 1.0156946; 1.9962205, -8.821793, 3.120026; 1.5247878, -15.846411, 0.14595532; 2.0825737, -17.267965, 2.2556655; 2.3740203, -17.140434, 3.4840112; -1.5662482, -1.7075452, 0.9720014; -2.1333427, -8.869142, 1.673843; -1.2169292, -15.52852, -2.1964264; -2.7626367, -16.756697, -0.4732772; -3.485995, -16.693886, 0.57897127; -0.048422445, 2.5011516, -0.0266724; -0.11751123, 5.008017, 0.19954717; -0.16358101, 7.5349913, 0.52338636; -0.49621502, 9.086178, 0.66788507; -0.29542184, 10.603224, 0.24892318; -0.36266685, 12.186311, -0.14502046; 3.8566947, 8.822532, 0.108730376; 4.309318, 4.0525265, -1.1740255; 3.8048377, 3.274276, 2.0430777; 3.5398016, 2.8886964, 3.6504345; 2.9696403, 3.21705, 4.6092925; 2.6100974, 3.4639966, 5.4392023; 3.3628402, 2.8049355, 4.980603; -4.238032, 8.206658, 0.29216397; -4.474885, 3.3864288, -0.74231005; -4.3571644, 4.0936995, 2.395624; -4.2983055, 4.447334, 3.964589; -3.830969, 4.8265834, 5.0722528; -3.5556166, 5.2071643, 5.97352; -4.516921, 4.9349556, 5.320262\",\n  \"-0.0, 0.0, 0.0; 1.3884479, -1.8724216, 1.0176684; 2.0594196, -8.78995, 3.2005205; 1.5553522, -15.797031, 0.19064665; 2.1331499, -17.245974, 2.2761998; 2.4369195, -17.114777, 3.5011692; -1.565321, -1.7073189, 0.97389096; -2.1246874, -8.867113, 1.6999068; -1.2376125, -15.5422325, -2.1500282; -2.7548194, -16.76773, -0.39985442; -3.46454, -16.705935, 0.6616998; -0.055829406, 2.5010664, -0.01907501; -0.13529298, 5.007127, 0.21259238; -0.19143832, 7.5341835, 0.5341876; -0.53240585, 9.083557, 0.6787121; -0.34031412, 10.601018, 0.25718257; -0.41505045, 12.183802, -0.1366288; 3.822597, 8.838294, 0.11094639; 4.2865515, 4.065601, -1.1576859; 3.7816277, 3.3317418, 2.0697637; 3.5163698, 2.9683356, 3.682242; 2.9456375, 3.3091302, 4.636408; 2.5856194, 3.5669184, 5.462807; 3.338891, 2.9021988, 5.0133343; -4.269107, 8.188431, 0.30984637; -4.4879284, 3.3566203, -0.6732979; -4.34957, 4.1326895, 2.4474862; -4.280391, 4.5207224, 4.007877; -3.8078535, 4.9274435, 5.1035223; -3.5286741, 5.329775, 5.994102; -4.4927435, 5.0375834, 5.3536773\",\n  \"-0.0, 0.0, 0.0; 1.3894002, -1.8703543, 1.0201668; 2.1238647, -8.75766, 3.2768984; 1.5876279, -15.7471, 0.23177457; 2.1842673, -17.230991, 2.2872317; 2.5008638, -17.104504, 3.5094452; -1.5644507, -1.7067512, 0.9762815; -2.1145363, -8.864692, 1.7272375; -1.2644758, -15.552769, -2.1085327; -2.74886, -16.776068, -0.3289206; -3.4432778, -16.720287, 0.7430364; -0.06526948, 2.500879, -0.012604742; -0.1562112, 5.0061436, 0.22340931; -0.2213065, 7.533372, 0.54195654; -0.571375, 9.080726, 0.6863611; -0.38854867, 10.598695, 0.26254573; -0.47077686, 12.181373, -0.13019747; 3.7864377, 8.852542, 0.1059621; 4.273442, 4.075846, -1.1387439; 3.7617826, 3.3864396, 2.0974343; 3.4931645, 3.045228, 3.7142; 2.921794, 3.3970625, 4.663967; 2.5611882, 3.6642883, 5.4871063; 3.31429, 2.9939535, 5.0457616; -4.3020954, 8.171467, 0.32806692; -4.4977565, 3.328246, -0.6024059; -4.3413343, 4.17076, 2.5002418; -4.2631235, 4.592016, 4.051564; -3.784792, 5.024733, 5.134665; -3.5013523, 5.447532, 6.0143504; -4.468429, 5.135909, 5.3877707\",\n  \"-0.0, 0.0, 0.0; 1.3915542, -1.8676733, 1.022141; 2.190105, -8.724707, 3.3482227; 1.6213456, -15.697535, 0.27108455; 2.234245, -17.223158, 2.2908986; 2.564004, -17.11257, 3.5111723; -1.5624824, -1.7074722, 0.9781708; -2.1067035, -8.862959, 1.7562976; -1.2942857, -15.563404, -2.0660236; -2.7461176, -16.78396, -0.25790286; -3.424687, -16.73148, 0.8243214; -0.07424946, 2.5006504, -0.006959054; -0.17674384, 5.0051737, 0.23216648; -0.25259903, 7.53259, 0.5468173; -0.61259973, 9.077714, 0.69067895; -0.4393869, 10.596423, 0.26548088; -0.5293885, 12.179237, -0.12500003; 3.7479966, 8.8693285, 0.09884268; 4.2621984, 4.088153, -1.1173992; 3.7413435, 3.4438155, 2.12659; 3.4681292, 3.125088, 3.74717; 2.8946965, 3.4869413, 4.6919165; 2.5323386, 3.762982, 5.5113688; 3.2868595, 3.0884762, 5.0788913; -4.3367724, 8.15171, 0.34194806; -4.505655, 3.2983632, -0.53972685; -4.334688, 4.202524, 2.5447478; -4.249207, 4.6546044, 4.086983; -3.76727, 5.1130257, 5.157842; -3.481508, 5.5558023, 6.026883; -4.4501047, 5.2235146, 5.413406\",\n  \"-0.0, 0.0, 0.0; 1.394198, -1.8647267, 1.0239165; 2.2580614, -8.690754, 3.416893; 1.6610794, -15.649118, 0.3124802; 2.288995, -17.214779, 2.29673; 2.631299, -17.121286, 3.514977; -1.5600622, -1.7087107, 0.97987014; -2.0969477, -8.861946, 1.7833731; -1.3238177, -15.574465, -2.0258875; -2.7403743, -16.794016, -0.18933177; -3.402669, -16.74927, 0.9032719; -0.083867885, 2.500356, -0.0011799798; -0.19829878, 5.0040965, 0.24071175; -0.28508997, 7.531741, 0.55066586; -0.6563993, 9.074158, 0.69483215; -0.49271458, 10.593717, 0.26889434; -0.5897261, 12.176733, -0.1190798; 3.7084155, 8.885915, 0.09192482; 4.254415, 4.1004744, -1.0932888; 3.7210393, 3.5045612, 2.1579146; 3.441566, 3.2099884, 3.781994; 2.86545, 3.5814345, 4.7213697; 2.5008185, 3.8659987, 5.5368886; 3.2573137, 3.1878695, 5.1136255; -4.3724666, 8.131761, 0.35298342; -4.5152345, 3.2682424, -0.47566265; -4.3299294, 4.2329235, 2.5895898; -4.2372775, 4.7152624, 4.1222143; -3.753913, 5.198661, 5.181382; -3.467653, 5.6607056, 6.0401683; -4.4363685, 5.3076515, 5.438594\",\n  \"-0.0, 0.0, 0.0; 1.3987215, -1.8605502, 1.0253444; 2.325518, -8.655004, 3.4837394; 1.7074234, -15.601891, 0.35782933; 2.3457744, -17.205442, 2.308201; 2.698474, -17.13514, 3.525041; -1.555908, -1.711712, 0.98123634; -2.0855246, -8.862616, 1.8099301; -1.3532343, -15.588514, -1.9837685; -2.7362878, -16.806553, -0.1208626; -3.3823438, -16.76579, 0.9815755; -0.092970185, 2.5000296, 0.0047311313; -0.21893504, 5.0029984, 0.24887036; -0.31817964, 7.5308867, 0.5530429; -0.70210147, 9.070125, 0.69814956; -0.5479716, 10.590649, 0.2720913; -0.65168184, 12.1738615, -0.113343626; 3.668025, 8.904094, 0.08743626; 4.250105, 4.1150165, -1.065475; 3.6977794, 3.5695677, 2.1914175; 3.4088304, 3.300149, 3.818204; 2.8288784, 3.6806242, 4.751587; 2.4610212, 3.9734123, 5.562734; 3.220672, 3.2926595, 5.1494513; -4.408709, 8.109846, 0.35778365; -4.528214, 3.236816, -0.41690782; -4.3320603, 4.2573214, 2.6295352; -4.233986, 4.767571, 4.1527557; -3.7514458, 5.2765985, 5.200228; -3.4666407, 5.758218, 6.0486813; -4.4339485, 5.3828373, 5.4584656\",\n  \"-0.0, 0.0, 0.0; 1.402509, -1.8570282, 1.0265546; 2.3906412, -8.619585, 3.5481951; 1.7601815, -15.559279, 0.40880656; 2.409786, -17.19192, 2.3311281; 2.7710352, -17.125801, 3.5456922; -1.5524173, -1.714215, 0.98239434; -2.0753188, -8.86281, 1.8349211; -1.3865838, -15.602971, -1.9415839; -2.7344284, -16.819891, -0.05232656; -3.3637624, -16.78536, 1.0599531; -0.10301336, 2.4996243, 0.009008906; -0.24149546, 5.001774, 0.2547566; -0.35318103, 7.52966, 0.5546055; -0.75004494, 9.065469, 0.70121956; -0.6057961, 10.5870285, 0.27539912; -0.71652496, 12.170415, -0.10736099; 3.6257267, 8.92202, 0.08349845; 4.248258, 4.12918, -1.0320413; 3.674543, 3.6358736, 2.2294655; 3.3748987, 3.392438, 3.8584113; 2.7898138, 3.7837934, 4.78406; 2.4176288, 4.086532, 5.5895605; 3.1813645, 3.4028292, 5.1888685; -4.4467115, 8.087764, 0.36152944; -4.5508685, 3.205011, -0.35171714; -4.3438325, 4.281147, 2.6747966; -4.2403135, 4.819215, 4.188051; -3.7610993, 5.3537655, 5.224276; -3.4798956, 5.8546414, 6.0627217; -4.4440913, 5.4557233, 5.482946\",\n  \"-0.0, 0.0, 0.0; 1.4065948, -1.8534743, 1.0273868; 2.4539106, -8.584505, 3.6087842; 1.8220391, -15.522711, 0.4663899; 2.4785683, -17.170853, 2.3730674; 2.8440309, -17.099543, 3.5860763; -1.5486372, -1.7171751, 0.9831909; -2.063527, -8.863524, 1.8591027; -1.419831, -15.617472, -1.9006803; -2.7332237, -16.833036, 0.013549924; -3.3463018, -16.806566, 1.1350908; -0.112743, 2.499181, 0.014033953; -0.26344365, 5.0004835, 0.26121217; -0.38783365, 7.5284443, 0.55537844; -0.7990896, 9.060232, 0.70437706; -0.6641562, 10.582844, 0.279263; -0.78061926, 12.166359, -0.101257; 3.5844085, 8.939458, 0.08352229; 4.251517, 4.143485, -0.9920689; 3.6490793, 3.7021978, 2.2717109; 3.3350794, 3.4846773, 3.9016194; 2.7435627, 3.887809, 4.818081; 2.3659055, 4.2012763, 5.6169033; 3.1341512, 3.5143013, 5.230691; -4.483963, 8.065823, 0.35865358; -4.5681615, 3.174017, -0.2924964; -4.3574796, 4.2996597, 2.7157025; -4.252138, 4.86248, 4.2198005; -3.7789788, 5.423063, 5.244993; -3.5036795, 5.9434047, 6.073485; -4.4629245, 5.5196285, 5.503211\",\n  \"-0.0, 0.0, 0.0; 1.410937, -1.8500092, 1.027678; 2.5125248, -8.553128, 3.658639; 1.8894567, -15.493968, 0.5203059; 2.5479841, -17.15183, 2.4178443; 2.9142184, -17.077286, 3.630426; -1.5446067, -1.7206422, 0.9834694; -2.053246, -8.864474, 1.8832394; -1.4568458, -15.631737, -1.860366; -2.7370064, -16.847515, 0.07611191; -3.3333964, -16.824354, 1.2066878; -0.12344515, 2.4986622, 0.016216965; -0.28735334, 4.9991894, 0.2628349; -0.42509747, 7.5270185, 0.552142; -0.85064685, 9.054398, 0.7061695; -0.72486365, 10.578041, 0.28194684; -0.84682703, 12.161458, -0.09725332; 3.5400589, 8.957805, 0.08022791; 4.252975, 4.1596117, -0.9553283; 3.6215427, 3.7692208, 2.3094556; 3.2930517, 3.5770476, 3.9396935; 2.694312, 3.9932358, 4.845567; 2.3104954, 4.3186135, 5.636654; 3.0836911, 3.6281946, 5.2668076; -4.5238366, 8.042688, 0.35171536; -4.586982, 3.1430006, -0.23982462; -4.3759937, 4.313857, 2.751045; -4.2705007, 4.8992853, 4.2464776; -3.8054755, 5.4854245, 5.261044; -3.5378585, 6.0246124, 6.0799465; -4.490609, 5.5750294, 5.5186176\",\n  \"-0.0, 0.0, 0.0; 1.4157844, -1.8460256, 1.0281748; 2.5688233, -8.52618, 3.6952486; 1.9627447, -15.473253, 0.5673976; 2.6191764, -17.135109, 2.462167; 2.9829817, -17.05441, 3.675086; -1.5400885, -1.7244161, 0.9839449; -2.0435135, -8.865355, 1.9092563; -1.4967718, -15.6447735, -1.8199087; -2.7420502, -16.858795, 0.14027178; -3.321062, -16.841406, 1.2799482; -0.13556716, 2.4980316, 0.016565572; -0.3125406, 4.9978123, 0.26171553; -0.46139327, 7.5254593, 0.54708385; -0.89980614, 9.048729, 0.70566326; -0.78348005, 10.573349, 0.28225383; -0.91163236, 12.156723, -0.09508139; 3.497521, 8.972865, 0.073449075; 4.2578545, 4.1727242, -0.918431; 3.5961444, 3.8331828, 2.3460412; 3.2525232, 3.6663294, 3.9759483; 2.645945, 4.0967193, 4.869893; 2.255411, 4.435, 5.652231; 3.0335746, 3.7407515, 5.3004117; -4.562326, 8.022857, 0.3453415; -4.6016655, 3.115748, -0.18341643; -4.3894825, 4.327682, 2.7909603; -4.283392, 4.933648, 4.2781467; -3.8280268, 5.5450816, 5.282111; -3.5693412, 6.1027946, 6.0914207; -4.5144615, 5.6271653, 5.5387244\",\n  \"-0.0, 0.0, 0.0; 1.4209895, -1.8421757, 1.0278989; 2.6199448, -8.503543, 3.7215843; 2.0425649, -15.460724, 0.6108172; 2.6967473, -17.119316, 2.5092201; 3.056154, -17.029505, 3.7228098; -1.5352155, -1.7289062, 0.9836809; -2.0338585, -8.866779, 1.9348704; -1.537921, -15.657316, -1.7811443; -2.7489204, -16.870045, 0.20118916; -3.3097703, -16.85295, 1.3499166; -0.14648338, 2.4974227, 0.01540265; -0.33661133, 4.996523, 0.25762603; -0.4990478, 7.5237846, 0.53897053; -0.95024705, 9.042721, 0.7031523; -0.8432289, 10.568294, 0.28072032; -0.9776392, 12.15151, -0.09509608; 3.4528434, 8.991171, 0.06817436; 4.257101, 4.188551, -0.8759121; 3.5643973, 3.89954, 2.3869948; 3.2052827, 3.75783, 4.0159416; 2.5905702, 4.2032504, 4.896872; 2.193116, 4.5554614, 5.6695175; 2.9772604, 3.8583658, 5.337145; -4.602264, 7.999413, 0.33126092; -4.6203313, 3.086113, -0.13778415; -4.4099846, 4.337532, 2.8203278; -4.3048105, 4.963241, 4.2993817; -3.85951, 5.5998654, 5.2921405; -3.6101685, 6.17577, 6.091582; -4.5469313, 5.672921, 5.548841\",\n  \"-0.0, 0.0, 0.0; 1.4272677, -1.8373704, 1.0278015; 2.6694412, -8.483913, 3.7384708; 2.1288323, -15.454235, 0.65059924; 2.7817068, -17.101097, 2.5596347; 3.1345756, -16.986776, 3.7730815; -1.5293055, -1.7341889, 0.98358774; -2.0253706, -8.869132, 1.9578254; -1.5790181, -15.669454, -1.7465649; -2.756074, -16.882483, 0.25592732; -3.298522, -16.863056, 1.4134214; -0.15833557, 2.4967096, 0.01362609; -0.36182585, 4.995091, 0.25238386; -0.53758, 7.5219355, 0.5294349; -1.0008228, 9.036604, 0.69940376; -0.90327114, 10.563102, 0.27802277; -1.044385, 12.1461115, -0.09620443; 3.4072943, 9.008839, 0.061032087; 4.2521305, 4.2031527, -0.83054805; 3.5302668, 3.9636073, 2.4300435; 3.1565645, 3.846492, 4.057662; 2.5326328, 4.307331, 4.9240603; 2.1273866, 4.674205, 5.6857576; 2.919116, 3.9758508, 5.374691; -4.642929, 7.976144, 0.31600082; -4.639235, 3.0574203, -0.09264019; -4.4300766, 4.347892, 2.8487298; -4.3254967, 4.993129, 4.319412; -3.8910568, 5.65479, 5.300544; -3.651679, 6.2487016, 6.089791; -4.5793405, 5.7186675, 5.557384\",\n  \"-0.0, 0.0, 0.0; 1.4323863, -1.8337046, 1.0272274; 2.7179558, -8.467033, 3.7500026; 2.2231302, -15.454526, 0.69342136; 2.8795316, -17.083593, 2.6164641; 3.2256467, -16.93313, 3.827911; -1.5244642, -1.7387571, 0.98303825; -2.0171049, -8.871016, 1.9784479; -1.6193072, -15.681809, -1.7122102; -2.7637103, -16.896236, 0.30828047; -3.2886853, -16.875738, 1.4737849; -0.17018226, 2.4959438, 0.010793563; -0.38805324, 4.9935155, 0.24529544; -0.57850266, 7.519725, 0.5184021; -1.053123, 9.030207, 0.6941426; -0.96473074, 10.557734, 0.27447408; -1.1127948, 12.140614, -0.097608745; 3.3594043, 9.027731, 0.058917254; 4.2464685, 4.2189345, -0.7728741; 3.489972, 4.0278153, 2.483061; 3.0989537, 3.9347699, 4.108164; 2.4655776, 4.4126315, 4.9583354; 2.0523078, 4.7955847, 5.7077074; 2.8513882, 4.0956554, 5.4198437; -4.6856833, 7.9509926, 0.29295474; -4.6615844, 3.0276952, -0.05548224; -4.4521384, 4.3574767, 2.8683054; -4.3474135, 5.0223684, 4.3301964; -3.926828, 5.707012, 5.301548; -3.6997945, 6.317214, 6.0819664; -4.616418, 5.7610636, 5.557136\",\n  \"-0.0, 0.0, 0.0; 1.4382621, -1.8292146, 1.0270221; 2.7642999, -8.451879, 3.7563422; 2.32681, -15.459607, 0.73757696; 2.9893417, -17.067867, 2.6759715; 3.3279886, -16.880192, 3.884332; -1.5188766, -1.7437507, 0.9828424; -2.010968, -8.873388, 1.9971194; -1.6608279, -15.695461, -1.6775014; -2.772964, -16.909836, 0.3609588; -3.2805684, -16.88749, 1.534099; -0.18252549, 2.4950805, 0.008533922; -0.41523522, 4.9916625, 0.23928834; -0.6211598, 7.517098, 0.5082913; -1.1069208, 9.023329, 0.6899755; -1.0273894, 10.551913, 0.27238756; -1.1822209, 12.1347, -0.097331464; 3.3093712, 9.04726, 0.059019893; 4.2448, 4.2366624, -0.70674956; 3.4437132, 4.0944943, 2.5410151; 3.0304127, 4.0257654, 4.1618085; 2.3869553, 4.5203257, 4.994684; 1.9650376, 4.9189763, 5.730936; 2.7709785, 4.2174687, 5.4670377; -4.7300415, 7.9242573, 0.26941147; -4.683333, 2.9972272, -0.018760681; -4.473849, 4.364074, 2.887881; -4.3691072, 5.0474977, 4.3412; -3.964241, 5.7537875, 5.303692; -3.7510412, 6.3790946, 6.0760136; -4.6552234, 5.79721, 5.557541\",\n  \"-0.0, 0.0, 0.0; 1.4433126, -1.8256083, 1.0263538; 2.8122787, -8.438524, 3.758116; 2.441139, -15.470267, 0.7866788; 3.114112, -17.056366, 2.7396808; 3.4459786, -16.832664, 3.9437826; -1.5140518, -1.7483009, 0.9822026; -2.0045092, -8.875662, 2.0131333; -1.7029941, -15.709613, -1.6436846; -2.7836444, -16.924494, 0.41134214; -3.27344, -16.895615, 1.5918869; -0.19471759, 2.4941654, 0.006199493; -0.4429807, 4.9896493, 0.23258063; -0.66559994, 7.514194, 0.49659953; -1.1625392, 9.016166, 0.68324393; -1.0914816, 10.545963, 0.26857987; -1.2528228, 12.1289425, -0.09751248; 3.2574563, 9.067751, 0.06254199; 4.2491484, 4.2576213, -0.6320653; 3.3932726, 4.163218, 2.6034393; 2.9526145, 4.1182184, 4.217846; 2.2984996, 4.629074, 5.032382; 1.8672937, 5.042718, 5.754853; 2.6785927, 4.3385696, 5.5155506; -4.775784, 7.8957367, 0.23860186; -4.70348, 2.9656763, 0.014721036; -4.4940486, 4.368942, 2.9039607; -4.389334, 5.0705733, 4.348579; -4.0013175, 5.7958937, 5.3038306; -3.802796, 6.4342, 6.069401; -4.6937017, 5.8282766, 5.5555015\",\n  \"-0.0, 0.0, 0.0; 1.4480252, -1.8219482, 1.0262197; 2.8581543, -8.42674, 3.7566977; 2.5668674, -15.485053, 0.8398557; 3.2483077, -17.049711, 2.8071637; 3.5719173, -16.79943, 4.008278; -1.5095291, -1.7522796, 0.98207366; -2.0011852, -8.877556, 2.026751; -1.745175, -15.723516, -1.611023; -2.7949514, -16.937927, 0.4602208; -3.2680223, -16.906343, 1.6474974; -0.20758092, 2.4931314, 0.004603185; -0.47227755, 4.9872537, 0.22734475; -0.71225244, 7.5107374, 0.48625273; -1.2193949, 9.008948, 0.6756626; -1.1564559, 10.540018, 0.26439813; -1.324769, 12.123357, -0.09696984; 3.2034526, 9.088248, 0.072695315; 4.2524314, 4.280109, -0.5475639; 3.3321407, 4.23356, 2.6712594; 2.8593302, 4.2123284, 4.277034; 2.1937828, 4.738592, 5.0722713; 1.7525445, 5.166404, 5.7802896; 2.5688317, 4.4599013, 5.5662203; -4.8231735, 7.8660936, 0.20375735; -4.7204723, 2.934054, 0.044757307; -4.516217, 4.371125, 2.9177043; -4.4140906, 5.089662, 4.354175; -4.0435767, 5.8321004, 5.303205; -3.8602388, 6.481783, 6.0629706; -4.737114, 5.852568, 5.5529437\",\n  \"-0.0, 0.0, 0.0; 1.4527705, -1.8185867, 1.0254747; 2.9040084, -8.417576, 3.7484317; 2.7018504, -15.503457, 0.89150643; 3.390368, -17.052073, 2.8690176; 3.7049217, -16.780687, 4.067952; -1.504954, -1.7566091, 0.9813613; -1.9979182, -8.880125, 2.0373642; -1.788277, -15.738457, -1.5800164; -2.807241, -16.953785, 0.50602365; -3.2634208, -16.918491, 1.6997882; -0.22207771, 2.4918847, 0.0024380921; -0.50356054, 4.9845324, 0.22107282; -0.7590165, 7.5069757, 0.4752627; -1.2771051, 9.001138, 0.6670104; -1.221272, 10.533615, 0.25998458; -1.39466, 12.1177435, -0.09547594; 3.1502624, 9.105633, 0.08264688; 4.2612753, 4.3017726, -0.45759454; 3.2710333, 4.307066, 2.740736; 2.763315, 4.311588, 4.335952; 2.085383, 4.851798, 5.111123; 1.6332147, 5.2924857, 5.80419; 2.4542937, 4.584241, 5.6157355; -4.870108, 7.8391848, 0.16815874; -4.7375226, 2.9062605, 0.07052886; -4.5402155, 4.3760285, 2.927375; -4.441563, 5.110911, 4.355797; -4.088281, 5.867522, 5.3001933; -3.919781, 6.526354, 6.0555024; -4.782836, 5.876509, 5.547775\",\n  \"-0.0, 0.0, 0.0; 1.4570825, -1.8158258, 1.0242488; 2.9483414, -8.410589, 3.7357965; 2.844967, -15.524932, 0.9450886; 3.5397048, -17.062815, 2.9287906; 3.8446662, -16.775719, 4.126544; -1.5007817, -1.7608284, 0.98018813; -1.9988797, -8.88238, 2.046984; -1.8311461, -15.753593, -1.5480692; -2.8217354, -16.970055, 0.5509374; -3.2620926, -16.928835, 1.7504398; -0.23529768, 2.490672, 8.463554E-4; -0.53427243, 4.981682, 0.21487649; -0.80856836, 7.502783, 0.46267182; -1.3363919, 8.993429, 0.65523064; -1.287483, 10.527487, 0.2532999; -1.4670413, 12.112513, -0.09502572; 3.0929346, 9.126897, 0.09819457; 4.263373, 4.3284883, -0.35857153; 3.1977692, 4.3903627, 2.8148475; 2.6524527, 4.4229913, 4.397275; 1.9598062, 4.9752393, 5.150649; 1.494631, 5.4273677, 5.827551; 2.3215241, 4.719169, 5.6663094; -4.919228, 7.8069644, 0.12251675; -4.759687, 2.8740482, 0.08093484; -4.5727806, 4.3722305, 2.923686; -4.4793267, 5.1213217, 4.3450594; -4.143817, 5.8912263, 5.285183; -3.9905975, 6.558358, 6.03645; -4.839016, 5.8877277, 5.5310884\",\n  \"-0.0, 0.0, 0.0; 1.4617691, -1.8121786, 1.0240308; 2.9902933, -8.405979, 3.7171044; 2.9943397, -15.547734, 0.9953544; 3.6963136, -17.076284, 2.9837165; 3.9916804, -16.777925, 4.1811213; -1.4962276, -1.764816, 0.9799792; -2.0022416, -8.884466, 2.0556998; -1.876252, -15.767415, -1.5185492; -2.8378112, -16.984444, 0.59358764; -3.2618268, -16.936483, 1.7987143; -0.2500365, 2.4892356, -0.0014381125; -0.5668256, 4.9783993, 0.20839898; -0.85847044, 7.4980555, 0.4510286; -1.396583, 8.9851465, 0.6426017; -1.3548787, 10.52071, 0.2456365; -1.5405328, 12.106783, -0.094632596; 3.0355642, 9.145756, 0.11354989; 4.2625904, 4.3539386, -0.25548056; 3.1211622, 4.4742503, 2.889769; 2.5380254, 4.5359106, 4.457781; 1.8299959, 5.09888, 5.188581; 1.3511825, 5.5614448, 5.848714; 2.1840563, 4.8545017, 5.7151127; -4.96828, 7.7764835, 0.07995397; -4.7848315, 2.8442283, 0.08695758; -4.6121283, 4.3613973, 2.920523; -4.5257773, 5.1199813, 4.3373036; -4.210354, 5.904192, 5.272544; -4.0743747, 6.5800343, 6.019331; -4.9057646, 5.8860583, 5.5171986\",\n  \"-0.0, 0.0, 0.0; 1.4677353, -1.8077713, 1.0232861; 3.031382, -8.403503, 3.6913528; 3.1485398, -15.572182, 1.0439131; 3.8580422, -17.092749, 3.0357218; 4.1442246, -16.78857, 4.2338924; -1.4904029, -1.7701322, 0.9792663; -2.0071814, -8.887345, 2.0659418; -1.9220812, -15.780988, -1.4888527; -2.8562279, -16.998365, 0.63534975; -3.2642577, -16.9416, 1.8456013; -0.2651446, 2.487669, -0.0039551957; -0.6000675, 4.9748483, 0.2012008; -0.91018546, 7.492819, 0.4383555; -1.4575398, 8.976781, 0.6279964; -1.4226274, 10.51379, 0.23600444; -1.6146972, 12.100829, -0.096099645; 2.9757185, 9.16555, 0.13170347; 4.254409, 4.3809767, -0.14414802; 3.038216, 4.560916, 2.970081; 2.4177928, 4.6521907, 4.5222588; 1.6938088, 5.2251277, 5.2292943; 1.2008305, 5.6977215, 5.8716583; 2.0401084, 4.9935317, 5.7666554; -5.018451, 7.7439556, 0.032362312; -4.8144565, 2.8127542, 0.08224858; -4.658489, 4.3464794, 2.9078603; -4.5805063, 5.113341, 4.3206644; -4.2878313, 5.910081, 5.252705; -4.1711507, 6.5931873, 5.9961395; -4.983725, 5.876993, 5.494405\",\n  \"-0.0, 0.0, 0.0; 1.4729139, -1.8041097, 1.022307; 3.0709915, -8.404096, 3.6592727; 3.30707, -15.598469, 1.0906413; 4.025498, -17.112463, 3.084257; 4.3046255, -16.814192, 4.285573; -1.4853188, -1.7749171, 0.9783299; -2.0173655, -8.889356, 2.075752; -1.9693185, -15.792454, -1.4613435; -2.874825, -17.011448, 0.6743026; -3.2676792, -16.952919, 1.8894813; -0.27870277, 2.4861817, -0.00631764; -0.6316934, 4.971262, 0.19392447; -0.96215725, 7.48721, 0.42499173; -1.5187578, 8.968213, 0.6108104; -1.4909166, 10.506608, 0.2237176; -1.690203, 12.094549, -0.099710405; 2.9144557, 9.187458, 0.1541734; 4.2365923, 4.410107, -0.025153607; 2.9478025, 4.6485386, 3.055771; 2.2911804, 4.768862, 4.5909853; 1.5510836, 5.3521137, 5.272442; 1.0437311, 5.835167, 5.8955445; 1.889066, 5.134371, 5.820777; -5.0679655, 7.708365, -0.021303177; -4.8443403, 2.778544, 0.066474624; -4.7075577, 4.326819, 2.8851364; -4.6391673, 5.100957, 4.294465; -4.3707647, 5.9077716, 5.225144; -4.274528, 6.596156, 5.9666348; -5.0670953, 5.8592176, 5.4629407\",\n  \"-0.0, 0.0, 0.0; 1.4778802, -1.8008447, 1.0208956; 3.1124964, -8.4083, 3.6164289; 3.4682965, -15.625575, 1.1270602; 4.1995945, -17.131989, 3.1217384; 4.475826, -16.85209, 4.328135; -1.4804221, -1.7797452, 0.9769797; -2.029508, -8.8908205, 2.0877237; -2.0186803, -15.802732, -1.4324298; -2.896057, -17.02266, 0.7143972; -3.2728782, -16.956139, 1.9342332; -0.29321343, 2.4844966, -0.0107966; -0.6650411, 4.967304, 0.18345073; -1.0155798, 7.480947, 0.40997845; -1.5812402, 8.959045, 0.5915224; -1.5605608, 10.498726, 0.2091215; -1.7670151, 12.087595, -0.10512385; 2.8508058, 9.20897, 0.17056833; 4.2133245, 4.4402237, 0.09384152; 2.8544366, 4.737534, 3.1393228; 2.1628692, 4.8870845, 4.656518; 1.4071181, 5.4799485, 5.312004; 0.88575584, 5.972995, 5.9154034; 1.7369127, 5.276692, 5.8707867; -5.1189785, 7.6721687, -0.070962876; -4.8756294, 2.74408, 0.05380693; -4.7574663, 4.3040104, 2.8668792; -4.6983852, 5.0839744, 4.2734137; -4.4528008, 5.9003706, 5.202035; -4.375745, 6.5937104, 5.9411464; -5.148986, 5.8369884, 5.4367466\",\n  \"-0.0, 0.0, 0.0; 1.4817052, -1.7984937, 1.0194944; 3.1528478, -8.414509, 3.569569; 3.6296728, -15.652473, 1.1618512; 4.3752737, -17.151558, 3.1567554; 4.64997, -16.891907, 4.36802; -1.4766353, -1.7836232, 0.9756377; -2.0446706, -8.8913, 2.0985365; -2.0708473, -15.810305, -1.4075739; -2.9199357, -17.031324, 0.7499788; -3.280998, -16.959553, 1.9742755; -0.308068, 2.4826725, -0.015653957; -0.69940114, 4.96294, 0.17263262; -1.0700171, 7.4740477, 0.39528137; -1.6456718, 8.948923, 0.5715445; -1.6319659, 10.489818, 0.19374818; -1.845048, 12.079607, -0.1112839; 2.7857506, 9.229848, 0.1890402; 4.189287, 4.47253, 0.22506832; 2.7562144, 4.8292403, 3.2298956; 2.027675, 5.0082583, 4.7264566; 1.255882, 5.609716, 5.354862; 0.72010654, 6.1120315, 5.937638; 1.5769931, 5.421487, 5.9238725; -5.1703367, 7.635542, -0.121490896; -4.9114475, 2.7093182, 0.040204987; -4.813089, 4.27708, 2.8496833; -4.7639093, 5.0609593, 4.254421; -4.538032, 5.886969, 5.1795373; -4.477514, 6.5855613, 5.915234; -5.2336044, 5.8107815, 5.4122515\",\n  \"-0.0, 0.0, 0.0; 1.485555, -1.7959057, 1.0184535; 3.19391, -8.422034, 3.5170932; 3.790617, -15.677584, 1.1903899; 4.5513144, -17.16998, 3.1846104; 4.8262215, -16.9345, 4.400758; -1.4728116, -1.7873251, 0.9746417; -2.060683, -8.891369, 2.1102514; -2.1248178, -15.81674, -1.3827741; -2.9455452, -17.039085, 0.78497887; -3.2903678, -16.960073, 2.013504; -0.32036817, 2.4810734, -0.02129614; -0.73165965, 4.9586005, 0.16042574; -1.1274827, 7.466225, 0.37890625; -1.7134082, 8.937676, 0.54986763; -1.7060729, 10.47969, 0.17648321; -1.9254162, 12.070301, -0.11969519; 2.7137737, 9.257398, 0.20930205; 4.159062, 4.514975, 0.36375642; 2.6486297, 4.93055, 3.3227797; 1.8815461, 5.1387506, 4.7961254; 1.0937847, 5.747652, 5.3969417; 0.54357105, 6.258282, 5.9586587; 1.4056265, 5.5742755, 5.9757433; -5.223959, 7.5899096, -0.17727536; -4.954113, 2.6655293, 0.01896517; -4.874562, 4.239024, 2.825833; -4.834786, 5.0257683, 4.2292666; -4.6276197, 5.8616056, 5.1499248; -4.5827427, 6.5657744, 5.8814135; -5.322451, 5.773853, 5.3807735\",\n  \"-0.0, 0.0, 0.0; 1.4902798, -1.7927239, 1.0171558; 3.2351623, -8.429809, 3.4608707; 3.9489784, -15.699831, 1.2136855; 4.7255955, -17.187605, 3.2052207; 5.003022, -16.98158, 4.426133; -1.4681003, -1.791872, 0.97340024; -2.0777326, -8.892122, 2.1212006; -2.1794074, -15.823376, -1.3592458; -2.9729226, -17.046844, 0.8179848; -3.3015096, -16.95756, 2.0502503; -0.33204103, 2.4794765, -0.027543046; -0.76285577, 4.954195, 0.14707404; -1.1846706, 7.457939, 0.36138758; -1.7808404, 8.925786, 0.527856; -1.7790941, 10.468892, 0.1589446; -2.003863, 12.060254, -0.12902197; 2.640935, 9.285507, 0.23080909; 4.1251597, 4.5607557, 0.50844634; 2.5357656, 5.034353, 3.4169607; 1.7293537, 5.271317, 4.8647385; 0.9262832, 5.887384, 5.4373193; 0.3621037, 6.406028, 5.9774246; 1.2281483, 5.728569, 6.025512; -5.2762613, 7.5427537, -0.23647502; -4.9980683, 2.620345, -0.0054928213; -4.9400887, 4.1971292, 2.800057; -4.9110994, 4.9855204, 4.20283; -4.723878, 5.8316875, 5.118309; -4.695583, 6.541786, 5.844878; -5.417941, 5.7324276, 5.3467956\",\n  \"-0.0, 0.0, 0.0; 1.4958223, -1.7886128, 1.0162573; 3.275405, -8.437994, 3.4008033; 4.102763, -15.719299, 1.2303948; 4.896251, -17.202816, 3.2184525; 5.178085, -17.028706, 4.4433174; -1.4625471, -1.7968729, 0.97254044; -2.0960639, -8.892919, 2.1333277; -2.2365136, -15.829163, -1.3358073; -3.0016656, -17.053534, 0.85104704; -3.3135333, -16.9551, 2.086955; -0.3431943, 2.477872, -0.034386564; -0.7941154, 4.949502, 0.13306275; -1.2445993, 7.448557, 0.34372628; -1.8513956, 8.912578, 0.50542104; -1.855244, 10.456635, 0.1405305; -2.085545, 12.048593, -0.1396702; 2.562601, 9.316544, 0.25334013; 4.0825787, 4.6124434, 0.6588018; 2.4145045, 5.141652, 3.513166; 1.5689192, 5.406164, 4.933564; 0.7508666, 6.0288687, 5.4770145; 0.17290324, 6.5550766, 5.994767; 1.0420456, 5.8845787, 6.0742674; -5.3304453, 7.490326, -0.2964853; -5.0457244, 2.5699248, -0.032983482; -5.0090113, 4.1471753, 2.7726634; -4.9906545, 4.935798, 4.1754856; -4.8234224, 5.7927237, 5.0848064; -4.8116374, 6.509266, 5.805481; -5.5169797, 5.683356, 5.3101892\",\n  \"-0.0, 0.0, 0.0; 1.5017643, -1.7843095, 1.0150576; 3.3162994, -8.44667, 3.336192; 4.2522674, -15.736787, 1.2407794; 5.06422, -17.215683, 3.2248194; 5.348629, -17.056536, 4.4511237; -1.4565612, -1.8023478, 0.9713922; -2.1151683, -8.89385, 2.145901; -2.2962477, -15.833662, -1.3142061; -3.033177, -17.058384, 0.8821235; -3.3278334, -16.948877, 2.1213188; -0.3546367, 2.4761477, -0.041721653; -0.82570314, 4.944537, 0.1178865; -1.3046585, 7.4386263, 0.32455343; -1.9225204, 8.898581, 0.48102695; -1.9318192, 10.443501, 0.119908154; -2.1670606, 12.036091, -0.15248606; 2.4832053, 9.346901, 0.27078232; 4.0363865, 4.6665483, 0.8048365; 2.29103, 5.249113, 3.6020272; 1.406978, 5.5400357, 4.9935474; 0.5740481, 6.168862, 5.506494; -0.017689884, 6.7023478, 6.0007033; 0.8541125, 6.039963, 6.1125183; -5.384415, 7.4372063, -0.35466117; -5.095498, 2.5186214, -0.06328195; -5.081733, 4.0972805, 2.7417789; -5.074851, 4.886609, 4.1443076; -4.927391, 5.7522397, 5.048792; -4.931885, 6.4736476, 5.764679; -5.6203384, 5.6327286, 5.270881\",\n  \"-0.0, 0.0, 0.0; 1.5097306, -1.7781181, 1.0141048; 3.3585632, -8.453638, 3.2694304; 4.3948736, -15.750925, 1.2474866; 5.225778, -17.222548, 3.2290883; 5.509398, -17.057219, 4.4547577; -1.4484872, -1.8093325, 0.9704801; -2.131998, -8.896271, 2.1582336; -2.3566296, -15.837994, -1.2954817; -3.0661738, -17.062716, 0.9098475; -3.3437543, -16.942888, 2.1520271; -0.3653022, 2.474454, -0.049464744; -0.8553754, 4.9396334, 0.10232824; -1.3632946, 7.428277, 0.30545968; -1.9932013, 8.883646, 0.45653045; -2.0075517, 10.429337, 0.09888342; -2.246911, 12.022523, -0.16633576; 2.4041328, 9.377282, 0.29191536; 3.9845881, 4.722658, 0.95518064; 2.1652458, 5.356732, 3.6934047; 1.2443802, 5.673142, 5.0551696; 0.39597112, 6.306033, 5.536792; -0.21015358, 6.845234, 6.006769; 0.66438866, 6.1928368, 6.1511645; -5.4355693, 7.3833737, -0.41586828; -5.145378, 2.466361, -0.100231886; -5.1531425, 4.045536, 2.7045612; -5.157026, 4.835123, 4.106956; -5.030106, 5.7032743, 5.01214; -5.051383, 6.424853, 5.7275524; -5.723005, 5.573473, 5.228528\",\n  \"-0.0, 0.0, 0.0; 1.5188385, -1.770515, 1.0138069; 3.3989217, -8.459683, 3.2018566; 4.532704, -15.7614155, 1.2494613; 5.384133, -17.221142, 3.2311497; 5.6627665, -17.02862, 4.4539895; -1.4391803, -1.8168963, 0.9701958; -2.1501412, -8.899032, 2.1704197; -2.4193397, -15.8415365, -1.2785327; -3.1020079, -17.065788, 0.93552375; -3.3626685, -16.936182, 2.1803844; -0.3765228, 2.4726002, -0.05737744; -0.8860321, 4.9342976, 0.08673465; -1.4237279, 7.416957, 0.28642476; -2.0663874, 8.867165, 0.43336916; -2.0856028, 10.413423, 0.07841492; -2.3284326, 12.006995, -0.18127051; 2.3215752, 9.408054, 0.30993995; 3.921181, 4.781012, 1.1068256; 2.0306597, 5.4648595, 3.7841766; 1.0743836, 5.805884, 5.1152477; 0.20985872, 6.440563, 5.5647893; -0.41130036, 6.983769, 6.0098658; 0.466209, 6.343546, 6.1870327; -5.48818, 7.326923, -0.4737571; -5.1965675, 2.4112282, -0.13946551; -5.2269588, 3.987012, 2.6670809; -5.242154, 4.7749033, 4.070352; -5.134852, 5.6440477, 4.977119; -5.1720705, 6.3648596, 5.6926527; -5.828052, 5.5052996, 5.186892\",\n  \"-0.0, 0.0, 0.0; 1.5255291, -1.7655351, 1.0124453; 3.4411178, -8.466754, 3.1317468; 4.6686845, -15.770593, 1.2450519; 5.5400314, -17.217573, 3.2274294; 5.8092184, -16.98354, 4.445134; -1.4322956, -1.8230219, 0.9688923; -2.1694465, -8.900093, 2.1831036; -2.4859555, -15.843141, -1.2607343; -3.139785, -17.067366, 0.9620235; -3.382477, -16.928284, 2.2094913; -0.38983038, 2.4703317, -0.065634735; -0.92008936, 4.928116, 0.07017615; -1.4849658, 7.404996, 0.26656953; -2.1406424, 8.849739, 0.40978074; -2.1653214, 10.39652, 0.057450622; -2.4118013, 11.990425, -0.19669557; 2.2393324, 9.434457, 0.32317853; 3.8489692, 4.836675, 1.257394; 1.8940616, 5.5677643, 3.8753648; 0.90576047, 5.932127, 5.176523; 0.024747908, 6.5666966, 5.592993; -0.6117963, 7.112707, 6.012144; 0.26936173, 6.487711, 6.222469; -5.54163, 7.273673, -0.5284054; -5.250655, 2.3588042, -0.18164212; -5.302713, 3.9274864, 2.6285617; -5.3287416, 4.7118273, 4.033662; -5.2391443, 5.582674, 4.9407177; -5.2907405, 6.303357, 5.6554885; -5.932272, 5.435693, 5.145053\",\n  \"-0.0, 0.0, 0.0; 1.5311862, -1.7610419, 1.011731; 3.484223, -8.472838, 3.062263; 4.799556, -15.777008, 1.2369975; 5.6895523, -17.211815, 3.2199373; 5.9454756, -16.92729, 4.4297256; -1.4264423, -1.8279678, 0.96820843; -2.18972, -8.9001255, 2.194847; -2.5530128, -15.843108, -1.2445025; -3.1793473, -17.066456, 0.98664117; -3.404194, -16.915108, 2.236024; -0.40406224, 2.4678335, -0.07310964; -0.955526, 4.9213734, 0.05476585; -1.5462637, 7.3925457, 0.24692869; -2.216013, 8.8312235, 0.3860206; -2.2463048, 10.378455, 0.036120415; -2.4958456, 11.972735, -0.21263096; 2.1573403, 9.458496, 0.33341604; 3.7668438, 4.891823, 1.4096506; 1.7509353, 5.665832, 3.9683514; 0.73229766, 6.051369, 5.23967; -0.16587251, 6.683956, 5.6210265; -0.8185092, 7.231536, 6.012467; 0.06636989, 6.6246285, 6.2573113; -5.594983, 7.2215133, -0.58033764; -5.304255, 2.3070793, -0.2272647; -5.3777957, 3.8657231, 2.5880404; -5.414566, 4.645043, 3.9956918; -5.341062, 5.5172997, 4.90284; -5.405656, 6.2379446, 5.6165924; -6.034535, 5.3639493, 5.1012354\",\n  \"-0.0, 0.0, 0.0; 1.5362577, -1.7574624, 1.0102657; 3.5283225, -8.478179, 2.9929132; 4.9254494, -15.781056, 1.224123; 5.8313665, -17.209778, 3.204246; 6.069924, -16.869617, 4.4031706; -1.421168, -1.8328115, 0.9668065; -2.2102604, -8.899812, 2.2067587; -2.6224034, -15.843069, -1.2265251; -3.2216022, -17.06522, 1.0127122; -3.4285069, -16.901134, 2.2635863; -0.41919193, 2.465102, -0.07978113; -0.9915123, 4.9142785, 0.039829537; -1.60551, 7.380208, 0.22635126; -2.2904348, 8.811989, 0.36268365; -2.3268564, 10.359677, 0.015397102; -2.5791595, 11.954275, -0.2284874; 2.078946, 9.478726, 0.34175566; 3.6859837, 4.946944, 1.559814; 1.60959, 5.7563496, 4.05849; 0.5608784, 6.159279, 5.299604; -0.3544457, 6.788297, 5.6443167; -1.0232928, 7.3363585, 6.006637; -0.13510376, 6.749887, 6.2867575; -5.6458054, 7.173276, -0.6332651; -5.3574347, 2.258883, -0.27768677; -5.4524193, 3.8058252, 2.5434241; -5.4999113, 4.579297, 3.953977; -5.439713, 5.4516926, 4.861972; -5.514986, 6.171667, 5.5753546; -6.133863, 5.2938623, 5.0543942\",\n  \"-0.0, 0.0, 0.0; 1.5409937, -1.7536131, 1.0097418; 3.5699618, -8.4821005, 2.927552; 5.0444636, -15.782515, 1.2122091; 5.9626946, -17.21209, 3.1860342; 6.183259, -16.82425, 4.3738766; -1.4162191, -1.8369019, 0.9663052; -2.2330556, -8.898848, 2.217043; -2.6923103, -15.841801, -1.2108717; -3.2663064, -17.06252, 1.035737; -3.456863, -16.889542, 2.2880096; -0.43518755, 2.462107, -0.08634616; -1.0285006, 4.906647, 0.025572807; -1.6645904, 7.3673735, 0.206701; -2.3645895, 8.792255, 0.3386708; -2.4078643, 10.34034, -0.006056547; -2.6640513, 11.935111, -0.24469988; 2.0011399, 9.496359, 0.35556197; 3.6016898, 5.0030255, 1.7162539; 1.4632299, 5.8433843, 4.1515594; 0.3836702, 6.2614884, 5.3607955; -0.54843867, 6.885452, 5.667637; -1.2333741, 7.4327445, 5.999809; -0.34329057, 6.8676825, 6.3156447; -5.695092, 7.127064, -0.6894333; -5.4107137, 2.2122416, -0.33659723; -5.5284467, 3.7457676, 2.490974; -5.5873117, 4.512531, 3.904757; -5.5378375, 5.383421, 4.814842; -5.62162, 6.101901, 5.5287824; -6.2333503, 5.223476, 5.0004787\",\n  \"-0.0, 0.0, 0.0; 1.5452172, -1.7510948, 1.0076554; 3.613186, -8.485498, 2.8619933; 5.1611977, -15.782417, 1.1972886; 6.089635, -17.21748, 3.1623383; 6.293931, -16.79303, 4.3405337; -1.411792, -1.8413537, 0.96430856; -2.2569513, -8.8979435, 2.2264035; -2.7640111, -15.840904, -1.1947522; -3.3122709, -17.059862, 1.059228; -3.4858592, -16.875912, 2.3124037; -0.45080528, 2.4590683, -0.0925815; -1.0649714, 4.8988266, 0.010875493; -1.7230062, 7.3542356, 0.18565969; -2.4389353, 8.77152, 0.31394222; -2.4893894, 10.3201065, -0.027534187; -2.7493398, 11.915113, -0.2604636; 1.9234879, 9.513468, 0.36762178; 3.5179443, 5.0615845, 1.8648618; 1.3173177, 5.9278283, 4.234839; 0.20687187, 6.358569, 5.4112253; -0.7436811, 6.9733286, 5.677363; -1.4464827, 7.516659, 5.97714; -0.55500776, 6.9766207, 6.330591; -5.743013, 7.080503, -0.7472763; -5.4657087, 2.1646285, -0.40357754; -5.6081524, 3.6812155, 2.4319813; -5.6793747, 4.4395084, 3.8497589; -5.638611, 5.309133, 4.761485; -5.7292304, 6.0265946, 5.475614; -6.3357983, 5.148788, 4.9403763\",\n  \"-0.0, 0.0, 0.0; 1.5494275, -1.7480068, 1.0065515; 3.6562526, -8.487021, 2.799376; 5.2762938, -15.779134, 1.1828481; 6.2151794, -17.21902, 3.139385; 6.410112, -16.778685, 4.3133287; -1.4073585, -1.8452963, 0.9632521; -2.282611, -8.896466, 2.2350912; -2.8358538, -15.839184, -1.1793942; -3.3613644, -17.056429, 1.0809214; -3.519256, -16.860945, 2.3344269; -0.466915, 2.455826, -0.09860387; -1.1019878, 4.8905573, -0.0032707155; -1.7814467, 7.340598, 0.16473682; -2.5130434, 8.750371, 0.2872531; -2.571167, 10.299438, -0.05080822; -2.8357635, 11.894645, -0.27704787; 1.8455832, 9.529081, 0.3827092; 3.436285, 5.1224003, 2.011855; 1.1721408, 6.0099163, 4.313135; 0.030155301, 6.4509907, 5.454991; -0.94012105, 7.0520396, 5.6777306; -1.6623182, 7.5878134, 5.9430256; -0.7706419, 7.075993, 6.3357716; -5.7896566, 7.034538, -0.8080607; -5.5256786, 2.1167803, -0.481219; -5.6943507, 3.6158307, 2.3622148; -5.7786865, 4.3653536, 3.783931; -5.74378, 5.2324934, 4.6982627; -5.8388515, 5.9484386, 5.4133344; -6.44323, 5.0741377, 4.8699446\",\n  \"-0.0, 0.0, 0.0; 1.5543181, -1.7442881, 1.0054616; 3.6992264, -8.487702, 2.7354836; 5.3885612, -15.773651, 1.1626818; 6.34062, -17.215338, 3.1115124; 6.5323825, -16.771963, 4.2848344; -1.4021873, -1.8497719, 0.96220905; -2.3083348, -8.89523, 2.244025; -2.9091406, -15.8372, -1.1639361; -3.411508, -17.053036, 1.1023924; -3.5537193, -16.848022, 2.3562524; -0.48402277, 2.4522882, -0.10401126; -1.1396589, 4.8818545, -0.01642622; -1.8387372, 7.3268385, 0.1446143; -2.5864234, 8.728496, 0.26305497; -2.6522603, 10.277943, -0.07183772; -2.9209783, 11.873227, -0.29259977; 1.7698452, 9.542132, 0.39545596; 3.3609672, 5.187265, 2.1580534; 1.0314157, 6.0836544, 4.389556; -0.14303458, 6.528851, 5.4963436; -1.1320409, 7.112977, 5.677928; -1.8729184, 7.6383624, 5.910467; -0.98184454, 7.1556144, 6.339697; -5.8354187, 6.9909353, -0.8650678; -5.586506, 2.0709438, -0.56080174; -5.7837744, 3.551547, 2.2904472; -5.882409, 4.2918487, 3.7160692; -5.8513675, 5.1544666, 4.6348076; -5.9491982, 5.867704, 5.352209; -6.5536504, 5.0000615, 4.7983294\",\n  \"-0.0, 0.0, 0.0; 1.5585427, -1.7407708, 1.005018; 3.73914, -8.488464, 2.672614; 5.4990525, -15.766438, 1.1408144; 6.46658, -17.206844, 3.0829628; 6.6581807, -16.76585, 4.257208; -1.3977016, -1.8533843, 0.9617841; -2.333865, -8.893158, 2.2532284; -2.9836318, -15.833419, -1.1492262; -3.4639378, -17.047192, 1.1229832; -3.5904562, -16.830954, 2.3766394; -0.5001355, 2.4488204, -0.109355174; -1.1769946, 4.872819, -0.029245831; -1.8981805, 7.311825, 0.12480924; -2.660478, 8.705955, 0.23886998; -2.733664, 10.2557955, -0.09265788; -3.0070257, 11.85111, -0.3074174; 1.6890695, 9.557601, 0.4084356; 3.284205, 5.263573, 2.3111055; 0.8864038, 6.154641, 4.4713078; -0.3219068, 6.596832, 5.5422726; -1.3282917, 7.1612544, 5.6869307; -2.0866566, 7.673766, 5.8899536; -1.1960809, 7.2205777, 6.3512473; -5.8823957, 6.941985, -0.921613; -5.655151, 2.0194182, -0.6431471; -5.8832746, 3.479831, 2.2162018; -5.997337, 4.210036, 3.6458747; -5.969143, 5.066624, 4.570328; -6.0688586, 5.7761703, 5.2911224; -6.6744175, 4.917072, 4.725263\",\n  \"-0.0, 0.0, 0.0; 1.5632378, -1.7368836, 1.004451; 3.7771235, -8.488892, 2.6095524; 5.6067505, -15.757387, 1.1148832; 6.589963, -17.196781, 3.0498915; 6.779895, -16.754116, 4.2237787; -1.3926941, -1.8574309, 0.9612419; -2.3604288, -8.891055, 2.2628803; -3.0586314, -15.828949, -1.1348033; -3.5168061, -17.040442, 1.1431859; -3.627711, -16.81346, 2.3964212; -0.51600486, 2.445341, -0.11340648; -1.2139494, 4.863587, -0.040716708; -1.9576815, 7.296355, 0.10452184; -2.7348773, 8.682543, 0.21476705; -2.8154445, 10.232641, -0.11383374; -3.093265, 11.827842, -0.32366088; 1.6072608, 9.573631, 0.41679612; 3.2067556, 5.3476233, 2.4627094; 0.739656, 6.229059, 4.547516; -0.5030122, 6.6660776, 5.5806193; -1.5257189, 7.208187, 5.6924114; -2.300662, 7.7054205, 5.8691206; -1.4104819, 7.2818313, 6.3584547; -5.9293113, 6.890731, -0.97593117; -5.727261, 1.9652572, -0.73153377; -5.9876127, 3.4013345, 2.1373715; -6.117788, 4.1193724, 3.5718226; -6.0917025, 4.968309, 4.503369; -6.19261, 5.673175, 5.228576; -6.8003163, 4.825018, 4.648687\",\n  \"-0.0, 0.0, 0.0; 1.5688405, -1.7320294, 1.0040977; 3.8146834, -8.488114, 2.5464206; 5.7100534, -15.746698, 1.0858972; 6.709771, -17.184307, 3.013763; 6.8975344, -16.73641, 4.1860137; -1.3866872, -1.862094, 0.96090394; -2.389237, -8.888617, 2.2744932; -3.134894, -15.823985, -1.118259; -3.572779, -17.033718, 1.1646514; -3.6690211, -16.796783, 2.4172559; -0.5316331, 2.4418778, -0.11581344; -1.2509274, 4.854052, -0.049827904; -2.0188627, 7.279874, 0.08528046; -2.809694, 8.658672, 0.19113466; -2.89719, 10.209015, -0.13452801; -3.179677, 11.80407, -0.3391661; 1.5215833, 9.591308, 0.42414904; 3.128112, 5.4396014, 2.61177; 0.5935428, 6.3064747, 4.6203556; -0.6825589, 6.7358375, 5.6152043; -1.7221123, 7.250914, 5.694792; -2.514295, 7.7291617, 5.8455544; -1.6240959, 7.3389254, 6.361846; -5.9771657, 6.8350034, -1.028128; -5.8058615, 1.906662, -0.82087183; -6.0990415, 3.3167472, 2.0577433; -6.245631, 4.021789, 3.4970493; -6.219347, 4.861253, 4.4371357; -6.3195677, 5.5601683, 5.168174; -6.9310665, 4.7249255, 4.5737095\",\n  \"-0.0, 0.0, 0.0; 1.5732427, -1.7286803, 1.0029811; 3.8536615, -8.487425, 2.4816017; 5.811285, -15.735676, 1.0522066; 6.8288326, -17.172297, 2.9714608; 7.017451, -16.723982, 4.143415; -1.3819493, -1.8661631, 0.9598353; -2.4158812, -8.88545, 2.2877026; -3.2121391, -15.817823, -1.0996711; -3.6271691, -17.02568, 1.1884956; -3.7074773, -16.779268, 2.4403949; -0.545696, 2.438724, -0.11685672; -1.2855716, 4.844816, -0.056610737; -2.0776799, 7.2633777, 0.06875102; -2.8825355, 8.634335, 0.17067385; -2.9776084, 10.184803, -0.15225834; -3.2652335, 11.779572, -0.3519184; 1.4376373, 9.60891, 0.43390864; 3.0592737, 5.5392833, 2.76022; 0.45873547, 6.3871636, 4.6910815; -0.85003495, 6.8066263, 5.64695; -1.9063803, 7.2902765, 5.6972094; -2.7158227, 7.746019, 5.824117; -1.8246031, 7.392369, 6.364446; -6.0221405, 6.779332, -1.0769732; -5.8851185, 1.848434, -0.9087024; -6.210252, 3.2271538, 1.9816504; -6.372818, 3.9165144, 3.4268246; -6.3478184, 4.745122, 4.3765283; -6.4485245, 5.436912, 5.114247; -7.0624404, 4.615098, 4.5037737\",\n  \"-0.0, 0.0, 0.0; 1.5785114, -1.7248727, 1.0012566; 3.8917003, -8.486486, 2.414403; 5.9075603, -15.724145, 1.0125455; 6.944755, -17.159863, 2.9219332; 7.1395392, -16.72008, 4.0961084; -1.3762575, -1.8712106, 0.958185; -2.444437, -8.882458, 2.301331; -3.2903676, -15.810996, -1.0818446; -3.6842842, -17.01691, 1.2110734; -3.7493868, -16.760828, 2.461914; -0.5586565, 2.4358096, -0.11639772; -1.3181193, 4.835903, -0.060803752; -2.1348233, 7.246747, 0.055023905; -2.9532795, 8.609991, 0.15197513; -3.055797, 10.160409, -0.16891456; -3.3488476, 11.754724, -0.36426282; 1.3540182, 9.626682, 0.45025524; 2.9972866, 5.6449184, 2.9096274; 0.33318043, 6.468232, 4.7629; -1.0070473, 6.874977, 5.6798844; -2.0798986, 7.3230925, 5.702064; -2.9064667, 7.753262, 5.8057137; -2.0136805, 7.4408975, 6.368437; -6.0636954, 6.723377, -1.1264157; -5.965625, 1.7903008, -0.99995863; -6.3241878, 3.1336656, 1.9030613; -6.503468, 3.8053453, 3.3545704; -6.477844, 4.620471, 4.315854; -6.5774894, 5.303197, 5.0621114; -7.1951094, 4.4971385, 4.4346046\",\n  \"-0.0, 0.0, 0.0; 1.5831177, -1.7213328, 1.0000753; 3.9296074, -8.48501, 2.3468893; 5.9997444, -15.711851, 0.96851933; 7.058587, -17.144985, 2.8679388; 7.264627, -16.721231, 4.0460806; -1.3712572, -1.875455, 0.9570548; -2.4735537, -8.878191, 2.3169346; -3.3694997, -15.80269, -1.0616333; -3.7419438, -17.005613, 1.236439; -3.7906437, -16.733976, 2.4847424; -0.5719541, 2.432777, -0.11523817; -1.350373, 4.826871, -0.063280776; -2.1894155, 7.230448, 0.043574817; -3.0217495, 8.585687, 0.13441953; -3.1326094, 10.135839, -0.18497095; -3.4317122, 11.729578, -0.37579268; 1.2744737, 9.641423, 0.46899924; 2.9506416, 5.7535095, 3.0531569; 0.23207688, 6.545047, 4.8399982; -1.1350724, 6.9354925, 5.723722; -2.2239873, 7.3435917, 5.718413; -3.06768, 7.744398, 5.7992887; -2.174564, 7.4756107, 6.383578; -6.102585, 6.6716247, -1.1732129; -6.045534, 1.7369766, -1.0904891; -6.4411187, 3.039713, 1.826206; -6.6389103, 3.6910803, 3.2845519; -6.6122394, 4.490731, 4.2587185; -6.710414, 5.162993, 5.014608; -7.332172, 4.374939, 4.368592\",\n  \"-0.0, 0.0, 0.0; 1.5881872, -1.7179098, 0.9979215; 3.9654233, -8.483719, 2.2784789; 6.088239, -15.69943, 0.92210054; 7.1698585, -17.128897, 2.8114243; 7.391768, -16.72902, 3.995018; -1.3657323, -1.8805302, 0.9549936; -2.5047984, -8.873745, 2.3334408; -3.4496303, -15.793598, -1.0413246; -3.8025892, -16.994053, 1.2611094; -3.8362029, -16.709452, 2.5070193; -0.58555394, 2.4295914, -0.11413336; -1.3828434, 4.8175454, -0.06587653; -2.2438564, 7.2136955, 0.03268473; -3.0893035, 8.561229, 0.11681274; -3.20817, 10.111088, -0.20112306; -3.5133314, 11.704231, -0.38726366; 1.194777, 9.655049, 0.4886526; 2.9045596, 5.866455, 3.1954002; 0.1354084, 6.6233296, 4.918441; -1.2567275, 6.996001, 5.7702546; -2.3607326, 7.359956, 5.7383304; -3.2208858, 7.7283945, 5.7965794; -2.3276503, 7.5088873, 6.400933; -6.140827, 6.620311, -1.2192214; -6.1285977, 1.6847978, -1.1816171; -6.5637336, 2.943112, 1.7489158; -6.7813025, 3.5722675, 3.2141805; -6.754521, 4.351184, 4.2050004; -6.8519044, 5.008949, 4.973639; -7.4770727, 4.2428837, 4.304866\",\n  \"-0.0, 0.0, 0.0; 1.5918869, -1.715912, 0.99546003; 4.000272, -8.482986, 2.2093956; 6.1706357, -15.6880665, 0.8718811; 7.275072, -17.113766, 2.7508225; 7.512776, -16.735065, 3.938308; -1.3616914, -1.8846508, 0.95263773; -2.536319, -8.868222, 2.3500037; -3.5311437, -15.782911, -1.0209794; -3.8639355, -16.981163, 1.2856016; -3.8819547, -16.68305, 2.5286715; -0.5986465, 2.426458, -0.112867594; -1.4150634, 4.808008, -0.068078; -2.2983663, 7.1963415, 0.022638671; -3.156062, 8.536423, 0.10167018; -3.283179, 10.085808, -0.21538046; -3.5952816, 11.677961, -0.3984589; 1.1139538, 9.668345, 0.5100635; 2.8546214, 5.984273, 3.3386617; 0.040084124, 6.704278, 5.002964; -1.3744448, 7.0580473, 5.8254404; -2.4922152, 7.3739653, 5.769809; -3.3677998, 7.7070603, 5.8072667; -2.4745233, 7.541569, 6.4285283; -6.178257, 6.568204, -1.2648565; -6.212348, 1.6326604, -1.2746946; -6.6923575, 2.8407667, 1.6699258; -6.932363, 3.4448183, 3.1422346; -6.904416, 4.1962094, 4.154056; -7.0001564, 4.83422, 4.939371; -7.6292715, 4.0951867, 4.2443943\",\n  \"-0.0, 0.0, 0.0; 1.5962067, -1.713816, 0.99214834; 4.0325317, -8.482323, 2.1405768; 6.2490816, -15.676199, 0.81859386; 7.3773007, -17.095406, 2.6882977; 7.633376, -16.741203, 3.8795173; -1.3569584, -1.8896571, 0.9494686; -2.5692885, -8.862662, 2.3672483; -3.6133165, -15.772044, -0.9997339; -3.9285781, -16.966566, 1.3112402; -3.932077, -16.654428, 2.5509892; -0.611556, 2.423313, -0.111215584; -1.4465657, 4.7984786, -0.07036179; -2.3517148, 7.178937, 0.011576496; -3.2209296, 8.511751, 0.087580316; -3.3545356, 10.060883, -0.22804028; -3.671467, 11.652376, -0.4085378; 1.0341864, 9.681189, 0.5280276; 2.8081715, 6.1093836, 3.477344; -0.0493958, 6.786902, 5.0852013; -1.4851276, 7.1189213, 5.879525; -2.6142936, 7.3857303, 5.8013854; -3.5033352, 7.682923, 5.8182826; -2.6115153, 7.5756774, 6.454248; -6.2143984, 6.5160737, -1.3098009; -6.2962604, 1.5814705, -1.3717399; -6.8224254, 2.734424, 1.5870721; -7.0855074, 3.3109012, 3.0664759; -7.0571795, 4.0294867, 4.101843; -7.151882, 4.6435924, 4.906112; -7.7841306, 3.93548, 4.1823807\",\n  \"-0.0, 0.0, 0.0; 1.6005216, -1.7113366, 0.9894729; 4.064227, -8.480398, 2.0744665; 6.32232, -15.663572, 0.7646495; 7.473416, -17.077765, 2.6241817; 7.7471037, -16.745646, 3.8178444; -1.3522116, -1.8943393, 0.946908; -2.6045487, -8.856393, 2.3836083; -3.6975486, -15.760353, -0.9789505; -3.9943821, -16.952314, 1.3357837; -3.9832156, -16.627432, 2.5722084; -0.62299836, 2.4205008, -0.10891999; -1.4757485, 4.7894115, -0.071491435; -2.4033375, 7.1615176, 0.0011968464; -3.2844286, 8.486622, 0.07524282; -3.422619, 10.035869, -0.23782527; -3.7416668, 11.627302, -0.41509864; 0.9547632, 9.69486, 0.54676837; 2.7712357, 6.24862, 3.6171331; -0.12883043, 6.8762007, 5.16816; -1.5854666, 7.182696, 5.9341784; -2.723455, 7.398836, 5.831345; -3.6241124, 7.6591854, 5.8251224; -2.7375414, 7.6152196, 6.47578; -6.247796, 6.462803, -1.354416; -6.376609, 1.5301843, -1.470725; -6.9539933, 2.623802, 1.5010331; -7.242685, 3.170611, 2.9869103; -7.2155476, 3.8516936, 4.0473547; -7.3104305, 4.4381914, 4.8719525; -7.944446, 3.7646387, 4.1174326\",\n  \"-0.0, 0.0, 0.0; 1.6032896, -1.711157, 0.9852936; 4.0940685, -8.479504, 2.011334; 6.3908434, -15.652184, 0.71130407; 7.5648146, -17.0601, 2.5612721; 7.8557963, -16.74772, 3.7561727; -1.3491733, -1.898496, 0.9429085; -2.6416225, -8.849188, 2.3989658; -3.781344, -15.748773, -0.9570558; -4.063141, -16.937393, 1.3612726; -4.038239, -16.596262, 2.5931125; -0.6339606, 2.417768, -0.106327645; -1.5049748, 4.7800837, -0.07284556; -2.4555564, 7.143347, -0.009797454; -3.3471699, 8.461474, 0.06279816; -3.4906166, 10.0106535, -0.24823616; -3.8135326, 11.601561, -0.4232181; 0.8735502, 9.708668, 0.5633449; 2.7398753, 6.40425, 3.7572367; -0.20124817, 6.972822, 5.2527113; -1.6780251, 7.2492013, 5.991126; -2.8218627, 7.4135103, 5.860944; -3.731937, 7.6364646, 5.828384; -2.8551478, 7.6615596, 6.493145; -6.2812705, 6.407506, -1.398394; -6.457819, 1.4780846, -1.5729936; -7.088029, 2.507613, 1.410901; -7.403133, 3.0223758, 2.9028468; -7.3768787, 3.6638744, 3.9877167; -7.471712, 4.22106, 4.832403; -8.107427, 3.5838275, 4.0483427\",\n  \"-0.0, 0.0, 0.0; 1.6066245, -1.7100078, 0.9818499; 4.1219053, -8.477678, 1.9510021; 6.4555326, -15.639019, 0.6540904; 7.653402, -17.037489, 2.4958854; 7.9632735, -16.746181, 3.6913593; -1.345493, -1.9027368, 0.93961316; -2.680847, -8.84185, 2.4120877; -3.868154, -15.736839, -0.9368737; -4.134864, -16.921911, 1.3850532; -4.096288, -16.56556, 2.6122227; -0.64411944, 2.4151971, -0.103671566; -1.5326664, 4.7710233, -0.07382711; -2.5063992, 7.12508, -0.020419933; -3.4075494, 8.436858, 0.049378313; -3.5565913, 9.985937, -0.25951642; -3.884458, 11.57617, -0.43139082; 0.7930858, 9.722696, 0.5780005; 2.714668, 6.5723352, 3.8925188; -0.263659, 7.0706697, 5.3386025; -1.7586151, 7.3112993, 6.0525465; -2.9059083, 7.423706, 5.899601; -3.8232636, 7.609027, 5.843749; -2.9576588, 7.7043443, 6.5167565; -6.31334, 6.351512, -1.4397665; -6.537955, 1.4264965, -1.6734594; -7.222962, 2.3892138, 1.320645; -7.565465, 2.8705707, 2.8176959; -7.542204, 3.4701114, 3.926372; -7.638665, 3.9959989, 4.7907104; -8.274213, 3.396809, 3.9770768\",\n  \"-0.0, 0.0, 0.0; 1.6103101, -1.7087272, 0.97803503; 4.1482573, -8.475746, 1.8910158; 6.5142326, -15.625547, 0.58905613; 7.735603, -17.014917, 2.4222832; 8.062855, -16.740726, 3.617174; -1.3414154, -1.9074097, 0.93596154; -2.7221475, -8.834327, 2.423928; -3.957534, -15.725203, -0.9160969; -4.209259, -16.90592, 1.4097176; -4.1568556, -16.533363, 2.6315498; -0.6535412, 2.4128034, -0.10039064; -1.5594044, 4.762068, -0.074082695; -2.557151, 7.106256, -0.030787691; -3.468735, 8.410854, 0.038073048; -3.6241534, 9.959701, -0.26884085; -3.9573967, 11.54904, -0.4386269; 0.71141076, 9.737625, 0.5894664; 2.6945674, 6.7542906, 4.0202227; -0.3164227, 7.175465, 5.422534; -1.8272552, 7.376878, 6.114871; -2.976441, 7.4378357, 5.9476423; -3.8994393, 7.5854707, 5.874969; -3.044211, 7.749973, 6.547888; -6.3452797, 6.2928314, -1.477914; -6.618411, 1.3736143, -1.7738014; -7.356158, 2.2657337, 1.2296253; -7.7250314, 2.7117925, 2.731337; -7.705452, 3.267972, 3.8624578; -7.8040032, 3.7615483, 4.745415; -8.438846, 3.2026339, 3.9030743\",\n  \"-0.0, 0.0, 0.0; 1.6127837, -1.7086273, 0.97412556; 4.1729746, -8.474419, 1.8324615; 6.566752, -15.613468, 0.5223439; 7.8099003, -16.9961, 2.346003; 8.152137, -16.734707, 3.5395637; -1.3386838, -1.911157, 0.932221; -2.7664773, -8.825243, 2.4353728; -4.050773, -15.712315, -0.89403176; -4.28586, -16.888828, 1.435652; -4.2194986, -16.503046, 2.6526923; -0.6619041, 2.4106715, -0.09674853; -1.5851278, 4.7532005, -0.07354751; -2.6076584, 7.0868444, -0.039940238; -3.5280662, 8.385312, 0.027406365; -3.690699, 9.933678, -0.27819076; -4.031543, 11.521573, -0.44638747; 0.6288054, 9.753045, 0.5995838; 2.6814907, 6.951189, 4.1406813; -0.3545003, 7.2854586, 5.512158; -1.8773562, 7.442809, 6.1894045; -3.0261664, 7.4516954, 6.0092244; -3.9531317, 7.5606923, 5.920575; -3.111684, 7.7937202, 6.59062; -6.377004, 6.2320986, -1.5120794; -6.7034826, 1.3202195, -1.8694335; -7.4943056, 2.1354733, 1.1423234; -7.8897176, 2.5431, 2.6481996; -7.874861, 3.0540147, 3.8005443; -7.9764647, 3.5134401, 4.701404; -8.609242, 2.9950657, 3.8320198\",\n  \"-0.0, 0.0, 0.0; 1.6153489, -1.7082956, 0.9704495; 4.1958675, -8.472822, 1.7762764; 6.6156464, -15.600996, 0.45475578; 7.879254, -16.976564, 2.2696733; 8.234957, -16.7258, 3.4615755; -1.335841, -1.9148555, 0.9287032; -2.811112, -8.816079, 2.4450564; -4.142872, -15.69911, -0.8740437; -4.364873, -16.87077, 1.4593663; -4.2855096, -16.469118, 2.6704805; -0.6696876, 2.408647, -0.093553536; -1.6095326, 4.744588, -0.07372412; -2.6563215, 7.067572, -0.049860664; -3.5854292, 8.359911, 0.015904047; -3.7548587, 9.907835, -0.28823394; -4.10283, 11.494358, -0.45478565; 0.54761744, 9.767615, 0.61109155; 2.6754305, 7.1624217, 4.256453; -0.3768294, 7.3986206, 5.6121244; -1.9073178, 7.506369, 6.2818317; -3.0544958, 7.4625964, 6.096425; -3.9843428, 7.531726, 5.9983974; -3.156498, 7.829645, 6.6596184; -6.405637, 6.172669, -1.5490389; -6.788768, 1.2702274, -1.9734513; -7.632806, 2.0060015, 1.0443221; -8.054825, 2.373888, 2.5532067; -8.0485735, 2.8371773, 3.7255874; -8.156329, 3.2604325, 4.6432953; -8.7837925, 2.7842329, 3.7463715\",\n  \"-0.0, 0.0, 0.0; 1.6185658, -1.7075448, 0.9664029; 4.2196407, -8.469887, 1.7229694; 6.6623983, -15.588166, 0.3904382; 7.943956, -16.958492, 2.1967154; 8.30806, -16.709412, 3.3864322; -1.3322636, -1.9192172, 0.9248303; -2.8510742, -8.808319, 2.4532738; -4.2334886, -15.686062, -0.8560624; -4.4437685, -16.85287, 1.480861; -4.351652, -16.4364, 2.6860518; -0.6748375, 2.4073648, -0.0894595; -1.6297314, 4.7372217, -0.073044196; -2.7020366, 7.048626, -0.060217254; -3.6397672, 8.334795, 0.0040976107; -3.8162081, 9.882269, -0.29833826; -4.1719995, 11.467194, -0.46357423; 0.46689153, 9.784358, 0.6224116; 2.6742482, 7.3895116, 4.3634777; -0.38758755, 7.5189133, 5.711937; -1.922321, 7.5727334, 6.3784266; -3.0665097, 7.4739656, 6.195708; -3.9982328, 7.5007977, 6.0948305; -3.1841078, 7.8629236, 6.740865; -6.4294896, 6.1109886, -1.5875292; -6.872347, 1.2207513, -2.0878327; -7.772718, 1.8693794, 0.9336462; -8.222901, 2.1936953, 2.4443839; -8.227542, 2.608474, 3.6347995; -8.343262, 2.9947808, 4.5677085; -8.963415, 2.5617576, 3.64421\",\n  \"-0.0, 0.0, 0.0; 1.6213915, -1.7074276, 0.9618624; 4.24204, -8.467182, 1.6726128; 6.706153, -15.575578, 0.32670534; 8.004353, -16.939346, 2.1260471; 8.377606, -16.694937, 3.3138957; -1.3291241, -1.9234778, 0.9204855; -2.8843493, -8.802493, 2.4577127; -4.326446, -15.671664, -0.8439486; -4.5252194, -16.83472, 1.4958508; -4.419499, -16.405222, 2.69534; -0.6794401, 2.4061837, -0.0863469; -1.6486523, 4.7301455, -0.07402905; -2.7455072, 7.030036, -0.07177947; -3.6911805, 8.310535, -0.010726523; -3.8747826, 9.857437, -0.31182358; -4.2391033, 11.440585, -0.4755016; 0.3882227, 9.799616, 0.6363728; 2.682894, 7.6207848, 4.4561195; -0.37844324, 7.6371694, 5.811801; -1.9123629, 7.6339912, 6.4823174; -3.0508988, 7.476362, 6.305687; -3.9827905, 7.457323, 6.204597; -3.1860888, 7.8853264, 6.831794; -6.4495487, 6.052088, -1.6304486; -6.9579077, 1.1775274, -2.214468; -7.9134307, 1.7378318, 0.8077421; -8.3911915, 2.0179846, 2.3188453; -8.409207, 2.3837163, 3.5251074; -8.534884, 2.7325268, 4.4714055; -9.145505, 2.3431983, 3.5224512\",\n  \"-0.0, 0.0, 0.0; 1.6231614, -1.708405, 0.95713013; 4.262398, -8.465216, 1.6258516; 6.7474284, -15.563718, 0.2662624; 8.060368, -16.919731, 2.0607638; 8.439452, -16.67493, 3.2466836; -1.3271699, -1.9269857, 0.9159569; -2.9202983, -8.795689, 2.4604657; -4.4174767, -15.656757, -0.833514; -4.608227, -16.81549, 1.5090966; -4.4906573, -16.37304, 2.7027607; -0.68191695, 2.4055834, -0.08350123; -1.6641595, 4.724088, -0.075832635; -2.7854176, 7.012164, -0.084802136; -3.7413023, 8.2852745, -0.028409734; -3.9315178, 9.831583, -0.32844555; -4.3024354, 11.413329, -0.49085134; 0.31183863, 9.815179, 0.6516952; 2.7024655, 7.8584723, 4.5323505; -0.3476224, 7.7601085, 5.9097447; -1.8753418, 7.6991158, 6.591555; -3.005343, 7.4790707, 6.42728; -3.9354496, 7.4107056, 6.3311987; -3.1589477, 7.9049234, 6.9345975; -6.4640074, 5.9943547, -1.6778469; -7.0373945, 1.1388817, -2.3534627; -8.051969, 1.6056262, 0.6653962; -8.559255, 1.8389982, 2.174824; -8.59032, 2.1568594, 3.3943124; -8.725789, 2.4689052, 4.352028; -9.326785, 2.1219983, 3.3807359\",\n  \"-0.0, 0.0, 0.0; 1.6234645, -1.7108194, 0.9522917; 4.282748, -8.463404, 1.5832225; 6.7851577, -15.552687, 0.20749593; 8.111989, -16.903435, 1.9957398; 8.493271, -16.65099, 3.1793509; -1.326872, -1.9293854, 0.9113259; -2.9553666, -8.788451, 2.461766; -4.5101237, -15.640678, -0.82393265; -4.6913385, -16.796188, 1.5210261; -4.561622, -16.344143, 2.709827; -0.6828862, 2.4053626, -0.081924215; -1.6770931, 4.718773, -0.07900228; -2.8217878, 6.995158, -0.09730099; -3.7882595, 8.260424, -0.044964287; -3.9856937, 9.806075, -0.34372383; -4.363673, 11.386291, -0.50475085; 0.23933172, 9.829548, 0.6695756; 2.7315135, 8.095334, 4.5919237; -0.29533315, 7.887295, 6.00785; -1.8108728, 7.7710767, 6.7093806; -2.9291825, 7.487086, 6.564323; -3.8551579, 7.3676224, 6.478873; -3.1013007, 7.9275303, 7.052892; -6.4746113, 5.9403954, -1.7252156; -7.1120276, 1.1067142, -2.493378; -8.184722, 1.4780271, 0.5186269; -8.721068, 1.6636828, 2.0246277; -8.767872, 1.9341354, 3.2550006; -8.915243, 2.209753, 4.2220893; -9.504288, 1.9054997, 3.2294137\",\n  \"-0.0, 0.0, 0.0; 1.6253357, -1.7112951, 0.9482359; 4.3028917, -8.459742, 1.5452389; 6.8189907, -15.540191, 0.14914334; 8.157472, -16.887405, 1.9313616; 8.538326, -16.624565, 3.1128452; -1.324795, -1.9326389, 0.9074448; -2.9900365, -8.782348, 2.4602168; -4.602665, -15.6243515, -0.8188889; -4.776874, -16.775978, 1.5285099; -4.6354628, -16.312756, 2.7116613; -0.6824109, 2.405535, -0.08081394; -1.6871595, 4.714387, -0.08307999; -2.8556747, 6.978533, -0.11147324; -3.833136, 8.235511, -0.06371805; -4.0378866, 9.780381, -0.36159164; -4.422927, 11.3589735, -0.521808; 0.16796708, 9.844894, 0.6846907; 2.7609947, 8.330805, 4.632731; -0.23216009, 8.023437, 6.101226; -1.7303201, 7.857217, 6.8295116; -2.8346462, 7.514619, 6.705418; -3.7543416, 7.347985, 6.6319494; -3.025066, 7.968712, 7.174306; -6.4817696, 5.885746, -1.7737035; -7.1847124, 1.0776658, -2.6392; -8.316825, 1.3508675, 0.36153364; -8.882882, 1.4874698, 1.8618981; -8.9488125, 1.7098022, 3.1010003; -9.110876, 1.9481901, 4.075603; -9.684837, 1.6864662, 3.0621839\",\n  \"-0.0, 0.0, 0.0; 1.6257243, -1.7126445, 0.94512844; 4.322319, -8.456279, 1.5099459; 6.851576, -15.526932, 0.08821106; 8.201167, -16.868677, 1.8661706; 8.5806265, -16.594687, 3.0455685; -1.324384, -1.934314, 0.90447146; -3.02553, -8.774755, 2.4591777; -4.6970825, -15.606277, -0.8122618; -4.861226, -16.755732, 1.5369272; -4.7078323, -16.286362, 2.716157; -0.68131673, 2.4058614, -0.08032602; -1.695473, 4.7105885, -0.087034605; -2.8853679, 6.9634533, -0.12365095; -3.8736963, 8.212078, -0.08064936; -4.0857854, 9.756114, -0.37771153; -4.477587, 11.333148, -0.5368762; 0.10382581, 9.858021, 0.7000693; 2.7968423, 8.559454, 4.657931; -0.15018749, 8.164796, 6.1971474; -1.6247879, 7.9546375, 6.9612803; -2.7127616, 7.5567555, 6.859732; -3.6241508, 7.3452187, 6.799516; -2.92195, 8.023025, 7.3082294; -6.4866734, 5.8372993, -1.8172054; -7.254691, 1.0578675, -2.7805479; -8.444974, 1.2350096, 0.20484471; -9.040116, 1.3235798, 1.6975385; -9.12796, 1.4970987, 2.9430614; -9.30692, 1.6976776, 3.9232068; -9.863244, 1.4795533, 2.8898268\",\n  \"-0.0, 0.0, 0.0; 1.6260588, -1.7137989, 0.9424566; 4.341235, -8.452219, 1.4798164; 6.880084, -15.513934, 0.031012416; 8.239181, -16.851625, 1.8047818; 8.612299, -16.558016, 2.9814785; -1.3240309, -1.9357492, 0.90191436; -3.0608435, -8.7672205, 2.456623; -4.7905254, -15.587597, -0.80784965; -4.9466615, -16.734392, 1.5431836; -4.7817297, -16.257355, 2.7177696; -0.67917836, 2.4064415, -0.081061795; -1.7017881, 4.70741, -0.092737935; -2.9125855, 6.9489727, -0.13696739; -3.912974, 8.188132, -0.0994052; -4.1324377, 9.731253, -0.39586988; -4.53009, 11.30695, -0.5537585; 0.04277301, 9.8710165, 0.7114607; 2.8346562, 8.782612, 4.6641874; -0.0520916, 8.310121, 6.2931023; -1.4960881, 8.060804, 7.102564; -2.5652406, 7.6098027, 7.026276; -3.4663033, 7.3546114, 6.98192; -2.7931628, 8.085188, 7.4556665; -6.4900665, 5.7901173, -1.8587219; -7.324056, 1.04319, -2.9226716; -8.5744915, 1.1260985, 0.04216504; -9.19971, 1.167555, 1.524581; -9.311384, 1.2852163, 2.774716; -9.508977, 1.4420363, 3.7592504; -10.045524, 1.2718412, 2.7065873\",\n  \"-0.0, 0.0, 0.0; 1.6257076, -1.715303, 0.9403241; 4.3585434, -8.448424, 1.4540718; 6.904333, -15.500553, -0.028845191; 8.271933, -16.83434, 1.7413262; 8.6384945, -16.522749, 2.9154568; -1.3244452, -1.9364153, 0.89987373; -3.095869, -8.759275, 2.4533463; -4.8864584, -15.56756, -0.8035176; -5.033942, -16.713503, 1.5484896; -4.857714, -16.233538, 2.720239; -0.67629856, 2.4072251, -0.08186952; -1.7068629, 4.7046127, -0.098280534; -2.938112, 6.9348497, -0.14986792; -3.949326, 8.165339, -0.117540255; -4.176531, 9.707522, -0.41304702; -4.58116, 11.281615, -0.5691987; -0.015828371, 9.88386, 0.71956396; 2.8741257, 9.003592, 4.653592; 0.062633514, 8.461217, 6.388893; -1.3432949, 8.176765, 7.252007; -2.3913724, 7.6752462, 7.2038336; -3.2802026, 7.3780403, 7.1782765; -2.6372762, 8.156419, 7.6165323; -6.4929667, 5.743549, -1.8961664; -7.393885, 1.0331516, -3.0629373; -8.705268, 1.024017, -0.12339473; -9.36096, 1.0194507, 1.3463742; -9.497149, 1.0721235, 2.5985045; -9.71426, 1.1773958, 3.5857859; -10.229787, 1.0603921, 2.5155096\",\n  \"-0.0, 0.0, 0.0; 1.6257836, -1.715993, 0.93893224; 4.374957, -8.443624, 1.4372125; 6.92424, -15.48625, -0.08435404; 8.298274, -16.814592, 1.6849277; 8.656488, -16.484049, 2.8564487; -1.3243722, -1.9370836, 0.89854175; -3.1321726, -8.751297, 2.4480562; -4.9832935, -15.54689, -0.8014622; -5.1245084, -16.692553, 1.5510662; -4.937769, -16.209929, 2.7200918; -0.6740392, 2.4077837, -0.08404174; -1.7121694, 4.7017145, -0.106191814; -2.962408, 6.9211674, -0.16554604; -3.9848886, 8.142446, -0.13874215; -4.2193317, 9.683721, -0.43332973; -4.629845, 11.256433, -0.5880349; -0.07158399, 9.895343, 0.72312194; 2.9114268, 9.217665, 4.627694; 0.19131136, 8.617819, 6.4854035; -1.1685249, 8.304481, 7.410161; -2.1947365, 7.7575207, 7.4043703; -3.0702336, 7.422146, 7.410052; -2.4523637, 8.242992, 7.8046966; -6.495363, 5.699268, -1.934992; -7.4640636, 1.029212, -3.2050498; -8.839647, 0.9289421, -0.29671073; -9.527437, 0.8788081, 1.1574576; -9.690128, 0.8598751, 2.407388; -9.928634, 0.9077987, 3.3941817; -10.420752, 0.84761643, 2.3082967\",\n  \"-0.0, 0.0, 0.0; 1.6243764, -1.7179766, 0.93774; 4.3883333, -8.4399, 1.4312305; 6.9359407, -15.473933, -0.13231766; 8.310903, -16.80205, 1.6364124; 8.653009, -16.444447, 2.8047967; -1.3259689, -1.9365199, 0.8974006; -3.1718879, -8.742322, 2.438921; -5.0819206, -15.524498, -0.8045316; -5.217868, -16.67082, 1.5479856; -5.0210147, -16.185545, 2.7142515; -0.67337483, 2.4078727, -0.08677026; -1.7193947, 4.6981497, -0.1149746; -2.9858274, 6.908184, -0.18195023; -4.019328, 8.120278, -0.1617433; -4.2598267, 9.660671, -0.45606303; -4.6745176, 11.232361, -0.6100139; -0.12275267, 9.903906, 0.7240141; 2.9455307, 9.419413, 4.5910783; 0.3304968, 8.777449, 6.580904; -0.9764277, 8.442934, 7.572146; -1.9800711, 7.8574996, 7.6198506; -2.8411255, 7.489509, 7.666456; -2.2437499, 8.347326, 8.010822; -6.49881, 5.659892, -1.9726139; -7.53483, 1.0343933, -3.348211; -8.976833, 0.8471962, -0.47657323; -9.697835, 0.7535965, 0.95924366; -9.888298, 0.6592295, 2.20181; -10.149361, 0.646469, 3.183964; -10.616346, 0.64608884, 2.0853863\",\n  \"-0.0, 0.0, 0.0; 1.6238006, -1.7187487, 0.93732214; 4.3996263, -8.43538, 1.4362168; 6.939513, -15.461704, -0.17385912; 8.311357, -16.790382, 1.5968696; 8.633085, -16.402216, 2.7612817; -1.3266218, -1.9362581, 0.89700073; -3.2133164, -8.733455, 2.4270804; -5.1829934, -15.500889, -0.81148815; -5.3149843, -16.648912, 1.5404251; -5.109083, -16.164986, 2.705689; -0.67240965, 2.4079928, -0.09083484; -1.7255298, 4.6949077, -0.12662207; -3.0076208, 6.8955956, -0.20283148; -4.053296, 8.097293, -0.18902646; -4.2992167, 9.636889, -0.4830342; -4.716442, 11.207925, -0.6368163; -0.17265034, 9.912462, 0.7211683; 2.9706995, 9.606094, 4.5459266; 0.47553325, 8.938565, 6.676297; -0.771121, 8.591174, 7.738222; -1.7506895, 7.973055, 7.8415833; -2.5957685, 7.577059, 7.931208; -2.0186324, 8.467255, 8.224059; -6.499339, 5.6210847, -2.016468; -7.602072, 1.0447426, -3.500356; -9.116121, 0.77135557, -0.673054; -9.873145, 0.63466275, 0.74059534; -10.091566, 0.46544108, 1.9705582; -10.375552, 0.39201668, 2.9436483; -10.816408, 0.44998795, 1.8358421\",\n  \"-0.0, 0.0, 0.0; 1.6226933, -1.7200148, 0.93691754; 4.410137, -8.430923, 1.4479003; 6.9361696, -15.449934, -0.21500063; 8.304651, -16.77844, 1.5584552; 8.609099, -16.365402, 2.7189507; -1.3278735, -1.9355797, 0.8966132; -3.2547574, -8.724497, 2.4133096; -5.28434, -15.476746, -0.8199625; -5.4138703, -16.626982, 1.5310059; -5.199429, -16.14502, 2.6955433; -0.67195636, 2.4079123, -0.09615953; -1.7318902, 4.6915483, -0.13937634; -3.0279121, 6.883811, -0.22244906; -4.0849195, 8.075614, -0.21563153; -4.335485, 9.614409, -0.5099107; -4.7543607, 11.18502, -0.66353476; -0.21839881, 9.918821, 0.71971095; 2.9949396, 9.776306, 4.495612; 0.64244103, 9.098446, 6.7795086; -0.53257096, 8.745816, 7.918592; -1.4872587, 8.103533, 8.086975; -2.3151047, 7.6865497, 8.227687; -1.75392, 8.603744, 8.462471; -6.5002403, 5.5871844, -2.05751; -7.6676207, 1.0633702, -3.6491058; -9.254782, 0.7081425, -0.87143517; -10.048361, 0.53053033, 0.51739895; -10.295668, 0.28893787, 1.7296798; -10.603262, 0.1568391, 2.6893044; -11.016583, 0.27261004, 1.5754322\",\n  \"-0.0, 0.0, 0.0; 1.6216195, -1.7213774, 0.93627375; 4.4186754, -8.42696, 1.4643741; 6.924491, -15.439358, -0.25602055; 8.286829, -16.76871, 1.5215272; 8.57173, -16.329147, 2.6772327; -1.3290854, -1.9350331, 0.89599717; -3.2970722, -8.715362, 2.3982682; -5.3846674, -15.452216, -0.83017564; -5.5151973, -16.604107, 1.5199275; -5.2924995, -16.119501, 2.6818154; -0.670537, 2.4080727, -0.101889186; -1.7364535, 4.6887426, -0.15374349; -3.0462413, 6.8724647, -0.24542631; -4.114289, 8.054403, -0.24569668; -4.368659, 9.592588, -0.53990346; -4.78831, 11.163004, -0.6934178; -0.26369643, 9.9255, 0.71828145; 3.0193958, 9.940915, 4.436393; 0.83165216, 9.262348, 6.87837; -0.26066315, 8.909319, 8.096865; -1.1904713, 8.254165, 8.338814; -2.0002568, 7.8256683, 8.537917; -1.4493407, 8.763162, 8.7079; -6.496519, 5.5537896, -2.1061864; -7.7233973, 1.0858016, -3.8069806; -9.386912, 0.65233266, -1.0856678; -10.218669, 0.43559986, 0.27498722; -10.4938345, 0.12949514, 1.4665142; -10.824066, -0.054789335, 2.4098754; -11.21043, 0.114458695, 1.2931718\",\n  \"-0.0, 0.0, 0.0; 1.6178318, -1.7254683, 0.93529564; 4.4240823, -8.425514, 1.4844704; 6.904013, -15.431947, -0.29666638; 8.260486, -16.760632, 1.4858583; 8.526602, -16.294643, 2.6356738; -1.3333439, -1.9325347, 0.89506155; -3.3386788, -8.705353, 2.3817394; -5.487996, -15.42465, -0.8427906; -5.6173935, -16.580925, 1.5052211; -5.386329, -16.09955, 2.6668181; -0.6688755, 2.408285, -0.10763072; -1.7419772, 4.6853724, -0.16802543; -3.0664978, 6.859829, -0.26790458; -4.142578, 8.034431, -0.275846; -4.4006534, 9.572101, -0.5695226; -4.8232255, 11.141825, -0.7220876; -0.31344056, 9.931546, 0.72080386; 3.037207, 10.093221, 4.3746114; 1.0339248, 9.438207, 6.9761004; 0.03418541, 9.096917, 8.274775; -0.8673388, 8.433294, 8.589685; -1.6565325, 7.9966626, 8.845674; -1.1219635, 8.953472, 8.945911; -6.492497, 5.5186234, -2.157203; -7.772418, 1.1080518, -3.9653802; -9.515434, 0.60357004, -1.3067875; -10.38694, 0.35132864, 0.02250743; -10.690708, -0.011209071, 1.1910295; -11.043974, -0.24092762, 2.1158953; -11.402429, -0.022631586, 0.9983952\",\n  \"-0.0, 0.0, 0.0; 1.6135123, -1.7305753, 0.93332016; 4.427661, -8.425373, 1.5055997; 6.8745193, -15.426827, -0.33969784; 8.226341, -16.752533, 1.4485689; 8.477653, -16.264242, 2.5924454; -1.3381854, -1.9300612, 0.8931712; -3.3785186, -8.695815, 2.3643124; -5.593005, -15.396084, -0.8557117; -5.7234564, -16.557411, 1.4897475; -5.484201, -16.079508, 2.6511192; -0.6675879, 2.4083855, -0.11322453; -1.7474194, 4.6820326, -0.18262824; -3.084778, 6.848201, -0.29115042; -4.169013, 8.015221, -0.3054131; -4.4307194, 9.552367, -0.5986131; -4.8556943, 11.121451, -0.75109136; -0.35889244, 9.936348, 0.7213768; 3.058036, 10.236291, 4.304381; 1.2587348, 9.618317, 7.059476; 0.36134046, 9.295539, 8.435343; -0.4983486, 8.622858, 8.836271; -1.256702, 8.1770525, 9.160557; -0.7480667, 9.152836, 9.181353; -6.487442, 5.4870415, -2.2081466; -7.8146043, 1.136158, -4.1236877; -9.638171, 0.5709358, -1.5321927; -10.549954, 0.28832707, -0.23644674; -10.880543, -0.119574904, 0.9096247; -11.255128, -0.38539237, 1.8162508; -11.587463, -0.12446359, 0.6998199\",\n  \"-0.0, 0.0, 0.0; 1.6092734, -1.7346622, 0.93305165; 4.428323, -8.425361, 1.5286793; 6.83639, -15.421257, -0.38737094; 8.183874, -16.741106, 1.4084868; 8.421558, -16.23142, 2.5459247; -1.3429055, -1.9268992, 0.89291394; -3.4175816, -8.686077, 2.3461447; -5.6988544, -15.365736, -0.8700745; -5.8312216, -16.531206, 1.4732208; -5.5831304, -16.053839, 2.632958; -0.66566414, 2.4085715, -0.12036982; -1.7522616, 4.6786976, -0.19882886; -3.103636, 6.83576, -0.31484354; -4.194467, 7.9965334, -0.33477223; -4.4595146, 9.533118, -0.62791115; -4.8878, 11.101223, -0.78120154; -0.40670323, 9.941322, 0.7216661; 3.0693758, 10.372017, 4.23374; 1.488095, 9.801606, 7.1292725; 0.70003873, 9.502626, 8.575679; -0.099197626, 8.8221245, 9.076126; -0.8120854, 8.3677025, 9.481461; -0.34027785, 9.359833, 9.415343; -6.4824204, 5.4535933, -2.2588558; -7.8490186, 1.1622853, -4.278245; -9.754103, 0.54978704, -1.7570906; -10.706644, 0.24353647, -0.49651575; -11.066466, -0.20197609, 0.6265154; -11.46412, -0.49743676, 1.5139377; -11.767819, -0.19897279, 0.39875412\",\n  \"-0.0, 0.0, 0.0; 1.604776, -1.7379588, 0.93466145; 4.429608, -8.42362, 1.5587705; 6.7914667, -15.414884, -0.43031454; 8.133331, -16.728214, 1.3745075; 8.356128, -16.194584, 2.50395; -1.3478811, -1.9227064, 0.8944541; -3.4525998, -8.677534, 2.3245237; -5.8049808, -15.333475, -0.88964295; -5.9427695, -16.50446, 1.4505892; -5.6864815, -16.0291, 2.6093688; -0.6646349, 2.4084613, -0.12802052; -1.7576091, 4.675182, -0.21581727; -3.1208317, 6.82429, -0.3405161; -4.219139, 7.977848, -0.36749926; -4.487465, 9.513772, -0.661119; -4.918132, 11.0811, -0.81567055; -0.45064616, 9.944832, 0.719977; 3.080269, 10.497488, 4.159526; 1.7390237, 9.989711, 7.184943; 1.0712948, 9.722084, 8.696573; 0.32683963, 9.057085, 9.293123; -0.3433934, 8.614035, 9.776339; 0.10207033, 9.608451, 9.621437; -6.4759493, 5.4239235, -2.3122954; -7.87211, 1.1916852, -4.4335546; -9.8608055, 0.55196637, -1.9847648; -10.855153, 0.23210758, -0.7603724; -11.2476015, -0.24455059, 0.33868814; -11.670654, -0.5638727, 1.2058694; -11.942574, -0.22989145, 0.092556715\",\n  \"-0.0, 0.0, 0.0; 1.6006317, -1.740337, 0.93733895; 4.428199, -8.422053, 1.5906243; 6.737209, -15.407295, -0.47999525; 8.073141, -16.71271, 1.3349419; 8.285267, -16.161747, 2.4580986; -1.3524396, -1.9183064, 0.8970168; -3.4875507, -8.669257, 2.3000884; -5.9138002, -15.300055, -0.91113424; -6.0586696, -16.47667, 1.425844; -5.794118, -16.002954, 2.583439; -0.66449845, 2.4079819, -0.13740318; -1.7638214, 4.671209, -0.23546562; -3.137773, 6.8129587, -0.36871585; -4.242812, 7.9599032, -0.4020567; -4.5146303, 9.495132, -0.6961018; -4.948231, 11.061509, -0.85208744; -0.49238515, 9.94725, 0.7131566; 3.0936205, 10.611634, 4.0750666; 2.023584, 10.1879425, 7.2191772; 1.4917142, 9.962395, 8.790404; 0.7968735, 9.328553, 9.474327; 0.16639525, 8.910433, 10.0281105; 0.5930265, 9.896201, 9.788231; -6.470796, 5.395708, -2.3657413; -7.8878636, 1.2234702, -4.5895214; -9.958537, 0.5731847, -2.212515; -10.993873, 0.24804333, -1.0240128; -11.422254, -0.25357446, 0.050241232; -11.872876, -0.5910732, 0.8963959; -12.110006, -0.22263265, -0.21399581\",\n  \"-0.0, 0.0, 0.0; 1.5959122, -1.7430016, 0.94042957; 4.4239526, -8.421456, 1.6242993; 6.6719856, -15.399579, -0.5355036; 8.001937, -16.6963, 1.2900265; 8.207658, -16.133842, 2.408668; -1.3576117, -1.9132613, 0.89997447; -3.523511, -8.660342, 2.2741756; -6.025316, -15.266074, -0.9307258; -6.1784577, -16.44847, 1.4028049; -5.9046383, -15.972706, 2.5574007; -0.6652656, 2.4071677, -0.14757876; -1.7717652, 4.6664057, -0.25631985; -3.1563601, 6.8007517, -0.3979359; -4.2673764, 7.94169, -0.4380268; -4.543305, 9.476065, -0.7326997; -4.981003, 11.041196, -0.8897392; -0.5350623, 9.948931, 0.70210314; 3.1045065, 10.713645, 3.984181; 2.32031, 10.398888, 7.223917; 1.9315127, 10.227829, 8.843204; 1.2948409, 9.627171, 9.60882; 0.711196, 9.23573, 10.229414; 1.1130931, 10.209172, 9.909749; -6.4685583, 5.3661714, -2.4171128; -7.899417, 1.2564974, -4.746075; -10.049518, 0.608472, -2.4400287; -11.124566, 0.28445956, -1.2870066; -11.590078, -0.23458382, -0.2367475; -12.068848, -0.5837129, 0.5889839; -12.269968, -0.18444166, -0.5178503\",\n  \"-0.0, 0.0, 0.0; 1.591201, -1.7459291, 0.9429793; 4.4195232, -8.420682, 1.6609737; 6.599701, -15.390877, -0.59198034; 7.922734, -16.680128, 1.2438395; 8.124239, -16.10936, 2.359033; -1.3627566, -1.9084482, 0.90241444; -3.5601501, -8.651735, 2.244864; -6.138076, -15.232043, -0.9520037; -6.3003187, -16.420395, 1.3778834; -6.0181293, -15.945749, 2.530923; -0.6670436, 2.4059076, -0.15961103; -1.7803185, 4.661209, -0.28026712; -3.1731653, 6.789674, -0.42929304; -4.2894983, 7.9251614, -0.4759057; -4.5708876, 9.458305, -0.77181876; -5.0145025, 11.021607, -0.93046975; -0.57086635, 9.949019, 0.68376064; 3.1212022, 10.801271, 3.8846326; 2.6194382, 10.604952, 7.1891174; 2.371991, 10.493136, 8.84102; 1.8104025, 9.929381, 9.689022; 1.2868792, 9.56732, 10.377381; 1.6493602, 10.52517, 9.9743595; -6.4688587, 5.340887, -2.465263; -7.898483, 1.2894435, -4.8948374; -10.129655, 0.6654095, -2.6602964; -11.24524, 0.35339206, -1.543028; -11.750282, -0.17763776, -0.5173123; -12.25876, -0.5336667, 0.28744668; -12.42106, -0.10603297, -0.81515795\",\n  \"-0.0, 0.0, 0.0; 1.586858, -1.7483209, 0.9458614; 4.4142203, -8.419395, 1.700871; 6.519104, -15.380653, -0.6492281; 7.8334746, -16.66315, 1.1975121; 8.0297575, -16.082441, 2.308497; -1.3674794, -1.9037578, 0.9051725; -3.5989056, -8.642786, 2.2124133; -6.2510176, -15.197485, -0.9763715; -6.4242373, -16.391577, 1.349787; -6.1335273, -15.915055, 2.4999323; -0.6694257, 2.4043286, -0.17287922; -1.7886676, 4.655922, -0.30685532; -3.1875098, 6.779833, -0.46444046; -4.3093176, 7.909673, -0.51651716; -4.597726, 9.44132, -0.81341994; -5.0488296, 11.002302, -0.9737923; -0.601208, 9.948123, 0.6604152; 3.1422002, 10.879325, 3.778594; 2.9176917, 10.8007, 7.1182556; 2.809059, 10.747777, 8.787959; 2.344235, 10.225683, 9.717296; 1.8976336, 9.896257, 10.47296; 2.1994927, 10.834503, 9.983193; -6.4678144, 5.3193474, -2.516839; -7.8884816, 1.3242226, -5.043009; -10.19819, 0.73396593, -2.8802414; -11.353042, 0.43883792, -1.7988582; -11.90223, -0.09545913, -0.7978232; -12.443868, -0.4514461, -0.014978588; -12.5614605, -0.003722757, -1.1152806\",\n  \"-0.0, 0.0, 0.0; 1.5823399, -1.7510914, 0.9483028; 4.4078817, -8.418135, 1.7446024; 6.4315906, -15.369475, -0.70408463; 7.736004, -16.646687, 1.1533482; 7.9284105, -16.057985, 2.2608; -1.3723775, -1.8991151, 0.9075091; -3.6397324, -8.632864, 2.179663; -6.365527, -15.162165, -0.9990783; -6.5526633, -16.362242, 1.3229184; -6.254276, -15.884128, 2.4704337; -0.673722, 2.4021835, -0.18554504; -1.7995149, 4.6496587, -0.33309132; -3.2025776, 6.7700377, -0.50041914; -4.3285565, 7.8954406, -0.5582495; -4.6239657, 9.425529, -0.85630685; -5.0832267, 10.983929, -1.018627; -0.6296835, 9.945808, 0.6340475; 3.1703537, 10.949566, 3.659849; 3.2223501, 10.985959, 7.00737; 3.2521732, 10.9906025, 8.681169; 2.91248, 10.516274, 9.687117; 2.5653577, 10.223976, 10.507526; 2.7816963, 11.136898, 9.932141; -6.4687314, 5.299322, -2.568023; -7.8806467, 1.3578, -5.1817846; -10.267447, 0.8091936, -3.0930212; -11.460847, 0.5348898, -2.0486412; -12.057385, 0.008456826, -1.0708055; -12.63441, -0.33857924, -0.30952245; -12.702785, 0.11869064, -1.4100578\",\n  \"-0.0, 0.0, 0.0; 1.577754, -1.7538943, 0.9507607; 4.39925, -8.417262, 1.7909628; 6.335184, -15.357441, -0.75828755; 7.6261168, -16.631254, 1.110859; 7.816154, -16.038338, 2.2164693; -1.377328, -1.8944002, 0.909861; -3.6861844, -8.620383, 2.1479986; -6.4816904, -15.125673, -1.0194087; -6.6840587, -16.332563, 1.2977741; -6.378584, -15.852564, 2.4426346; -0.67733765, 2.400246, -0.19709761; -1.8097464, 4.643461, -0.35820803; -3.2181227, 6.75937, -0.5370865; -4.347912, 7.880764, -0.5983762; -4.6504593, 9.40915, -0.8980005; -5.118461, 10.964541, -1.0641636; -0.6606524, 9.944878, 0.60493016; 3.1988187, 11.009719, 3.5330493; 3.52832, 11.166756, 6.8612165; 3.6970687, 11.231777, 8.525491; 3.5081668, 10.813061, 9.593808; 3.2815034, 10.564122, 10.468826; 3.3899164, 11.444321, 9.817064; -6.4688787, 5.2750793, -2.6192045; -7.865629, 1.3813872, -5.311619; -10.331094, 0.8893956, -3.301607; -11.563824, 0.64340127, -2.2966006; -12.208667, 0.13265073, -1.3413709; -12.821622, -0.19938919, -0.6017904; -12.838276, 0.2587203, -1.7039734\",\n  \"-0.0, 0.0, 0.0; 1.572726, -1.7566751, 0.9539522; 4.388973, -8.416338, 1.8398956; 6.227975, -15.344721, -0.8111743; 7.5042725, -16.617691, 1.0685673; 7.6942225, -16.023058, 2.1732702; -1.3827324, -1.8889858, 0.9129156; -3.736574, -8.604654, 2.1219954; -6.598272, -15.088166, -1.0309203; -6.818337, -16.302057, 1.280987; -6.506345, -15.8186455, 2.4226496; -0.680142, 2.398764, -0.20531116; -1.820133, 4.6373725, -0.37670273; -3.2367363, 6.7468452, -0.56631404; -4.3708797, 7.8635745, -0.6321888; -4.679277, 9.39042, -0.93369865; -5.154215, 10.943328, -1.1033732; -0.6990955, 9.94527, 0.5838067; 3.2259655, 11.0574255, 3.4052055; 3.8323908, 11.342227, 6.6856117; 4.1397343, 11.471182, 8.326167; 4.113626, 11.111448, 9.431707; 4.017805, 10.90873, 10.342052; 4.005583, 11.751457, 9.634269; -6.47015, 5.245103, -2.6628718; -7.8467884, 1.4003761, -5.4348373; -10.382277, 0.9774907, -3.4975226; -11.650021, 0.76605093, -2.5288672; -12.342012, 0.27593932, -1.5960811; -12.9902115, -0.03811255, -0.8790363; -12.954101, 0.40972063, -1.9849705\",\n  \"-0.0, 0.0, 0.0; 1.5664821, -1.7600545, 0.9579881; 4.3760614, -8.415727, 1.8936889; 6.1143637, -15.331135, -0.85731745; 7.372361, -16.60538, 1.033863; 7.5620127, -16.01016, 2.1383023; -1.3894126, -1.8822014, 0.9167776; -3.7901564, -8.585868, 2.0999632; -6.7160215, -15.047686, -1.038564; -6.9576097, -16.270956, 1.2662394; -6.640319, -15.785096, 2.4053998; -0.6844596, 2.3970292, -0.21114075; -1.832546, 4.630863, -0.3906028; -3.2554862, 6.735073, -0.59093535; -4.392274, 7.8486743, -0.66381127; -4.706279, 9.374007, -0.9671841; -5.1887703, 10.924347, -1.1390159; -0.73478365, 9.944237, 0.5664928; 3.2616208, 11.105188, 3.2654238; 4.136046, 11.513285, 6.471475; 4.5775495, 11.703957, 8.074981; 4.7136674, 11.398898, 9.188857; 4.7487483, 11.238813, 10.111975; 4.6106205, 12.044639, 9.375182; -6.473066, 5.218564, -2.7011805; -7.795953, 1.406735, -5.543851; -10.411181, 1.0699155, -3.697814; -11.718795, 0.90150744, -2.7747967; -12.4519, 0.43479332, -1.8616223; -13.1306, 0.14053124, -1.1646872; -13.047275, 0.5729101, -2.2742162\",\n  \"-0.0, 0.0, 0.0; 1.5596051, -1.7637659, 0.9623722; 4.3657045, -8.413185, 1.9514532; 5.9928493, -15.313986, -0.902308; 7.2324834, -16.592705, 0.99795604; 7.42321, -15.996934, 2.101912; -1.3967273, -1.8747249, 0.92097306; -3.843257, -8.564314, 2.0899596; -6.8318167, -15.003271, -1.036452; -7.095652, -16.237747, 1.2599218; -6.773036, -15.749588, 2.3966005; -0.6875078, 2.395906, -0.21396738; -1.8430243, 4.625511, -0.39826193; -3.2724533, 6.7244263, -0.6077373; -4.411804, 7.8350153, -0.6863271; -4.730827, 9.358823, -0.9921224; -5.220075, 10.906684, -1.1671658; -0.76839924, 9.943923, 0.5571103; 3.3069086, 11.160601, 3.1095295; 4.4427166, 11.678277, 6.216277; 5.015113, 11.923826, 7.7701693; 5.3128896, 11.669495, 8.865136; 5.4793115, 11.548882, 9.779882; 5.2125216, 12.318828, 9.040083; -6.4749985, 5.193919, -2.7307086; -7.7279825, 1.405911, -5.636199; -10.420164, 1.1694815, -3.8877773; -11.7662525, 1.0512664, -3.0135667; -12.541057, 0.61309195, -2.1209114; -13.250343, 0.34270903, -1.4450786; -13.11814, 0.75479984, -2.5575771\",\n  \"-0.0, 0.0, 0.0; 1.5530566, -1.766778, 0.9674239; 4.3573985, -8.409595, 2.004684; 5.8666964, -15.295242, -0.9487016; 7.087903, -16.580988, 0.95873964; 7.2826076, -15.987661, 2.0633175; -1.4036521, -1.8671563, 0.925808; -3.8963542, -8.540922, 2.0876713; -6.9462814, -14.957074, -1.0263374; -7.233628, -16.203848, 1.2605522; -6.9064445, -15.714938, 2.3956017; -0.69126505, 2.3947456, -0.21484946; -1.853816, 4.620466, -0.4018437; -3.2880826, 6.715232, -0.6196233; -4.4294543, 7.823447, -0.70229304; -4.75361, 9.3455925, -1.0109556; -5.249708, 10.890816, -1.189978; -0.7964058, 9.943321, 0.54798365; 3.3612456, 11.238555, 2.9227643; 4.752346, 11.833329, 5.9095707; 5.4527297, 12.117559, 7.403287; 5.8945103, 11.909292, 8.458637; 6.178001, 11.823807, 9.348204; 5.7887983, 12.559293, 8.627872; -6.4795384, 5.172648, -2.7505374; -7.6638293, 1.4060009, -5.7120695; -10.420875, 1.2831062, -4.0554714; -11.799396, 1.2216598, -3.2271724; -12.615538, 0.8185145, -2.3550837; -13.35453, 0.57750285, -1.7002964; -13.173275, 0.96553993, -2.8145328\",\n  \"-0.0, 0.0, 0.0; 1.5449344, -1.7714795, 0.97182107; 4.353084, -8.4048195, 2.058258; 5.7430778, -15.275332, -0.98748803; 6.946749, -16.570208, 0.9249172; 7.1459837, -15.978369, 2.0294852; -1.4121901, -1.8586076, 0.93001544; -3.9500265, -8.5155, 2.0909672; -7.0610375, -14.906004, -1.0153453; -7.3747716, -16.167837, 1.2597864; -7.0439925, -15.680197, 2.3943396; -0.69416356, 2.393812, -0.2159059; -1.8634714, 4.615758, -0.40564424; -3.3022351, 6.7066364, -0.6309812; -4.4444165, 7.8136907, -0.71791214; -4.773905, 9.333895, -1.0304712; -5.277907, 10.875972, -1.2144796; -0.8210268, 9.943027, 0.53593767; 3.4171872, 11.335087, 2.7045765; 5.0579853, 11.981606, 5.5505776; 5.883587, 12.291855, 6.973476; 6.4689155, 12.125944, 7.964523; 6.870731, 12.072861, 8.80994; 6.3611746, 12.775698, 8.133429; -6.4850006, 5.1521306, -2.7662253; -7.601388, 1.4049315, -5.778372; -10.410001, 1.4080677, -4.2059836; -11.814306, 1.4096369, -3.4197912; -12.669138, 1.045606, -2.5677955; -13.435204, 0.8376595, -1.9330947; -13.207526, 1.2012832, -3.0470471\",\n  \"-0.0, 0.0, 0.0; 1.5379095, -1.7747226, 0.9770329; 4.341387, -8.40307, 2.1052005; 5.6117616, -15.257903, -1.0268943; 6.795949, -16.562433, 0.89110386; 7.000866, -15.974728, 1.9968388; -1.419526, -1.850499, 0.93500316; -4.0020885, -8.4905405, 2.0938191; -7.166639, -14.855701, -1.0104461; -7.511724, -16.133293, 1.2513125; -7.180351, -15.648669, 2.3869843; -0.6958014, 2.3931832, -0.21759634; -1.8701757, 4.6122293, -0.40995663; -3.3126001, 6.699835, -0.64213586; -4.455593, 7.8057947, -0.7322704; -4.7904654, 9.323874, -1.0493981; -5.302346, 10.862569, -1.2398559; -0.8398588, 9.943406, 0.5228151; 3.4688609, 11.44808, 2.4655373; 5.3466496, 12.12072, 5.154662; 6.291142, 12.444207, 6.4984636; 7.0070567, 12.318384, 7.406177; 7.517715, 12.295804, 8.19213; 6.896942, 12.96669, 7.5790644; -6.4884005, 5.134825, -2.780076; -7.5351434, 1.4015412, -5.834215; -10.386745, 1.5462226, -4.34823; -11.812545, 1.6185644, -3.6052382; -12.704932, 1.2994417, -2.773999; -13.496879, 1.1288425, -2.1602716; -13.222719, 1.4609293, -3.2736015\",\n  \"-0.0, 0.0, 0.0; 1.5298009, -1.7789739, 0.9820187; 4.3241315, -8.403775, 2.1529062; 5.482571, -15.24301, -1.0557523; 6.6477118, -16.556831, 0.8675617; 6.857259, -15.971643, 1.9737643; -1.4279389, -1.8415879, 0.9397745; -4.051915, -8.466047, 2.0947332; -7.2664824, -14.803835, -1.0141454; -7.65036, -16.098783, 1.2314324; -7.322339, -15.621173, 2.3710418; -0.6941984, 2.3935578, -0.2185932; -1.8709729, 4.611064, -0.41401523; -3.3156686, 6.6961193, -0.65482605; -4.461567, 7.798714, -0.7491977; -4.8019013, 9.314434, -1.0717528; -5.3199787, 10.850146, -1.2693926; -0.84888005, 9.946362, 0.504138; 3.5129287, 11.574378, 2.2151237; 5.6204543, 12.244073, 4.7290387; 6.6800923, 12.566257, 5.984378; 7.5029187, 12.483186, 6.8019137; 8.104654, 12.494978, 7.5207872; 7.39695, 13.133342, 6.970385; -6.486101, 5.1205783, -2.7929978; -7.4642434, 1.3927734, -5.8764305; -10.350593, 1.692309, -4.483596; -11.793766, 1.8420751, -3.7871795; -12.724967, 1.5752761, -2.980436; -13.543258, 1.4475331, -2.391347; -13.219195, 1.7392848, -3.5025685\",\n  \"-0.0, 0.0, 0.0; 1.5213093, -1.7838136, 0.9864208; 4.297994, -8.409049, 2.1961842; 5.3565187, -15.233406, -1.0780001; 6.504016, -16.555355, 0.85034597; 6.7189255, -15.974894, 1.9580086; -1.4366878, -1.8326067, 0.94398755; -4.1007223, -8.442511, 2.0906034; -7.3596306, -14.755737, -1.0220816; -7.7916117, -16.070358, 1.2032354; -7.4725595, -15.604861, 2.3503785; -0.69061947, 2.3944242, -0.22043632; -1.8674076, 4.6115866, -0.4196419; -3.3120732, 6.6957045, -0.66860986; -4.4619856, 7.793897, -0.7654529; -4.8077655, 9.306949, -1.0946724; -5.3307676, 10.839742, -1.3017741; -0.8452952, 9.950401, 0.47780704; 3.5604103, 11.68444, 1.9563727; 5.8839865, 12.328878, 4.27922; 7.051692, 12.638573, 5.4381275; 7.9604483, 12.612848, 6.1632547; 8.636731, 12.673118, 6.8097944; 7.859995, 13.269638, 6.307658; -6.482439, 5.111894, -2.8007631; -7.3939857, 1.3782208, -5.8974733; -10.303793, 1.8398811, -4.601089; -11.758694, 2.0707128, -3.9528966; -12.73235, 1.8679314, -3.178284; -13.579057, 1.7914989, -2.6213374; -13.197719, 2.0274444, -3.7276196\",\n  \"-0.0, 0.0, 0.0; 1.513536, -1.7877604, 0.99122137; 4.2623987, -8.417379, 2.2398803; 5.2297072, -15.226442, -1.093822; 6.3586807, -16.55446, 0.8412758; 6.5772343, -15.977457, 1.9500321; -1.4446384, -1.8239645, 0.94858116; -4.1477904, -8.420098, 2.0828755; -7.444563, -14.709279, -1.0386004; -7.929202, -16.043943, 1.1638236; -7.621602, -15.590251, 2.3187978; -0.6843754, 2.396037, -0.22237442; -1.8588082, 4.61395, -0.42705905; -3.3029819, 6.696963, -0.68784714; -4.4581165, 7.789482, -0.78668684; -4.808708, 9.299618, -1.1241059; -5.3348656, 10.829639, -1.3433559; -0.837044, 9.95703, 0.4450363; 3.6303346, 11.728764, 1.6725447; 6.132737, 12.37235, 3.8017948; 7.3896885, 12.681656, 4.8633575; 8.365831, 12.717885, 5.494342; 9.100591, 12.830266, 6.065746; 8.261892, 13.379515, 5.6116457; -6.4712896, 5.1029577, -2.8154573; -7.317212, 1.3503001, -5.907839; -10.240728, 1.9781945, -4.716403; -11.702485, 2.2921412, -4.120686; -12.718746, 2.1627436, -3.3860965; -13.593182, 2.1441672, -2.8684468; -13.151174, 2.3113444, -3.9646358\",\n  \"-0.0, 0.0, 0.0; 1.5062093, -1.7911834, 0.99619025; 4.222811, -8.426506, 2.2845275; 5.107923, -15.221163, -1.101002; 6.215231, -16.556278, 0.841717; 6.4369106, -15.985631, 1.9531387; -1.452084, -1.8155527, 0.9533374; -4.193164, -8.399218, 2.0689025; -7.519244, -14.666307, -1.0658829; -8.062208, -16.022434, 1.1096592; -7.76893, -15.579708, 2.272587; -0.6746236, 2.3982513, -0.22822677; -1.8433322, 4.6183777, -0.44148934; -3.2855492, 6.7012196, -0.7141975; -4.4475822, 7.78614, -0.81584555; -4.8014708, 9.293296, -1.1630043; -5.327258, 10.821391, -1.396137; -0.8174095, 9.965149, 0.4026581; 3.7412276, 11.676177, 1.348435; 6.3732653, 12.364848, 3.2998543; 7.6946898, 12.696506, 4.272661; 8.721369, 12.777223, 4.8127766; 9.50114, 12.927927, 5.3110223; 8.61691, 13.442664, 4.905461; -6.4540596, 5.098632, -2.8350487; -7.241638, 1.3120794, -5.901413; -10.171449, 2.1082067, -4.832249; -11.636353, 2.5062692, -4.297669; -12.69248, 2.4587464, -3.611019; -13.591528, 2.5041032, -3.1392145; -13.088816, 2.5926573, -4.2182827\",\n  \"-0.0, 0.0, 0.0; 1.4973599, -1.7956593, 1.0014589; 4.174886, -8.4389305, 2.330011; 4.989341, -15.218533, -1.1031022; 6.0701804, -16.56055, 0.8497398; 6.2940135, -16.000908, 1.966314; -1.4610128, -1.8057086, 0.9583786; -4.2394886, -8.378819, 2.0432389; -7.584833, -14.624422, -1.1138532; -8.196576, -16.003513, 1.0287511; -7.9245014, -15.575443, 2.202272; -0.662716, 2.4005659, -0.23854725; -1.8243899, 4.623002, -0.46573782; -3.2642758, 6.70529, -0.7545208; -4.4327984, 7.7827225, -0.86128557; -4.7882476, 9.2871895, -1.2183695; -5.311651, 10.813937, -1.4652847; -0.7958324, 9.974078, 0.34735155; 3.8593385, 11.557134, 1.000498; 6.5926256, 12.308729, 2.7821188; 7.9642687, 12.6715765, 3.6706288; 9.025458, 12.759506, 4.13802; 9.838075, 12.918576, 4.5777416; 8.932935, 13.428736, 4.214759; -6.4295325, 5.0921392, -2.8722196; -7.1682897, 1.2564344, -5.889247; -10.097396, 2.2182229, -4.964033; -11.561947, 2.6991181, -4.5014267; -12.6525955, 2.743197, -3.870796; -13.570942, 2.8595676, -3.451223; -13.0102825, 2.8595085, -4.505078\",\n  \"-0.0, 0.0, 0.0; 1.4874008, -1.8006939, 1.0072434; 4.1216326, -8.453184, 2.3756156; 4.8718653, -15.218063, -1.1009004; 5.9219127, -16.567219, 0.86378694; 6.1469603, -16.021679, 1.9870765; -1.4709802, -1.7946359, 0.9639141; -4.2872043, -8.357959, 2.0100117; -7.6421914, -14.584951, -1.1735008; -8.334789, -15.987044, 0.92919254; -8.091526, -15.575887, 2.1150222; -0.6481501, 2.4030468, -0.2531434; -1.8020399, 4.6276875, -0.49775684; -3.2412977, 6.708027, -0.80323434; -4.415647, 7.7785454, -0.91547537; -4.7704577, 9.280552, -1.2833887; -5.289166, 10.806423, -1.5451798; -0.77476525, 9.98409, 0.28117585; 3.964493, 11.402044, 0.64466584; 6.789562, 12.20922, 2.2500873; 8.206671, 12.599626, 3.051273; 9.288903, 12.690862, 3.466914; 10.122302, 12.855188, 3.8637092; 9.206841, 13.36336, 3.524608; -6.402684, 5.08074, -2.9158926; -7.104036, 1.1796005, -5.8569913; -10.023494, 2.3035302, -5.099188; -11.483221, 2.8654933, -4.720285; -12.5995655, 3.0070927, -4.152062; -13.52958, 3.1982539, -3.7894685; -12.918309, 3.1018155, -4.8102508\",\n  \"-0.0, 0.0, 0.0; 1.4760407, -1.806505, 1.0135299; 4.0618615, -8.469564, 2.4222226; 4.7576017, -15.220156, -1.0931814; 5.772751, -16.576017, 0.88518465; 5.997181, -16.046705, 2.0163336; -1.4822416, -1.7820851, 0.96993035; -4.333507, -8.337851, 1.9673623; -7.6898146, -14.546973, -1.2494856; -8.470159, -15.970081, 0.80786765; -8.259882, -15.573795, 2.0050144; -0.6315762, 2.4056628, -0.2696536; -1.7758218, 4.632992, -0.5342844; -3.212795, 6.7119837, -0.8590803; -4.393127, 7.7748313, -0.9810462; -4.7470756, 9.274216, -1.3603084; -5.2603, 10.799579, -1.6355278; -0.7461815, 9.99449, 0.20548034; 4.056104, 11.233456, 0.28485793; 6.9690027, 12.075341, 1.7047794; 8.429594, 12.482942, 2.4140375; 9.527346, 12.574028, 2.7868009; 10.376854, 12.741387, 3.1464255; 9.457363, 13.249613, 2.8184938; -6.3706937, 5.070768, -2.966172; -7.03737, 1.0902567, -5.807285; -9.932297, 2.3755999, -5.2345614; -11.379757, 3.0182729, -4.9481997; -12.512699, 3.2558074, -4.44903; -13.44697, 3.5194955, -4.148114; -12.792995, 3.3248558, -5.127594\",\n  \"-0.0, 0.0, 0.0; 1.4635079, -1.8131517, 1.0198162; 3.9987528, -8.486531, 2.470951; 4.647235, -15.225134, -1.0763445; 5.6247478, -16.586063, 0.9174354; 5.846594, -16.072433, 2.0562973; -1.494533, -1.7684829, 0.9759464; -4.375815, -8.319953, 1.9135443; -7.7257643, -14.511551, -1.3434585; -8.598747, -15.954828, 0.66196597; -8.427139, -15.575511, 1.8707207; -0.6092958, 2.4092274, -0.28843832; -1.740299, 4.640474, -0.5760046; -3.175337, 6.7173386, -0.92225546; -4.3621817, 7.7715464, -1.0554847; -4.7051587, 9.271461, -1.4426538; -5.211545, 10.796988, -1.7293899; -0.70872235, 10.007775, 0.117531836; 4.1312647, 11.074431, -0.082601175; 7.129204, 11.914691, 1.1487598; 8.631903, 12.321362, 1.7644103; 9.741084, 12.409466, 2.1024396; 10.6030855, 12.577687, 2.430554; 9.683538, 13.086962, 2.104411; -6.3301926, 5.0591774, -3.020621; -6.9630957, 0.9876709, -5.737811; -9.807132, 2.4479632, -5.364011; -11.229148, 3.1781092, -5.17711; -12.369556, 3.5052373, -4.7509537; -13.301134, 3.8354073, -4.514109; -12.613728, 3.5444958, -5.445663\",\n  \"-0.0, 0.0, 0.0; 1.4492489, -1.8214767, 1.0253284; 3.929029, -8.506599, 2.5176673; 4.5391273, -15.234344, -1.0569425; 5.4752855, -16.600117, 0.9533036; 5.691518, -16.10065, 2.0995216; -1.5083513, -1.7537711, 0.9812214; -4.413595, -8.304465, 1.8475946; -7.7476473, -14.478002, -1.4596199; -8.7165165, -15.940036, 0.48733234; -8.587218, -15.576131, 1.706051; -0.5827799, 2.413107, -0.30999458; -1.6980922, 4.6487527, -0.62350476; -3.131411, 6.7229567, -0.99210656; -4.323544, 7.7696614, -1.1367896; -4.664107, 9.267168, -1.5352437; -5.163928, 10.792547, -1.8340323; -0.66381073, 10.022075, 0.017389774; 4.184735, 10.948317, -0.46940273; 7.265204, 11.733697, 0.58122236; 8.8087635, 12.112807, 1.1067817; 9.92761, 12.1597805, 1.420284; 10.803053, 12.297914, 1.726099; 9.901201, 12.838951, 1.4016935; -6.285043, 5.045865, -3.0772252; -6.8880563, 0.87767506, -5.6508245; -9.654058, 2.5156534, -5.486581; -11.037059, 3.334641, -5.404459; -12.172491, 3.7576993, -5.0566545; -13.0910635, 4.158411, -4.887542; -12.382407, 3.764204, -5.7635303\",\n  \"-0.0, 0.0, 0.0; 1.4338458, -1.8299353, 1.0319017; 3.8573642, -8.526496, 2.5648336; 4.4357595, -15.2459545, -1.0305724; 5.325796, -16.617228, 0.99680686; 5.5351524, -16.135336, 2.1517916; -1.5230788, -1.7374357, 0.9875113; -4.4449525, -8.291369, 1.7693353; -7.753803, -14.444999, -1.5997119; -8.818738, -15.925208, 0.28224635; -8.737592, -15.581019, 1.51081; -0.5525566, 2.4171484, -0.3330011; -1.6497743, 4.6575336, -0.67521596; -3.0813475, 6.7281075, -1.0700771; -4.2761583, 7.769895, -1.2275906; -4.6121855, 9.265034, -1.6385902; -5.1045055, 10.790055, -1.9513323; -0.61241794, 10.037488, -0.0981195; 4.2274065, 10.788501, -0.8825708; 7.3765974, 11.505742, -4.7701597E-4; 8.9541, 11.850689, 0.44112343; 10.079077, 11.833567, 0.7351361; 10.96672, 11.922537, 1.0235435; 10.094807, 12.512546, 0.7026793; -6.234229, 5.0281434, -3.1377358; -6.818486, 0.7692995, -5.5629654; -9.491169, 2.5624185, -5.609951; -10.827509, 3.4589777, -5.6334443; -11.947045, 3.9753053, -5.370392; -12.843988, 4.4433117, -5.2734003; -12.124743, 3.9450848, -6.0854387\",\n  \"-0.0, 0.0, 0.0; 1.4178983, -1.8385864, 1.0385386; 3.785284, -8.546463, 2.6092474; 4.336456, -15.260614, -1.0003195; 5.1775403, -16.637115, 1.0443416; 5.3788238, -16.174124, 2.2084556; -1.5381099, -1.7204902, 0.99386287; -4.4688, -8.281321, 1.6788443; -7.742435, -14.411955, -1.7656807; -8.900645, -15.909177, 0.046431422; -8.880441, -15.601065, 1.2870272; -0.5210943, 2.4202685, -0.35996488; -1.5983694, 4.6651154, -0.7347505; -3.0259717, 6.7330027, -1.1571093; -4.21929, 7.7739906, -1.3304319; -4.546129, 9.267236, -1.7554853; -5.027401, 10.792619, -2.0832987; -0.5486429, 10.050433, -0.23525578; 4.265588, 10.597573, -1.2969055; 7.4756517, 11.232769, -0.5884267; 9.083146, 11.536624, -0.2332559; 10.211084, 11.461974, 0.039675146; 11.108101, 11.506803, 0.30866352; 10.265077, 12.137845, -0.011321515; -6.1851854, 5.0107903, -3.1964982; -6.760071, 0.66676474, -5.4680157; -9.324856, 2.5955539, -5.7177625; -10.607245, 3.559949, -5.8426366; -11.704001, 4.158125, -5.6739197; -12.5737915, 4.6835566, -5.655716; -11.848288, 4.088647, -6.393737\",\n  \"-0.0, 0.0, 0.0; 1.4011712, -1.8470167, 1.0462537; 3.713072, -8.566134, 2.6511893; 4.2393384, -15.278049, -0.96624565; 5.028445, -16.659893, 1.0954616; 5.2191706, -16.212542, 2.2674427; -1.5536408, -1.702157, 1.001246; -4.4841595, -8.273527, 1.5772626; -7.710716, -14.378765, -1.955658; -8.959335, -15.89227, -0.21866977; -9.003724, -15.62142, 1.0299652; -0.48995164, 2.4221368, -0.38989162; -1.5457115, 4.6709175, -0.80059516; -2.9652188, 6.738002, -1.2530901; -4.1509285, 7.7844596, -1.4447218; -4.465171, 9.276298, -1.8839781; -4.9344325, 10.802212, -2.2264051; -0.46915722, 10.058966, -0.39682412; 4.296014, 10.419236, -1.7259712; 7.558114, 10.932326, -1.1733708; 9.191103, 11.175024, -0.8959583; 10.319032, 11.047812, -0.6431693; 11.222861, 11.052438, -0.39402127; 10.40863, 11.717464, -0.71969664; -6.139815, 4.996166, -3.2515154; -6.7164645, 0.570621, -5.3593283; -9.154631, 2.6262279, -5.795845; -10.373713, 3.6540303, -6.0141025; -11.432253, 4.335681, -5.950872; -12.261397, 4.9194784, -6.0190225; -11.539528, 4.229061, -6.6726103\",\n  \"-0.0, 0.0, 0.0; 1.3840805, -1.8548949, 1.0550282; 3.641183, -8.584563, 2.6934114; 4.1508517, -15.298264, -0.9230888; 4.8843803, -16.686106, 1.1550467; 5.0622034, -16.25442, 2.3349047; -1.5692631, -1.6827549, 1.0096437; -4.491131, -8.26764, 1.4619973; -7.6531568, -14.344276, -2.1769872; -8.985793, -15.874544, -0.5189055; -9.095221, -15.639871, 0.73304236; -0.46028572, 2.422398, -0.42301065; -1.4927785, 4.6743813, -0.873405; -2.8981988, 6.743511, -1.3592904; -4.0683837, 7.8037796, -1.569536; -4.367994, 9.294255, -2.0233986; -4.8268375, 10.819876, -2.380919; -0.3705783, 10.060465, -0.5838769; 4.330345, 10.236474, -2.156653; 7.631933, 10.605744, -1.7406194; 9.284074, 10.7764435, -1.53132; 10.408541, 10.59576, -1.2962942; 11.3167305, 10.559344, -1.0663596; 10.534207, 11.255002, -1.4054968; -6.098221, 4.9879913, -3.30448; -6.7007403, 0.48098707, -5.2240443; -8.99018, 2.6550694, -5.8505855; -10.134897, 3.7421103, -6.163854; -11.136103, 4.506267, -6.2168036; -11.908456, 5.1468124, -6.3784056; -11.203595, 4.361723, -6.9367557\",\n  \"-0.0, 0.0, 0.0; 1.3689433, -1.8614209, 1.0632522; 3.5612202, -8.604141, 2.735643; 4.0669622, -15.320775, -0.875957; 4.739181, -16.713802, 1.2193751; 4.900552, -16.299353, 2.4077477; -1.582889, -1.6651607, 1.0175138; -4.4870224, -8.265947, 1.3309901; -7.564958, -14.310226, -2.4318697; -8.97648, -15.856167, -0.85562444; -9.151508, -15.65614, 0.39488482; -0.43054166, 2.4203458, -0.46408492; -1.4363227, 4.6750426, -0.9591303; -2.822105, 6.7501636, -1.474952; -3.9737477, 7.827372, -1.7008836; -4.2561235, 9.316438, -2.1701622; -4.701954, 10.841895, -2.5444527; -0.24890804, 10.052319, -0.7917648; 4.3771634, 10.023969, -2.5811622; 7.7049437, 10.240273, -2.2828016; 9.369549, 10.334455, -2.1320317; 10.486416, 10.095644, -1.9132016; 11.396325, 10.014052, -1.702459; 10.649871, 10.73878, -2.0614462; -6.060485, 4.992792, -3.3538585; -6.729393, 0.4082408, -5.0554156; -8.842312, 2.690388, -5.884932; -9.89877, 3.831461, -6.2996883; -10.817677, 4.6766067, -6.4743104; -11.513134, 5.3714294, -6.732194; -10.8467865, 4.4919405, -7.187637\",\n  \"-0.0, 0.0, 0.0; 1.3555636, -1.8670572, 1.0704877; 3.4713225, -8.625298, 2.7784119; 3.986639, -15.345861, -0.82451224; 4.593394, -16.742664, 1.2882128; 4.733841, -16.341528, 2.483789; -1.5947714, -1.6495037, 1.0244378; -4.469801, -8.268477, 1.1857862; -7.4477315, -14.274296, -2.7165453; -8.92597, -15.837939, -1.2209829; -9.161103, -15.670558, 0.02445507; -0.40502822, 2.4164956, -0.50528723; -1.3816221, 4.672756, -1.0492318; -2.73737, 6.7578998, -1.6030502; -3.8687866, 7.853128, -1.8440416; -4.1416845, 9.337295, -2.3339925; -4.5718164, 10.862323, -2.7278886; -0.10210776, 10.031433, -1.0271286; 4.4412575, 9.763887, -2.999319; 7.783043, 9.825834, -2.802951; 9.454022, 9.8428755, -2.7026987; 10.559037, 9.540479, -2.5031822; 11.467939, 9.408463, -2.314841; 10.760194, 10.161481, -2.6934655; -6.0237303, 5.0103006, -3.406238; -6.788026, 0.3636856, -4.8846383; -8.695808, 2.7421515, -5.916135; -9.649698, 3.9313836, -6.431883; -10.460783, 4.8487253, -6.731514; -11.059543, 5.5891776, -7.086706; -10.455422, 4.619369, -7.4323344\",\n  \"-0.0, 0.0, 0.0; 1.3433444, -1.8719753, 1.0772805; 3.3777957, -8.645268, 2.823923; 3.910068, -15.3729925, -0.7631397; 4.446536, -16.77298, 1.3664272; 4.5631504, -16.384712, 2.5687947; -1.6054887, -1.6349933, 1.0309384; -4.442949, -8.27212, 1.0304265; -7.3023953, -14.235138, -3.0232253; -8.832689, -15.820115, -1.6044508; -9.117465, -15.678929, -0.36615014; -0.37915012, 2.4114437, -0.5477214; -1.3226477, 4.668625, -1.1437662; -2.6415365, 6.765732, -1.7398076; -3.7554426, 7.8762264, -1.9922353; -4.007347, 9.357622, -2.5014358; -4.4153566, 10.88277, -2.9177656; 0.067979336, 9.997678, -1.2866342; 4.515804, 9.454698, -3.4139132; 7.861108, 9.361555, -3.3129725; 9.533243, 9.301177, -3.2597823; 10.62186, 8.934461, -3.0788317; 11.526133, 8.750502, -2.9131403; 10.857486, 9.527205, -3.3143117; -5.9853797, 5.0384817, -3.4547625; -6.8672643, 0.34840918, -4.7142653; -8.541802, 2.8116853, -5.934476; -9.379068, 4.0433226, -6.5445814; -10.055297, 5.0175896, -6.9719825; -10.536947, 5.7894998, -7.4248743; -10.0216465, 4.7372236, -7.65319\",\n  \"-0.0, 0.0, 0.0; 1.3325378, -1.8763878, 1.0830096; 3.28364, -8.66393, 2.8689873; 3.8371992, -15.400253, -0.6986611; 4.2978263, -16.803892, 1.4462025; 4.3882546, -16.431505, 2.6558263; -1.6148626, -1.6222454, 1.0364214; -4.4041667, -8.277602, 0.86713856; -7.1294403, -14.192554, -3.346213; -8.697506, -15.808999, -2.006381; -9.026224, -15.697107, -0.7759973; -0.35417408, 2.4047606, -0.59203094; -1.2614845, 4.662093, -1.2413074; -2.53658, 6.774249, -1.8781121; -3.6347585, 7.89877, -2.1372685; -3.863134, 9.376394, -2.6680655; -4.242202, 10.9017315, -3.1102548; 0.26007342, 9.94757, -1.5601786; 4.5936613, 9.109305, -3.8230567; 7.9316034, 8.848496, -3.8161333; 9.599456, 8.70451, -3.8091724; 10.667948, 8.274336, -3.649217; 11.564556, 8.038151, -3.510243; 10.931752, 8.829718, -3.9395182; -5.9494996, 5.084508, -3.491341; -6.9692497, 0.36905146, -4.53318; -8.38979, 2.9019933, -5.921342; -9.100058, 4.1684623, -6.615423; -9.627943, 5.165044, -7.1787305; -9.983884, 5.938407, -7.7338514; -9.574396, 4.8211584, -7.8288507\",\n  \"-0.0, 0.0, 0.0; 1.323028, -1.8795661, 1.0891405; 3.1879869, -8.679269, 2.92032; 3.771888, -15.425738, -0.6232374; 4.149889, -16.83232, 1.5358055; 4.2096105, -16.473156, 2.7513192; -1.6230247, -1.6102973, 1.0422882; -4.3489513, -8.284668, 0.68910724; -6.916379, -14.143361, -3.6983917; -8.510134, -15.806607, -2.4492188; -8.888756, -15.743362, -1.229766; -0.32642758, 2.3962839, -0.64037734; -1.1924121, 4.653766, -1.3433474; -2.41835, 6.78397, -2.0155828; -3.4975004, 7.9254913, -2.2802854; -3.6872635, 9.399815, -2.834935; -4.0317435, 10.923868, -3.3087206; 0.4727671, 9.882484, -1.834016; 4.6730165, 8.733059, -4.208886; 7.9906564, 8.288164, -4.2814217; 9.647746, 8.05248, -4.313324; 10.694075, 7.56221, -4.182399; 11.580617, 7.2752233, -4.07903; 10.97333, 8.070486, -4.537348; -5.9068623, 5.150744, -3.521772; -7.0877686, 0.43072033, -4.351036; -8.241599, 3.013927, -5.8861055; -8.818514, 4.3055286, -6.6536403; -9.181391, 5.290426, -7.3518167; -9.401271, 6.036393, -8.006132; -9.122415, 4.876652, -7.9593496\",\n  \"-0.0, 0.0, 0.0; 1.3134413, -1.8833299, 1.0942303; 3.0919113, -8.6932, 2.9730492; 3.7118812, -15.450426, -0.5437863; 4.000334, -16.861126, 1.6263614; 4.026137, -16.51941, 2.8480825; -1.6311789, -1.5988573, 1.047159; -4.2755947, -8.292896, 0.4998492; -6.6648197, -14.085941, -4.0716205; -8.271078, -15.809719, -2.9247124; -8.694156, -15.798609, -1.7183537; -0.2935579, 2.3860168, -0.6925041; -1.1131434, 4.643177, -1.4500203; -2.287554, 6.79262, -2.1523347; -3.3432388, 7.9542418, -2.4241223; -3.5001478, 9.420749, -3.0089395; -3.8068175, 10.941648, -3.5175638; 0.6987982, 9.80457, -2.105731; 4.743014, 8.340615, -4.5764475; 8.026127, 7.6958723, -4.700541; 9.665314, 7.3607006, -4.7574363; 10.6927805, 6.825181, -4.658238; 11.56917, 6.4985933, -4.5927725; 10.969803, 7.2860956, -5.0743275; -5.8533964, 5.230238, -3.548575; -7.214319, 0.52627134, -4.1661777; -8.108381, 3.1361876, -5.8244033; -8.55541, 4.441146, -6.653513; -8.741422, 5.383788, -7.469588; -8.820008, 6.0776415, -8.208056; -8.698936, 4.903841, -8.027825\",\n  \"-0.0, 0.0, 0.0; 1.3038431, -1.8863714, 1.1004521; 2.995469, -8.704726, 3.0280623; 3.6557488, -15.473391, -0.45931792; 3.8496082, -16.888636, 1.7183688; 3.8384333, -16.565401, 2.9453297; -1.6392572, -1.5866377, 1.0531132; -4.186552, -8.299733, 0.31265414; -6.380744, -14.019226, -4.445396; -7.9850655, -15.811672, -3.4060864; -8.442053, -15.847666, -2.2126517; -0.25817868, 2.3748848, -0.7430213; -1.0258727, 4.631863, -1.5535876; -2.1412244, 6.802437, -2.2865212; -3.1661003, 7.9895244, -2.5660882; -3.2892437, 9.446566, -3.1818318; -3.5594337, 10.962464, -3.7249033; 0.9460604, 9.709784, -2.3777666; 4.8089495, 7.9386683, -4.935994; 8.04347, 7.0866866, -5.084071; 9.657703, 6.648384, -5.152301; 10.659358, 6.065921, -5.0536423; 11.519639, 5.697271, -4.998715; 10.940993, 6.4779983, -5.5153675; -5.7869477, 5.3298173, -3.5694258; -7.346296, 0.6651101, -3.9814816; -7.9812574, 3.2914338, -5.7307577; -8.298738, 4.604594, -6.605395; -8.297934, 5.466981, -7.5248737; -8.231242, 6.078543, -8.333878; -8.290036, 4.926571, -8.0265465\",\n  \"-0.0, 0.0, 0.0; 1.2931508, -1.8919613, 1.1034683; 2.8972955, -8.716768, 3.082354; 3.5988443, -15.49931, -0.3698268; 3.6960192, -16.91908, 1.8113711; 3.646302, -16.61661, 3.0426624; -1.6481891, -1.575426, 1.0560007; -4.083572, -8.307249, 0.13182098; -6.0742083, -13.944443, -4.810398; -7.6642175, -15.803255, -3.870419; -8.151007, -15.890284, -2.6914864; -0.22165127, 2.3634999, -0.78965443; -0.9333772, 4.619851, -1.6514254; -1.9821723, 6.812813, -2.4153228; -2.9695601, 8.028468, -2.7067866; -3.0575948, 9.474275, -3.354219; -3.2913997, 10.9841585, -3.9299479; 1.2106025, 9.595366, -2.6517584; 4.873025, 7.5254264, -5.2795515; 8.048075, 6.474031, -5.4330134; 9.631955, 5.9365473, -5.5033507; 10.59844, 5.2995443, -5.391803; 11.43569, 4.8815002, -5.3347526; 10.890456, 5.661149, -5.888074; -5.7104864, 5.45049, -3.5770025; -7.481408, 0.84871864, -3.7969732; -7.859358, 3.47749, -5.615609; -8.048331, 4.791874, -6.5249267; -7.8804326, 5.562211, -7.5085645; -7.688919, 6.0855055, -8.358522; -7.928573, 4.9845295, -7.964357\",\n  \"-0.0, 0.0, 0.0; 1.2811623, -1.9001799, 1.1033307; 2.79785, -8.7292185, 3.1358514; 3.5409474, -15.52762, -0.27620792; 3.540187, -16.951462, 1.9045019; 3.4504945, -16.671389, 3.1388247; -1.6581199, -1.56506, 1.0558678; -3.9679675, -8.315666, -0.038006306; -5.7472806, -13.863428, -5.1587977; -7.3150034, -15.783829, -4.3095737; -7.831732, -15.929484, -3.1493168; -0.18745846, 2.3524356, -0.8304939; -0.84083486, 4.6080937, -1.7390249; -1.8132311, 6.8256607, -2.532393; -2.7552729, 8.072696, -2.8408835; -2.8156486, 9.503989, -3.5228138; -3.0117207, 11.00676, -4.1303616; 1.4899827, 9.458149, -2.9211073; 4.935854, 7.096407, -5.5953236; 8.0406475, 5.8517156, -5.7399726; 9.588832, 5.218181, -5.805329; 10.511754, 4.5277386, -5.6510153; 11.319813, 4.059836, -5.5666847; 10.822701, 4.83157, -6.173811; -5.626536, 5.6007533, -3.563925; -7.6434746, 1.0962892, -3.6150067; -7.7564406, 3.719045, -5.4775615; -7.8129234, 5.0304213, -6.4088373; -7.510678, 5.7161837, -7.4225087; -7.223524, 6.161538, -8.289772; -7.6263986, 5.1271553, -7.8508043\",\n  \"-0.0, 0.0, 0.0; 1.2749989, -1.9042698, 1.1034186; 2.6964574, -8.735972, 3.1949615; 3.4860668, -15.551714, -0.17175484; 3.38051, -16.980385, 2.003234; 3.2465456, -16.725523, 3.239008; -1.6631796, -1.559625, 1.0559524; -3.834388, -8.326947, -0.20573056; -5.3851886, -13.775587, -5.5041704; -6.9261117, -15.752901, -4.7408485; -7.473892, -15.962936, -3.6049607; -0.15627418, 2.3441823, -0.8597684; -0.7457388, 4.6004934, -1.8094593; -1.6287208, 6.8416767, -2.6401412; -2.516391, 8.1220255, -2.9724872; -2.5325706, 9.538033, -3.6879845; -2.685463, 11.032977, -4.326454; 1.7878618, 9.296885, -3.1798; 5.014185, 6.655998, -5.8667774; 8.03447, 5.2157526, -5.9829583; 9.539847, 4.4851418, -6.033521; 10.422179, 3.7485707, -5.8567066; 11.201564, 3.236041, -5.7624903; 10.733513, 3.9935787, -6.4092984; -5.521867, 5.779633, -3.5463595; -7.807951, 1.4065337, -3.4430592; -7.6613784, 4.005514, -5.3363466; -7.5880938, 5.3050017, -6.282991; -7.165444, 5.901003, -7.3102703; -6.79649, 6.2669954, -8.183693; -7.3574367, 5.319956, -7.7217364\",\n  \"-0.0, 0.0, 0.0; 1.2731498, -1.9042474, 1.1055905; 2.5945635, -8.735558, 3.2629762; 3.4334862, -15.570227, -0.053061724; 3.2189894, -17.003555, 2.1108189; 3.0374606, -16.77501, 3.345668; -1.6646765, -1.5566167, 1.0580307; -3.6845293, -8.338488, -0.36641943; -4.9877768, -13.683729, -5.834148; -6.4962034, -15.717312, -5.1588244; -7.07457, -15.994833, -4.0529795; -0.12901817, 2.3398614, -0.8759093; -0.65215623, 4.5980163, -1.8594676; -1.4365716, 6.858509, -2.7355134; -2.2608519, 8.17392, -3.09323; -2.2271414, 9.573324, -3.8400934; -2.331943, 11.059545, -4.507958; 2.0896485, 9.113268, -3.4240992; 5.087677, 6.2016535, -6.09573; 8.007626, 4.5650563, -6.169082; 9.462298, 3.737035, -6.19773; 10.318871, 2.9759336, -5.99944; 11.079052, 2.4370935, -5.8956137; 10.620241, 3.1690562, -6.577537; -5.4005976, 5.9789147, -3.521999; -7.9847584, 1.782937, -3.2449956; -7.584801, 4.326396, -5.1767225; -7.3848214, 5.5981245, -6.142584; -6.8602467, 6.098185, -7.1740456; -6.425931, 6.382805, -8.047719; -7.130659, 5.542489, -7.576363\",\n  \"-0.0, 0.0, 0.0; 1.2690564, -1.9058964, 1.1074537; 2.490302, -8.734986, 3.329917; 3.3802114, -15.586943, 0.06321335; 3.0615394, -17.024414, 2.2114549; 2.8328276, -16.82303, 3.443191; -1.6680008, -1.5518376, 1.0598136; -3.5164866, -8.349533, -0.51406133; -4.5717587, -13.592686, -6.1320558; -6.0399904, -15.682515, -5.5457253; -6.642547, -16.023483, -4.4709764; -0.101904385, 2.338137, -0.88405085; -0.5588327, 4.599, -1.8940197; -1.2428858, 6.8751287, -2.812659; -2.0001473, 8.223373, -3.1954079; -1.9134125, 9.605379, -3.9698837; -1.9658971, 11.082949, -4.6626396; 2.3805642, 8.919431, -3.6395545; 5.12554, 5.743032, -6.281312; 7.932152, 3.9176626, -6.3109875; 9.329704, 2.9960775, -6.317309; 10.169112, 2.2222042, -6.096349; 10.915717, 1.6669009, -5.981357; 10.456065, 2.3668556, -6.6955557; -5.265397, 6.189308, -3.4870505; -8.144899, 2.2157762, -2.9575703; -7.5403624, 4.671978, -4.9481297; -7.2380934, 5.9000783, -5.943407; -6.6345925, 6.293431, -6.977918; -6.1526737, 6.4904556, -7.850775; -6.9740844, 5.76962, -7.370536\",\n  \"-0.0, 0.0, 0.0; 1.2632864, -1.9086505, 1.1093061; 2.3906808, -8.734633, 3.3901374; 3.3273547, -15.600614, 0.1662345; 2.911305, -17.043087, 2.294377; 2.6374555, -16.870626, 3.5212848; -1.6726692, -1.5455884, 1.0615864; -3.3377476, -8.360055, -0.63935363; -4.159507, -13.50815, -6.3828673; -5.574504, -15.65796, -5.8899417; -6.191265, -16.057371, -4.8437595; -0.07713908, 2.3366444, -0.8904812; -0.46975574, 4.601247, -1.9189517; -1.0521618, 6.8937826, -2.8664086; -1.7400424, 8.273102, -3.2689068; -1.6009604, 9.636525, -4.0682864; -1.6007, 11.10467, -4.782729; 2.6547747, 8.719238, -3.8248713; 5.1152554, 5.288435, -6.428505; 7.7995763, 3.287351, -6.431678; 9.135678, 2.2787433, -6.424238; 9.956226, 1.4933605, -6.174872; 10.687883, 0.922071, -6.0433025; 10.22991, 1.5884111, -6.789994; -5.1223054, 6.4180174, -3.4261687; -8.252995, 2.6992369, -2.5715904; -7.526092, 5.06042, -4.6348763; -7.1626415, 6.24101, -5.6665177; -6.505698, 6.4989834, -6.7110405; -5.9959774, 6.586628, -7.5859385; -6.9075165, 6.003908, -7.0814757\",\n  \"-0.0, 0.0, 0.0; 1.256299, -1.911837, 1.1117517; 2.3040447, -8.733614, 3.442596; 3.2710686, -15.61194, 0.25416613; 2.7696671, -17.058731, 2.3608725; 2.4564948, -16.911411, 3.581634; -1.6782869, -1.5378706, 1.0639262; -3.153327, -8.368705, -0.7434498; -3.7654161, -13.427757, -6.5913076; -5.122099, -15.632588, -6.1850977; -5.7468777, -16.087835, -5.166853; -0.052966617, 2.334994, -0.89655596; -0.38405964, 4.604294, -1.9362576; -0.8682436, 6.91367, -2.8979948; -1.4858754, 8.321284, -3.3161545; -1.2972162, 9.664208, -4.1397057; -1.2458127, 11.121689, -4.873863; 2.9020252, 8.517454, -3.9958405; 5.0470405, 4.851374, -6.5574903; 7.605259, 2.6914124, -6.5541854; 8.878196, 1.6042056, -6.5429606; 9.674069, 0.8040766, -6.262446; 10.386108, 0.21306026, -6.1117682; 9.932648, 0.8456339, -6.88992; -4.9740725, 6.658576, -3.3256042; -8.303261, 3.2147374, -2.1350894; -7.5255895, 5.5117245, -4.251643; -7.136755, 6.6602163, -5.3099194; -6.4620876, 6.7996993, -6.3656282; -5.9492993, 6.792613, -7.243091; -6.909459, 6.3251076, -6.7097244\",\n  \"-0.0, 0.0, 0.0; 1.2488705, -1.9152076, 1.1143162; 2.220708, -8.732426, 3.490935; 3.2144551, -15.620883, 0.33273506; 2.629756, -17.072424, 2.4145553; 2.277697, -16.952242, 3.6276708; -1.6842139, -1.5296685, 1.0663811; -2.965476, -8.375216, -0.83085334; -3.3795936, -13.349533, -6.7680902; -4.6857376, -15.596722, -6.4349194; -5.319745, -16.10578, -5.448353; -0.026863338, 2.3334372, -0.90175605; -0.29618257, 4.6070843, -1.9497632; -0.6839931, 6.930729, -2.9207778; -1.2317872, 8.364799, -3.3463018; -0.99723953, 9.686878, -4.191504; -0.8970322, 11.132138, -4.9445376; 3.1291482, 8.309252, -4.1665473; 4.939938, 4.434522, -6.6786776; 7.37018, 2.1315215, -6.6725283; 8.579149, 0.9736215, -6.6593485; 9.345523, 0.15531552, -6.3505516; 10.033707, -0.45883322, -6.182541; 9.584941, 0.14367253, -6.986837; -4.8101406, 6.9029727, -3.2034197; -8.308098, 3.780318, -1.6625843; -7.528716, 6.0179977, -3.841133; -7.139025, 7.136836, -4.9304066; -6.4719396, 7.2211213, -5.99673; -5.972365, 7.1711106, -6.880397; -6.9502177, 6.7675414, -6.3273287\",\n  \"-0.0, 0.0, 0.0; 1.241771, -1.9178737, 1.1176602; 2.1427538, -8.729039, 3.5391273; 3.15655, -15.626984, 0.40812516; 2.4948096, -17.083498, 2.4632373; 2.1063566, -16.99338, 3.667821; -1.6898293, -1.5212183, 1.0695807; -2.7785034, -8.379618, -0.9001403; -3.0082533, -13.276424, -6.9113474; -4.272297, -15.555689, -6.639272; -4.9168315, -16.117546, -5.6888456; 0.0016370625, 2.3325582, -0.90442467; -0.20499197, 4.61051, -1.9573087; -0.49820617, 6.945302, -2.9347358; -0.97845805, 8.40325, -3.3607063; -0.7041235, 9.705577, -4.2243953; -0.55982745, 11.138527, -4.9936223; 3.3360968, 8.096717, -4.336407; 4.799138, 4.0434875, -6.7928524; 7.0960255, 1.607472, -6.784966; 8.238422, 0.3838582, -6.7704372; 8.974981, -0.45369422, -6.441354; 9.638206, -1.0915966, -6.2618585; 9.189706, -0.5131215, -7.083753; -4.627156, 7.1491203, -3.0611694; -8.270933, 4.420557, -1.1536391; -7.514812, 6.5956526, -3.40263; -7.136752, 7.683199, -4.5271244; -6.4996624, 7.709948, -5.6145773; -6.032476, 7.615945, -6.512265; -7.016171, 7.283686, -5.9232855\",\n  \"-0.0, 0.0, 0.0; 1.2355263, -1.9185203, 1.1234561; 2.063177, -8.722038, 3.5921378; 3.09212, -15.62965, 0.48750114; 2.3560996, -17.089828, 2.514561; 1.9324564, -17.023155, 3.7087636; -1.6946988, -1.5118623, 1.0751276; -2.598841, -8.380597, -0.95111275; -2.655393, -13.208853, -7.0216036; -3.8837256, -15.51354, -6.805995; -4.5416636, -16.138138, -5.905209; 0.02590395, 2.3330464, -0.9027938; -0.12034161, 4.6160555, -1.9548419; -0.31715003, 6.959592, -2.9355028; -0.7289219, 8.438647, -3.360406; -0.4191922, 9.72299, -4.238931; -0.23518589, 11.145378, -5.019207; 3.5183032, 7.88103, -4.495171; 4.626579, 3.684214, -6.8955345; 6.7862673, 1.1258485, -6.874589; 7.86019, -0.158185, -6.85313; 8.566093, -1.0180486, -6.5145392; 9.202832, -1.6814575, -6.3316298; 8.750975, -1.1169274, -7.1613445; -4.4292374, 7.4014473, -2.9001298; -8.148325, 5.1104383, -0.60219383; -7.4588585, 7.226647, -2.9274933; -7.114126, 8.284749, -4.0901423; -6.5312133, 8.255308, -5.2075043; -6.1160035, 8.118986, -6.1250887; -7.088637, 7.859293, -5.4836116\",\n  \"-0.0, 0.0, 0.0; 1.2307919, -1.9181943, 1.1291947; 1.9856567, -8.712239, 3.6468093; 3.0288315, -15.629154, 0.567739; 2.220825, -17.092985, 2.5645213; 1.7624753, -17.04971, 3.7469263; -1.6983495, -1.5038296, 1.080619; -2.4245307, -8.380885, -0.9885384; -2.3166265, -13.153932, -7.101843; -3.5150843, -15.478898, -6.9433894; -4.1864195, -16.162003, -6.0965743; 0.047091138, 2.3348107, -0.8973603; -0.040507082, 4.623979, -1.9425197; -0.14071949, 6.975027, -2.9198236; -0.48050594, 8.471932, -3.3458805; -0.13755894, 9.739507, -4.2363396; 0.08239503, 11.153496, -5.0225534; 3.6772108, 7.674669, -4.6304445; 4.4315495, 3.3676553, -6.972215; 6.45417, 0.6999121, -6.926627; 7.4596972, -0.6380956, -6.892519; 8.134757, -1.5211427, -6.5507126; 8.744226, -2.2099743, -6.368883; 8.287219, -1.6520872, -7.2002687; -4.2160964, 7.6524396, -2.7244673; -7.9385886, 5.8065667, -0.06051302; -7.3457456, 7.8895135, -2.441813; -7.049325, 8.930986, -3.632461; -6.5502353, 8.840711, -4.786546; -6.210514, 8.658711, -5.7269764; -7.149293, 8.475082, -5.012887\",\n  \"-0.0, 0.0, 0.0; 1.2304326, -1.913895, 1.1368554; 1.913404, -8.697451, 3.70282; 2.9689682, -15.622654, 0.6466851; 2.0898552, -17.09097, 2.6098542; 1.5965647, -17.077045, 3.778832; -1.6985319, -1.4983271, 1.0879502; -2.2741184, -8.379732, -1.0138605; -1.997581, -13.114939, -7.1512423; -3.173263, -15.454641, -7.049073; -3.8593256, -16.185452, -6.255566; 0.062530264, 2.3385375, -0.88664925; 0.031100444, 4.6349087, -1.9191298; 0.028266644, 6.9904013, -2.8908496; -0.2352286, 8.502143, -3.3185325; 0.13984486, 9.754881, -4.216999; 0.39273182, 11.1628275, -5.0041533; 3.813926, 7.4772234, -4.7412834; 4.200872, 3.079969, -7.0035195; 6.095256, 0.31993032, -6.945025; 7.036913, -1.0635872, -6.9041095; 7.6810026, -1.9686754, -6.560201; 8.26307, -2.681113, -6.3795524; 7.8032265, -2.1249747, -7.2105455; -3.9921682, 7.8969502, -2.5444036; -7.666515, 6.495084, 0.43801117; -7.196038, 8.584007, -1.9652712; -6.9607997, 9.6284685, -3.1669106; -6.607243, 9.455637, -4.364525; -6.3917384, 9.2109, -5.3271284; -7.2487373, 9.1186495, -4.5013003\",\n  \"-0.0, 0.0, 0.0; 1.2349001, -1.9056802, 1.1457769; 1.8438082, -8.678167, 3.7591834; 2.9105792, -15.611426, 0.7252884; 1.9645422, -17.083256, 2.6544201; 1.4380322, -17.093817, 3.8088527; -1.6949171, -1.4961962, 1.0964875; -2.1334004, -8.380537, -1.0286539; -1.7020829, -13.094949, -7.173115; -2.8660898, -15.442122, -7.120797; -3.56823, -16.202682, -6.3704863; 0.07351424, 2.3437743, -0.8718553; 0.094319195, 4.647688, -1.887667; 0.18434718, 7.00415, -2.8528476; 5.208254E-4, 8.528146, -3.2786977; 0.4089998, 9.7680645, -4.180374; 0.6951108, 11.171609, -4.964008; 3.9192696, 7.2914953, -4.8428483; 3.9322596, 2.827001, -7.0041924; 5.7087607, -0.010569811, -6.9577093; 6.59187, -1.4323239, -6.9224105; 7.198601, -2.3624744, -6.577437; 7.748271, -3.1005335, -6.3981743; 7.291875, -2.5389612, -7.227412; -3.7645977, 8.12767, -2.3535602; -7.354418, 7.1689997, 0.8952837; -7.043586, 9.309427, -1.4885516; -6.888168, 10.379639, -2.6804686; -6.6929517, 10.184855, -3.910551; -6.6075115, 9.924815, -4.8893375; -7.356924, 9.868178, -3.96191\",\n  \"-0.0, 0.0, 0.0; 1.244451, -1.8937945, 1.1551116; 1.7775126, -8.654037, 3.8163524; 2.853623, -15.596172, 0.8061416; 1.8432162, -17.071115, 2.6999314; 1.2843239, -17.106236, 3.8385465; -1.6872749, -1.4982585, 1.1054213; -2.0020943, -8.384783, -1.0345116; -1.4285877, -13.090883, -7.1737146; -2.592362, -15.438755, -7.171491; -3.3147242, -16.206026, -6.4476767; 0.07763685, 2.3508356, -0.8522671; 0.1470756, 4.6626816, -1.8476918; 0.3299783, 7.0163965, -2.8064222; 0.22469166, 8.549878, -3.2248173; 0.6668147, 9.77864, -4.1258984; 0.9880289, 11.17804, -4.903316; 3.9947402, 7.10902, -4.9402585; 3.64512, 2.6067877, -6.992318; 5.3079906, -0.2991295, -6.971544; 6.1347203, -1.7546399, -6.9487453; 6.7039013, -2.7077792, -6.6025257; 7.2213407, -3.4689229, -6.4238625; 6.77242, -2.898931, -7.251435; -3.5281384, 8.3533535, -2.148217; -7.0036297, 7.8415117, 1.3187454; -6.9032893, 10.07278, -0.9990332; -6.853119, 11.188414, -2.1579196; -6.821929, 11.044897, -3.4099512; -6.8671107, 10.825833, -4.401371; -7.4890347, 10.731501, -3.386846\",\n  \"-0.0, 0.0, 0.0; 1.2574251, -1.8792832, 1.1647211; 1.7185515, -8.627689, 3.8690944; 2.8009415, -15.578634, 0.8815546; 1.731763, -17.056522, 2.7404575; 1.1429585, -17.116581, 3.8628392; -1.6768445, -1.5031476, 1.1146175; -1.8812461, -8.391841, -1.031721; -1.1877519, -13.095997, -7.160024; -2.3684201, -15.435046, -7.2018085; -3.1166677, -16.197372, -6.4993806; 0.07298728, 2.3599284, -0.82717913; 0.18471278, 4.6804233, -1.7983353; 0.45877558, 7.0275507, -2.7514744; 0.43538007, 8.567758, -3.157576; 0.91124845, 9.785538, -4.056372; 1.2667582, 11.180107, -4.827519; 4.039763, 6.936975, -5.0231786; 3.344356, 2.428172, -6.970071; 4.89036, -0.54161453, -6.982975; 5.6590786, -2.028741, -6.976719; 6.1977315, -2.997175, -6.6241603; 6.68916, -3.7744122, -6.4413915; 6.2485514, -3.2007706, -7.270907; -3.293342, 8.566518, -1.9397194; -6.602394, 8.49415, 1.721672; -6.74467, 10.82446, -0.49420977; -6.8158083, 11.989614, -1.6021492; -6.9371047, 11.939383, -2.8559103; -7.1034226, 11.794446, -3.848017; -7.599209, 11.624855, -2.7754574\",\n  \"-0.0, 0.0, 0.0; 1.274112, -1.8632119, 1.1723818; 1.6651036, -8.599972, 3.9165463; 2.750139, -15.561276, 0.9541936; 1.6290907, -17.042046, 2.7799516; 1.0136073, -17.122562, 3.8866296; -1.6633211, -1.512688, 1.1219484; -1.7713672, -8.404625, -1.0209857; -0.9716849, -13.105787, -7.1386395; -2.1795256, -15.429798, -7.2221165; -2.9563718, -16.190723, -6.5498643; 0.060895596, 2.371045, -0.7957708; 0.20912103, 4.7008443, -1.7393744; 0.5712625, 7.03759, -2.6886182; 0.6294171, 8.5802765, -3.0816097; 1.1409748, 9.786267, -3.9766903; 1.5332992, 11.174796, -4.7408543; 4.0593276, 6.7778573, -5.088255; 3.0455537, 2.2909732, -6.9438996; 4.4650245, -0.74102926, -6.988519; 5.1707916, -2.259027, -6.997907; 5.674102, -3.2441583, -6.6394315; 6.136432, -4.03803, -6.4522905; 5.7125893, -3.4556942, -7.284479; -3.063991, 8.763514, -1.7336986; -6.1447864, 9.140481, 2.1039364; -6.5919833, 11.575554, 0.046959877; -6.8155813, 12.793089, -0.98152816; -7.0868263, 12.869571, -2.2102385; -7.3719, 12.824993, -3.1847587; -7.736296, 12.544235, -2.0832417\",\n  \"-0.0, 0.0, 0.0; 1.2913349, -1.8472346, 1.1788034; 1.6183214, -8.574006, 3.9556506; 2.7023945, -15.545767, 1.0176351; 1.5354842, -17.027178, 2.8138986; 0.89664614, -17.122942, 3.9060311; -1.649174, -1.5235691, 1.1280937; -1.6753252, -8.420317, -1.00189; -0.7891178, -13.112589, -7.1144457; -2.0401597, -15.412564, -7.223446; -2.846483, -16.175423, -6.589166; 0.046901226, 2.3827763, -0.7609147; 0.22734779, 4.722011, -1.6751049; 0.6714287, 7.045843, -2.6212482; 0.8063134, 8.586348, -3.0038137; 1.3501308, 9.781128, -3.8949018; 1.7765518, 11.164276, -4.65051; 4.0515847, 6.6327944, -5.1503296; 2.7556386, 2.1898785, -6.9347916; 4.0199313, -0.9098904, -6.9888577; 4.6483536, -2.461471, -7.0028462; 5.1171694, -3.4655356, -6.650177; 5.549073, -4.2777367, -6.4690905; 5.130194, -3.6823103, -7.294502; -2.8349466, 8.943029, -1.5204453; -5.6173344, 9.784857, 2.4683502; -6.4171643, 12.324875, 0.66022885; -6.8170786, 13.594882, -0.2438311; -7.232827, 13.835691, -1.4092994; -7.631808, 13.921183, -2.340132; -7.86192, 13.483914, -1.2534885\",\n  \"-0.0, 0.0, 0.0; 1.3067001, -1.8332988, 1.1836171; 1.5725831, -8.550955, 3.9889076; 2.6582518, -15.532616, 1.0750909; 1.452806, -17.016865, 2.843346; 0.79339534, -17.132198, 3.9212675; -1.6363778, -1.5339128, 1.1327007; -1.59433, -8.437552, -0.97457933; -0.636591, -13.115795, -7.0870996; -1.9401903, -15.385681, -7.210076; -2.7748163, -16.149893, -6.6152644; 0.030750712, 2.3946047, -0.72369707; 0.23818877, 4.7431736, -1.6077323; 0.75831556, 7.051939, -2.5520098; 0.9678832, 8.586418, -2.9250498; 1.5402298, 9.772667, -3.8096442; 1.9961276, 11.153246, -4.552636; 4.020166, 6.501967, -5.2072277; 2.4670634, 2.1163545, -6.9269843; 3.5461493, -1.0526891, -6.978598; 4.0822363, -2.6385522, -6.9912877; 4.5228786, -3.661653, -6.6575093; 4.92709, -4.491645, -6.4940157; 4.496828, -3.8794434, -7.301097; -2.6105318, 9.103636, -1.3081617; -5.0740547, 10.373233, 2.7759562; -6.1915827, 13.001564, 1.2914599; -6.750347, 14.315727, 0.5492126; -7.301727, 14.718701, -0.51038396; -7.811235, 14.935293, -1.3626944; -7.915335, 14.353999, -0.32528937\",\n  \"-0.0, 0.0, 0.0; 1.3190079, -1.8220602, 1.1873134; 1.525415, -8.530763, 4.0189147; 2.6152565, -15.521219, 1.1278298; 1.3751924, -17.006296, 2.8712764; 0.6973881, -17.132887, 3.93645; -1.6259973, -1.542312, 1.1362382; -1.5256616, -8.454182, -0.9418944; -0.5053514, -13.11405, -7.058324; -1.8589563, -15.353757, -7.193746; -2.7183619, -16.118065, -6.6354675; 0.015543124, 2.4041162, -0.69195265; 0.24715586, 4.7615356, -1.5459146; 0.83807105, 7.0576534, -2.4793248; 1.113754, 8.583246, -2.8457541; 1.7111309, 9.763969, -3.7211447; 2.1936736, 11.145128, -4.4460096; 3.9828615, 6.400297, -5.24889; 2.1827917, 2.0762558, -6.881587; 3.0762467, -1.1496875, -6.9519653; 3.5198598, -2.7637622, -6.9739356; 3.9292476, -3.8064537, -6.6616774; 4.303927, -4.6536794, -6.5173573; 3.8694232, -4.0191813, -7.3047037; -2.3932838, 9.238876, -1.0986142; -4.585512, 10.917539, 2.9924836; -5.9266357, 13.63925, 1.918055; -6.5971966, 15.000104, 1.3808415; -7.275616, 15.579675, 0.49033797; -7.887758, 15.93916, -0.23698318; -7.863905, 15.178993, 0.68308526\",\n  \"-0.0, 0.0, 0.0; 1.3260444, -1.8148069, 1.1905802; 1.4771135, -8.513037, 4.0503263; 2.5732453, -15.510891, 1.1795881; 1.3024935, -16.99613, 2.9006562; 0.6082768, -17.130411, 3.954255; -1.6200066, -1.546305, 1.1393646; -1.4681939, -8.467247, -0.9051789; -0.3957852, -13.108051, -7.027188; -1.7856951, -15.324476, -7.177141; -2.6639457, -16.084436, -6.642767; 0.003505078, 2.4118602, -0.6646288; 0.25738588, 4.7774496, -1.4891626; 0.9135033, 7.062461, -2.406128; 1.2390513, 8.579635, -2.7665524; 1.8592417, 9.75758, -3.6297345; 2.370582, 11.140201, -4.331709; 3.9514751, 6.3238354, -5.2727413; 1.9142144, 2.0703626, -6.8092384; 2.611775, -1.2027118, -6.9108315; 2.9577978, -2.8402028, -6.948303; 3.3372145, -3.9002223, -6.6572523; 3.6841002, -4.7621045, -6.531422; 3.2495325, -4.1047416, -7.299746; -2.1885333, 9.348343, -0.9035088; -4.1380663, 11.450827, 3.1139202; -5.630582, 14.240829, 2.523154; -6.376838, 15.635829, 2.2277718; -7.1276803, 16.366013, 1.5261879; -7.7982807, 16.849596, 0.9350992; -7.696658, 15.923222, 1.6810563\",\n  \"-0.0, 0.0, 0.0; 1.3297503, -1.8108064, 1.1925367; 1.4299291, -8.495899, 4.0850706; 2.5333662, -15.50099, 1.2348542; 1.2322742, -16.987015, 2.9324138; 0.52155125, -17.131319, 3.9736094; -1.6168343, -1.5482436, 1.1412363; -1.4195509, -8.478133, -0.86882615; -0.2923206, -13.098873, -6.9961615; -1.7046812, -15.299201, -7.171285; -2.5989854, -16.050043, -6.6508274; -5.473044E-4, 2.4179454, -0.6421487; 0.27677733, 4.79057, -1.4384317; 0.9889796, 7.0675297, -2.3333127; 1.3477371, 8.578576, -2.6879058; 1.991545, 9.754361, -3.5366201; 2.536915, 11.136725, -4.2130203; 3.9389658, 6.276564, -5.276826; 1.6792414, 2.101822, -6.7150407; 2.1774309, -1.2058892, -6.8591976; 2.4240954, -2.860649, -6.9178424; 2.768081, -3.9369357, -6.642905; 3.0841799, -4.812451, -6.530842; 2.6614501, -4.131938, -7.2854924; -2.002511, 9.429315, -0.72747827; -3.6802726, 11.950647, 3.1698089; -5.2452455, 14.761538, 3.0674648; -6.0277295, 16.166983, 3.0162928; -6.773937, 17.025648, 2.4731362; -7.443226, 17.620358, 1.9921823; -7.3492947, 16.571665, 2.5546496\",\n  \"-0.0, 0.0, 0.0; 1.3288846, -1.809924, 1.1948386; 1.3816152, -8.479779, 4.1235757; 2.4934425, -15.492474, 1.295403; 1.1626832, -16.98046, 2.9680648; 0.4354391, -17.13444, 3.996386; -1.6175638, -1.5458542, 1.1434392; -1.3827754, -8.4844675, -0.83220196; -0.19607651, -13.085812, -6.9629025; -1.6256692, -15.272811, -7.163334; -2.533835, -16.017069, -6.6576324; 0.0024081059, 2.423205, -0.622002; 0.30398357, 4.8024254, -1.3892609; 1.0649662, 7.073853, -2.2576575; 1.4462131, 8.5815735, -2.6028175; 2.1133978, 9.755713, -3.4356048; 2.6938276, 11.135888, -4.086832; 3.945354, 6.252324, -5.261118; 1.4852092, 2.160174, -6.6047263; 1.7904692, -1.1682737, -6.800125; 1.9409096, -2.8334455, -6.884281; 2.2323418, -3.9268527, -6.616257; 2.5058718, -4.8172693, -6.509753; 2.117762, -4.112105, -7.26036; -1.8342977, 9.489279, -0.5648087; -3.2117348, 12.377104, 3.1933804; -4.753563, 15.182006, 3.5339837; -5.524474, 16.584455, 3.7042856; -6.233598, 17.536867, 3.280958; -6.873386, 18.216938, 2.8795624; -6.8205156, 17.090534, 3.271183\",\n  \"-0.0, 0.0, 0.0; 1.3270959, -1.8109218, 1.1953151; 1.3341062, -8.465761, 4.158475; 2.455731, -15.486593, 1.3544655; 1.0965099, -16.974874, 3.0038154; 0.35345674, -17.133093, 4.0201216; -1.6190878, -1.54392, 1.1438955; -1.3571033, -8.490877, -0.79873; -0.106298804, -13.0722685, -6.9316297; -1.5450022, -15.250353, -7.1617565; -2.4643764, -15.992218, -6.6730776; 0.0101624895, 2.428058, -0.6026985; 0.33653328, 4.813113, -1.3411534; 1.1394776, 7.080737, -2.1812444; 1.5394185, 8.586979, -2.5113761; 2.2276711, 9.759956, -3.328509; 2.8388662, 11.136784, -3.958322; 3.9627376, 6.243874, -5.234305; 1.3496525, 2.2299404, -6.524038; 1.4364796, -1.1093426, -6.7511435; 1.4777547, -2.7799158, -6.8511143; 1.6998363, -3.889609, -6.583589; 1.9171754, -4.7954164, -6.4773793; 1.5760175, -4.066683, -7.228282; -1.6816591, 9.533463, -0.41175985; -2.8098502, 12.664291, 3.2332294; -4.232566, 15.462806, 3.943804; -4.943923, 16.862062, 4.29909; -5.604414, 17.912792, 4.0780263; -6.207509, 18.689762, 3.822025; -6.209313, 17.505209, 3.9696074\",\n  \"-0.0, 0.0, 0.0; 1.3242936, -1.8126541, 1.1957966; 1.2880777, -8.454577, 4.1875834; 2.419403, -15.48436, 1.4100168; 1.0335746, -16.972988, 3.036758; 0.2755087, -17.133286, 4.041586; -1.6214716, -1.5410745, 1.1443561; -1.3430419, -8.49619, -0.766531; -0.02926743, -13.058435, -6.900537; -1.4654671, -15.234227, -7.165365; -2.392322, -15.977397, -6.693074; 0.018411057, 2.4324586, -0.58448255; 0.36789888, 4.82309, -1.2937518; 1.2086592, 7.0881314, -2.1032586; 1.6272446, 8.593232, -2.414967; 2.3342009, 9.765285, -3.2173266; 2.9704776, 11.138758, -3.829373; 3.9899702, 6.246739, -5.193353; 1.2614028, 2.298714, -6.4468694; 1.1040746, -1.0360341, -6.701091; 1.023224, -2.7042928, -6.8146195; 1.1587248, -3.827724, -6.54657; 1.305612, -4.747525, -6.439828; 1.0235628, -3.9948492, -7.1916413; -1.5490055, 9.566087, -0.2700163; -2.969037, 12.528837, 3.4132519; -3.8003082, 15.488745, 4.366486; -4.2159452, 16.968697, 4.8431034; -4.863317, 18.049053, 4.789318; -5.4521465, 18.866203, 4.653345; -5.463016, 17.674839, 4.5792933\",\n  \"-0.0, 0.0, 0.0; 1.3219936, -1.8147417, 1.1951755; 1.2418699, -8.446832, 4.207852; 2.3864193, -15.486916, 1.4619763; 0.97567546, -16.976452, 3.0663142; 0.20291758, -17.13855, 4.0595956; -1.6234268, -1.5394561, 1.1437621; -1.3361363, -8.502068, -0.7382989; 0.04131043, -13.045209, -6.872516; -1.3797743, -15.225626, -7.177764; -2.309594, -15.977745, -6.72591; 0.024785183, 2.4366097, -0.56668586; 0.39541736, 4.832246, -1.2477756; 1.2720859, 7.0942097, -2.0272393; 1.7109777, 8.597897, -2.317075; 2.4369721, 9.768853, -3.1038828; 3.0958667, 11.138732, -3.699842; 4.025536, 6.2509685, -5.1416845; 1.194483, 2.3580613, -6.3390546; 0.79127073, -0.9518211, -6.6424103; 0.5874767, -2.6076953, -6.7804713; 0.62244475, -3.7382298, -6.5103264; 0.6880563, -4.667128, -6.401484; 0.48003873, -3.894011, -7.156676; -1.4344609, 9.591935, -0.14529228; -3.3075628, 12.676337, 3.2220209; -3.382767, 15.565553, 4.6388836; -3.4203675, 17.010159, 5.347314; -3.996438, 18.125177, 5.465749; -4.519395, 18.99655, 5.452754; -4.58729, 17.852491, 5.1188803\",\n  \"-0.0, 0.0, 0.0; 1.3197136, -1.8176874, 1.193217; 1.1931653, -8.443517, 4.218052; 2.3551848, -15.495554, 1.5104551; 0.9205551, -16.985935, 3.0926743; 0.13311976, -17.149792, 4.074069; -1.6253698, -1.5387967, 1.1418884; -1.3335757, -8.50791, -0.7152487; 0.10291374, -13.0310955, -6.850671; -1.297709, -15.219517, -7.1911726; -2.226553, -15.984531, -6.7594085; 0.029787289, 2.4406059, -0.5489718; 0.42015085, 4.8403406, -1.2041154; 1.3318261, 7.0974903, -1.9569191; 1.7922578, 8.599247, -2.2223144; 2.535336, 9.770443, -2.9926453; 3.2121968, 11.138149, -3.5732634; 4.0625296, 6.24949, -5.0900435; 1.141294, 2.4054112, -6.227024; 0.5090417, -0.86306834, -6.58371; 0.19069037, -2.4983196, -6.748387; 0.11536204, -3.6255336, -6.4726634; 0.09260854, -4.5558186, -6.358401; -0.026919238, -3.7716074, -7.1213045; -1.3280877, 9.614792, -0.0349921; -3.142723, 12.864016, 3.206997; -2.7847936, 15.562001, 4.925566; -2.6058297, 16.910994, 5.784848; -3.0931835, 18.029293, 6.102721; -3.5288017, 18.937178, 6.2402964; -3.6429527, 17.92176, 5.6231675\",\n  \"-0.0, 0.0, 0.0; 1.3177375, -1.8202103, 1.1915543; 1.1490887, -8.444455, 4.217803; 2.330079, -15.508314, 1.5495143; 0.8738173, -16.99984, 3.1107554; 0.07265109, -17.163944, 4.080931; -1.627051, -1.5382003, 1.1402968; -1.3359342, -8.51234, -0.69798374; 0.15645218, -13.013819, -6.8360276; -1.2162647, -15.214067, -7.2120996; -2.1407197, -15.994922, -6.7997046; 0.038355146, 2.4438853, -0.53363645; 0.44960654, 4.8463616, -1.165541; 1.3923593, 7.0987678, -1.8938786; 1.8740686, 8.598217, -2.1332808; 2.6326494, 9.770085, -2.8873067; 3.3241584, 11.136212, -3.4542193; 4.1008863, 6.2486024, -5.0456104; 1.1047647, 2.44923, -6.13708; 0.297338, -0.7751055, -6.5391374; -0.108813345, -2.3883214, -6.726456; -0.32149416, -3.4947078, -6.438385; -0.45285028, -4.414365, -6.311972; -0.4501829, -3.6366913, -7.0907617; -1.2242692, 9.631578, 0.066702485; -2.8339686, 12.875544, 3.4202695; -2.1673408, 15.438069, 5.250512; -1.8340279, 16.71933, 6.1656337; -2.2131789, 17.790985, 6.7105665; -2.5444636, 18.696016, 7.03323; -2.704379, 17.888044, 6.169195\",\n  \"-0.0, 0.0, 0.0; 1.3151879, -1.8243297, 1.1880658; 1.1118726, -8.450551, 4.2078514; 2.3101182, -15.526227, 1.5788558; 0.83500373, -17.017967, 3.1220894; 0.021747112, -17.180302, 4.0824537; -1.6292212, -1.5383745, 1.136958; -1.3443103, -8.516704, -0.6863316; 0.2000041, -12.9954195, -6.828181; -1.136814, -15.212065, -7.23595; -2.0520883, -16.012844, -6.841685; 0.051322542, 2.446415, -0.52080095; 0.48595995, 4.8500376, -1.1323667; 1.4579182, 7.0976167, -1.8368359; 1.9587295, 8.59478, -2.0498977; 2.728644, 9.769379, -2.7880206; 3.429402, 11.136117, -3.3419542; 4.14356, 6.2476616, -5.008148; 1.0825016, 2.4912076, -6.0675173; 0.14157301, -0.69214606, -6.504367; -0.33164072, -2.284841, -6.709071; -0.6990688, -3.3457177, -6.4060087; -0.9537436, -4.2368455, -6.2644606; -0.8115908, -3.4905155, -7.060752; -1.1161239, 9.643049, 0.16337252; -2.4738362, 12.692451, 3.7991142; -1.5402923, 15.160827, 5.6420293; -1.0735209, 16.395014, 6.563485; -1.3823451, 17.385748, 7.279186; -1.6384588, 18.250095, 7.7484965; -1.793861, 17.651016, 6.7277603\",\n  \"-0.0, 0.0, 0.0; 1.312548, -1.8285108, 1.1845526; 1.073899, -8.458212, 4.1940956; 2.2903614, -15.546262, 1.6071343; 0.7958331, -17.037636, 3.131932; -0.029883444, -17.195374, 4.082379; -1.631466, -1.5384765, 1.1335964; -1.3552166, -8.520075, -0.6784792; 0.2408967, -12.975081, -6.8243275; -1.0488926, -15.212569, -7.2681355; -1.9520311, -16.033598, -6.8877788; 0.06794243, 2.4484756, -0.5090824; 0.5279461, 4.85256, -1.0999272; 1.5269324, 7.096367, -1.7781212; 2.04672, 8.590163, -1.9681163; 2.8254168, 9.768578, -2.6907825; 3.5309956, 11.138315, -3.231018; 4.194128, 6.2527733, -4.966652; 1.0763893, 2.5354567, -5.998421; 0.046452522, -0.61842275, -6.448089; -0.47179568, -2.1961865, -6.65926; -1.0047308, -3.1810493, -6.345676; -1.391078, -4.0211263, -6.1907234; -1.0896664, -3.3402922, -7.0012245; -1.0097054, 9.648686, 0.2607224; -2.0795202, 12.368333, 4.2381415; -1.0074326, 14.797585, 6.057504; -0.47138876, 16.012209, 6.967185; -0.6922567, 16.908516, 7.8256736; -0.86874294, 17.71278, 8.421454; -1.0642791, 17.295673, 7.3202114\",\n  \"-0.0, 0.0, 0.0; 1.3102912, -1.832876, 1.180297; 1.0391587, -8.466405, 4.1786346; 2.272347, -15.566929, 1.6341515; 0.7593285, -17.059715, 3.1392043; -0.0786975, -17.216318, 4.0790057; -1.6333871, -1.5394334, 1.1295233; -1.367124, -8.523584, -0.67418814; 0.27721345, -12.953421, -6.8255143; -0.9566276, -15.214577, -7.306851; -1.8433672, -16.059736, -6.941039; 0.08783462, 2.4502678, -0.4972799; 0.5750178, 4.8541336, -1.0668449; 1.5985656, 7.0950627, -1.7173657; 2.1386454, 8.584221, -1.8859696; 2.9238558, 9.767636, -2.5932517; 3.6294374, 11.142869, -3.1193383; 4.257085, 6.2616186, -4.915797; 1.0893443, 2.5890725, -5.9555597; -0.01170218, -0.54501534, -6.374031; -0.5664135, -2.1123295, -6.569823; -1.2388701, -3.0047414, -6.247779; -1.7354658, -3.781777, -6.078626; -1.2867162, -3.199274, -6.8975344; -0.910516, 9.649692, 0.35244966; -1.6547182, 11.971134, 4.644059; -0.5497949, 14.383751, 6.4659114; 0.0026646256, 15.590058, 7.376837; -0.15359516, 16.376144, 8.3498745; -0.27403164, 17.103367, 9.049579; -0.50662774, 16.848269, 7.9068747\",\n  \"-0.0, 0.0, 0.0; 1.3065021, -1.8383133, 1.1760334; 1.0038364, -8.475376, 4.1635146; 2.2550285, -15.588145, 1.6623888; 0.7243403, -17.082336, 3.1480565; -0.12567586, -17.24063, 4.0767407; -1.6365904, -1.5390196, 1.1254429; -1.3799652, -8.525601, -0.6702354; 0.3087299, -12.931239, -6.8269205; -0.8594297, -15.218742, -7.346158; -1.7284324, -16.083002, -6.982416; 0.11095975, 2.4519958, -0.48396194; 0.62561786, 4.855214, -1.0316765; 1.6699142, 7.0939856, -1.6561282; 2.2292876, 8.578264, -1.8035104; 3.0188768, 9.767487, -2.496023; 3.720852, 11.149402, -3.0092669; 4.3239126, 6.272546, -4.8614125; 1.120945, 2.650005, -5.966619; -0.04828179, -0.4698782, -6.297019; -0.6384038, -2.0290718, -6.449282; -1.4372926, -2.8101614, -6.1268153; -2.034795, -3.5100183, -5.947386; -1.4480126, -3.0563712, -6.7605195; -0.81807685, 9.647741, 0.44005513; -1.2760315, 11.598, 4.9508886; -0.17824543, 13.961975, 6.8395934; 0.37064612, 15.143962, 7.783944; 0.2265073, 15.819296, 8.8386; 0.119713075, 16.466005, 9.615328; -0.10658505, 16.34948, 8.449069\",\n  \"-0.0, 0.0, 0.0; 1.3015294, -1.8447611, 1.1714422; 0.97279197, -8.484819, 4.149497; 2.2374384, -15.610182, 1.6913505; 0.69034374, -17.105618, 3.1586566; -0.17081898, -17.26195, 4.0773497; -1.6407735, -1.5377717, 1.1210493; -1.3950303, -8.526537, -0.667642; 0.3368317, -12.908524, -6.829214; -0.7490827, -15.226616, -7.3896704; -1.5973197, -16.1065, -7.01455; 0.13604836, 2.4535475, -0.4694788; 0.678373, 4.8556013, -0.995163; 1.7413197, 7.092333, -1.5949697; 2.3177915, 8.571801, -1.7236465; 3.1097636, 9.767551, -2.4020529; 3.8058076, 11.157123, -2.902546; 4.394293, 6.2827744, -4.8041224; 1.1791849, 2.709466, -6.0279818; -0.065698504, -0.392596, -6.221383; -0.6951668, -1.9415025, -6.306064; -1.5960296, -2.6083653, -5.9961457; -2.275808, -3.228033, -5.8147154; -1.5725279, -2.916402, -6.601849; -0.73011804, 9.64408, 0.5231271; -1.026129, 11.291895, 5.1661797; 0.0839349, 13.552388, 7.170836; 0.6389671, 14.682633, 8.173162; 0.4942818, 15.252766, 9.2881365; 0.3888147, 15.821271, 10.123972; 0.17045394, 15.822723, 8.950402\",\n  \"-0.0, 0.0, 0.0; 1.2958484, -1.8513285, 1.1673726; 0.94122565, -8.494567, 4.1353474; 2.2211535, -15.632702, 1.7225864; 0.6574496, -17.13067, 3.1695611; -0.21543229, -17.286974, 4.077132; -1.6455246, -1.5355273, 1.117155; -1.4099208, -8.526342, -0.66487825; 0.35597992, -12.885872, -6.832715; -0.6545644, -15.230755, -7.4219527; -1.480258, -16.127094, -7.035658; 0.1650577, 2.4549305, -0.45264405; 0.73729545, 4.855114, -0.9546274; 1.8173993, 7.0898294, -1.5308341; 2.4097435, 8.564468, -1.6416184; 3.2022045, 9.767758, -2.305978; 3.889316, 11.166207, -2.7939296; 4.4738407, 6.2914085, -4.739909; 1.2634623, 2.7629547, -6.0988665; -0.061888456, -0.31132913, -6.145257; -0.73293155, -1.8449717, -6.1576777; -1.7091663, -2.4068737, -5.8686433; -2.4504113, -2.9523518, -5.689721; -1.6552722, -2.78402, -6.4318223; -0.64234805, 9.639096, 0.60379374; -0.9301587, 11.043555, 5.3266644; 0.16898328, 13.158535, 7.489872; 0.7185549, 14.216024, 8.571473; 0.5982667, 14.690291, 9.733262; 0.50582266, 15.186501, 10.615404; 0.23991522, 15.271517, 9.454795\",\n  \"-0.0, 0.0, 0.0; 1.2895586, -1.8585439, 1.1628634; 0.9118953, -8.50651, 4.117381; 2.205064, -15.657122, 1.7490337; 0.6252725, -17.156406, 3.1770477; -0.2587347, -17.310364, 4.0741916; -1.6507603, -1.5330399, 1.1128392; -1.430706, -8.526581, -0.6604651; 0.34864366, -12.866867, -6.8380003; -0.59529287, -15.234952, -7.4446564; -1.3959489, -16.150164, -7.0499973; 0.19681081, 2.4553883, -0.43720487; 0.7996472, 4.8528233, -0.91596997; 1.8944647, 7.086725, -1.4670134; 2.4983165, 8.557998, -1.5588019; 3.2885096, 9.769404, -2.2110014; 3.9645178, 11.176539, -2.6893957; 4.5537953, 6.3048325, -4.677764; 1.346477, 2.8188577, -6.148946; -0.040404677, -0.22701359, -6.053261; -0.74316955, -1.74535, -5.995916; -1.7770618, -2.2082195, -5.7329946; -2.5671382, -2.6823187, -5.559751; -1.7038063, -2.6533298, -6.2417436; -0.5551307, 9.629012, 0.68751884; -0.91644824, 10.82513, 5.462411; 0.19469142, 12.756216, 7.785555; 0.75026006, 13.721758, 8.947125; 0.6612642, 14.1141615, 10.141802; 0.58792186, 14.547788, 11.058063; 0.2721744, 14.698775, 9.916811\",\n  \"-0.0, 0.0, 0.0; 1.28221, -1.8664701, 1.1582859; 0.8853391, -8.5210705, 4.095297; 2.191361, -15.682926, 1.7683401; 0.59724736, -17.183285, 3.1792054; -0.29680282, -17.334414, 4.066828; -1.6568371, -1.5296535, 1.1084595; -1.4562232, -8.525367, -0.65857077; 0.3247124, -12.847332, -6.8484817; -0.5446079, -15.2391405, -7.4733086; -1.3158767, -16.173769, -7.0658364; 0.22971062, 2.455158, -0.42219317; 0.863347, 4.848962, -0.87884676; 1.9724274, 7.081543, -1.40621; 2.5840354, 8.550636, -1.4797266; 3.3690023, 9.770659, -2.122101; 4.031727, 11.186338, -2.59383; 4.632926, 6.3150287, -4.6197; 1.418052, 2.8762047, -6.182505; -0.010369182, -0.14453292, -5.9711165; -0.7345136, -1.6495588, -5.8569903; -1.8035715, -2.0380032, -5.61505; -2.6242983, -2.4575715, -5.443663; -1.7181957, -2.5427535, -6.0625477; -0.46594715, 9.617344, 0.76859903; -0.90943766, 10.622744, 5.5803905; 0.21210241, 12.359331, 8.047602; 0.77287203, 13.227624, 9.281206; 0.7198179, 13.539074, 10.50159; 0.6701602, 13.910105, 11.446478; 0.30515206, 14.124308, 10.330308\",\n  \"-0.0, 0.0, 0.0; 1.2756689, -1.8741599, 1.1530793; 0.8610759, -8.535908, 4.071379; 2.1775732, -15.709238, 1.7860436; 0.5704763, -17.209835, 3.1818461; -0.33270907, -17.355362, 4.0611167; -1.6622267, -1.5274078, 1.1034762; -1.4854461, -8.525581, -0.6563399; 0.29338503, -12.830456, -6.858754; -0.48936242, -15.246557, -7.5042286; -1.2282027, -16.19573, -7.0710955; 0.26227733, 2.4543202, -0.40784547; 0.92796063, 4.843504, -0.8425736; 2.0536408, 7.07355, -1.3448977; 2.669674, 8.541614, -1.3996472; 3.4479978, 9.770366, -2.03341; 4.0966616, 11.194044, -2.5005863; 4.7236805, 6.318781, -4.553251; 1.4938779, 2.9332867, -6.199485; 0.04550731, -0.07113123, -5.9068704; -0.68896365, -1.5675766, -5.752869; -1.7807652, -1.8956091, -5.5233626; -2.622788, -2.2695575, -5.3496842; -1.6951272, -2.4444237, -5.9155145; -0.37829614, 9.605378, 0.84171677; -0.8952642, 10.4114, 5.6836095; 0.23185152, 11.951056, 8.275866; 0.7954095, 12.720883, 9.571991; 0.7806016, 12.961847, 10.809275; 0.7581385, 13.27789, 11.774964; 0.34917745, 13.547106, 10.686285\",\n  \"-0.0, 0.0, 0.0; 1.2674844, -1.8827802, 1.1480508; 0.8351942, -8.551095, 4.048732; 2.163555, -15.735452, 1.8052781; 0.54544795, -17.239777, 3.1842468; -0.36658478, -17.38876, 4.053752; -1.6689191, -1.523574, 1.0986645; -1.5138559, -8.522711, -0.65936875; 0.25179243, -12.805384, -6.880889; -0.44568503, -15.243126, -7.542564; -1.1473751, -16.209036, -7.085323; 0.29285753, 2.4533002, -0.39289427; 0.98764384, 4.838188, -0.80508995; 2.1283486, 7.066138, -1.2821906; 2.7497141, 8.532527, -1.3184168; 3.5218863, 9.768896, -1.9448483; 4.156254, 11.1998205, -2.4095092; 4.8123674, 6.3237066, -4.4817457; 1.574152, 2.9957786, -6.225919; 0.101110935, 0.010241032, -5.8700485; -0.64592755, -1.4764364, -5.685018; -1.749152, -1.7671729, -5.4599023; -2.602151, -2.112226, -5.2800837; -1.6637592, -2.3466363, -5.8052206; -0.3020525, 9.592835, 0.91205215; -0.8672205, 10.169587, 5.7812195; 0.26721215, 11.524711, 8.471465; 0.8344281, 12.202271, 9.8165865; 0.8499989, 12.385884, 11.063662; 0.8514879, 12.657036, 12.04316; 0.41681865, 12.976518, 10.978292\",\n  \"-0.0, 0.0, 0.0; 1.2601541, -1.8909698, 1.1426479; 0.81068087, -8.566151, 4.0248647; 2.1471395, -15.760793, 1.8195066; 0.5162859, -17.264696, 3.1838417; -0.4044304, -17.406887, 4.0452952; -1.6748843, -1.5207453, 1.0934936; -1.5468681, -8.522696, -0.65549123; 0.20621014, -12.788174, -6.8923593; -0.39080638, -15.246276, -7.5765963; -1.051048, -16.223392, -7.082893; 0.32061037, 2.4522789, -0.37729618; 1.0407014, 4.833581, -0.76613104; 2.1927302, 7.06116, -1.2170343; 2.8224993, 8.524289, -1.2356867; 3.5898142, 9.76637, -1.856766; 4.2098355, 11.203571, -2.321419; 4.893902, 6.3358436, -4.406063; 1.6540456, 3.0668755, -6.255512; 0.14971793, 0.101205826, -5.8659883; -0.61308295, -1.375297, -5.664527; -1.7173064, -1.6582065, -5.434393; -2.570826, -1.9968019, -5.2450223; -1.6278006, -2.253079, -5.7513037; -0.24183726, 9.578279, 0.98359036; -0.8410505, 9.905104, 5.8718395; 0.34280097, 11.073227, 8.627689; 0.9347249, 11.657288, 10.005612; 0.96784955, 11.81075, 11.256414; 0.9914031, 12.058619, 12.241782; 0.57361, 12.430063, 11.187066\",\n  \"-0.0, 0.0, 0.0; 1.2526746, -1.8993555, 1.136949; 0.7859819, -8.580565, 4.0024137; 2.1301432, -15.784533, 1.8324649; 0.4864607, -17.28722, 3.182672; -0.4426604, -17.423113, 4.0360804; -1.6809384, -1.517974, 1.0880402; -1.5873464, -8.522719, -0.6519078; 0.15400195, -12.772682, -6.902639; -0.33750132, -15.249107, -7.604506; -0.9514179, -16.232658, -7.065849; 0.3466259, 2.4511492, -0.36129242; 1.0883671, 4.8296213, -0.7260003; 2.2474484, 7.0589085, -1.1495572; 2.8852713, 8.518642, -1.1575404; 3.6485436, 9.764984, -1.7750543; 4.255501, 11.207947, -2.239102; 4.964287, 6.3580685, -4.330741; 1.7252216, 3.146383, -6.2792845; 0.1914531, 0.19449067, -5.9000597; -0.5860991, -1.2750146, -5.7038984; -1.6822569, -1.5760458, -5.4586897; -2.527018, -1.9284124, -5.255662; -1.5836416, -2.17428, -5.7664323; -0.19372225, 9.56026, 1.0617043; -0.7902431, 9.602196, 5.9610157; 0.45532984, 10.624125, 8.747578; 1.0781159, 11.135091, 10.140856; 1.114889, 11.244009, 11.396219; 1.1552287, 11.456232, 12.389335; 0.79153645, 11.904734, 11.344575\",\n  \"-0.0, 0.0, 0.0; 1.2468204, -1.90664, 1.1311771; 0.7609823, -8.593007, 3.981389; 2.1117916, -15.806194, 1.8464766; 0.45616615, -17.309883, 3.1808844; -0.48132008, -17.44339, 4.0254755; -1.6856687, -1.5166777, 1.0825161; -1.6341218, -8.52433, -0.64745176; 0.09523046, -12.7590275, -6.911859; -0.29522583, -15.25101, -7.6221013; -0.86296606, -16.22802, -7.0241528; 0.37003782, 2.4502108, -0.34402603; 1.1321632, 4.8258324, -0.6844821; 2.2989092, 7.0558577, -1.0823281; 2.9414787, 8.513529, -1.084446; 3.701585, 9.763083, -1.6993656; 4.2985816, 11.210525, -2.162385; 5.0291576, 6.3767786, -4.2567425; 1.7929006, 3.2151444, -6.2899656; 0.2333188, 0.27092886, -5.959473; -0.5571188, -1.1947417, -5.78763; -1.6382656, -1.5313152, -5.5227733; -2.4674606, -1.9111106, -5.305529; -1.5275104, -2.1240332, -5.836993; -0.14646697, 9.543417, 1.1398182; -0.7577517, 9.291561, 6.031009; 0.5537543, 10.165923, 8.83746; 1.2095075, 10.603103, 10.240683; 1.2573918, 10.67743, 11.498194; 1.3215458, 10.859997, 12.49594; 1.0156069, 11.373164, 11.462495\",\n  \"-0.0, 0.0, 0.0; 1.2400603, -1.9142134, 1.1258049; 0.73724943, -8.60539, 3.9617515; 2.0923378, -15.826731, 1.857337; 0.42638254, -17.33065, 3.1785636; -0.51815516, -17.461823, 4.0156307; -1.6910914, -1.5142996, 1.0773754; -1.6823494, -8.525043, -0.6407788; 0.020514965, -12.74604, -6.921666; -0.2796123, -15.250538, -7.6318016; -0.7991259, -16.217976, -6.9771347; 0.39033857, 2.4493752, -0.32712635; 1.1692321, 4.822911, -0.643316; 2.342028, 7.05427, -1.0150373; 2.9882476, 8.510325, -1.0126733; 3.7471828, 9.761076, -1.6266085; 4.337614, 11.210949, -2.0904367; 5.0857797, 6.399359, -4.1828804; 1.8496284, 3.2797837, -6.2802267; 0.28228474, 0.3312168, -6.0366826; -0.51193184, -1.1368304, -5.907959; -1.5716963, -1.5205126, -5.621609; -2.3800464, -1.9368457, -5.3930464; -1.4527329, -2.0956936, -5.9641447; -0.10899639, 9.525852, 1.2186847; -0.7645633, 8.989299, 6.0811114; 0.6233741, 9.710751, 8.894269; 1.3173422, 10.071474, 10.300846; 1.3842692, 10.108729, 11.559133; 1.4791274, 10.257492, 12.5600395; 1.2332112, 10.830303, 11.542021\",\n  \"-0.0, 0.0, 0.0; 1.235184, -1.9206185, 1.1202427; 0.7172006, -8.6164255, 3.9424958; 2.0730278, -15.845618, 1.865695; 0.39839804, -17.351168, 3.1740363; -0.5523469, -17.484085, 4.0037684; -1.6950079, -1.5136985, 1.0720526; -1.73306, -8.527956, -0.63129056; -0.08362079, -12.737654, -6.9339805; -0.32378614, -15.249832, -7.639783; -0.79963887, -16.219809, -6.9563146; 0.40831414, 2.4486668, -0.31003824; 1.2019346, 4.8203945, -0.6022677; 2.379118, 7.0535297, -0.94858843; 3.0285623, 8.508127, -0.94002634; 3.7873821, 9.759026, -1.5538023; 4.3726826, 11.209999, -2.0206823; 5.136001, 6.423837, -4.1101384; 1.9036975, 3.3367224, -6.260771; 0.33839118, 0.3804264, -6.1191497; -0.4546724, -1.0917981, -6.0409336; -1.4879332, -1.5269955, -5.7322516; -2.2714612, -1.9828937, -5.4929934; -1.3640505, -2.0798182, -6.108223; -0.07867265, 9.50791, 1.2966368; -0.81557196, 8.705046, 6.1104956; 0.6615507, 9.266668, 8.914673; 1.4001117, 9.547481, 10.316759; 1.4624578, 9.542573, 11.575823; 1.5662909, 9.652556, 12.580843; 1.3903081, 10.276446, 11.578476\",\n  \"-0.0, 0.0, 0.0; 1.2296588, -1.9266492, 1.1159575; 0.6973127, -8.626963, 3.9248111; 2.052415, -15.863342, 1.8727124; 0.36839712, -17.367243, 3.1708593; -0.5880839, -17.494085, 3.9949307; -1.699404, -1.5116668, 1.0679514; -1.7872632, -8.529129, -0.62028766; -0.20085454, -12.73004, -6.9449825; -0.4004417, -15.246044, -7.6497927; -0.83925027, -16.22619, -6.9561205; 0.42311808, 2.448214, -0.29331368; 1.2288883, 4.818684, -0.56151026; 2.410803, 7.053093, -0.8825811; 3.0615864, 8.507024, -0.8661234; 3.821299, 9.757775, -1.4790931; 4.403774, 11.208891, -1.9490535; 5.1809773, 6.447609, -4.0372343; 1.9580643, 3.382581, -6.233075; 0.40075982, 0.41898632, -6.1902337; -0.38817936, -1.0572358, -6.160982; -1.3932118, -1.5421033, -5.8336864; -2.1509154, -2.0356941, -5.586184; -1.2659354, -2.0726523, -6.239438; -0.053557873, 9.49093, 1.3734404; -0.90048474, 8.448294, 6.122806; 0.65751034, 8.845385, 8.911299; 1.4365062, 9.04393, 10.305544; 1.5040474, 8.990016, 11.563194; 1.6211376, 9.056034, 12.570604; 1.4920068, 9.726784, 11.591641\",\n  \"-0.0, 0.0, 0.0; 1.2254562, -1.9321887, 1.1109917; 0.678762, -8.63678, 3.9068522; 2.033653, -15.879802, 1.8781817; 0.3417549, -17.383018, 3.1668391; -0.61977494, -17.509167, 3.9851213; -1.702759, -1.5112417, 1.063199; -1.8419951, -8.5314455, -0.6101185; -0.32100046, -12.726132, -6.9549823; -0.48430452, -15.244158, -7.6619143; -0.8876628, -16.235971, -6.9633255; 0.43557835, 2.4480221, -0.27617618; 1.2517858, 4.8174396, -0.5211016; 2.4376779, 7.0530066, -0.81857526; 3.0889664, 8.506576, -0.7927667; 3.8504367, 9.757045, -1.40413; 4.4314203, 11.207795, -1.8770549; 5.2224417, 6.4696236, -3.9645362; 2.012601, 3.416132, -6.195319; 0.47332466, 0.44324398, -6.2452383; -0.30648637, -1.0380147, -6.2619734; -1.2858009, -1.565439, -5.922745; -2.020488, -2.0909805, -5.6716576; -1.1574903, -2.0747945, -6.3544965; -0.034923553, 9.475518, 1.4449247; -0.99383783, 8.208636, 6.1178617; 0.60509145, 8.469909, 8.899207; 1.4045541, 8.600546, 10.289879; 1.4894404, 8.475486, 11.541401; 1.6242032, 8.482135, 12.548743; 1.5036478, 9.209568, 11.609991\",\n  \"-0.0, 0.0, 0.0; 1.2201806, -1.9388219, 1.1052275; 0.66042143, -8.646236, 3.891714; 2.0132997, -15.895711, 1.8848662; 0.3145808, -17.400175, 3.163052; -0.6517708, -17.527391, 3.9754677; -1.7069527, -1.510381, 1.0576832; -1.8970723, -8.532495, -0.6025655; -0.43588424, -12.722347, -6.964654; -0.55512744, -15.2421665, -7.673997; -0.92001164, -16.239859, -6.9627385; 0.4471278, 2.4477894, -0.25926614; 1.2714278, 4.8167114, -0.4807655; 2.4584966, 7.0548306, -0.75331086; 3.1102388, 8.507989, -0.7177221; 3.8738766, 9.757746, -1.3278368; 4.453275, 11.207866, -1.8046252; 5.264414, 6.4962153, -3.8849385; 2.066195, 3.447795, -6.139227; 0.5540309, 0.46347523, -6.2700753; -0.21212554, -1.0239, -6.326924; -1.1698785, -1.587894, -5.984975; -1.8853743, -2.1406078, -5.7368274; -1.0401673, -2.0772233, -6.4388986; -0.030016422, 9.459325, 1.5119624; -1.0964054, 7.972848, 6.096071; 0.50744665, 8.10882, 8.883523; 1.3093708, 8.176806, 10.277248; 1.4163475, 7.9776692, 11.517431; 1.5670223, 7.925688, 12.5211935; 1.4189951, 8.70638, 11.630376\",\n  \"-0.0, 0.0, 0.0; 1.2131603, -1.9470087, 1.0985434; 0.6424806, -8.656292, 3.8783069; 1.9931785, -15.911451, 1.8906221; 0.28781593, -17.416, 3.1598306; -0.68287206, -17.543018, 3.967091; -1.7124969, -1.50857, 1.0512862; -1.951976, -8.531878, -0.5974785; -0.54254425, -12.720073, -6.972323; -0.6141019, -15.241335, -7.6829486; -0.9393382, -16.24131, -6.9558377; 0.45707265, 2.447754, -0.24166149; 1.2868677, 4.8168015, -0.44009376; 2.4733818, 7.0579815, -0.6888642; 3.1269155, 8.5101185, -0.645335; 3.8931117, 9.759215, -1.2535912; 4.4705586, 11.209336, -1.7327385; 5.3031335, 6.52335, -3.8031843; 2.1210883, 3.4707716, -6.074667; 0.6458924, 0.47168326, -6.272642; -0.101707935, -1.02347, -6.3627687; -1.0367131, -1.626776, -6.024987; -1.731495, -2.2084851, -5.784371; -0.90034497, -2.0966947, -6.497104; -0.034635305, 9.444582, 1.5738201; -1.2020108, 7.744873, 6.0581346; 0.3827821, 7.756154, 8.859745; 1.175178, 7.7617946, 10.260549; 1.3031065, 7.4880857, 11.484424; 1.4660732, 7.37816, 12.48157; 1.2761748, 8.207472, 11.644236\",\n  \"-0.0, 0.0, 0.0; 1.2048334, -1.9563005, 1.0911754; 0.62620527, -8.666391, 3.8673468; 1.9729071, -15.926838, 1.8963323; 0.26319802, -17.433065, 3.1576774; -0.710798, -17.562326, 3.960586; -1.7190303, -1.506034, 1.0442358; -2.0085495, -8.530328, -0.59226084; -0.65270686, -12.720596, -6.9773574; -0.6881804, -15.242846, -7.687197; -0.9788735, -16.247826, -6.9523973; 0.4631247, 2.4483817, -0.22306271; 1.2960275, 4.818097, -0.39926332; 2.48412, 7.0606737, -0.62703055; 3.1391604, 8.511836, -0.57454365; 3.9068723, 9.760748, -1.1812651; 4.481415, 11.210895, -1.6638131; 5.3341594, 6.5443697, -3.7259045; 2.1707625, 3.4787223, -6.0058184; 0.74546874, 0.46020508, -6.2646947; 0.022860229, -1.0450757, -6.385026; -0.88778055, -1.6883018, -6.0544167; -1.5599506, -2.2993102, -5.822339; -0.7394597, -2.1418471, -6.538786; -0.03864765, 9.433935, 1.6332848; -1.2990121, 7.5209255, 6.0050945; 0.25091815, 7.404305, 8.823753; 1.0258822, 7.3459945, 10.233081; 1.169729, 7.0018654, 11.437255; 1.3391627, 6.8374753, 12.425796; 1.1021472, 7.706814, 11.642838\",\n  \"-0.0, 0.0, 0.0; 1.1947321, -1.9671772, 1.082695; 0.6092521, -8.678319, 3.8548846; 1.9545603, -15.942787, 1.8977836; 0.24057984, -17.449747, 3.1524386; -0.7364092, -17.581108, 3.9513597; -1.7269024, -1.5026293, 1.0361197; -2.0654864, -8.527296, -0.5893252; -0.7675606, -12.722124, -6.9834566; -0.77195245, -15.24477, -7.69276; -1.0301316, -16.254377, -6.952182; 0.46899283, 2.4487686, -0.20589282; 1.302529, 4.8196325, -0.3625639; 2.4885256, 7.0651283, -0.5717374; 3.1453016, 8.515225, -0.5120063; 3.9144464, 9.764172, -1.1168408; 4.485574, 11.214918, -1.6016355; 5.359623, 6.568212, -3.6542997; 2.2179973, 3.4819994, -5.936572; 0.85088646, 0.44164252, -6.2482843; 0.15739638, -1.0749685, -6.394828; -0.7298372, -1.7559532, -6.076417; -1.3800526, -2.394476, -5.856162; -0.56693274, -2.1940074, -6.5702662; -0.052761078, 9.423532, 1.6833786; -1.3969533, 7.3016157, 5.9320807; 0.11522269, 7.055068, 8.762851; 0.87130874, 6.931796, 10.178235; 1.0225031, 6.520277, 11.360159; 1.1916609, 6.302847, 12.33845; 0.9159995, 7.2063537, 11.608632\",\n  \"-0.0, 0.0, 0.0; 1.1861653, -1.976923, 1.0743303; 0.5948263, -8.689096, 3.8427768; 1.935539, -15.957617, 1.8976023; 0.21862626, -17.466164, 3.1463275; -0.7605784, -17.603065, 3.9415977; -1.7335575, -1.5004629, 1.0281152; -2.1195364, -8.524864, -0.5878829; -0.8805319, -12.725203, -6.9900804; -0.85251325, -15.248441, -7.696734; -1.0771257, -16.25861, -6.9460506; 0.4730465, 2.4492543, -0.19024915; 1.3066915, 4.821212, -0.32872736; 2.4913163, 7.0690584, -0.5196203; 3.1485333, 8.518651, -0.45289153; 3.918427, 9.7678585, -1.0562311; 4.4860525, 11.219101, -1.5436476; 5.383499, 6.589811, -3.5852222; 2.2910643, 3.4716537, -5.8911333; 0.9721587, 0.41342044, -6.234097; 0.30273074, -1.1123898, -6.3962126; -0.56259835, -1.8276973, -6.093145; -1.1923449, -2.490994, -5.887085; -0.38577682, -2.2498083, -6.5960093; -0.06782079, 9.413989, 1.72935; -1.4881946, 7.088664, 5.8447175; -0.0027023554, 6.715738, 8.675787; 0.74004245, 6.5292754, 10.091321; 0.8859585, 6.0530257, 11.249357; 1.0471926, 5.782975, 12.215804; 0.7562688, 6.720007, 11.53589\",\n  \"-0.0, 0.0, 0.0; 1.1767309, -1.9869962, 1.066091; 0.5832822, -8.700815, 3.8300934; 1.9180884, -15.973194, 1.8953071; 0.19937682, -17.483599, 3.1393023; -0.78142, -17.624662, 3.9318786; -1.7408274, -1.497425, 1.0202302; -2.1718824, -8.521572, -0.58544576; -0.9969739, -12.730694, -6.9939566; -0.9379123, -15.255346, -7.6936097; -1.1294434, -16.258532, -6.924614; 0.4724939, 2.4502017, -0.1790959; 1.2992879, 4.8255005, -0.30029547; 2.4812138, 7.076372, -0.47123423; 3.1377866, 8.525909, -0.39735055; 3.907664, 9.77539, -1.0001465; 4.4710646, 11.226977, -1.4914217; 5.3992505, 6.6164804, -3.5152245; 2.3716722, 3.4562418, -5.849737; 1.0977391, 0.38118935, -6.211775; 0.45071673, -1.1532166, -6.383451; -0.3935905, -1.9000502, -6.0976295; -1.0036908, -2.5859127, -5.90691; -0.2025668, -2.3066804, -6.607999; -0.10061264, 9.406274, 1.7673997; -1.5866114, 6.885148, 5.741891; -0.11433065, 6.3871074, 8.56059; 0.6218091, 6.138088, 9.969937; 0.7543522, 5.600732, 11.102559; 0.90433234, 5.279506, 12.055063; 0.62079465, 6.251458, 11.422714\",\n  \"-0.0, 0.0, 0.0; 1.1689435, -1.9955579, 1.0586404; 0.5713633, -8.712111, 3.8150973; 1.9001164, -15.988716, 1.8920672; 0.17950869, -17.49964, 3.1328073; -0.80266726, -17.643366, 3.9231942; -1.7468066, -1.4953016, 1.0130996; -2.220576, -8.5190525, -0.5822383; -1.1082903, -12.739246, -6.9946404; -1.0188888, -15.265783, -7.6842027; -1.1783994, -16.256159, -6.8916545; 0.4753988, 2.4504116, -0.16820697; 1.3009691, 4.8268948, -0.27349478; 2.479806, 7.080867, -0.42365065; 3.1349587, 8.53069, -0.34307796; 3.9039428, 9.781194, -0.94489115; 4.4620647, 11.233808, -1.439148; 5.4263873, 6.6403904, -3.4429147; 2.4700952, 3.4291596, -5.799102; 1.2485759, 0.3351946, -6.1801486; 0.6276611, -1.2088696, -6.3613753; -0.19780582, -1.9838922, -6.0963216; -0.79006374, -2.6897633, -5.923173; 0.008864522, -2.3758974, -6.6120114; -0.12705898, 9.395596, 1.8016671; -1.6785294, 6.6902685, 5.6272383; -0.21305144, 6.0667486, 8.424437; 0.51968706, 5.7549877, 9.823033; 0.6348811, 5.1601577, 10.928502; 0.7720779, 4.789873, 11.86499; 0.50757444, 5.796007, 11.2796\",\n  \"-0.0, 0.0, 0.0; 1.161814, -2.003667, 1.0511451; 0.56433547, -8.724286, 3.797698; 1.8855879, -16.005163, 1.8857075; 0.16445696, -17.517487, 3.124015; -0.81851155, -17.663893, 3.9129233; -1.7522676, -1.4937539, 1.0059268; -2.2639215, -8.517308, -0.5785395; -1.2152652, -12.750246, -6.993262; -1.0989072, -15.2790165, -7.6705046; -1.2283095, -16.254053, -6.8538175; 0.47931996, 2.4502413, -0.15932243; 1.3040657, 4.827601, -0.250308; 2.4784212, 7.085198, -0.3796795; 3.1304927, 8.536079, -0.29335847; 3.89702, 9.788179, -0.89498687; 4.448434, 11.242168, -1.3927178; 5.4570575, 6.6640544, -3.3701108; 2.5748067, 3.392796, -5.7354407; 1.4160264, 0.27765155, -6.13921; 0.82639146, -1.2772589, -6.331814; 0.01808089, -2.0749965, -6.0816984; -0.55805457, -2.7969322, -5.9208236; 0.23845077, -2.4563441, -6.5997014; -0.1573081, 9.384522, 1.8275344; -1.7704642, 6.5065584, 5.4984875; -0.30978525, 5.758737, 8.267585; 0.4205535, 5.3848267, 9.652132; 0.52047175, 4.738841, 10.730034; 0.647822, 4.324128, 11.649131; 0.4075231, 5.3612146, 11.109078\",\n  \"-0.0, 0.0, 0.0; 1.1570476, -2.0098548, 1.0445687; 0.5595347, -8.7358465, 3.7779293; 1.8730094, -16.021505, 1.8788371; 0.15293348, -17.536577, 3.115249; -0.8302299, -17.69028, 3.902525; -1.7559348, -1.4936726, 0.9996332; -2.3030436, -8.516602, -0.57573414; -1.312383, -12.762953, -6.9908104; -1.1683369, -15.294542, -7.652007; -1.2681481, -16.250736, -6.8093023; 0.48382434, 2.449712, -0.15375023; 1.308088, 4.827715, -0.23130426; 2.47618, 7.089792, -0.33694547; 3.1252875, 8.541716, -0.24593623; 3.8881829, 9.795528, -0.8486119; 4.431125, 11.25124, -1.3506048; 5.490102, 6.692385, -3.2950969; 2.6875243, 3.3515794, -5.658963; 1.6011537, 0.21320462, -6.083616; 1.0476308, -1.3536034, -6.2866855; 0.25350547, -2.170664, -6.0541215; -0.30900806, -2.9061716, -5.9071145; 0.4885828, -2.542468, -6.572595; -0.19230294, 9.370104, 1.850548; -1.8667582, 6.332817, 5.362234; -0.4156443, 5.4649906, 8.101188; 0.30991292, 5.0310783, 9.470662; 0.40222412, 4.338871, 10.520176; 0.5265077, 3.8835418, 11.420272; 0.30808914, 4.94769, 10.9254675\",\n  \"-0.0, 0.0, 0.0; 1.1543536, -2.0141032, 1.0393535; 0.5588598, -8.746964, 3.7561936; 1.8619504, -16.037495, 1.8686762; 0.14213884, -17.552963, 3.1049693; -0.8410512, -17.708782, 3.8917959; -1.7580308, -1.4945387, 0.9946425; -2.3385344, -8.516699, -0.5721761; -1.398196, -12.778906, -6.984311; -1.225292, -15.314491, -7.622892; -1.2970581, -16.242773, -6.7467847; 0.4887732, 2.449047, -0.14860864; 1.3130202, 4.8274264, -0.21381041; 2.4737902, 7.0941567, -0.29829487; 3.1171265, 8.5483265, -0.20230803; 3.87506, 9.804489, -0.80635095; 4.4088902, 11.261816, -1.3134029; 5.5226493, 6.7182603, -3.2232695; 2.8017337, 3.3026967, -5.5756783; 1.7981192, 0.1396296, -6.0203013; 1.2858909, -1.4398444, -6.233366; 0.50271344, -2.272487, -6.0197105; -0.048992634, -3.0188658, -5.887262; 0.7525753, -2.6360931, -6.537085; -0.22791123, 9.356915, 1.8665348; -1.95751, 6.1689835, 5.2141347; -0.52089, 5.188136, 7.922415; 0.19741935, 4.6977143, 9.276554; 0.28869173, 3.9621255, 10.2962265; 0.4149935, 3.468521, 11.175628; 0.21271347, 4.5559707, 10.726757\",\n  \"-0.0, 0.0, 0.0; 1.1524239, -2.018145, 1.0336382; 0.5594499, -8.758585, 3.7321727; 1.853117, -16.05376, 1.85616; 0.13567102, -17.571539, 3.0929089; -0.8467438, -17.734219, 3.8793154; -1.7595671, -1.4963596, 0.9891729; -2.3723826, -8.517622, -0.5693447; -1.4844067, -12.796825, -6.9776235; -1.2947129, -15.335516, -7.5988665; -1.3454802, -16.244627, -6.7014475; 0.49423522, 2.4481814, -0.14475569; 1.3180952, 4.8269653, -0.19919997; 2.4693704, 7.099199, -0.2633233; 3.1055388, 8.556349, -0.16479966; 3.8581142, 9.814941, -0.7704803; 4.3828087, 11.274033, -1.2819746; 5.554391, 6.745835, -3.1529765; 2.9196467, 3.2511995, -5.4872713; 2.0073435, 0.06268215, -5.946605; 1.5406966, -1.5298508, -6.16704; 0.76722896, -2.3764336, -5.973767; 0.22526646, -3.132475, -5.856796; 1.0323732, -2.7321997, -6.4889784; -0.26816583, 9.343223, 1.8758361; -2.0551686, 6.014804, 5.05217; -0.630283, 4.928718, 7.726275; 0.08215898, 4.3856773, 9.063327; 0.17480984, 3.61188, 10.054188; 0.30397984, 3.084665, 10.913433; 0.11025372, 4.1902413, 10.507083\",\n  \"-0.0, 0.0, 0.0; 1.151241, -2.0216951, 1.0280037; 0.5595218, -8.769694, 3.707859; 1.8446946, -16.069174, 1.8427765; 0.12904024, -17.587229, 3.0816703; -0.85259396, -17.75125, 3.8687727; -1.760547, -1.4987595, 0.9837812; -2.402969, -8.51868, -0.56885016; -1.5673004, -12.814943, -6.9727464; -1.3790315, -15.356012, -7.584628; -1.4203632, -16.257805, -6.6793756; 0.4984867, 2.4475477, -0.14083761; 1.3217986, 4.8267317, -0.18517795; 2.4646268, 7.1036777, -0.23046994; 3.0918279, 8.564587, -0.13012215; 3.8371692, 9.826663, -0.7374978; 4.351178, 11.288101, -1.2531238; 5.585202, 6.769262, -3.0839744; 3.0403044, 3.193221, -5.394539; 2.2270048, -0.020561218, -5.8636584; 1.8097987, -1.6260741, -6.0890026; 1.0451853, -2.4852552, -5.9172964; 0.5122, -3.2499685, -5.8165774; 1.3258216, -2.8333342, -6.4295473; -0.30715084, 9.331843, 1.8809938; -2.1516652, 5.8719926, 4.8790007; -0.73936677, 4.691509, 7.5195675; -0.033218205, 4.1012683, 8.839849; 0.059752308, 3.2891412, 9.799516; 0.189666, 2.728425, 10.637169; -0.0016340464, 3.8496037, 10.274799\",\n  \"-0.0, 0.0, 0.0; 1.1500312, -2.0245779, 1.0236757; 0.56070447, -8.779657, 3.6861641; 1.8363503, -16.083248, 1.8306584; 0.122627854, -17.600536, 3.0731614; -0.8579278, -17.762575, 3.8620167; -1.7615232, -1.5003245, 0.97963953; -2.4306757, -8.518238, -0.5707698; -1.6317927, -12.830597, -6.96854; -1.4478601, -15.375166, -7.5670447; -1.4851888, -16.267063, -6.6518693; 0.50395626, 2.4465992, -0.13782302; 1.3262014, 4.8263006, -0.173285; 2.4577227, 7.109158, -0.20181376; 3.0749805, 8.574107, -0.09875743; 3.8124745, 9.840017, -0.707732; 4.314883, 11.303822, -1.2280595; 5.613161, 6.7951903, -3.019072; 3.1634274, 3.1362004, -5.3024654; 2.4526896, -0.10137653, -5.774561; 2.0867114, -1.7191243, -6.0014186; 1.3308258, -2.589834, -5.8503857; 0.80661094, -3.3624434, -5.7650795; 1.6265063, -2.9307535, -6.3589745; -0.35003018, 9.319785, 1.8803489; -2.247192, 5.7367735, 4.695246; -0.850404, 4.47103, 7.304384; -0.15201223, 3.8381605, 8.6089525; -0.058341004, 2.9891505, 9.5360775; 0.07195782, 2.3961995, 10.35117; -0.12084719, 3.5304432, 10.032946\",\n  \"-0.0, 0.0, 0.0; 1.1490115, -2.027488, 1.01905; 0.56281865, -8.789632, 3.6642427; 1.8309255, -16.09639, 1.8160577; 0.12043035, -17.61314, 3.063654; -0.8582992, -17.774817, 3.854848; -1.762363, -1.5022209, 0.97521263; -2.4577823, -8.517843, -0.57400817; -1.6969392, -12.846079, -6.9656906; -1.530488, -15.393495, -7.557164; -1.5715696, -16.287064, -6.6437817; 0.5087899, 2.4457185, -0.13567628; 1.3290447, 4.826199, -0.16428237; 2.4482574, 7.1152487, -0.1785788; 3.05479, 8.584592, -0.07440339; 3.7830434, 9.855234, -0.68464166; 4.2724032, 11.322236, -1.2083876; 5.636326, 6.820879, -2.9610026; 3.2833922, 3.0802553, -5.2137175; 2.678195, -0.1793983, -5.6809654; 2.3649392, -1.8085065, -5.905442; 1.6187987, -2.690717, -5.773957; 1.1042275, -3.4712048, -5.70283; 1.9302888, -3.0252492, -6.2773232; -0.3944416, 9.308753, 1.8740664; -2.3380928, 5.6113997, 4.503258; -0.9579675, 4.268442, 7.082491; -0.2679053, 3.5969636, 8.372105; -0.17218196, 2.713734, 9.266473; -0.04090585, 2.0908346, 10.058752; -0.23895448, 3.2353516, 9.783422\",\n  \"-0.0, 0.0, 0.0; 1.1496817, -2.0288923, 1.0154935; 0.5661618, -8.797911, 3.64364; 1.8255453, -16.10744, 1.8004615; 0.11980486, -17.624447, 3.0542395; -0.85621154, -17.788757, 3.8482375; -1.7619305, -1.5049318, 0.9718093; -2.4851527, -8.518005, -0.57621783; -1.7637737, -12.86076, -6.9626265; -1.6195195, -15.411088, -7.5473423; -1.6668203, -16.311272, -6.6407824; 0.51546633, 2.444524, -0.13194929; 1.3384376, 4.82413, -0.15466148; 2.4463797, 7.118699, -0.15750837; 3.040174, 8.593293, -0.054142073; 3.759511, 9.867821, -0.6668476; 4.2375607, 11.33684, -1.1953627; 5.6635294, 6.840579, -2.907947; 3.4151719, 3.0195184, -5.132283; 2.9132426, -0.259825, -5.583836; 2.6515543, -1.8990535, -5.800542; 1.917284, -2.7935565, -5.6864333; 1.4141009, -3.5824506, -5.6276426; 2.244551, -3.1217802, -6.1839085; -0.42753625, 9.297762, 1.8668542; -2.409037, 5.4942884, 4.3098216; -1.0449328, 4.077862, 6.8580904; -0.36288214, 3.3696501, 8.132224; -0.2634383, 2.4553754, 8.9944105; -0.12991035, 1.8051693, 9.7640505; -0.33480352, 2.9575703, 9.529657\",\n  \"-0.0, 0.0, 0.0; 1.1501119, -2.0306475, 1.0114902; 0.5705098, -8.806789, 3.6220846; 1.8202962, -16.118622, 1.7815043; 0.11830294, -17.632513, 3.0441089; -0.8549075, -17.790571, 3.8428063; -1.7616826, -1.5076882, 0.96797854; -2.512947, -8.518198, -0.57830673; -1.8304038, -12.874694, -6.9596224; -1.7111216, -15.427336, -7.539852; -1.7666119, -16.337248, -6.6435266; 0.518703, 2.4438677, -0.13142559; 1.3381015, 4.824737, -0.15064299; 2.4322777, 7.125895, -0.14417242; 3.0120885, 8.606011, -0.040353812; 3.723147, 9.884002, -0.655506; 4.190708, 11.35421, -1.1900632; 5.6777673, 6.865389, -2.8628573; 3.533719, 2.967228, -5.056184; 3.1343331, -0.3288679, -5.4876575; 2.9238636, -1.9767369, -5.6944013; 2.2051017, -2.885325, -5.593612; 1.7163678, -3.6838565, -5.5437098; 2.548489, -3.2075572, -6.084089; -0.47426963, 9.288929, 1.8505764; -2.4890516, 5.3888874, 4.1069403; -1.1416382, 3.901217, 6.6232934; -0.46793264, 3.1573806, 7.881468; -0.36400062, 2.2148151, 8.712083; -0.22772983, 1.5395875, 9.4593725; -0.44071382, 2.6977859, 9.264019\",\n  \"-0.0, 0.0, 0.0; 1.1505595, -2.0321405, 1.0079769; 0.578236, -8.815544, 3.6012626; 1.818581, -16.12916, 1.7613785; 0.12223911, -17.641542, 3.0333624; -0.84726393, -17.798447, 3.8367822; -1.7614131, -1.5101562, 0.9646159; -2.541182, -8.518534, -0.5772144; -1.8968654, -12.888296, -6.9534316; -1.8026857, -15.442873, -7.529748; -1.8666685, -16.36356, -6.6450667; 0.52122843, 2.4433084, -0.131831; 1.336441, 4.825634, -0.14849728; 2.4167426, 7.133299, -0.13353175; 2.9813557, 8.61918, -0.028289743; 3.6839948, 9.900285, -0.6466287; 4.14171, 11.370874, -1.1886086; 5.6894855, 6.890085, -2.820969; 3.653677, 2.9180264, -4.984651; 3.353119, -0.391824, -5.390215; 3.1920104, -2.0468078, -5.5840836; 2.4946396, -2.9729729, -5.493523; 2.0252826, -3.7834263, -5.450245; 2.8540545, -3.2871904, -5.977676; -0.52154446, 9.280466, 1.831639; -2.5658705, 5.2951164, 3.904938; -1.2327967, 3.7369225, 6.3859997; -0.5662619, 2.957825, 7.6265287; -0.45805824, 1.9906988, 8.427848; -0.31920063, 1.2935917, 9.15428; -0.5399808, 2.455742, 8.994243\",\n  \"-0.0, 0.0, 0.0; 1.1520225, -2.032575, 1.0054268; 0.5862658, -8.823021, 3.5816665; 1.8155301, -16.138609, 1.7421908; 0.12572491, -17.649357, 3.0247731; -0.83950883, -17.804653, 3.8336277; -1.7603692, -1.5129275, 0.96217555; -2.571896, -8.518701, -0.57509786; -1.9616852, -12.900148, -6.94665; -1.8933936, -15.45657, -7.5184216; -1.9673885, -16.38792, -6.645765; 0.52258056, 2.442951, -0.13309482; 1.3318014, 4.8273287, -0.14820832; 2.395791, 7.142503, -0.12615472; 2.9477365, 8.632983, -0.018777147; 3.6417973, 9.917456, -0.63981324; 4.087874, 11.389029, -1.1887813; 5.6957016, 6.918577, -2.7818592; 3.7703447, 2.8767648, -4.917284; 3.5658138, -0.44424295, -5.290112; 3.4526613, -2.1050172, -5.4677005; 2.7833254, -3.052147, -5.382588; 2.3389416, -3.8766968, -5.342039; 3.1594048, -3.357151, -5.859928; -0.5760572, 9.2717085, 1.8078446; -2.6441188, 5.2088547, 3.6991906; -1.3270811, 3.5816069, 6.1442256; -0.66856396, 2.7679842, 7.366742; -0.5583197, 1.7785689, 8.140083; -0.41861513, 1.0614015, 8.846551; -0.6451981, 2.2264934, 8.719389\",\n  \"-0.0, 0.0, 0.0; 1.152961, -2.033355, 1.0027701; 0.5970294, -8.830746, 3.5627832; 1.8136723, -16.148077, 1.7218474; 0.12985027, -17.65439, 3.0174494; -0.8308767, -17.799002, 3.8336172; -1.7597165, -1.5152996, 0.9596333; -2.604067, -8.518702, -0.5707509; -2.0251658, -12.910879, -6.937835; -1.9814407, -15.469112, -7.5038795; -2.065135, -16.41113, -6.6436386; 0.52321535, 2.4426937, -0.1353048; 1.3257401, 4.82934, -0.14931001; 2.3733835, 7.15187, -0.119478844; 2.912867, 8.646717, -0.0095097795; 3.59803, 9.934577, -0.6334035; 4.031942, 11.407054, -1.189651; 5.700987, 6.947855, -2.7420247; 3.889368, 2.840241, -4.8512497; 3.7752185, -0.48912883, -5.1862; 3.707196, -2.1542678, -5.344935; 3.072619, -3.124889, -5.258242; 2.6587408, -3.9650269, -5.214919; 3.4647062, -3.4197035, -5.729058; -0.63222075, 9.262578, 1.7823642; -2.720407, 5.131695, 3.4958782; -1.4201114, 3.4395404, 5.9055595; -0.76996404, 2.5934653, 7.1103992; -0.6602027, 1.5841858, 7.8577013; -0.5217184, 0.84896046, 8.545604; -0.75239825, 2.0161164, 8.448224\",\n  \"-0.0, 0.0, 0.0; 1.1535697, -2.0338824, 1.0009983; 0.6085003, -8.838971, 3.5428314; 1.8140528, -16.157549, 1.6995574; 0.13872099, -17.661541, 3.0087905; -0.81652427, -17.799925, 3.832438; -1.759293, -1.516864, 0.95793736; -2.639554, -8.518056, -0.56229246; -2.0907512, -12.919999, -6.9252977; -2.0709467, -15.479839, -7.4853854; -2.1644063, -16.430588, -6.6358194; 0.52237296, 2.4427545, -0.13744898; 1.3165259, 4.832196, -0.15197462; 2.347081, 7.1623096, -0.11852748; 2.8741786, 8.661331, -0.0053571835; 3.5503101, 9.952443, -0.632374; 3.9720001, 11.425413, -1.1966562; 5.699061, 6.976223, -2.7111933; 3.9988306, 2.80753, -4.7931395; 3.9734051, -0.52751184, -5.087716; 3.9496965, -2.1956651, -5.226333; 3.358529, -3.1925313, -5.1310034; 2.9823358, -4.0497365, -5.079215; 3.7671196, -3.4757128, -5.594877; -0.69032264, 9.255674, 1.7517006; -2.7901485, 5.06112, 3.2870498; -1.5096382, 3.3071325, 5.662874; -0.86938465, 2.4301376, 6.850784; -0.7608857, 1.404718, 7.57597; -0.6240206, 0.65467083, 8.248013; -0.85696554, 1.823186, 8.1755\",\n  \"-0.0, 0.0, 0.0; 1.1539085, -2.0341918, 0.9999786; 0.62094253, -8.847078, 3.5234234; 1.8137002, -16.166979, 1.6770763; 0.1467098, -17.665134, 3.0035355; -0.80230576, -17.789242, 3.8366055; -1.7590568, -1.5177526, 0.95696217; -2.6762764, -8.516792, -0.5512813; -2.1482198, -12.926493, -6.9106693; -2.1485343, -15.488345, -7.461839; -2.251152, -16.443329, -6.6181; 0.5209542, 2.4428644, -0.14083451; 1.3058801, 4.8353486, -0.15612371; 2.3187113, 7.173151, -0.11812218; 2.8334596, 8.676272, -0.0025166273; 3.5005164, 9.970777, -0.6322532; 3.9099731, 11.444524, -1.2034736; 5.69503, 7.0071, -2.6803892; 4.1019754, 2.7802482, -4.729581; 4.169717, -0.55730724, -4.986604; 4.1925974, -2.2269251, -5.106458; 3.6511629, -3.250052, -4.99524; 3.3176777, -4.123815, -4.9294386; 4.074878, -3.5206482, -5.4530163; -0.7508013, 9.247379, 1.7207423; -2.858193, 4.9964414, 3.080623; -1.5984796, 3.185371, 5.4245224; -0.9686245, 2.2798352, 6.59647; -0.86263674, 1.241587, 7.3035483; -0.7284824, 0.47968328, 7.9626756; -0.9632185, 1.6489016, 7.9099817\",\n  \"-0.0, 0.0, 0.0; 1.1543815, -2.0344648, 0.99887663; 0.6357161, -8.855519, 3.503164; 1.8165587, -16.176764, 1.65449; 0.1605767, -17.672056, 2.99786; -0.781373, -17.790121, 3.8397803; -1.7587224, -1.5188049, 0.9559072; -2.7131946, -8.516114, -0.53717244; -2.2010374, -12.932267, -6.8933825; -2.2159655, -15.496783, -7.4318137; -2.3251033, -16.449364, -6.586178; 0.51843536, 2.443174, -0.14470632; 1.2931174, 4.8389835, -0.16166873; 2.2877386, 7.1845317, -0.12015125; 2.7914395, 8.691313, -0.003526032; 3.4489532, 9.98929, -0.6361436; 3.8449466, 11.46421, -1.2137929; 5.688538, 7.0381446, -2.6510503; 4.1984653, 2.756658, -4.663969; 4.3643985, -0.57979774, -4.888593; 4.436443, -2.2491064, -4.992184; 3.9466722, -3.2953436, -4.8586864; 3.6570344, -4.1830506, -4.7744837; 4.3814325, -3.553549, -5.313252; -0.8141737, 9.239652, 1.6854992; -2.9283478, 4.94106, 2.8742895; -1.6875161, 3.0784893, 5.187704; -1.0671003, 2.1472025, 6.3444076; -0.96428484, 1.0975938, 7.0349894; -0.8332784, 0.32510126, 7.6823196; -1.068782, 1.4948313, 7.6474137\",\n  \"-0.0, 0.0, 0.0; 1.1548386, -2.0346558, 0.99795943; 0.6528975, -8.864487, 3.4816484; 1.8203604, -16.187105, 1.6299195; 0.17672098, -17.67956, 2.9914804; -0.7573818, -17.789736, 3.8431563; -1.7583966, -1.5197339, 0.95502967; -2.7503202, -8.515692, -0.51986283; -2.2508843, -12.93656, -6.8738074; -2.277568, -15.50449, -7.395246; -2.3918245, -16.45006, -6.54245; 0.5148482, 2.4436722, -0.14903621; 1.278863, 4.842883, -0.16881856; 2.2561789, 7.195663, -0.12555411; 2.7486725, 8.705986, -0.006903857; 3.395923, 10.007665, -0.64249384; 3.7778673, 11.483598, -1.2269751; 5.6786046, 7.067115, -2.628111; 4.288375, 2.734805, -4.6033673; 4.5530243, -0.5972729, -4.7960925; 4.674534, -2.2646313, -4.883635; 4.2363625, -3.3298988, -4.723885; 3.9901283, -4.2283816, -4.618522; 4.6793447, -3.5767703, -5.176805; -0.8751817, 9.233113, 1.6490235; -2.9950616, 4.894784, 2.6716952; -1.7728903, 2.987914, 4.9588037; -1.1618052, 2.0344803, 6.1023564; -1.0605165, 0.973953, 6.7762814; -0.9313037, 0.19125402, 7.4116; -1.1686349, 1.3610115, 7.3945694\",\n  \"-0.0, 0.0, 0.0; 1.1555226, -2.0342693, 0.997955; 0.67091936, -8.873115, 3.46019; 1.8236547, -16.197573, 1.6065136; 0.19339764, -17.685837, 2.988595; -0.73196274, -17.785477, 3.8510442; -1.7578858, -1.5203272, 0.9550253; -2.7889047, -8.515269, -0.4977064; -2.3059745, -12.9402485, -6.8500648; -2.3484225, -15.512144, -7.35049; -2.4697173, -16.446741, -6.4866414; 0.5090144, 2.444613, -0.15357882; 1.2606692, 4.847699, -0.17623873; 2.2206833, 7.2075677, -0.13169196; 2.7035112, 8.720912, -0.011812285; 3.3400347, 10.026416, -0.6503833; 3.706651, 11.503729, -1.2411592; 5.6640816, 7.096799, -2.606172; 4.36918, 2.7192636, -4.546197; 4.728644, -0.60583186, -4.7025747; 4.8976593, -2.2699075, -4.7718487; 4.5166993, -3.352323, -4.5832887; 4.3182864, -4.259595, -4.454859; 4.9678507, -3.5865633, -5.0348506; -0.9394851, 9.227278, 1.611827; -3.0588515, 4.8538456, 2.4733505; -1.8552592, 2.9108644, 4.7398252; -1.2534633, 1.9393756, 5.873062; -1.1548654, 0.86850214, 6.530832; -1.028645, 0.07608801, 7.154604; -1.2683064, 1.2454944, 7.15436\",\n  \"-0.0, 0.0, 0.0; 1.1580473, -2.0328467, 0.99792784; 0.6923333, -8.881646, 3.4360235; 1.8286383, -16.20763, 1.5782424; 0.21436048, -17.690845, 2.9843; -0.7004615, -17.778215, 3.8592317; -1.7559971, -1.5225247, 0.9549997; -2.8287315, -8.516535, -0.47178125; -2.372486, -12.943876, -6.8244658; -2.4369678, -15.519903, -7.3007045; -2.5672264, -16.44262, -6.425464; 0.50173384, 2.445776, -0.15892461; 1.2404594, 4.852825, -0.1858027; 2.1831765, 7.21966, -0.14140339; 2.6573775, 8.7357645, -0.021966293; 3.2821848, 10.045121, -0.66420954; 3.632099, 11.52406, -1.2610149; 5.644642, 7.1265707, -2.5912821; 4.4390144, 2.7089334, -4.497647; 4.8909383, -0.6064594, -4.615387; 5.10629, -2.265872, -4.6652446; 4.791217, -3.3638723, -4.4474516; 4.6474986, -4.2778764, -4.2959747; 5.2503843, -3.5820327, -4.898989; -1.0036175, 9.221573, 1.573951; -3.1150594, 4.8175874, 2.2863932; -1.9281886, 2.8471284, 4.5379143; -1.3347535, 1.8618996, 5.663673; -1.2375411, 0.7813643, 6.305659; -1.1136919, -0.020091355, 6.918255; -1.3588575, 1.1480699, 6.933824\",\n  \"-0.0, 0.0, 0.0; 1.1607373, -2.0317552, 0.9970249; 0.7127777, -8.8904085, 3.4106216; 1.8337386, -16.21822, 1.5507207; 0.23788822, -17.69849, 2.9807146; -0.66572565, -17.779541, 3.8678174; -1.753996, -1.5253706, 0.95413494; -2.8706927, -8.518366, -0.44359386; -2.440593, -12.94799, -6.796511; -2.53353, -15.5279665, -7.245912; -2.6765764, -16.440498, -6.362032; 0.49274713, 2.447206, -0.16491571; 1.2170589, 4.858567, -0.19706286; 2.1419313, 7.232443, -0.1532816; 2.6077788, 8.751175, -0.034352213; 3.2206903, 10.064641, -0.6796589; 3.5534592, 11.545477, -1.2815459; 5.621967, 7.157301, -2.5773325; 4.504279, 2.702095, -4.44955; 5.0495753, -0.6003785, -4.528585; 5.311735, -2.2535152, -4.558978; 5.061938, -3.362382, -4.3133664; 4.9719825, -4.27943, -4.1403503; 5.5270076, -3.5643625, -4.766387; -1.0721152, 9.216078, 1.532201; -3.168875, 4.78466, 2.1040246; -1.9983563, 2.7952554, 4.347432; -1.4130976, 1.8005536, 5.469134; -1.3170199, 0.71083796, 6.0955853; -1.1957291, -0.099215746, 6.6972876; -1.4485599, 1.0670168, 6.7277365\",\n  \"-0.0, 0.0, 0.0; 1.1628352, -2.030542, 0.9970521; 0.738482, -8.899019, 3.3868637; 1.8399314, -16.228857, 1.523297; 0.26506102, -17.703815, 2.9817553; -0.62508976, -17.768322, 3.8837028; -1.7524176, -1.5271679, 0.9541612; -2.915052, -8.519867, -0.40711707; -2.518822, -12.953127, -6.759701; -2.6504364, -15.536194, -7.180794; -2.8110366, -16.44134, -6.292347; 0.4822743, 2.4489033, -0.17058182; 1.1911768, 4.864769, -0.20763761; 2.099111, 7.245194, -0.16494475; 2.557319, 8.766488, -0.04912415; 3.1571875, 10.083677, -0.69908154; 3.4717526, 11.566307, -1.3063166; 5.594309, 7.1877446, -2.56757; 4.5607214, 2.6989846, -4.4076824; 5.197023, -0.5878866, -4.4467363; 5.504823, -2.2333853, -4.457007; 5.3126745, -3.3477817, -4.185881; 5.2697387, -4.264448, -3.9938314; 5.779193, -3.536361, -4.643171; -1.138974, 9.210894, 1.4953505; -3.218094, 4.756513, 1.9387419; -2.0627272, 2.7515383, 4.176134; -1.4850442, 1.7490517, 5.2948284; -1.388454, 0.65049136, 5.9055557; -1.2686204, -0.16786146, 6.496218; -1.5314245, 0.99568903, 6.5413084\",\n  \"-0.0, 0.0, 0.0; 1.1648172, -2.0292912, 0.9972849; 0.7676797, -8.907087, 3.36487; 1.8516188, -16.23898, 1.4991181; 0.3007306, -17.709799, 2.9871545; -0.57481915, -17.762356, 3.9040456; -1.7509215, -1.5287433, 0.95438385; -2.959456, -8.521971, -0.3635137; -2.6039498, -12.9609375, -6.7145224; -2.7837741, -15.545917, -7.1049337; -2.966317, -16.445093, -6.2146635; 0.47180226, 2.4506357, -0.1749325; 1.1653678, 4.8708744, -0.21658282; 2.0566895, 7.257617, -0.17662542; 2.5072248, 8.781458, -0.06422872; 3.092879, 10.10276, -0.7187857; 3.388001, 11.587437, -1.3307636; 5.565302, 7.2165594, -2.559957; 4.616009, 2.6976342, -4.3714323; 5.340199, -0.57122993, -4.36929; 5.6920857, -2.2078662, -4.358822; 5.550732, -3.3225777, -4.0592446; 5.5488796, -4.235567, -3.8460531; 6.015854, -3.5026388, -4.5213656; -1.2038577, 9.206269, 1.4596319; -3.2660046, 4.7337947, 1.784237; -2.1257331, 2.7146401, 4.0166163; -1.555598, 1.7050637, 5.1328044; -1.456628, 0.5995852, 5.730529; -1.3369747, -0.2252289, 6.3121715; -1.6121938, 0.93495274, 6.3685803\",\n  \"-0.0, 0.0, 0.0; 1.1673077, -2.0278966, 0.99720955; 0.80116874, -8.914423, 3.3443234; 1.8675745, -16.24873, 1.477961; 0.3437717, -17.716354, 2.9968157; -0.51586616, -17.758415, 3.929174; -1.7490456, -1.5309342, 0.95431226; -3.0014608, -8.525395, -0.31517917; -2.6907234, -12.9727125, -6.6626925; -2.9266098, -15.558175, -7.018522; -3.134771, -16.448345, -6.1248307; 0.4627119, 2.45203, -0.1796124; 1.1415098, 4.8763757, -0.22548445; 2.0147798, 7.269802, -0.18673159; 2.4578, 8.796182, -0.07901112; 3.0288684, 10.121571, -0.7381783; 3.3038495, 11.608497, -1.3540623; 5.5383453, 7.248313, -2.5481591; 4.6699286, 2.7028356, -4.333591; 5.477856, -0.5460601, -4.2905107; 5.8717628, -2.172831, -4.259428; 5.781757, -3.2834368, -3.9266174; 5.8211713, -4.1894403, -3.6886923; 6.244011, -3.4577665, -4.3937855; -1.2702854, 9.198606, 1.4238005; -3.3214285, 4.7144527, 1.6383399; -2.1976933, 2.678297, 3.8636508; -1.6358259, 1.6602207, 4.976305; -1.5337663, 0.55015314, 5.5649357; -1.4139535, -0.2788924, 6.140498; -1.7031512, 0.87753737, 6.2036133\",\n  \"-0.0, 0.0, 0.0; 1.1695, -2.0265145, 0.99745065; 0.83446634, -8.921204, 3.3251686; 1.8853809, -16.258493, 1.4617401; 0.39029717, -17.724974, 3.0099585; -0.4534474, -17.761787, 3.9569423; -1.7473848, -1.532686, 0.95454264; -3.0410495, -8.52799, -0.268072; -2.7749124, -12.9845085, -6.611158; -3.0744305, -15.568436, -6.9281454; -3.3120599, -16.445217, -6.0285864; 0.45359623, 2.4534266, -0.18374617; 1.118447, 4.8815675, -0.23301822; 1.9754972, 7.28086, -0.19490431; 2.411322, 8.809656, -0.09222516; 2.9680023, 10.139096, -0.7555278; 3.2230818, 11.628288, -1.3744943; 5.515664, 7.27629, -2.531465; 4.728784, 2.7081451, -4.29673; 5.61671, -0.518903, -4.209131; 6.0507426, -2.1348453, -4.1556625; 6.0102983, -3.2384648, -3.791386; 6.0893474, -4.1354265, -3.5302057; 6.469216, -3.4079962, -4.263582; -1.33357, 9.192196, 1.3870634; -3.37949, 4.7018275, 1.4950172; -2.2762313, 2.6468127, 3.7132268; -1.7246016, 1.6193044, 4.8223276; -1.6176765, 0.5064776, 5.4048533; -1.4964662, -0.32503527, 5.976551; -1.8017734, 0.8270642, 6.0429087\",\n  \"-0.0, 0.0, 0.0; 1.1714966, -2.0253384, 0.99749625; 0.8677118, -8.928273, 3.3049755; 1.9057031, -16.268578, 1.4461863; 0.4387604, -17.733025, 3.0229836; -0.38937318, -17.761717, 3.9839258; -1.745874, -1.53438, 0.9545861; -3.0770917, -8.530399, -0.22278947; -2.8530235, -13.000084, -6.558232; -3.2190907, -15.580261, -6.8331013; -3.4874158, -16.441849, -5.9275136; 0.44547015, 2.4545977, -0.18793684; 1.0973179, 4.8861775, -0.24120645; 1.9385641, 7.2910824, -0.20473959; 2.3656797, 8.822654, -0.10694197; 2.9082925, 10.156042, -0.773967; 3.1444712, 11.647078, -1.3959888; 5.496125, 7.3017015, -2.51471; 4.794472, 2.7131019, -4.2627716; 5.7599535, -0.49013758, -4.132272; 6.232889, -2.0942616, -4.057236; 6.238187, -3.1882486, -3.6629348; 6.3536053, -4.074521, -3.3797328; 6.6929073, -3.354889, -4.1401935; -1.3945432, 9.18618, 1.3459862; -3.4344847, 4.6918015, 1.3528142; -2.3496444, 2.623992, 3.5682158; -1.8072245, 1.5900884, 4.6759152; -1.694865, 0.47428286, 5.251681; -1.5710437, -0.3600052, 5.818757; -1.8890413, 0.7883646, 5.889983\",\n  \"-0.0, 0.0, 0.0; 1.1733935, -2.024209, 0.9975594; 0.9023001, -8.935798, 3.2831006; 1.9293371, -16.27893, 1.4294069; 0.49137914, -17.74115, 3.0347128; -0.32079, -17.76021, 4.0094213; -1.7444353, -1.5359775, 0.95464694; -3.111374, -8.532038, -0.18080914; -2.9312792, -13.0189705, -6.505452; -3.3659413, -15.593044, -6.733676; -3.6647449, -16.438547, -5.8224893; 0.44053748, 2.455007, -0.19411454; 1.0807402, 4.889555, -0.25277117; 1.9037969, 7.300765, -0.21762575; 2.3205385, 8.835511, -0.124969095; 2.8494236, 10.172691, -0.7954196; 3.0673397, 11.665251, -1.4204435; 5.4815826, 7.3295608, -2.4959888; 4.8639364, 2.7234907, -4.2297473; 5.904649, -0.4538505, -4.0526986; 6.4153085, -2.0450938, -3.9542904; 6.463024, -3.127467, -3.531797; 6.61203, -4.00182, -3.227975; 6.9135175, -3.292471, -4.013612; -1.4569113, 9.176566, 1.2965615; -3.495606, 4.6825933, 1.2028394; -2.4310694, 2.6032119, 3.417259; -1.8988014, 1.5635213, 4.5244665; -1.7810405, 0.4454993, 5.0948277; -1.6547804, -0.3908496, 5.658319; -1.9860629, 0.75355947, 5.732674\",\n  \"-0.0, 0.0, 0.0; 1.1754497, -2.023056, 0.9974776; 0.9377127, -8.943232, 3.260638; 1.9536846, -16.28955, 1.4134727; 0.54605985, -17.751545, 3.0456445; -0.2501102, -17.765783, 4.033546; -1.7428734, -1.537798, 0.9545684; -3.1432395, -8.533477, -0.14183176; -3.0092518, -13.042368, -6.4519877; -3.507945, -15.608697, -6.6312504; -3.8334744, -16.440357, -5.716488; 0.43493775, 2.4555702, -0.1995437; 1.0636083, 4.8929806, -0.26379114; 1.8695961, 7.30999, -0.23151125; 2.275611, 8.847933, -0.14439818; 2.791111, 10.188761, -0.8179829; 2.9913735, 11.682608, -1.4458325; 5.4679637, 7.3539796, -2.4769804; 4.935081, 2.7335453, -4.200613; 6.047664, -0.41603422, -3.9720664; 6.5943303, -1.9934496, -3.8478522; 6.6830325, -3.0629063, -3.3998525; 6.864471, -3.924319, -3.0772817; 7.1306605, -3.225785, -3.8850498; -1.5178415, 9.168789, 1.2435766; -3.5566254, 4.6783066, 1.0441425; -2.5143154, 2.5901482, 3.2608757; -1.9931612, 1.5460703, 4.3692408; -1.8694973, 0.4267193, 4.935733; -1.7406143, -0.41084784, 5.4968157; -2.086507, 0.7291561, 5.572302\",\n  \"-0.0, 0.0, 0.0; 1.17775, -2.0219765, 0.9969531; 0.9744501, -8.95117, 3.2357454; 1.9813124, -16.300655, 1.3962046; 0.60416365, -17.762459, 3.0543396; -0.17619747, -17.77349, 4.0548162; -1.741131, -1.5400819, 0.9540661; -3.171751, -8.53507, -0.1071139; -3.0895054, -13.069057, -6.400151; -3.647288, -15.626293, -6.5278068; -3.995285, -16.446207, -5.610714; 0.43119803, 2.4556663, -0.2063634; 1.0493206, 4.8955684, -0.27795762; 1.8370123, 7.3186507, -0.24958919; 2.2303267, 8.86013, -0.16682756; 2.7329311, 10.204436, -0.8432182; 2.9168036, 11.69894, -1.4745091; 5.4572034, 7.3785605, -2.459328; 5.0145893, 2.7481022, -4.1816034; 6.191011, -0.37278914, -3.888349; 6.769571, -1.9358879, -3.7318149; 6.8960924, -2.991802, -3.2613397; 7.107555, -3.839749, -2.9218209; 7.343758, -3.1515117, -3.747553; -1.5786707, 9.159281, 1.1825219; -3.6177447, 4.6749096, 0.8768445; -2.5972404, 2.5818732, 3.0991158; -2.086989, 1.5353563, 4.21025; -1.9599233, 0.41503525, 4.774065; -1.830431, -0.42344207, 5.3336463; -2.1889458, 0.7126855, 5.408681\",\n  \"-0.0, 0.0, 0.0; 1.180194, -2.02085, 0.99634635; 1.0134188, -8.959287, 3.2093835; 2.0084186, -16.312218, 1.3771796; 0.66259015, -17.772526, 3.0621314; -0.10100126, -17.775934, 4.0755196; -1.7392757, -1.5425354, 0.95348585; -3.1982148, -8.536641, -0.07444072; -3.1718526, -13.099824, -6.3468237; -3.7835371, -15.646803, -6.421743; -4.1507096, -16.461222, -5.507234; 0.4271972, 2.4557106, -0.214012; 1.0349777, 4.8979473, -0.2940559; 1.8051325, 7.3267117, -0.27046034; 2.185306, 8.871667, -0.19117549; 2.6751385, 10.219606, -0.8697015; 2.8432503, 11.714745, -1.5038751; 5.445919, 7.401416, -2.4456406; 5.0998363, 2.765171, -4.1744404; 6.3351407, -0.3251953, -3.8089466; 6.9430504, -1.8730592, -3.6163964; 7.1030006, -2.9143388, -3.1239924; 7.341143, -3.7480223, -2.767252; 7.5538692, -3.0707715, -3.6083078; -1.6371692, 9.150036, 1.119431; -3.6755724, 4.6734385, 0.71220106; -2.6770234, 2.5764987, 2.9407578; -2.1777494, 1.5280291, 4.0550337; -2.0476084, 0.40701818, 4.6167727; -1.917408, -0.43212748, 5.1751866; -2.286482, 0.7006533, 5.2496233\",\n  \"-0.0, 0.0, 0.0; 1.1830201, -2.0194447, 0.995844; 1.0520043, -8.967362, 3.1813707; 2.03718, -16.32386, 1.3581909; 0.7226027, -17.782816, 3.0687919; -0.024526358, -17.778625, 4.094374; -1.7371238, -1.5452553, 0.9530049; -3.2223802, -8.538289, -0.044061124; -3.256612, -13.134252, -6.2924266; -3.9197702, -15.669352, -6.3115363; -4.3044314, -16.482878, -5.403445; 0.42418864, 2.4556248, -0.22087309; 1.0216255, 4.9001045, -0.3098233; 1.7723178, 7.3350134, -0.2933353; 2.1378844, 8.8836975, -0.2182154; 2.6157808, 10.23552, -0.8975277; 2.76969, 11.731682, -1.5328937; 5.4350915, 7.425245, -2.430685; 5.1811843, 2.784741, -4.164046; 6.4755716, -0.27217674, -3.7284534; 7.1129293, -1.8033651, -3.5009675; 7.3008366, -2.8287106, -2.985539; 7.561451, -3.6472926, -2.6100297; 7.7577295, -2.9826107, -3.4649968; -1.698687, 9.13945, 1.0490078; -3.7354703, 4.6718054, 0.54650545; -2.7596283, 2.5709882, 2.7814596; -2.2717075, 1.5205809, 3.8989353; -2.1395705, 0.39911664, 4.4593015; -2.0096686, -0.4404835, 5.0171013; -2.3890526, 0.6890004, 5.0897837\",\n  \"-0.0, 0.0, 0.0; 1.1856897, -2.0182848, 0.9950201; 1.0897988, -8.975422, 3.152863; 2.0684063, -16.335798, 1.3418424; 0.7854754, -17.7956, 3.0755901; 0.053944826, -17.792238, 4.112359; -1.7350904, -1.5480237, 0.9522161; -3.2432299, -8.540251, -0.015729189; -3.3411186, -13.171727, -6.2371407; -4.050763, -15.693953, -6.196382; -4.4494853, -16.504557, -5.2917485; 0.42149314, 2.4554224, -0.22816329; 1.0085155, 4.902087, -0.32593745; 1.7391932, 7.34311, -0.31545615; 2.0905185, 8.895228, -0.24331972; 2.557104, 10.250759, -0.92310596; 2.6974611, 11.747726, -1.5597104; 5.423314, 7.4513354, -2.4149463; 5.250634, 2.803238, -4.1379247; 6.6085057, -0.21701312, -3.6437643; 7.277564, -1.7299501, -3.3870645; 7.488378, -2.7375183, -2.8460722; 7.7676067, -3.5396528, -2.449064; 7.9543056, -2.8896208, -3.317337; -1.7602315, 9.126575, 0.98031676; -3.7946215, 4.6684976, 0.39070427; -2.8444564, 2.565495, 2.6346488; -2.369374, 1.5139945, 3.756619; -2.2359054, 0.39215684, 4.3159213; -2.1070201, -0.44783944, 4.8733606; -2.4969687, 0.6782045, 4.943461\",\n  \"-0.0, 0.0, 0.0; 1.1892859, -2.0163946, 0.9945604; 1.1300604, -8.982321, 3.1251955; 2.0986948, -16.347351, 1.3277881; 0.8469697, -17.808178, 3.0833468; 0.13101244, -17.80292, 4.1309233; -1.7323334, -1.5513779, 0.9517766; -3.2595057, -8.542859, 0.008598745; -3.421959, -13.211706, -6.18346; -4.171795, -15.720436, -6.079086; -4.580611, -16.524769, -5.1733613; 0.41922554, 2.4551365, -0.23530617; 0.996789, 4.903699, -0.3415365; 1.7081083, 7.3504505, -0.3368134; 2.0448732, 8.905927, -0.26762104; 2.500295, 10.265385, -0.94713557; 2.6275651, 11.763417, -1.5839849; 5.4131784, 7.476466, -2.3980975; 5.3175125, 2.816412, -4.0945725; 6.745166, -0.16305232, -3.5518708; 7.449117, -1.655713, -3.2709281; 7.6772885, -2.64429, -2.7026303; 7.9708443, -3.429119, -2.282069; 8.154907, -2.7949195, -3.1625278; -1.8186818, 9.113151, 0.91234297; -3.846921, 4.664728, 0.23512006; -2.9261453, 2.5612814, 2.4908695; -2.4657586, 1.5095598, 3.6187432; -2.331309, 0.38803208, 4.178432; -2.204104, -0.45170778, 4.736643; -2.6059601, 0.6704393, 4.8018055\",\n  \"-0.0, 0.0, 0.0; 1.1926081, -2.0147963, 0.9938211; 1.1681827, -8.989321, 3.096834; 2.1295216, -16.359077, 1.3149484; 0.907729, -17.818504, 3.0926194; 0.2070288, -17.804737, 4.150385; -1.7297827, -1.5546542, 0.9510693; -3.272241, -8.5458, 0.030554175; -3.499124, -13.254677, -6.1290817; -4.280809, -15.75, -5.95819; -4.6944857, -16.541637, -5.04353; 0.41659313, 2.4549212, -0.24212721; 0.9844086, 4.9054065, -0.35627818; 1.6765199, 7.357665, -0.35652587; 1.9919634, 8.9179535, -0.29569545; 2.4451206, 10.283679, -0.96406496; 2.56, 11.78281, -1.6006863; 5.402253, 7.5024137, -2.3789697; 5.388806, 2.831222, -4.047225; 6.8796816, -0.10722923, -3.4533238; 7.61524, -1.5794793, -3.1468182; 7.8600774, -2.5483203, -2.5520823; 8.167248, -3.315362, -2.1090276; 8.347647, -2.697622, -3.00186; -1.8770335, 9.098862, 0.84607303; -3.8953335, 4.6599536, 0.08226138; -3.0092435, 2.5573504, 2.3526413; -2.5661993, 1.5060502, 3.4878302; -2.4295466, 0.38620067, 4.0503383; -2.303253, -0.45195866, 4.611126; -2.7187288, 0.6656469, 4.668455\",\n  \"-0.0, 0.0, 0.0; 1.195554, -2.0130563, 0.9938079; 1.2045461, -8.995897, 3.069162; 2.1598704, -16.370672, 1.3048882; 0.96743894, -17.82946, 3.1029043; 0.28127944, -17.810234, 4.1700754; -1.7275078, -1.5571897, 0.9510565; -3.2825756, -8.547998, 0.04938948; -3.5789533, -13.298294, -6.0753927; -4.3853226, -15.779976, -5.83477; -4.7991242, -16.557213, -4.9078994; 0.41220808, 2.4550521, -0.24823113; 0.96922886, 4.9076414, -0.37011868; 1.6431751, 7.364946, -0.37666112; 1.9463568, 8.927688, -0.31647074; 2.3893478, 10.297233, -0.9838382; 2.4917243, 11.797153, -1.6207323; 5.386999, 7.52689, -2.364089; 5.457201, 2.8463988, -4.0046244; 7.0001855, -0.054271936, -3.360238; 7.7618084, -1.5076783, -3.028496; 8.027091, -2.4551692, -2.4086614; 8.350481, -3.2034535, -1.9455271; 8.518955, -2.604865, -2.8536043; -1.934536, 9.085892, 0.78268355; -3.939886, 4.656659, -0.06661993; -3.0902157, 2.5569115, 2.2202642; -2.6653798, 1.5070395, 3.3637052; -2.5273962, 0.39023483, 3.9319131; -2.4029336, -0.44502264, 4.4974194; -2.8321464, 0.66791016, 4.5433097\",\n  \"-0.0, 0.0, 0.0; 1.199013, -2.0110364, 0.9937302; 1.2416878, -9.001298, 3.0435286; 2.1915517, -16.381374, 1.2985784; 1.0277611, -17.839691, 3.1156425; 0.35560918, -17.815115, 4.1915827; -1.7248288, -1.5602018, 0.9509823; -3.2884405, -8.551086, 0.064816296; -3.6503768, -13.344938, -6.022392; -4.4768333, -15.812017, -5.7103596; -4.8887377, -16.572802, -4.7691035; 0.40848663, 2.4549527, -0.25526524; 0.9558176, 4.909381, -0.38384897; 1.6123915, 7.371376, -0.39297247; 1.9026148, 8.936605, -0.33352977; 2.335967, 10.30972, -0.9998907; 2.4270508, 11.810339, -1.6368564; 5.3747983, 7.552525, -2.3433042; 5.529681, 2.8631554, -3.9523745; 7.1247945, 0.002048254, -3.259837; 7.912504, -1.4316254, -2.9040203; 8.19533, -2.3567598, -2.2586946; 8.532661, -3.085625, -1.7749934; 8.692199, -2.5073578, -2.6977346; -1.9889014, 9.071143, 0.7238232; -3.9806566, 4.6528497, -0.21022165; -3.1696546, 2.5579474, 2.0950723; -2.764154, 1.5104972, 3.2477179; -2.6239462, 0.39728022, 3.822385; -2.500659, -0.43458837, 4.3931203; -2.9443424, 0.67310053, 4.4265804\",\n  \"-0.0, 0.0, 0.0; 1.2024499, -2.0090706, 0.9935531; 1.2770687, -9.006255, 3.0186687; 2.2236848, -16.390944, 1.2915598; 1.0881712, -17.848976, 3.1266527; 0.4296273, -17.822361, 4.210927; -1.7221609, -1.5632495, 0.95081294; -3.2907863, -8.554552, 0.076886654; -3.7208762, -13.393645, -5.969957; -4.5638957, -15.844685, -5.5844736; -4.972061, -16.589426, -4.628869; 0.4050478, 2.454734, -0.26273638; 0.9424716, 4.9109726, -0.39835012; 1.5807254, 7.3777695, -0.40997615; 1.8588653, 8.945218, -0.35124934; 2.2830472, 10.32216, -1.0156102; 2.362772, 11.823904, -1.6514454; 5.362172, 7.5797873, -2.3210397; 5.5980625, 2.8837605, -3.9005895; 7.24185, 0.0635097, -3.156227; 8.053889, -1.349787, -2.7745252; 8.354151, -2.252689, -2.106004; 8.705337, -2.9619434, -1.6033804; 8.857067, -2.4018898, -2.5385885; -2.044797, 9.054674, 0.66209185; -4.020755, 4.647105, -0.35268545; -3.2470174, 2.5575848, 1.9702342; -2.8601499, 1.5128254, 3.1316924; -2.7200665, 0.40281117, 3.712552; -2.599819, -0.42606288, 4.288271; -3.0559027, 0.67688876, 4.3091063\",\n  \"-0.0, 0.0, 0.0; 1.20578, -2.0069706, 0.99376184; 1.3120347, -9.009318, 2.999527; 2.2552347, -16.398737, 1.2908849; 1.1460965, -17.855652, 3.142918; 0.50046146, -17.820362, 4.234682; -1.719563, -1.565985, 0.95101273; -3.290975, -8.557918, 0.08719087; -3.7880597, -13.445366, -5.9154634; -4.643404, -15.879177, -5.455221; -5.0453486, -16.603167, -4.4812093; 0.4014317, 2.4544783, -0.27056053; 0.92836356, 4.9126663, -0.41190928; 1.5473835, 7.384362, -0.4231003; 1.8147416, 8.953681, -0.36426264; 2.2312212, 10.333749, -1.0270088; 2.3007514, 11.8361, -1.6626083; 5.348606, 7.610982, -2.2917004; 5.6616745, 2.911447, -3.8472204; 7.350158, 0.13453841, -3.042406; 8.184494, -1.2571427, -2.630556; 8.503408, -2.1391454, -1.9430432; 8.869373, -2.8293438, -1.4246812; 9.013346, -2.2829885, -2.3691726; -2.1031, 9.035585, 0.60314626; -4.0627356, 4.6394815, -0.48999113; -3.3252306, 2.557796, 1.8516731; -2.9564784, 1.5169538, 3.0225034; -2.81858, 0.40908194, 3.6079574; -2.703139, -0.41786504, 4.187419; -3.1703084, 0.6805973, 4.196472\",\n  \"-0.0, 0.0, 0.0; 1.2092633, -2.0048892, 0.99373; 1.3454639, -9.011642, 2.9822245; 2.2880335, -16.40474, 1.2892121; 1.2063466, -17.860762, 3.1581073; 0.5739518, -17.819384, 4.2573814; -1.7168418, -1.5689865, 0.95098186; -3.2886863, -8.561765, 0.09482324; -3.8558455, -13.499388, -5.86037; -4.718487, -15.915084, -5.324519; -5.110998, -16.615387, -4.329567; 0.3965636, 2.4542215, -0.2799091; 0.91211313, 4.914427, -0.42796594; 1.5120034, 7.39084, -0.43803325; 1.7720904, 8.961247, -0.37574443; 2.1721575, 10.344793, -1.0413427; 2.2299829, 11.848029, -1.6760213; 5.3312416, 7.6430387, -2.2661824; 5.718842, 2.941978, -3.800158; 7.448014, 0.21029997, -2.929626; 8.302619, -1.1588178, -2.4850159; 8.634267, -2.0218577, -1.7796926; 9.010359, -2.6949143, -1.2462573; 9.151575, -2.161207, -2.1983657; -2.1620276, 9.015784, 0.54522824; -4.105716, 4.632238, -0.6241487; -3.3992527, 2.5602958, 1.7356576; -3.0460212, 1.5243256, 2.9155588; -2.9123728, 0.41834795, 3.5055623; -2.8034494, -0.4069159, 4.0886736; -3.28013, 0.68748486, 4.085306\",\n  \"-0.0, 0.0, 0.0; 1.2126462, -2.002503, 0.9944194; 1.3777726, -9.012165, 2.9704323; 2.3211427, -16.408318, 1.2912681; 1.2659268, -17.863958, 3.1755319; 0.6461323, -17.816628, 4.28172; -1.714183, -1.5714915, 0.95164186; -3.2841463, -8.56533, 0.100708604; -3.9211645, -13.556135, -5.802865; -4.783666, -15.95366, -5.1906233; -5.1624017, -16.62637, -4.1715837; 0.3915787, 2.4541118, -0.28777686; 0.8955332, 4.916361, -0.44166932; 1.4761856, 7.397355, -0.4517783; 1.7271007, 8.969258, -0.389594; 2.1195982, 10.356173, -1.0526847; 2.1671872, 11.860606, -1.6853714; 5.312193, 7.6749077, -2.240724; 5.7738285, 2.97189, -3.7479722; 7.5427065, 0.28678298, -2.8145928; 8.417108, -1.059101, -2.3386402; 8.754867, -1.9049816, -1.6156505; 9.135905, -2.5628743, -1.0670244; 9.279608, -2.041905, -2.0257928; -2.2204435, 8.99594, 0.48907846; -4.149109, 4.625813, -0.7531318; -3.4711099, 2.5648952, 1.6246095; -3.132111, 1.5344379, 2.8134794; -3.0039496, 0.4300326, 3.407631; -2.9026513, -0.39387715, 3.9940224; -3.3881226, 0.6965381, 3.977867\",\n  \"-0.0, 0.0, 0.0; 1.2159743, -2.000171, 0.9950486; 1.4103966, -9.011625, 2.9620144; 2.3559601, -16.410143, 1.2945477; 1.3262134, -17.864784, 3.193616; 0.71859735, -17.810116, 4.3062043; -1.7115606, -1.5739832, 0.9522436; -3.2773242, -8.569033, 0.103536546; -3.9812727, -13.61524, -5.745084; -4.838301, -15.99386, -5.056213; -5.2006793, -16.636757, -4.0122843; 0.3855672, 2.454007, -0.29665247; 0.8778535, 4.918243, -0.45639753; 1.4408226, 7.4033155, -0.46486333; 1.6845338, 8.976401, -0.4039551; 2.069746, 10.366835, -1.0639406; 2.106906, 11.873101, -1.6929542; 5.2924476, 7.7054825, -2.2158616; 5.829872, 3.0013428, -3.6942163; 7.635231, 0.36297798, -2.6994116; 8.527827, -0.95957637, -2.1928205; 8.87103, -1.7881005, -1.4525037; 9.25642, -2.4308884, -0.8892082; 9.402006, -1.9236207, -1.8550138; -2.2763667, 8.976875, 0.4363381; -4.1914444, 4.6198454, -0.87118447; -3.5399957, 2.5720296, 1.5252262; -3.214272, 1.5481226, 2.7234302; -3.0920389, 0.44525397, 3.321671; -2.9985294, -0.37733185, 3.9112065; -3.4914448, 0.70947766, 3.8824244\",\n  \"-0.0, 0.0, 0.0; 1.2192171, -1.9979165, 0.9956093; 1.4404852, -9.010304, 2.9563997; 2.3903034, -16.411034, 1.3012092; 1.3856195, -17.864779, 3.2143357; 0.78970945, -17.804344, 4.332941; -1.7089989, -1.5764405, 0.9527804; -3.2703457, -8.57253, 0.10450113; -4.0387435, -13.676925, -5.6852174; -4.885649, -16.035938, -4.9205723; -5.229012, -16.644703, -3.850092; 0.37719947, 2.4543746, -0.3042702; 0.8570139, 4.920744, -0.46895856; 1.4045686, 7.4092627, -0.47587687; 1.6428299, 8.983199, -0.41538024; 2.0209565, 10.377115, -1.0721086; 2.047451, 11.885098, -1.6975393; 5.2702436, 7.732966, -2.1917114; 5.8669877, 3.0215673, -3.6234593; 7.7125144, 0.42970705, -2.581242; 8.625223, -0.86961246, -2.050918; 8.976557, -1.6803609, -1.2949018; 9.368291, -2.307899, -0.71892935; 9.51111, -1.8154612, -1.6927896; -2.330501, 8.96089, 0.38868123; -4.231305, 4.6168227, -0.9813089; -3.60713, 2.5822697, 1.4335861; -3.2950435, 1.5649935, 2.641032; -3.177259, 0.46450555, 3.2445266; -3.0901594, -0.35595196, 3.8379967; -3.5906887, 0.72693545, 3.795877\",\n  \"-0.0, 0.0, 0.0; 1.2225666, -1.9957155, 0.9959162; 1.469736, -9.008598, 2.9518375; 2.4258122, -16.411036, 1.3079323; 1.444849, -17.862492, 3.2350554; 0.86009264, -17.792137, 4.3589544; -1.7063502, -1.5791298, 0.95307374; -3.2601259, -8.576663, 0.10280335; -4.0951304, -13.738848, -5.626134; -4.9299216, -16.076351, -4.7858515; -5.2540464, -16.654161, -3.6924636; 0.36918586, 2.4545743, -0.3123798; 0.8371273, 4.9228535, -0.48253578; 1.3698995, 7.414583, -0.48797262; 1.6030132, 8.989364, -0.4294064; 1.9740343, 10.386997, -1.0822763; 1.9900026, 11.897315, -1.7024076; 5.2483706, 7.759159, -2.1705437; 5.891032, 3.0345416, -3.537388; 7.7797594, 0.48974204, -2.457281; 8.714165, -0.7860249, -1.9079021; 9.068186, -1.5781815, -1.1336502; 9.462041, -2.1905966, -0.54303235; 9.605569, -1.7173883, -1.526277; -2.3817246, 8.945, 0.34202313; -4.2662334, 4.613327, -1.088391; -3.6707478, 2.5913248, 1.344226; -3.3730047, 1.5803254, 2.560533; -3.259021, 0.48276925, 3.1700664; -3.177594, -0.33502907, 3.7679954; -3.6852078, 0.7439365, 3.7122269\",\n  \"-0.0, 0.0, 0.0; 1.2258309, -1.9933921, 0.9965568; 1.4965345, -9.006324, 2.9491868; 2.4634905, -16.409742, 1.3160971; 1.5066446, -17.859869, 3.2563033; 0.9326086, -17.783438, 4.3853207; -1.7037562, -1.5815586, 0.9536869; -3.2499466, -8.580433, 0.10063577; -4.147404, -13.802712, -5.5640345; -4.9689136, -16.117046, -4.649785; -5.2723536, -16.656082, -3.5309534; 0.3601333, 2.4549646, -0.31979287; 0.81585646, 4.925171, -0.49506882; 1.3349857, 7.41978, -0.49966705; 1.5628093, 8.9953575, -0.44174263; 1.9271601, 10.3967285, -1.0903422; 1.9335486, 11.909297, -1.7051381; 5.224334, 7.783525, -2.1528392; 5.913517, 3.0469851, -3.454184; 7.841247, 0.5500839, -2.3320131; 8.795227, -0.70170045, -1.7615128; 9.153128, -1.4739046, -0.9691008; 9.55001, -2.0699606, -0.36395139; 9.693428, -1.616501, -1.3564744; -2.431243, 8.930619, 0.29948223; -4.2997255, 4.611475, -1.1886756; -3.7333174, 2.6026177, 1.2617109; -3.4501128, 1.5981891, 2.4869018; -3.3377483, 0.5049405, 3.1044245; -3.2599423, -0.308886, 3.7082262; -3.775032, 0.7656761, 3.6378877\",\n  \"-0.0, 0.0, 0.0; 1.2298683, -1.9906657, 0.9970318; 1.5235993, -9.002845, 2.9490368; 2.5006092, -16.40758, 1.3279425; 1.5662905, -17.855001, 3.2811034; 1.0024534, -17.765549, 4.4142957; -1.7005433, -1.5847387, 0.954142; -3.23739, -8.585089, 0.096325874; -4.194228, -13.86738, -5.5026007; -5.000635, -16.158047, -4.5180054; -5.2827168, -16.656761, -3.3751433; 0.35081512, 2.455448, -0.3263725; 0.7949047, 4.9274116, -0.5066571; 1.3015375, 7.424588, -0.5114098; 1.5232778, 9.000989, -0.45227242; 1.8814683, 10.4062, -1.095976; 1.8795264, 11.920896, -1.7055424; 5.200979, 7.8053265, -2.1367435; 5.9382625, 3.057478, -3.3686652; 7.9049463, 0.6109874, -2.2038622; 8.878466, -0.615569, -1.6119727; 9.238817, -1.367377, -0.8012689; 9.637633, -1.9464281, -0.18106776; 9.783771, -1.5115469, -1.1814771; -2.4779549, 8.917709, 0.25786185; -4.326415, 4.610344, -1.2883097; -3.7905211, 2.615455, 1.1802844; -3.5225742, 1.6180106, 2.414579; -3.4100974, 0.52925813, 3.0399742; -3.334471, -0.28047907, 3.649523; -3.8580294, 0.788959, 3.5650387\",\n  \"-0.0, 0.0, 0.0; 1.2327712, -1.9886993, 0.99737144; 1.5491645, -8.999442, 2.9509902; 2.5387592, -16.40514, 1.341969; 1.6266465, -17.850353, 3.3072248; 1.0724468, -17.750532, 4.4442987; -1.6982268, -1.5870258, 0.9544668; -3.2232754, -8.589248, 0.09089625; -4.2358, -13.931839, -5.4406166; -5.021027, -16.20072, -4.390631; -5.2800255, -16.662136, -3.2268295; 0.34245953, 2.4557266, -0.3330809; 0.7749358, 4.9293866, -0.51826817; 1.2684027, 7.429199, -0.52262497; 1.4823052, 9.0065975, -0.46127918; 1.8349181, 10.415367, -1.1002676; 1.8262887, 11.931842, -1.7053365; 5.176735, 7.828622, -2.1219115; 5.9580836, 3.0710678, -3.2874405; 7.95343, 0.6690955, -2.0795302; 8.941329, -0.5351336, -1.4660156; 9.307657, -1.2634864, -0.6367902; 9.711077, -1.8233688, -0.002134204; 9.854691, -1.4113867, -1.012551; -2.5240579, 8.90323, 0.2191481; -4.352115, 4.606765, -1.3806791; -3.8455145, 2.6271856, 1.1063557; -3.5922148, 1.6373975, 2.3498719; -3.4787102, 0.5538558, 2.9840696; -3.4043462, -0.25112796, 3.6000361; -3.9362984, 0.81291187, 3.5010662\",\n  \"-0.0, 0.0, 0.0; 1.2367771, -1.9859841, 0.99782157; 1.5755149, -8.99469, 2.955; 2.5777798, -16.401363, 1.3583654; 1.6879407, -17.845139, 3.3348565; 1.1431755, -17.73739, 4.4757595; -1.6950198, -1.5901917, 0.95489746; -3.2093978, -8.593991, 0.08536172; -4.2750516, -13.997942, -5.3761215; -5.0337667, -16.246567, -4.2648544; -5.268574, -16.674606, -3.0833018; 0.33221918, 2.4562266, -0.33969894; 0.7534467, 4.9314632, -0.52968323; 1.2368622, 7.43324, -0.5336134; 1.4426316, 9.01156, -0.4682936; 1.7898632, 10.423945, -1.1022284; 1.7754799, 11.942101, -1.7029588; 5.152821, 7.846884, -2.1104708; 5.977497, 3.082347, -3.2160861; 7.99117, 0.72212243, -1.9573607; 8.98825, -0.4611218, -1.3183956; 9.365359, -1.166987, -0.47468245; 9.777042, -1.708751, 0.17030793; 9.911066, -1.3196794, -0.8504551; -2.5657666, 8.892677, 0.18458456; -4.3725066, 4.6070814, -1.4677484; -3.8947535, 2.6441503, 1.0381198; -3.6558766, 1.6626856, 2.2910519; -3.5401566, 0.58424497, 2.9334903; -3.4659653, -0.21614152, 3.5554395; -4.006623, 0.84216434, 3.443069\",\n  \"-0.0, 0.0, 0.0; 1.2396687, -1.9839133, 0.9983527; 1.6020911, -8.9899025, 2.961009; 2.6184535, -16.397482, 1.377537; 1.7501924, -17.83929, 3.3650298; 1.2144036, -17.720608, 4.509094; -1.6926973, -1.592359, 0.9554056; -3.1936152, -8.598149, 0.07860315; -4.3084784, -14.063694, -5.3112965; -5.038082, -16.292122, -4.141397; -5.2479486, -16.685795, -2.943316; 0.32395834, 2.4565275, -0.345452; 0.7339511, 4.933319, -0.53969437; 1.204892, 7.437474, -0.54359907; 1.4001303, 9.016983, -0.4747697; 1.7432402, 10.432767, -1.1033437; 1.7256967, 11.952717, -1.699434; 5.128727, 7.8688073, -2.095948; 5.990393, 3.0976624, -3.1433222; 8.017585, 0.7797513, -1.8288993; 9.021412, -0.38222432, -1.1620729; 9.409466, -1.0655376, -0.30486435; 9.829525, -1.5889482, 0.3498075; 9.954533, -1.2216947, -0.6801412; -2.6094804, 8.878741, 0.14854217; -4.3910637, 4.6009383, -1.5506382; -3.9420052, 2.6565666, 0.9749279; -3.7174773, 1.684382, 2.2377098; -3.5993254, 0.6108681, 2.8879104; -3.525133, -0.18513322, 3.515462; -4.0745664, 0.86718094, 3.390136\",\n  \"-0.0, 0.0, 0.0; 1.2435479, -1.9809409, 0.99943036; 1.6284553, -8.983902, 2.968603; 2.6597328, -16.392511, 1.3996626; 1.813229, -17.832306, 3.3979728; 1.2862931, -17.703882, 4.545093; -1.6895698, -1.595059, 0.9564374; -3.1778173, -8.602821, 0.073807895; -4.344693, -14.129816, -5.241909; -5.0441284, -16.33645, -4.013727; -5.230911, -16.70471, -2.803803; 0.31452453, 2.4570482, -0.3504313; 0.7130903, 4.93544, -0.54802203; 1.172426, 7.4417496, -0.55169284; 1.3580225, 9.022211, -0.4782168; 1.6973233, 10.44111, -1.1018167; 1.6767899, 11.962477, -1.6941829; 5.1035495, 7.889724, -2.0807123; 5.997064, 3.112976, -3.074492; 8.033172, 0.83803487, -1.7001436; 9.041416, -0.30234182, -1.0033689; 9.442788, -0.96280897, -0.1344657; 9.873026, -1.4674778, 0.52826285; 9.986796, -1.1213622, -0.510273; -2.6527128, 8.865991, 0.11584163; -4.4111595, 4.5964966, -1.6277571; -3.9870553, 2.6696696, 0.91550756; -3.7750041, 1.7062576, 2.1871386; -3.653971, 0.637658, 2.8448608; -3.5793886, -0.15401632, 3.4778166; -4.1377454, 0.892006, 3.339888\",\n  \"-0.0, 0.0, 0.0; 1.2476794, -1.977891, 1.000321; 1.6555579, -8.977427, 2.9770331; 2.7024126, -16.386803, 1.4220923; 1.8772472, -17.823349, 3.4316335; 1.3590554, -17.680443, 4.581022; -1.6862295, -1.5980794, 0.95729023; -3.1589975, -8.608585, 0.070493996; -4.3769464, -14.1968975, -5.1691136; -5.046589, -16.381779, -3.8866358; -5.2128973, -16.732613, -2.668573; 0.30661708, 2.4573224, -0.35548118; 0.6943558, 4.937234, -0.5555328; 1.1406672, 7.445898, -0.5568681; 1.315577, 9.027415, -0.47995967; 1.6513151, 10.449145, -1.0990231; 1.6286294, 11.972024, -1.6874132; 5.0786495, 7.914078, -2.0619988; 5.99866, 3.1318536, -3.0039086; 8.041385, 0.90246916, -1.5661863; 9.052888, -0.21501052, -0.8377543; 9.456859, -0.85233283, 0.04708302; 9.889082, -1.338462, 0.7222608; 10.0028715, -1.0156423, -0.32374865; -2.6958208, 8.850328, 0.08709282; -4.4301224, 4.5860486, -1.6930654; -4.0299063, 2.6778445, 0.8680484; -3.8297973, 1.7237437, 2.148604; -3.7046175, 0.6596638, 2.8128452; -3.628522, -0.12811762, 3.450461; -4.196309, 0.9112837, 3.3014252\",\n  \"-0.0, 0.0, 0.0; 1.2510433, -1.9753178, 1.0012037; 1.6831386, -8.970471, 2.9882553; 2.7463238, -16.38066, 1.448334; 1.9430898, -17.813654, 3.4692645; 1.433794, -17.65102, 4.6200066; -1.6835005, -1.6004488, 0.95813406; -3.138961, -8.6141, 0.067644835; -4.397578, -14.263756, -5.096016; -5.037802, -16.428446, -3.7651892; -5.1846614, -16.760029, -2.5392592; 0.29854354, 2.4578571, -0.3586432; 0.675837, 4.939251, -0.56027883; 1.1107928, 7.449909, -0.5605524; 1.2739499, 9.03253, -0.48058286; 1.6061583, 10.456916, -1.0954303; 1.582144, 11.981149, -1.6802502; 5.05478, 7.9351273, -2.0444136; 5.9935246, 3.1482162, -2.9430408; 8.039625, 0.96342707, -1.4430093; 9.052754, -0.13163853, -0.6834614; 9.459802, -0.7420836, 0.21874595; 9.894367, -1.206537, 0.9075414; 10.008501, -0.90976954, -0.14611828; -2.7354722, 8.837289, 0.06167996; -4.445765, 4.5771513, -1.7513213; -4.065332, 2.6873198, 0.8263767; -3.8751173, 1.7424037, 2.1152234; -3.7462265, 0.682981, 2.7861652; -3.668832, -0.100774586, 3.4285676; -4.2451663, 0.9322707, 3.268551\",\n  \"-0.0, 0.0, 0.0; 1.2552025, -1.9721364, 1.0022689; 1.7147893, -8.961752, 3.0025964; 2.792812, -16.372883, 1.4776025; 2.0114014, -17.803537, 3.5087216; 1.5107887, -17.626188, 4.6610985; -1.6801165, -1.6033914, 0.9591537; -3.1152494, -8.620872, 0.06583792; -4.4064736, -14.3300085, -5.023819; -5.020461, -16.475712, -3.6505575; -5.147943, -16.778667, -2.4150877; 0.2904855, 2.4583962, -0.36155304; 0.6576499, 4.9412947, -0.56337; 1.081383, 7.4538693, -0.5601953; 1.2322538, 9.037605, -0.47819486; 1.5606948, 10.464291, -1.089725; 1.535528, 11.989777, -1.6712208; 5.0302944, 7.957513, -2.024695; 5.977372, 3.1646643, -2.8819757; 8.028024, 1.0274227, -1.3209006; 9.043376, -0.043749094, -0.53086036; 9.453707, -0.62646073, 0.388044; 9.890756, -1.0685074, 1.0898894; 10.005146, -0.7980859, 0.029189944; -2.7740052, 8.823719, 0.04415965; -4.460921, 4.5655203, -1.7951084; -4.0953503, 2.6918938, 0.7965325; -3.9125652, 1.7550813, 2.092351; -3.7804773, 0.7003318, 2.7700005; -3.7024095, -0.07944465, 3.4171464; -4.2875457, 0.94673634, 3.245341\",\n  \"-0.0, 0.0, 0.0; 1.2586464, -1.9686847, 1.0047332; 1.7479815, -8.95149, 3.0217137; 2.8402035, -16.363487, 1.5111047; 2.0800118, -17.792587, 3.5513496; 1.5876687, -17.603113, 4.7053585; -1.6772938, -1.6049335, 0.96151215; -3.089401, -8.626887, 0.06666356; -4.407999, -14.392561, -4.951744; -4.9974813, -16.518766, -3.538012; -5.106274, -16.789768, -2.293367; 0.2827305, 2.459045, -0.3632835; 0.6400144, 4.943491, -0.56377715; 1.0530537, 7.457839, -0.5570804; 1.1895063, 9.042858, -0.47462714; 1.5223744, 10.471976, -1.0780308; 1.4967142, 11.998651, -1.6563766; 5.007362, 7.9790344, -2.0007274; 5.956888, 3.1803522, -2.8219047; 8.010329, 1.0911264, -1.2006574; 9.027026, 0.044093728, -0.38055807; 9.435723, -0.5103168, 0.5564075; 9.871498, -0.9298755, 1.2726998; 9.990521, -0.6878095, 0.20567882; -2.8112102, 8.810987, 0.027901947; -4.4715056, 4.5514092, -1.8322756; -4.1192193, 2.696013, 0.77427745; -3.943077, 1.7683146, 2.0775514; -3.8081877, 0.71760046, 2.760894; -3.72979, -0.05883497, 3.4120052; -4.323411, 0.9605488, 3.229195\",\n  \"-0.0, 0.0, 0.0; 1.2627697, -1.9646338, 1.0074844; 1.7804921, -8.939797, 3.043734; 2.8893156, -16.352673, 1.5496099; 2.14946, -17.77913, 3.5991585; 1.664745, -17.570328, 4.7530613; -1.673907, -1.6068889, 0.96414495; -3.0594993, -8.634365, 0.071198225; -4.3994665, -14.454302, -4.878442; -4.9691086, -16.559408, -3.4255443; -5.063961, -16.805252, -2.1745515; 0.27535126, 2.459995, -0.36252064; 0.6237974, 4.945965, -0.5596559; 1.0272744, 7.4618535, -0.54954714; 1.1500406, 9.04793, -0.46591875; 1.4784961, 10.479174, -1.066695; 1.4522822, 12.006919, -1.6421828; 4.9863234, 7.99888, -1.9742754; 5.9310794, 3.1938882, -2.763438; 7.9772444, 1.1418681, -1.0864321; 8.990267, 0.11363745, -0.23847038; 9.400752, -0.4071443, 0.71682924; 9.837885, -0.80075264, 1.4468918; 9.955652, -0.5955915, 0.3720262; -2.8447945, 8.8000145, 0.018045187; -4.474947, 4.5376906, -1.8623933; -4.136853, 2.699154, 0.75794923; -3.9678059, 1.7798874, 2.0681195; -3.8306797, 0.7335931, 2.7577696; -3.7523897, -0.039148092, 3.4132736; -4.3539176, 0.97340786, 3.2187395\",\n  \"-0.0, 0.0, 0.0; 1.2665777, -1.960815, 1.0101407; 1.8134148, -8.927021, 3.069312; 2.9406018, -16.340681, 1.5929352; 2.220406, -17.765043, 3.6509266; 1.7425828, -17.539223, 4.8044987; -1.6707689, -1.6086266, 0.9666867; -3.027886, -8.642214, 0.07813221; -4.3822093, -14.514619, -4.805185; -4.938074, -16.597235, -3.3150175; -5.0231514, -16.819603, -2.058939; 0.2677772, 2.461122, -0.3605386; 0.6073992, 4.9487085, -0.5526178; 1.0018578, 7.466002, -0.5375178; 1.1119878, 9.052968, -0.4531643; 1.4367428, 10.486239, -1.0511127; 1.4103045, 12.015199, -1.6233554; 4.9658055, 8.018851, -1.9424348; 5.9015517, 3.2065272, -2.6968884; 7.936403, 1.1868818, -0.9676287; 8.943729, 0.17504501, -0.09356201; 9.35407, -0.31339505, 0.8787323; 9.791094, -0.6823485, 1.6216235; 9.908851, -0.513624, 0.5404383; -2.8776498, 8.78969, 0.012960374; -4.474052, 4.5222216, -1.8846855; -4.151253, 2.700934, 0.7495949; -3.9898531, 1.7902908, 2.0667334; -3.8513649, 0.7479309, 2.7620459; -3.7740612, -0.021623313, 3.4214046; -4.383295, 0.98394316, 3.214961\",\n  \"-0.0, 0.0, 0.0; 1.2704239, -1.9570322, 1.0126437; 1.8461957, -8.913605, 3.0963483; 2.9919758, -16.327839, 1.6372714; 2.2905984, -17.749334, 3.703727; 1.8193008, -17.501865, 4.855541; -1.6675923, -1.6104809, 0.9690817; -2.9932761, -8.651489, 0.09192276; -4.353517, -14.577231, -4.7248654; -4.8997626, -16.635103, -3.1972356; -4.9767485, -16.82789, -1.9357581; 0.26060048, 2.4623818, -0.3571809; 0.59133935, 4.951632, -0.54310524; 0.97609246, 7.4703913, -0.52285695; 1.0749395, 9.058086, -0.43824813; 1.3963249, 10.49303, -1.0340029; 1.3694977, 12.023045, -1.6033999; 4.9433517, 8.040427, -1.9114629; 5.8656216, 3.2200165, -2.6300316; 7.888069, 1.2307931, -0.85165477; 8.889155, 0.23437518, 0.046949565; 9.296877, -0.2235181, 1.0350823; 9.731905, -0.569321, 1.7901814; 9.851973, -0.43526238, 0.7044059; -2.9105773, 8.778434, 0.014335275; -4.4711976, 4.504119, -1.8976133; -4.162629, 2.700842, 0.7507255; -4.008344, 1.7992043, 2.074893; -3.8669071, 0.76181316, 2.7770095; -3.789097, -0.0036143064, 3.4410954; -4.406442, 0.99443567, 3.2226226\",\n  \"-0.0, 0.0, 0.0; 1.2734568, -1.9537662, 1.0151377; 1.8797634, -8.899294, 3.1268399; 3.0463436, -16.313957, 1.6865386; 2.363747, -17.733982, 3.760281; 1.8983228, -17.4719, 4.911251; -1.6650752, -1.6116467, 0.9714683; -2.9591084, -8.659742, 0.10402274; -4.3244047, -14.632769, -4.6525555; -4.86277, -16.663822, -3.086714; -4.933006, -16.82878, -1.8209039; 0.2531195, 2.4638603, -0.3523315; 0.57485694, 4.9547863, -0.5314867; 0.950811, 7.4748383, -0.50725585; 1.0380158, 9.063167, -0.4217353; 1.3555735, 10.49986, -1.015321; 1.3281578, 12.030837, -1.5820967; 4.9204583, 8.060144, -1.882623; 5.824743, 3.2307582, -2.5627592; 7.833888, 1.2706513, -0.7375901; 8.828296, 0.28901303, 0.18439263; 9.233159, -0.13979968, 1.1866472; 9.666019, -0.46387276, 1.9525532; 9.7877445, -0.36384493, 0.86329937; -2.9420543, 8.76882, 0.019015253; -4.464775, 4.486907, -1.9064434; -4.1706524, 2.7022552, 0.7561176; -4.0235906, 1.8099315, 2.087397; -3.8756268, 0.7798339, 2.798845; -3.794332, 0.020578623, 3.4695656; -4.4220695, 1.0090874, 3.2377367\",\n  \"-0.0, 0.0, 0.0; 1.2771481, -1.949928, 1.0178765; 1.9148271, -8.883257, 3.160203; 3.1027, -16.298244, 1.7391002; 2.4386902, -17.71565, 3.820655; 1.9790571, -17.432184, 4.9688816; -1.6620092, -1.6132287, 0.97408974; -2.924447, -8.668545, 0.11886722; -4.2898316, -14.686728, -4.5804224; -4.8213778, -16.689444, -2.976222; -4.886271, -16.827597, -1.7069224; 0.24644068, 2.465302, -0.3469404; 0.5597561, 4.957861, -0.5181267; 0.9263717, 7.479231, -0.4884915; 1.0030137, 9.068083, -0.40259272; 1.3171895, 10.50647, -0.993873; 1.2891883, 12.038626, -1.5574269; 4.8978443, 8.081467, -1.8512218; 5.780957, 3.2429032, -2.4928617; 7.773467, 1.3110123, -0.6199951; 8.759526, 0.34372187, 0.32581073; 9.157872, -0.061785877, 1.3403022; 9.585781, -0.36934546, 2.1157405; 9.710704, -0.30037397, 1.0244416; -2.972746, 8.758007, 0.02858308; -4.4566436, 4.467129, -1.9072012; -4.1761494, 2.702499, 0.77013385; -4.035903, 1.8201859, 2.1088006; -3.8833342, 0.7964181, 2.8283663; -3.7999647, 0.042486668, 3.5048134; -4.436146, 1.022633, 3.2608137\",\n  \"-0.0, 0.0, 0.0; 1.281463, -1.9460497, 1.0198736; 1.9496988, -8.86575, 3.196673; 3.16112, -16.280785, 1.7958404; 2.5143821, -17.696075, 3.8842611; 2.059447, -17.3945, 5.029742; -1.6584206, -1.6157646, 0.97600085; -2.889398, -8.678372, 0.13522214; -4.250307, -14.739742, -4.5095425; -4.78061, -16.711452, -2.866981; -4.84322, -16.822388, -1.5948989; 0.24097754, 2.4668791, -0.33948827; 0.54679763, 4.960929, -0.5023174; 0.90357506, 7.4836674, -0.46930087; 0.9692267, 9.072959, -0.38243347; 1.2798196, 10.51301, -0.97155076; 1.251195, 12.046147, -1.532397; 4.8765507, 8.102522, -1.8201535; 5.7359314, 3.2545881, -2.4220564; 7.7077417, 1.3486683, -0.50128555; 8.683416, 0.39461392, 0.46843147; 9.074823, 0.012301564, 1.4945635; 9.497451, -0.27903172, 2.279111; 9.625308, -0.24156787, 1.186616; -3.001913, 8.746883, 0.037849605; -4.445181, 4.446579, -1.9077117; -4.1766562, 2.702754, 0.7844415; -4.0423956, 1.8308432, 2.130517; -3.8855426, 0.812683, 2.8570838; -3.8000803, 0.06344986, 3.5384717; -4.4435596, 1.0361967, 3.284215\",\n  \"-0.0, 0.0, 0.0; 1.2845495, -1.9425408, 1.0226763; 1.9856682, -8.84818, 3.2335205; 3.221745, -16.262486, 1.8504891; 2.5939362, -17.675903, 3.9459422; 2.1442463, -17.357843, 5.0890326; -1.6558378, -1.6167904, 0.9786833; -2.8549876, -8.686959, 0.15564299; -4.2094774, -14.788685, -4.437876; -4.7411337, -16.728395, -2.7580738; -4.801754, -16.80799, -1.4835507; 0.23560071, 2.4682977, -0.3328857; 0.5334064, 4.963875, -0.4869358; 0.8801093, 7.4879465, -0.4488544; 0.9371685, 9.077582, -0.36221015; 1.2432643, 10.51955, -0.9489873; 1.2117957, 12.054228, -1.5054522; 4.8533926, 8.124863, -1.7903726; 5.688142, 3.2678308, -2.3522627; 7.636962, 1.3855752, -0.38524973; 8.601113, 0.4436187, 0.6075458; 8.984326, 0.08330047, 1.6446707; 9.400689, -0.19305447, 2.4379385; 9.531675, -0.18695135, 1.3451889; -3.0314002, 8.734806, 0.052330673; -4.4352713, 4.424309, -1.8994913; -4.173465, 2.699968, 0.8058417; -4.042562, 1.8377984, 2.1585064; -3.8828719, 0.82505095, 2.8919873; -3.7966902, 0.080295205, 3.5781763; -4.446946, 1.04551, 3.312702\",\n  \"-0.0, 0.0, 0.0; 1.2884507, -1.9386194, 1.0252068; 2.0217361, -8.829159, 3.2724297; 3.283781, -16.242603, 1.9083645; 2.6744769, -17.65234, 4.0117455; 2.22978, -17.310158, 5.1498117; -1.6525714, -1.6186639, 0.9811048; -2.8228827, -8.696149, 0.17971939; -4.164324, -14.835915, -4.3666997; -4.7000237, -16.740961, -2.6489406; -4.76197, -16.794548, -1.3731229; 0.23177059, 2.4696608, -0.3253795; 0.5230618, 4.9665504, -0.47034544; 0.859697, 7.491914, -0.42782533; 0.9084304, 9.081801, -0.34071925; 1.2098056, 10.525637, -0.925346; 1.1750717, 12.061624, -1.4779897; 4.833028, 8.146548, -1.7606466; 5.6400576, 3.2806463, -2.2850406; 7.5621805, 1.421134, -0.2706964; 8.51295, 0.49082172, 0.74570394; 8.887299, 0.15081576, 1.7928756; 9.296847, -0.11214936, 2.5942016; 9.430563, -0.13657406, 1.5020386; -3.057684, 8.72254, 0.06759325; -4.4232955, 4.403292, -1.8920127; -4.1648016, 2.699875, 0.8268603; -4.0355544, 1.8481691, 2.1862962; -3.8752978, 0.8401531, 2.9261436; -3.7898676, 0.09941292, 3.6167588; -4.4440947, 1.0591147, 3.3412437\",\n  \"-0.0, 0.0, 0.0; 1.2921358, -1.9343655, 1.028598; 2.0595613, -8.808858, 3.3132577; 3.3498538, -16.220745, 1.9672717; 2.7586854, -17.628431, 4.077191; 2.3181858, -17.268696, 5.2114697; -1.649472, -1.6198543, 0.98435056; -2.7941403, -8.704434, 0.20904285; -4.114827, -14.881342, -4.292924; -4.6581697, -16.751465, -2.539558; -4.724145, -16.78059, -1.2631494; 0.22893174, 2.4708095, -0.31859848; 0.5146188, 4.9689026, -0.45364296; 0.84161764, 7.49541, -0.40440848; 0.88111675, 9.085563, -0.3174727; 1.1779624, 10.531243, -0.89985126; 1.1407577, 12.06875, -1.4480891; 4.814999, 8.168258, -1.7279762; 5.5935264, 3.2940826, -2.2174659; 7.48398, 1.4525422, -0.15716505; 8.418872, 0.53147924, 0.88212883; 8.782233, 0.2109049, 1.939252; 9.183307, -0.03936249, 2.748888; 9.3216505, -0.093135685, 1.6583534; -3.0813344, 8.710034, 0.0863961; -4.4086094, 4.3809896, -1.8779263; -4.149755, 2.6983366, 0.8538122; -4.0203276, 1.8570108, 2.2196794; -3.85631, 0.85360515, 2.9649496; -3.768877, 0.11667377, 3.6593783; -4.4288893, 1.0701354, 3.376105\",\n  \"-0.0, 0.0, 0.0; 1.2951082, -1.9306226, 1.0318866; 2.0964093, -8.788148, 3.355573; 3.4149868, -16.198391, 2.0280766; 2.8428307, -17.60294, 4.145315; 2.4068878, -17.221947, 5.2744017; -1.6469624, -1.6204925, 0.98749727; -2.7677355, -8.712008, 0.24123275; -4.0612736, -14.9244, -4.2196035; -4.617587, -16.759426, -2.4335275; -4.691721, -16.769455, -1.1572739; 0.22643638, 2.4720595, -0.3105854; 0.5061899, 4.9713826, -0.43485984; 0.82287854, 7.4990673, -0.37907952; 0.85367167, 9.089431, -0.2924743; 1.1459376, 10.5368805, -0.8727727; 1.1059148, 12.075867, -1.416645; 4.7955403, 8.191152, -1.6948643; 5.5459213, 3.3095455, -2.1532698; 7.399129, 1.4856074, -0.0440526; 8.315331, 0.5735948, 1.0195816; 8.664903, 0.27074948, 2.0865371; 9.0553055, 0.03190069, 2.9047918; 9.20094, -0.04904609, 1.8168882; -3.1057127, 8.696629, 0.10853428; -4.3969784, 4.3583646, -1.8594453; -4.1333566, 2.6976452, 0.8852289; -4.001546, 1.8672861, 2.257564; -3.833214, 0.86853224, 3.0081022; -3.7430756, 0.13549298, 3.706294; -4.4085145, 1.0831853, 3.4164338\",\n  \"-0.0, 0.0, 0.0; 1.2967585, -1.9273098, 1.0359985; 2.1331728, -8.767475, 3.3981576; 3.483931, -16.175142, 2.0887628; 2.9312294, -17.57713, 4.212856; 2.499314, -17.179386, 5.337706; -1.645555, -1.619519, 0.9914325; -2.7417054, -8.717897, 0.27441663; -4.0010295, -14.963411, -4.1498084; -4.575762, -16.75939, -2.3301888; -4.664378, -16.763084, -1.054825; 0.22371401, 2.4732456, -0.30302358; 0.4971999, 4.9737887, -0.41621822; 0.8042294, 7.502493, -0.3531402; 0.82728654, 9.092985, -0.26648715; 1.1153058, 10.542228, -0.844429; 1.0724775, 12.082762, -1.3836863; 4.776152, 8.21317, -1.6612228; 5.498753, 3.3254876, -2.0990489; 7.3115463, 1.5216203, 0.061916113; 8.207459, 0.6198738, 1.1512764; 8.541119, 0.333265, 2.227769; 8.919178, 0.10475415, 3.054726; 9.074118, -0.0012804642, 1.9702691; -3.1295762, 8.683854, 0.1319497; -4.3865967, 4.336195, -1.8374683; -4.1122146, 2.6993103, 0.9204372; -3.9750242, 1.8808682, 2.299388; -3.8021417, 0.88803005, 3.05671; -3.7090392, 0.1600542, 3.7597938; -4.3798623, 1.1015384, 3.462216\",\n  \"-0.0, 0.0, 0.0; 1.2978976, -1.9245164, 1.0397586; 2.1719015, -8.7462845, 3.4411864; 3.551185, -16.15192, 2.15016; 3.0177433, -17.551363, 4.280845; 2.5900342, -17.133533, 5.4000063; -1.6445782, -1.6183047, 0.9950303; -2.7184339, -8.72316, 0.3090976; -3.9394116, -15.001599, -4.0791273; -4.5269785, -16.760254, -2.2274332; -4.626159, -16.750637, -0.9528785; 0.2208894, 2.474408, -0.2955129; 0.4877681, 4.976118, -0.39820462; 0.78502804, 7.5058193, -0.32863396; 0.7998628, 9.096345, -0.24081406; 1.083489, 10.54724, -0.8167763; 1.0380913, 12.089018, -1.3522577; 4.7553434, 8.234956, -1.631428; 5.4480386, 3.3419785, -2.058313; 7.216523, 1.557923, 0.15517616; 8.090189, 0.6663028, 1.2706288; 8.406046, 0.39319518, 2.3559656; 8.770246, 0.17281203, 3.1913059; 8.935625, 0.044235304, 2.1108365; -3.1537118, 8.670873, 0.15585628; -4.3780932, 4.314565, -1.8150126; -4.088683, 2.7038808, 0.95674837; -3.9439795, 1.8985398, 2.342627; -3.7660804, 0.9119018, 3.1068585; -3.6695082, 0.1892618, 3.814961; -4.345672, 1.1245828, 3.5101233\",\n  \"-0.0, 0.0, 0.0; 1.2983607, -1.9217713, 1.0442481; 2.210171, -8.725287, 3.4831052; 3.62096, -16.12864, 2.2131968; 3.1077702, -17.52555, 4.350506; 2.6840267, -17.090563, 5.4646263; -1.6441656, -1.6160746, 0.99932706; -2.696248, -8.727261, 0.3460204; -3.875699, -15.038027, -4.0070515; -4.474278, -16.75762, -2.122488; -4.5818954, -16.728127, -0.84892285; 0.21843903, 2.4755874, -0.28734195; 0.4786265, 4.9784594, -0.37821573; 0.7658279, 7.509103, -0.30107152; 0.77348244, 9.099696, -0.21355046; 1.0531747, 10.552308, -0.78710574; 1.005271, 12.095792, -1.3174279; 4.734522, 8.257647, -1.5977843; 5.3947897, 3.359756, -2.0196807; 7.117474, 1.5942851, 0.24425316; 7.968148, 0.7121679, 1.3847508; 8.267064, 0.45165655, 2.4779534; 8.618014, 0.2388185, 3.3208876; 8.792963, 0.08929579, 2.2446291; -3.1779585, 8.657208, 0.18282121; -4.372896, 4.291295, -1.7848597; -4.062795, 2.7083244, 1.0005958; -3.907745, 1.9168401, 2.3933218; -3.723829, 0.9379088, 3.1659932; -3.6227605, 0.2220136, 3.880292; -4.3043804, 1.1508117, 3.567758\",\n  \"-0.0, 0.0, 0.0; 1.2984028, -1.9194125, 1.0485255; 2.24728, -8.704552, 3.5241604; 3.6893744, -16.106098, 2.2791424; 3.196563, -17.500881, 4.4226294; 2.7764862, -17.049252, 5.5315046; -1.6441085, -1.613594, 1.0034207; -2.6749449, -8.730862, 0.38331646; -3.8125513, -15.073143, -3.9349499; -4.4205203, -16.75436, -2.0190272; -4.5343733, -16.699774, -0.74683344; 0.21411246, 2.4767241, -0.28072557; 0.46710274, 4.980709, -0.36057773; 0.7465678, 7.51194, -0.27477223; 0.7471525, 9.1024475, -0.18538615; 1.0227687, 10.556721, -0.7567009; 0.9723552, 12.101482, -1.2830541; 4.7136073, 8.276906, -1.5669572; 5.337942, 3.3741097, -1.9865751; 7.0153904, 1.6265532, 0.32473183; 7.843364, 0.7535964, 1.4887418; 8.125411, 0.505636, 2.5893207; 8.463123, 0.30042845, 3.4395232; 8.647597, 0.13067687, 2.3678656; -3.2009306, 8.646416, 0.21099728; -4.3655214, 4.270521, -1.7527041; -4.033179, 2.7148786, 1.0455534; -3.8670068, 1.9370587, 2.4446807; -3.6757693, 0.9675345, 3.2273707; -3.569159, 0.2598737, 3.9490314; -4.2571797, 1.1808987, 3.6276445\",\n  \"-0.0, 0.0, 0.0; 1.2986908, -1.91687, 1.0528109; 2.2830844, -8.685424, 3.5597806; 3.7595334, -16.085014, 2.3437386; 3.2860448, -17.477676, 4.4929523; 2.8684883, -17.011927, 5.5969276; -1.6438437, -1.6113067, 1.0075216; -2.6546144, -8.734495, 0.42341703; -3.7510862, -15.107441, -3.8602052; -4.3667173, -16.750853, -1.9141661; -4.486093, -16.672411, -0.6437268; 0.2106172, 2.4776857, -0.27482215; 0.45654604, 4.982709, -0.34337133; 0.72697324, 7.5145473, -0.24716431; 0.72068983, 9.104887, -0.15504569; 0.9930892, 10.56066, -0.7240777; 0.9410407, 12.106619, -1.2467463; 4.692559, 8.298686, -1.5322993; 5.2810674, 3.391633, -1.953929; 6.9135923, 1.6608995, 0.40177655; 7.7190304, 0.79655224, 1.5878146; 7.978997, 0.5594423, 2.6961942; 8.299359, 0.36038482, 3.5545347; 8.497427, 0.17161529, 2.4884992; -3.2249916, 8.63312, 0.23917207; -4.361854, 4.2466097, -1.7170802; -4.004201, 2.7177286, 1.0927824; -3.8253763, 1.9532893, 2.4977124; -3.624125, 0.99457586, 3.2911348; -3.5095866, 0.29637933, 4.0207553; -4.205369, 1.2086675, 3.6912622\",\n  \"-0.0, 0.0, 0.0; 1.298768, -1.9144981, 1.0570228; 2.3174734, -8.666987, 3.5934322; 3.8299687, -16.065321, 2.4146078; 3.3743968, -17.455853, 4.5690665; 2.958075, -16.975355, 5.6671724; -1.6437563, -1.6088687, 1.0115527; -2.6334734, -8.737836, 0.4629817; -3.6845102, -15.140301, -3.7878876; -4.307354, -16.74809, -1.8145769; -4.4321604, -16.645504, -0.5463817; 0.20744383, 2.478682, -0.26817435; 0.44683108, 4.9846373, -0.3247835; 0.7088815, 7.5169334, -0.21802169; 0.6959673, 9.106997, -0.12191028; 0.9658409, 10.564406, -0.6879482; 0.9128062, 12.111558, -1.2069728; 4.6736674, 8.319121, -1.4944553; 5.229947, 3.4089403, -1.9233569; 6.812179, 1.6958045, 0.47906578; 7.5923777, 0.8404356, 1.6882582; 7.8232512, 0.61362135, 2.8052013; 8.12074, 0.42031783, 3.6730366; 8.338687, 0.21338576, 2.6142757; -3.2473722, 8.620691, 0.26729026; -4.3550754, 4.222631, -1.6797343; -3.971305, 2.719458, 1.1405336; -3.7794201, 1.9678732, 2.5506663; -3.5670235, 1.0213971, 3.3557897; -3.4435909, 0.33391523, 4.094083; -4.1477804, 1.2365749, 3.756042\",\n  \"-0.0, 0.0, 0.0; 1.3008019, -1.910366, 1.061986; 2.3514771, -8.648161, 3.6243012; 3.900652, -16.04621, 2.4922547; 3.4614565, -17.4339, 4.6519394; 3.0452414, -16.939194, 5.743758; -1.6420201, -1.6076484, 1.0163014; -2.6097298, -8.742531, 0.5067624; -3.6186695, -15.173157, -3.7116752; -4.2457848, -16.747448, -1.7128729; -4.3760657, -16.628342, -0.44667375; 0.20393309, 2.4798162, -0.26026446; 0.43818742, 4.9865313, -0.3029996; 0.69387984, 7.5189466, -0.1843213; 0.67471707, 9.10864, -0.083254084; 0.94192374, 10.5678, -0.646039; 0.88768137, 12.116125, -1.1614249; 4.658745, 8.336576, -1.450673; 5.1840034, 3.423852, -1.8894491; 6.7113223, 1.7283875, 0.56057596; 7.463948, 0.88201016, 1.7933424; 7.6632433, 0.6649754, 2.9182806; 7.9358673, 0.47741672, 3.795493; 8.176801, 0.25442913, 2.7450056; -3.265834, 8.61085, 0.29958326; -4.3434253, 4.200651, -1.6368544; -3.9338973, 2.7226262, 1.1930659; -3.7291346, 1.9836133, 2.6080236; -3.5044532, 1.0501087, 3.4248712; -3.371084, 0.37397867, 4.1718683; -4.084134, 1.2666438, 3.8259525\",\n  \"-0.0, 0.0, 0.0; 1.3031167, -1.9064143, 1.0662413; 2.3838658, -8.629986, 3.6532886; 3.9713483, -16.028015, 2.5754843; 3.5457528, -17.412622, 4.7398663; 3.127934, -16.90509, 5.8251667; -1.6400485, -1.6070807, 1.0203744; -2.5859716, -8.747759, 0.5528457; -3.552671, -15.207229, -3.631274; -4.1826763, -16.74738, -1.606946; -4.3189683, -16.616209, -0.3425733; 0.20074277, 2.480998, -0.25132698; 0.43066388, 4.9883194, -0.2795647; 0.6808208, 7.520694, -0.14881864; 0.6560838, 9.109966, -0.042491965; 0.9207678, 10.571019, -0.60154575; 0.86487883, 12.120488, -1.1133075; 4.6471004, 8.352202, -1.4016302; 5.140989, 3.4372463, -1.851702; 6.6098437, 1.7593067, 0.645679; 7.333115, 0.9218378, 1.9018782; 7.49849, 0.7159865, 3.0343912; 7.744362, 0.535593, 3.9209626; 8.010971, 0.29655677, 2.8802524; -3.2823281, 8.602245, 0.33019048; -4.3288116, 4.1791906, -1.5939476; -3.8945909, 2.7280216, 1.2461722; -3.67748, 2.002438, 2.6662302; -3.4399836, 1.0824039, 3.4946535; -3.296261, 0.4180193, 4.25022; -4.01854, 1.3002111, 3.8966665\",\n  \"-0.0, 0.0, 0.0; 1.3041111, -1.9028342, 1.0714077; 2.4167156, -8.613177, 3.6792154; 4.0422683, -16.011156, 2.6593635; 3.6293647, -17.392376, 4.8283634; 3.2092807, -16.86851, 5.9049935; -1.6391841, -1.6048143, 1.0253183; -2.5611632, -8.751347, 0.60144645; -3.4876237, -15.238212, -3.5492609; -4.1167507, -16.74629, -1.5006578; -4.2577696, -16.605984, -0.23778522; 0.19576468, 2.4822025, -0.24323268; 0.42101717, 4.9900703, -0.25681692; 0.6688039, 7.521969, -0.11299786; 0.6381931, 9.110688, -1.3578683E-4; 0.90018296, 10.57356, -0.5556913; 0.84300286, 12.123938, -1.064549; 4.6372294, 8.362856, -1.3526835; 5.099545, 3.4464045, -1.8196455; 6.506223, 1.7847967, 0.7240213; 7.1982803, 0.95563155, 2.0031047; 7.3291016, 0.76141036, 3.1421714; 7.5476165, 0.5886525, 4.0373864; 7.840225, 0.33370766, 3.0074935; -3.2963033, 8.597941, 0.3623529; -4.3101416, 4.1613264, -1.5479951; -3.8507042, 2.7371004, 1.3017797; -3.620985, 2.024988, 2.7266655; -3.37155, 1.1192155, 3.5672078; -3.2181442, 0.46731913, 4.3316956; -3.9488783, 1.339122, 3.9698439\",\n  \"-0.0, 0.0, 0.0; 1.3012481, -1.9014832, 1.0772713; 2.447372, -8.597546, 3.7071767; 4.1109495, -15.995596, 2.751164; 3.7096772, -17.372635, 4.925; 3.2866368, -16.831972, 5.992127; -1.6415645, -1.598775, 1.0309299; -2.5383673, -8.751032, 0.65196913; -3.4212637, -15.264765, -3.4660275; -4.050588, -16.741636, -1.3948736; -4.196456, -16.590073, -0.13385403; 0.19030468, 2.4834745, -0.2344205; 0.40920788, 4.9919405, -0.23226741; 0.65469813, 7.523254, -0.07485576; 0.6179066, 9.111308, 0.045293376; 0.8775745, 10.576203, -0.5060033; 0.8195898, 12.127647, -1.0115092; 4.626028, 8.37334, -1.2988691; 5.055206, 3.4556203, -1.7837675; 6.397376, 1.8092529, 0.80427814; 7.0570536, 0.98784125, 2.1052856; 7.15248, 0.8056529, 3.2498426; 7.34289, 0.64105237, 4.152979; 7.662298, 0.37065005, 3.1350608; -3.312553, 8.5939, 0.39459997; -4.294846, 4.1440644, -1.501426; -3.8101134, 2.748763, 1.3584497; -3.5677469, 2.0511136, 2.788386; -3.3055012, 1.1597211, 3.6403246; -3.1415854, 0.5204003, 4.413205; -3.8810108, 1.3818705, 4.0443306\",\n  \"-0.0, 0.0, 0.0; 1.2959597, -1.9019572, 1.0827956; 2.4771156, -8.583159, 3.7349; 4.1809807, -15.980804, 2.8493001; 3.7909393, -17.35472, 5.027154; 3.364123, -16.803959, 6.087592; -1.6459683, -1.5908097, 1.0362159; -2.5173044, -8.748658, 0.70663714; -3.3531363, -15.288265, -3.3800538; -3.9815958, -16.734467, -1.2871094; -4.130898, -16.566494, -0.028573036; 0.18384273, 2.4848456, -0.22485082; 0.39580625, 4.993845, -0.20704225; 0.6412123, 7.5243597, -0.03714958; 0.6001201, 9.111584, 0.09222296; 0.8576617, 10.578485, -0.4547234; 0.79841584, 12.130662, -0.9578266; 4.6153784, 8.379735, -1.2482045; 5.010455, 3.4612298, -1.7536795; 6.2855577, 1.8301735, 0.8776121; 6.911572, 1.0165448, 2.1999688; 6.9708285, 0.84471494, 3.3485646; 7.1324143, 0.6870841, 4.2585354; 7.479126, 0.40327343, 3.2532797; -3.3269715, 8.593246, 0.4284159; -4.2800307, 4.130961, -1.4532131; -3.769957, 2.765483, 1.4166325; -3.5149212, 2.0827436, 2.8515534; -3.2410085, 1.2052063, 3.714138; -3.0675893, 0.5779685, 4.494806; -3.8150816, 1.4294388, 4.1190367\",\n  \"-0.0, 0.0, 0.0; 1.2913778, -1.902007, 1.0881691; 2.508142, -8.568694, 3.7606232; 4.2503395, -15.966057, 2.9504507; 3.8739934, -17.339367, 5.131093; 3.4444125, -16.789326, 6.1907883; -1.6497597, -1.5835081, 1.0413581; -2.4968734, -8.746512, 0.76492566; -3.2837725, -15.309582, -3.2937725; -3.9128275, -16.728474, -1.1823959; -4.0663047, -16.54526, 0.07350886; 0.17727731, 2.4861543, -0.21546379; 0.3831111, 4.995498, -0.18156329; 0.62970173, 7.524932, 0.0021425337; 0.5831431, 9.111384, 0.13891113; 0.83862156, 10.580298, -0.40358102; 0.77887493, 12.133556, -0.9032786; 4.6075964, 8.383979, -1.1939799; 4.9681325, 3.4651294, -1.7214444; 6.174298, 1.8472623, 0.95018387; 6.7657156, 1.0403471, 2.2924304; 6.787534, 0.877946, 3.443716; 6.9191804, 0.7266552, 4.3595676; 7.2940497, 0.43070164, 3.368013; -3.3390036, 8.593999, 0.46282285; -4.2665625, 4.119712, -1.4029837; -3.7286816, 2.7843885, 1.4759598; -3.4597402, 2.1167295, 2.9154305; -3.1749344, 1.2521065, 3.7874773; -2.99251, 0.63616425, 4.575056; -3.747128, 1.4788027, 4.193662\",\n  \"-0.0, 0.0, 0.0; 1.2874814, -1.9023314, 1.0922112; 2.5387876, -8.5534115, 3.7875075; 4.3184457, -15.950832, 3.0639136; 3.9552946, -17.325062, 5.246214; 3.5226202, -16.78373, 6.3091307; -1.6529725, -1.577598, 1.0452268; -2.478527, -8.745174, 0.8285439; -3.2110357, -15.329464, -3.2058933; -3.8415084, -16.724121, -1.0788505; -4.000386, -16.528261, 0.1744715; 0.17063184, 2.487442, -0.2057461; 0.3696939, 4.9970713, -0.15616678; 0.6157255, 7.525546, 0.041002646; 0.56673634, 9.111278, 0.18508819; 0.82130575, 10.582099, -0.3526413; 0.760688, 12.136436, -0.8488645; 4.596946, 8.390634, -1.1396002; 4.9188356, 3.4721088, -1.694385; 6.054675, 1.8701736, 1.0173671; 6.610801, 1.0713407, 2.3793886; 6.593302, 0.9167411, 3.5318217; 6.6933866, 0.77056235, 4.4524837; 7.0976124, 0.46414676, 3.4757507; -3.3542745, 8.592262, 0.4959398; -4.262215, 4.1057534, -1.350065; -3.694221, 2.8009872, 1.5370941; -3.4102244, 2.1486046, 2.980672; -3.1169138, 1.2951388, 3.8608522; -2.927445, 0.688976, 4.654333; -3.6875725, 1.5242946, 4.267813\",\n  \"-0.0, 0.0, 0.0; 1.2849905, -1.9014382, 1.0966904; 2.5705163, -8.536855, 3.8143947; 4.3845253, -15.934395, 3.183232; 4.034468, -17.310192, 5.366683; 3.5990849, -16.78039, 6.4342923; -1.6550046, -1.5726135, 1.0495132; -2.4609342, -8.744095, 0.89793396; -3.1343493, -15.347721, -3.115138; -3.7701898, -16.723225, -0.97724867; -3.9358606, -16.513317, 0.27291584; 0.16617331, 2.4885187, -0.19615266; 0.35910273, 4.998249, -0.13016343; 0.60135746, 7.5258837, 0.08189121; 0.55076504, 9.110939, 0.23270762; 0.80556875, 10.583368, -0.3004924; 0.7447402, 12.138739, -0.79344445; 4.5848484, 8.402572, -1.0823828; 4.861356, 3.4851398, -1.6703432; 5.9274654, 1.8982134, 1.0782931; 6.448618, 1.1070187, 2.4584827; 6.389816, 0.9606115, 3.6106184; 6.456558, 0.81963575, 4.5351048; 6.890286, 0.50173783, 3.5748353; -3.3712833, 8.585052, 0.53137946; -4.2604303, 4.0867424, -1.2949507; -3.6661675, 2.8103127, 1.5995786; -3.3690364, 2.1720986, 3.0468416; -3.0676575, 1.3283627, 3.9336524; -2.8715603, 0.73066986, 4.7319336; -3.6370358, 1.5592295, 4.34144\",\n  \"-0.0, 0.0, 0.0; 1.2823788, -1.9006101, 1.1011745; 2.6001425, -8.522927, 3.8353405; 4.4387374, -15.921582, 3.294902; 4.099074, -17.29368, 5.48232; 3.6608853, -16.75426, 6.5439477; -1.6571302, -1.5674969, 1.0538045; -2.444912, -8.742116, 0.97079486; -3.0568194, -15.362297, -3.0248134; -3.6986012, -16.721394, -0.8782246; -3.8720524, -16.500854, 0.36905122; 0.16350406, 2.4893498, -0.18766429; 0.35016572, 4.9990783, -0.10554237; 0.5854357, 7.525971, 0.12260654; 0.53340507, 9.110346, 0.2799444; 0.7891656, 10.584112, -0.2490882; 0.72840583, 12.140296, -0.73947275; 4.571483, 8.419167, -1.0201725; 4.8002014, 3.5036526, -1.6436263; 5.7950087, 1.9318259, 1.1401924; 6.2804117, 1.1483244, 2.5376978; 6.1796093, 1.0085605, 3.6877475; 6.212237, 0.8713223, 4.614627; 6.674466, 0.54254705, 3.6714687; -3.39155, 8.5729, 0.562239; -4.2575383, 4.0627728, -1.2459841; -3.6442828, 2.8148818, 1.6570156; -3.337656, 2.1909373, 3.1085138; -3.0297005, 1.3567667, 4.0020885; -2.8283632, 0.7673619, 4.805213; -3.598649, 1.5890418, 4.4096746\",\n  \"-0.0, 0.0, 0.0; 1.278993, -1.9005599, 1.1051911; 2.6283352, -8.510959, 3.8527622; 4.4828606, -15.91165, 3.402079; 4.155811, -17.278908, 5.594444; 3.7168007, -16.724716, 6.6480947; -1.6598889, -1.5619799, 1.0576483; -2.4280305, -8.739195, 1.0439587; -2.9790769, -15.373443, -2.9371488; -3.6256235, -16.718327, -0.7830503; -3.807204, -16.492111, 0.46204996; 0.16008246, 2.49017, -0.17955634; 0.33986467, 4.999859, -0.08226703; 0.56879234, 7.525921, 0.16102755; 0.5149731, 9.109618, 0.32446468; 0.77209723, 10.584553, -0.20063394; 0.7123045, 12.141491, -0.68874013; 4.5558043, 8.434667, -0.96601903; 4.7426124, 3.5214868, -1.62104; 5.664309, 1.9629045, 1.1952027; 6.1130614, 1.1861604, 2.608639; 5.9684153, 1.0532511, 3.754816; 5.965284, 0.9200089, 4.6828465; 6.457136, 0.5805441, 3.7586489; -3.4117076, 8.561327, 0.5961174; -4.252163, 4.041245, -1.1992489; -3.6236901, 2.8225675, 1.7128922; -3.3094532, 2.2132297, 3.168961; -2.995265, 1.3871381, 4.0678554; -2.78895, 0.8046959, 4.8747873; -3.5637558, 1.6203216, 4.475564\",\n  \"-0.0, 0.0, 0.0; 1.2756542, -1.9003428, 1.1094154; 2.6494453, -8.499854, 3.8710093; 4.520036, -15.901499, 3.5116336; 4.2129955, -17.26553, 5.7088966; 3.7771356, -16.713892, 6.7651925; -1.6625963, -1.5563471, 1.0616912; -2.4140701, -8.735121, 1.1177144; -2.8997612, -15.3829365, -2.8492439; -3.554917, -16.716232, -0.69054747; -3.7462962, -16.4837, 0.55191875; 0.15495053, 2.4911633, -0.17002688; 0.32718614, 5.0007086, -0.05671396; 0.55112886, 7.525781, 0.20106134; 0.49512595, 9.108987, 0.3684789; 0.75410306, 10.58483, -0.15314454; 0.69612896, 12.142515, -0.6390799; 4.539445, 8.447541, -0.9106978; 4.688338, 3.5373945, -1.5974078; 5.5335383, 1.992006, 1.2499309; 5.943948, 1.2219864, 2.678618; 5.7545323, 1.0954502, 3.8189774; 5.7147336, 0.9659228, 4.7466855; 6.2366576, 0.61659807, 3.8428805; -3.4322546, 8.551966, 0.6315874; -4.249145, 4.0245423, -1.1561412; -3.606728, 2.8332686, 1.7642847; -3.2855196, 2.2376316, 3.2244954; -2.9666204, 1.4199159, 4.1293693; -2.7566655, 0.84470755, 4.94054; -3.5352156, 1.6542578, 4.536267\",\n  \"-0.0, 0.0, 0.0; 1.2736009, -1.8998723, 1.1125754; 2.6674628, -8.489332, 3.8880768; 4.550541, -15.891626, 3.6185343; 4.2700024, -17.250969, 5.8222375; 3.8418074, -16.709724, 6.8870106; -1.6642505, -1.5525095, 1.0647146; -2.3969882, -8.732382, 1.1878929; -2.8228078, -15.392138, -2.7658956; -3.4857335, -16.716118, -0.6038413; -3.687178, -16.483543, 0.63702464; 0.15201059, 2.4918423, -0.16257305; 0.31745058, 5.0011544, -0.034877688; 0.5332936, 7.5253315, 0.23813084; 0.47492003, 9.107899, 0.41068983; 0.736243, 10.584473, -0.107687; 0.6803283, 12.142586, -0.5924927; 4.5234547, 8.464456, -0.8522705; 4.6342697, 3.5577512, -1.5700834; 5.4041643, 2.0275602, 1.306669; 5.776823, 1.2652562, 2.7497663; 5.5427303, 1.1442053, 3.882399; 5.4662147, 1.0179344, 4.808253; 6.0184655, 0.6603705, 3.9259472; -3.4546428, 8.537997, 0.65839636; -4.2502756, 4.0035276, -1.1210418; -3.5967805, 2.8407278, 1.8083882; -3.2700331, 2.2593288, 3.2731013; -2.9462233, 1.4494642, 4.1832767; -2.7324078, 0.8810293, 4.998205; -3.5146744, 1.6848807, 4.589756\",\n  \"-0.0, 0.0, 0.0; 1.2715969, -1.8987303, 1.1168092; 2.6794121, -8.479982, 3.904717; 4.5698423, -15.882989, 3.7193313; 4.3180356, -17.234467, 5.9313254; 3.8996909, -16.695906, 7.001362; -1.6658521, -1.5480006, 1.068767; -2.3799314, -8.7283325, 1.2573771; -2.7467823, -15.400087, -2.682068; -3.418334, -16.715618, -0.51751876; -3.62978, -16.48191, 0.7214689; 0.14774744, 2.4924498, -0.157094; 0.30681837, 5.00142, -0.01536119; 0.51752055, 7.524145, 0.27455908; 0.45615762, 9.106003, 0.45250565; 0.7193035, 10.583483, -0.062356174; 0.66531146, 12.142109, -0.5457275; 4.510634, 8.476425, -0.7933937; 4.5861998, 3.5740104, -1.5443277; 5.282448, 2.061203, 1.3602514; 5.618187, 1.3076892, 2.816963; 5.338988, 1.192408, 3.9399354; 5.225285, 1.0699427, 4.8624744; 5.8087263, 0.70495796, 4.0035925; -3.4737177, 8.527877, 0.68479717; -4.249015, 3.9866133, -1.0862716; -3.586341, 2.848946, 1.8509547; -3.2550042, 2.2801125, 3.3195658; -2.9271731, 1.4785736, 4.2356524; -2.7103856, 0.91728026, 5.054735; -3.4962175, 1.7148292, 4.640812\",\n  \"-0.0, 0.0, 0.0; 1.2696618, -1.898209, 1.119893; 2.6834137, -8.473301, 3.9193068; 4.577006, -15.876947, 3.8055804; 4.363161, -17.213453, 6.030629; 3.9603112, -16.667826, 7.103029; -1.6674025, -1.5442873, 1.0717175; -2.3625107, -8.72456, 1.3230307; -2.6777682, -15.408586, -2.6000457; -3.3540292, -16.7185, -0.433558; -3.5758374, -16.497057, 0.8058708; 0.14499559, 2.4930038, -0.1507378; 0.29809123, 5.001627, 0.0031964183; 0.50202966, 7.523428, 0.3057156; 0.43479517, 9.104617, 0.4874432; 0.69901824, 10.583107, -0.023954272; 0.6474849, 12.142456, -0.50525767; 4.496704, 8.489744, -0.7436297; 4.5378537, 3.591817, -1.5258675; 5.1672173, 2.099123, 1.404268; 5.469417, 1.3557453, 2.8734777; 5.143269, 1.2450407, 3.9841895; 4.990748, 1.1257272, 4.9015255; 5.607334, 0.75529754, 4.0685196; -3.492902, 8.516201, 0.70655894; -4.250473, 3.970645, -1.0611672; -3.5802464, 2.8562753, 1.8832674; -3.2451336, 2.2990909, 3.3554828; -2.9128456, 1.5056217, 4.276973; -2.692735, 0.9512146, 5.0998507; -3.482431, 1.7423878, 4.6810737\",\n  \"-0.0, 0.0, 0.0; 1.2691761, -1.8963753, 1.1235441; 2.6821537, -8.464857, 3.9388218; 4.5699525, -15.870593, 3.87643; 4.406229, -17.189074, 6.116435; 4.027904, -16.64218, 7.19709; -1.6677662, -1.5414625, 1.075212; -2.3451014, -8.721151, 1.3849404; -2.6091666, -15.419611, -2.517242; -3.290236, -16.723877, -0.34885263; -3.521928, -16.512497, 0.89052486; 0.14341731, 2.4936254, -0.1416975; 0.29091597, 5.0018764, 0.023361906; 0.48591524, 7.523711, 0.33144623; 0.4131379, 9.104121, 0.5177598; 0.67827445, 10.583824, 0.010358989; 0.6283638, 12.143661, -0.46953514; 4.4820585, 8.504079, -0.6991028; 4.4903307, 3.6113982, -1.5145097; 5.0555, 2.1406446, 1.4397063; 5.3255057, 1.4083002, 2.9206793; 4.9511304, 1.302352, 4.0165477; 4.7585897, 1.1866573, 4.926793; 5.4097285, 0.8116832, 4.122611; -3.5136757, 8.503636, 0.7171544; -4.258174, 3.956977, -1.0532861; -3.5841708, 2.8650255, 1.8986762; -3.2471704, 2.3190506, 3.3746557; -2.9106095, 1.5341697, 4.3019323; -2.6872916, 0.9871232, 5.128862; -3.480622, 1.7718635, 4.7048826\",\n  \"-0.0, 0.0, 0.0; 1.2676803, -1.8956562, 1.1264424; 2.6723518, -8.457035, 3.9623644; 4.5478096, -15.866058, 3.922021; 4.4402776, -17.166405, 6.1759853; 4.0922327, -16.62264, 7.2683334; -1.6689558, -1.5382348, 1.0779854; -2.3279572, -8.717144, 1.4407799; -2.5451148, -15.431857, -2.4362788; -3.2307763, -16.731909, -0.26680732; -3.4721098, -16.532295, 0.9726813; 0.14172614, 2.494152, -0.1339168; 0.28373122, 5.002081, 0.04058908; 0.47095847, 7.523922, 0.35341024; 0.39001432, 9.103561, 0.54286253; 0.6555907, 10.584541, 0.039432824; 0.6084421, 12.14521, -0.4380262; 4.4680576, 8.5165415, -0.66158795; 4.447208, 3.6286612, -1.5050764; 4.9539247, 2.1829329, 1.4720085; 5.1946054, 1.4631382, 2.9641483; 4.773365, 1.3614335, 4.043278; 4.5418077, 1.2493738, 4.9448476; 5.2273192, 0.87163657, 4.1711006; -3.5325425, 8.49262, 0.7267152; -4.2653923, 3.9449406, -1.0459623; -3.5879078, 2.8749313, 1.9132295; -3.2491663, 2.3399255, 3.392823; -2.9085028, 1.5633183, 4.325551; -2.6821527, 1.0233308, 5.156287; -3.4791043, 1.8016485, 4.7272897\",\n  \"-0.0, 0.0, 0.0; 1.2667966, -1.8945154, 1.1293526; 2.6582437, -8.447968, 3.990015; 4.5027, -15.864662, 3.9333332; 4.4497576, -17.15113, 6.197182; 4.1358356, -16.616043, 7.3040576; -1.6696475, -1.5355275, 1.0807707; -2.311271, -8.713511, 1.4900527; -2.4831104, -15.446892, -2.3567877; -3.1729128, -16.744026, -0.18688226; -3.4242342, -16.560093, 1.0530474; 0.13851945, 2.4947553, -0.12578689; 0.2747137, 5.002437, 0.056712702; 0.45554063, 7.5246005, 0.3706954; 0.36659855, 9.103424, 0.5633383; 0.6314827, 10.585764, 0.06355891; 0.5855974, 12.146979, -0.41223276; 4.45383, 8.525955, -0.6309467; 4.408905, 3.642726, -1.5000482; 4.8603706, 2.2217855, 1.4977901; 5.073326, 1.5144022, 3.0000453; 4.6038384, 1.4164578, 4.0594306; 4.3319216, 1.3078898, 4.9500923; 5.0528507, 0.9285816, 4.2100363; -3.5512195, 8.484689, 0.7310513; -4.2709575, 3.9365134, -1.045722; -3.5931385, 2.8864057, 1.9205139; -3.2542286, 2.3613536, 3.4036303; -2.9094396, 1.5931568, 4.3417916; -2.6801696, 1.0602702, 5.176304; -3.481104, 1.8315221, 4.7419953\",\n  \"-0.0, 0.0, 0.0; 1.2658343, -1.8938415, 1.1315594; 2.640059, -8.4392185, 4.0189104; 4.4382687, -15.866598, 3.9045389; 4.4412208, -17.143595, 6.1743603; 4.1652966, -16.619322, 7.2964306; -1.6704063, -1.5332118, 1.0828829; -2.2937706, -8.7102585, 1.5346198; -2.4235766, -15.4652405, -2.275825; -3.116985, -16.759201, -0.1051743; -3.3764825, -16.583744, 1.1342995; 0.13570456, 2.4952664, -0.11851151; 0.2666046, 5.002775, 0.07013479; 0.44156128, 7.525443, 0.383386; 0.3434489, 9.103493, 0.5779023; 0.607331, 10.587253, 0.081821024; 0.56320256, 12.149304, -0.39138532; 4.4404674, 8.534317, -0.6081996; 4.37626, 3.6560264, -1.5034323; 4.7768183, 2.2583792, 1.5125358; 4.964226, 1.5626419, 3.0236084; 4.4470296, 1.4683444, 4.060877; 4.134974, 1.3633469, 4.9387155; 4.890543, 0.9831151, 4.2345595; -3.5680451, 8.477687, 0.732726; -4.2764583, 3.929882, -1.0495385; -3.59638, 2.8989956, 1.922916; -3.2563415, 2.383554, 3.409142; -2.9066615, 1.6235613, 4.3521624; -2.6736765, 1.0976417, 5.1900587; -3.478629, 1.862373, 4.751668\",\n  \"-0.0, 0.0, 0.0; 1.2663686, -1.8928208, 1.1326689; 2.6204658, -8.428204, 4.0519915; 4.359252, -15.867676, 3.8435137; 4.4253716, -17.13273, 6.119054; 4.1959963, -16.630981, 7.261715; -1.6699632, -1.5329443, 1.0839444; -2.2743125, -8.709162, 1.5731397; -2.3690348, -15.486817, -2.197871; -3.0640569, -16.778038, -0.026104212; -3.331104, -16.616297, 1.2136319; 0.13291003, 2.4957392, -0.11151069; 0.25943953, 5.0031013, 0.08200412; 0.42930678, 7.5263777, 0.39315417; 0.3211803, 9.1036625, 0.5885632; 0.58346987, 10.588706, 0.09548715; 0.54079014, 12.151388, -0.37576586; 4.428901, 8.541118, -0.58962953; 4.349727, 3.667509, -1.5088457; 4.7010984, 2.289032, 1.5220395; 4.8638253, 1.6028719, 3.0403335; 4.302814, 1.5129645, 4.0549726; 3.953678, 1.4123064, 4.91925; 4.7406807, 1.0311155, 4.2509565; -3.5827706, 8.472092, 0.7317036; -4.2830215, 3.925921, -1.0579412; -3.6014318, 2.9128568, 1.9202893; -3.2606385, 2.4063246, 3.4094028; -2.9054658, 1.6551385, 4.3574133; -2.6683118, 1.1366699, 5.1987762; -3.4777691, 1.8942398, 4.7562656\",\n  \"-0.0, 0.0, 0.0; 1.2685641, -1.890507, 1.1340754; 2.6004376, -8.414829, 4.088155; 4.268675, -15.865876, 3.7542722; 4.3969, -17.11898, 6.0337696; 4.2164726, -16.645868, 7.197234; -1.6681703, -1.5339441, 1.08529; -2.2536173, -8.709175, 1.6105924; -2.3189073, -15.510067, -2.1189814; -3.014286, -16.798435, 0.054363966; -3.2877264, -16.650503, 1.294431; 0.12992597, 2.4961188, -0.10641669; 0.25303465, 5.003394, 0.0904036; 0.41885868, 7.5272465, 0.39904928; 0.3002284, 9.103635, 0.59559965; 0.5602484, 10.59006, 0.10549444; 0.5185037, 12.153348, -0.36383197; 4.419682, 8.545983, -0.5745527; 4.3309064, 3.6767964, -1.5160539; 4.634056, 2.3131027, 1.5267022; 4.772601, 1.6343262, 3.0507035; 4.1767454, 1.5487008, 4.0456576; 3.7979531, 1.4522827, 4.8978453; 4.6095667, 1.0702078, 4.260195; -3.5952919, 8.468195, 0.7260984; -4.28534, 3.9236112, -1.0715216; -3.602621, 2.9277508, 1.9122473; -3.2612615, 2.4298203, 3.4041297; -2.9011877, 1.6869998, 4.3568716; -2.660409, 1.1755664, 5.2015047; -3.4741387, 1.9260705, 4.75481\",\n  \"-0.0, 0.0, 0.0; 1.2716938, -1.8885835, 1.1337751; 2.58036, -8.401596, 4.122974; 4.160553, -15.863394, 3.6359813; 4.3399577, -17.107546, 5.9169283; 4.2021184, -16.64912, 7.092039; -1.6656297, -1.5369055, 1.0850024; -2.2344441, -8.710756, 1.6462083; -2.2720928, -15.533865, -2.0429506; -2.968393, -16.818771, 0.13214874; -3.2481346, -16.684942, 1.3724124; 0.12686065, 2.4964542, -0.102156006; 0.24691245, 5.003685, 0.09710341; 0.40871996, 7.528008, 0.40402928; 0.27914622, 9.103773, 0.59865385; 0.5370687, 10.5914755, 0.11132252; 0.4965063, 12.155655, -0.3551256; 4.4119143, 8.550439, -0.55586004; 4.319295, 3.68538, -1.5181015; 4.573016, 2.3324432, 1.5339658; 4.6867895, 1.6590471, 3.0623984; 4.0621753, 1.5780263, 4.0399475; 3.6587596, 1.4859458, 4.8812447; 4.489828, 1.1022022, 4.2702107; -3.6076746, 8.464652, 0.71551776; -4.288861, 3.9219313, -1.090174; -3.6071498, 2.9425983, 1.8992903; -3.266295, 2.4529328, 3.3940208; -2.9013133, 1.7179295, 4.350949; -2.6569083, 1.2130347, 5.1984696; -3.474917, 1.956682, 4.7481375\",\n  \"-0.0, 0.0, 0.0; 1.2769631, -1.8856891, 1.1326696; 2.5597227, -8.388842, 4.1543884; 4.0342107, -15.85854, 3.4894881; 4.2532167, -17.100359, 5.768246; 4.1508913, -16.645092, 6.948204; -1.6613406, -1.5422847, 1.083945; -2.2131882, -8.71441, 1.6828871; -2.2280703, -15.557485, -1.9692655; -2.9248114, -16.83992, 0.20715022; -3.2103198, -16.722717, 1.4477823; 0.1236718, 2.4967377, -0.0990939; 0.24135649, 5.003962, 0.101657465; 0.39914525, 7.5286813, 0.4074121; 0.2580887, 9.103823, 0.5990778; 0.5140406, 10.592645, 0.11413184; 0.47494617, 12.157639, -0.34970352; 4.4050803, 8.554826, -0.53695196; 4.312731, 3.6929078, -1.5149658; 4.5155306, 2.3481479, 1.5445147; 4.6037936, 1.6788464, 3.0764275; 3.9531217, 1.6018579, 4.0371604; 3.52726, 1.5134419, 4.8677197; 4.375034, 1.1278327, 4.281306; -3.6195068, 8.46113, 0.7019079; -4.2922645, 3.9204445, -1.1120431; -3.6139686, 2.9579206, 1.8836505; -3.27482, 2.4766586, 3.3814952; -2.9055572, 1.7500479, 4.3431783; -2.658264, 1.2520905, 5.193959; -3.4807434, 1.9877617, 4.738696\",\n  \"-0.0, 0.0, 0.0; 1.2832704, -1.8823488, 1.1310961; 2.5397098, -8.378456, 4.178914; 3.8986516, -15.849254, 3.3111262; 4.1465964, -17.09576, 5.5843534; 4.0737443, -16.64081, 6.7666187; -1.6561785, -1.54888, 1.0824392; -2.192192, -8.718701, 1.7219611; -2.1869287, -15.578835, -1.8980759; -2.8834238, -16.859396, 0.27952135; -3.1737, -16.757624, 1.5204089; 0.12079095, 2.496954, -0.09718278; 0.23678915, 5.0042434, 0.10373168; 0.39072955, 7.529407, 0.40777612; 0.2380747, 9.103949, 0.5954448; 0.4924662, 10.5936985, 0.11253151; 0.4556029, 12.15957, -0.34851682; 4.39908, 8.558992, -0.5224905; 4.3124614, 3.7001061, -1.5159719; 4.464995, 2.3627691, 1.5496747; 4.5280886, 1.6971927, 3.0844514; 3.8544674, 1.6223687, 4.029409; 3.408704, 1.5357001, 4.849645; 4.26995, 1.1483649, 4.2843814; -3.6299934, 8.457812, 0.6863507; -4.2948947, 3.9199758, -1.1375998; -3.6186745, 2.9742513, 1.8639086; -3.280565, 2.5013888, 3.3646607; -2.907518, 1.7819602, 4.330275; -2.6576529, 1.2899289, 5.1837482; -3.484012, 2.0187192, 4.724461\",\n  \"-0.0, 0.0, 0.0; 1.2897425, -1.878547, 1.1300552; 2.513901, -8.371241, 4.1982164; 3.7549067, -15.833822, 3.1108408; 4.0215073, -17.093592, 5.374626; 3.9713838, -16.635653, 6.55692; -1.6508436, -1.5552588, 1.0814427; -2.1693888, -8.722512, 1.762789; -2.149866, -15.596654, -1.8305254; -2.847221, -16.875925, 0.34755588; -3.1419113, -16.789402, 1.58856; 0.11846632, 2.4970286, -0.09812687; 0.23385671, 5.004407, 0.102023825; 0.3850753, 7.5296717, 0.4065926; 0.21916544, 9.103293, 0.59069246; 0.4725247, 10.593825, 0.109653026; 0.439299, 12.160393, -0.3493026; 4.396895, 8.561411, -0.5061677; 4.32345, 3.7044964, -1.5102952; 4.4246364, 2.3723063, 1.5597143; 4.462025, 1.7093124, 3.096449; 3.7668982, 1.6350868, 4.0257487; 3.3023918, 1.548687, 4.8355465; 4.175603, 1.1601591, 4.289795; -3.6373398, 8.455877, 0.667498; -4.292256, 3.919993, -1.1649023; -3.6198497, 2.9931738, 1.8433524; -3.2836459, 2.5297644, 3.3474777; -2.9077365, 1.8166256, 4.316641; -2.6558795, 1.3298508, 5.172539; -3.4850488, 2.0532036, 4.709735\",\n  \"-0.0, 0.0, 0.0; 1.2959682, -1.8757874, 1.1275139; 2.4794977, -8.368737, 4.2110376; 3.6068192, -15.81163, 2.8900218; 3.8852699, -17.091309, 5.141179; 3.8522322, -16.625795, 6.3211136; -1.645691, -1.5623918, 1.0790108; -2.1413782, -8.727081, 1.802995; -2.1141965, -15.61336, -1.7669547; -2.8133416, -16.891655, 0.41112566; -3.1117291, -16.81762, 1.6520538; 0.116313174, 2.49705, -0.100134544; 0.23114215, 5.0046353, 0.09773741; 0.3795904, 7.5300374, 0.40252993; 0.20169652, 9.102919, 0.5817009; 0.45430702, 10.59417, 0.102499604; 0.4244777, 12.161599, -0.35373875; 4.394773, 8.563908, -0.4928696; 4.336412, 3.7083726, -1.5046306; 4.385254, 2.3804798, 1.5685177; 4.3964524, 1.7196524, 3.1065989; 3.6815424, 1.6455854, 4.02078; 3.1996956, 1.5588698, 4.8203473; 4.083047, 1.1687549, 4.2923346; -3.644453, 8.453994, 0.645697; -4.2914786, 3.9207754, -1.196078; -3.623292, 3.0131986, 1.818976; -3.2891996, 2.55941, 3.3265014; -2.911341, 1.8517174, 4.2988935; -2.6582742, 1.3694621, 5.1569905; -3.4897392, 2.0878837, 4.6906376\",\n  \"-0.0, 0.0, 0.0; 1.3032169, -1.872134, 1.1252283; 2.4380565, -8.370197, 4.2162747; 3.4575644, -15.780232, 2.6463737; 3.7444904, -17.08893, 4.8797126; 3.7263238, -16.62244, 6.0595837; -1.6396463, -1.5702367, 1.0768231; -2.105644, -8.73281, 1.8403888; -2.0835996, -15.630054, -1.7083659; -2.7822795, -16.907463, 0.4703834; -3.082762, -16.850222, 1.7116945; 0.11503755, 2.4969695, -0.10355987; 0.2305401, 5.0048127, 0.09061377; 0.37663475, 7.530428, 0.3947783; 0.18751922, 9.102503, 0.5694762; 0.43920153, 10.594418, 0.09185511; 0.4122202, 12.16252, -0.36223972; 4.3950324, 8.565609, -0.48453748; 4.3582344, 3.710959, -1.5015467; 4.3542953, 2.3858845, 1.5732034; 4.3390913, 1.7264795, 3.1118608; 3.604873, 1.651298, 4.0105157; 3.1060083, 1.562957, 4.799397; 3.9984908, 1.1713693, 4.288094; -3.6487787, 8.452753, 0.6208717; -4.2856293, 3.922163, -1.2308915; -3.6232324, 3.0345743, 1.7913821; -3.292034, 2.5907798, 3.302517; -2.912999, 1.887689, 4.2777853; -2.6593084, 1.4092587, 5.1378374; -3.4924378, 2.1235738, 4.6681585\",\n  \"-0.0, 0.0, 0.0; 1.3099523, -1.8691138, 1.1224248; 2.3941464, -8.374378, 4.216501; 3.30861, -15.739037, 2.3894398; 3.600429, -17.084543, 4.6001577; 3.5946963, -16.61814, 5.7801886; -1.6339942, -1.577947, 1.0741405; -2.0682273, -8.738592, 1.8736663; -2.0532465, -15.647274, -1.6528063; -2.752842, -16.925259, 0.525311; -3.0555778, -16.88268, 1.766664; 0.11368135, 2.496812, -0.10872412; 0.22998446, 5.0050097, 0.080331445; 0.37445635, 7.530764, 0.38411534; 0.17659356, 9.102004, 0.55662507; 0.4265229, 10.594677, 0.08045447; 0.40012404, 12.163072, -0.37266725; 4.3963623, 8.56616, -0.47875506; 4.3840885, 3.7119713, -1.4985533; 4.327558, 2.3898516, 1.5769515; 4.286047, 1.7319323, 3.1157598; 3.5338664, 1.6550851, 3.9992914; 3.0191252, 1.5647522, 4.7776775; 3.9201791, 1.1723766, 4.282259; -3.6519961, 8.452617, 0.59297305; -4.2782435, 3.9240847, -1.2674184; -3.6209216, 3.058122, 1.7622278; -3.2922614, 2.6251426, 3.2770495; -2.9134402, 1.9258239, 4.255109; -2.660237, 1.4505517, 5.117053; -3.4940524, 2.161673, 4.643759\",\n  \"-0.0, 0.0, 0.0; 1.3163353, -1.8663415, 1.1195667; 2.351379, -8.3813715, 4.209926; 3.1623487, -15.688301, 2.1209774; 3.4560082, -17.078259, 4.303775; 3.4628077, -16.625544, 5.489119; -1.6286021, -1.5853633, 1.0714056; -2.0324073, -8.744009, 1.9040964; -2.0260556, -15.665518, -1.5971594; -2.724018, -16.942045, 0.5823369; -3.0275521, -16.91231, 1.8238691; 0.11331764, 2.4965513, -0.11491247; 0.23051237, 5.005158, 0.068066426; 0.37221143, 7.531149, 0.3711901; 0.16742554, 9.101938, 0.5396748; 0.41533715, 10.595425, 0.06500378; 0.38826185, 12.164437, -0.3859338; 4.3969846, 8.568562, -0.47574028; 4.4112043, 3.7139096, -1.4933051; 4.30464, 2.392515, 1.5811845; 4.238109, 1.7349658, 3.1192727; 3.4689322, 1.6566588, 3.9879177; 2.9390945, 1.5644022, 4.755879; 3.8477564, 1.1707933, 4.2755647; -3.6556182, 8.450661, 0.563125; -4.271226, 3.9241886, -1.305812; -3.6208036, 3.080305, 1.7315441; -3.2955937, 2.6583624, 3.2502203; -2.9170046, 1.9624612, 4.230804; -2.664327, 1.4900157, 5.094455; -3.4988756, 2.1979969, 4.617758\",\n  \"-0.0, 0.0, 0.0; 1.3213078, -1.8644196, 1.1169086; 2.3113878, -8.391546, 4.196456; 3.0173974, -15.629879, 1.8468413; 3.306907, -17.070755, 3.9969296; 3.3274188, -16.65893, 5.1969366; -1.62438, -1.5914004, 1.0688616; -2.0024297, -8.747511, 1.9347763; -2.0000675, -15.683226, -1.5382593; -2.699226, -16.960157, 0.64061594; -3.0049741, -16.941143, 1.8818154; 0.1114988, 2.496298, -0.121978685; 0.22822964, 5.0054092, 0.05425158; 0.367777, 7.5316114, 0.35660866; 0.15607119, 9.10183, 0.52183926; 0.40207323, 10.596232, 0.049061596; 0.37456137, 12.165908, -0.39953732; 4.395238, 8.570239, -0.4759324; 4.4407053, 3.7147703, -1.4886703; 4.2842913, 2.393125, 1.5835788; 4.1928353, 1.7354546, 3.1203346; 3.4077363, 1.6557889, 3.9744902; 2.863694, 1.5616556, 4.732224; 3.779162, 1.166642, 4.2661996; -3.66111, 8.449575, 0.5331496; -4.2666035, 3.9255672, -1.3450336; -3.6234043, 3.1019185, 1.6994069; -3.301805, 2.6900964, 3.2216258; -2.9245772, 1.9976425, 4.20517; -2.673317, 1.5281053, 5.0708184; -3.507782, 2.2333815, 4.589983\",\n  \"-0.0, 0.0, 0.0; 1.3253075, -1.8633969, 1.113872; 2.2770457, -8.407426, 4.1695433; 2.8714619, -15.566765, 1.5612593; 3.1533818, -17.062372, 3.674668; 3.1869884, -16.695059, 4.888748; -1.6209731, -1.5968143, 1.0659555; -1.974158, -8.750236, 1.9639907; -1.9767677, -15.699253, -1.4823489; -2.6751738, -16.976057, 0.69684196; -2.9818087, -16.96512, 1.9379201; 0.10979678, 2.4960048, -0.12930086; 0.22553778, 5.005669, 0.039552912; 0.36238563, 7.532181, 0.3405584; 0.14315906, 9.10196, 0.50004923; 0.38779157, 10.59721, 0.029243857; 0.3608925, 12.167953, -0.4156401; 4.392121, 8.572795, -0.47838777; 4.4698043, 3.7155576, -1.4806316; 4.266517, 2.3918972, 1.5880041; 4.151633, 1.7332189, 3.1227539; 3.3530207, 1.6524998, 3.9641886; 2.7968779, 1.5568175, 4.71289; 3.7179143, 1.1604141, 4.2591805; -3.6676927, 8.447677, 0.5020736; -4.26597, 3.927002, -1.3864222; -3.626295, 3.119731, 1.6631429; -3.306458, 2.7160974, 3.187924; -2.9318185, 2.0283267, 4.1757345; -2.6829257, 1.5628576, 5.044259; -3.5163536, 2.2654204, 4.5576873\",\n  \"-0.0, 0.0, 0.0; 1.3288399, -1.8630621, 1.1102178; 2.2412431, -8.43241, 4.1232624; 2.7222686, -15.50086, 1.2565165; 2.9924512, -17.052872, 3.330421; 3.037633, -16.734394, 4.5578446; -1.6179549, -1.6021967, 1.0624591; -1.9485575, -8.752318, 1.9947178; -1.9566883, -15.713699, -1.4265723; -2.6538477, -16.989456, 0.7536311; -2.9612877, -16.9888, 1.994558; 0.10756718, 2.4957643, -0.13566454; 0.22165695, 5.0060377, 0.025063872; 0.3557576, 7.5331607, 0.3221457; 0.12910408, 9.102498, 0.47548395; 0.3729606, 10.598659, 0.007175237; 0.34763023, 12.170742, -0.43304166; 4.386673, 8.575609, -0.48861885; 4.4982157, 3.716858, -1.4802723; 4.249704, 2.3876467, 1.582629; 4.1122136, 1.726181, 3.1143184; 3.302332, 1.6446579, 3.9448333; 2.736083, 1.5478386, 4.6857734; 3.6619754, 1.1505396, 4.242859; -3.6754322, 8.445712, 0.47218436; -4.26522, 3.9284787, -1.4271827; -3.6288881, 3.1353486, 1.6267893; -3.3107214, 2.7387857, 3.1537738; -2.939901, 2.0572634, 4.1473393; -2.6942906, 1.5973259, 5.0197363; -3.525641, 2.2971334, 4.5256968\",\n  \"-0.0, 0.0, 0.0; 1.3313777, -1.8632728, 1.1068182; 2.2022843, -8.46434, 4.0622683; 2.5739207, -15.431551, 0.9425795; 2.8268986, -17.03943, 2.975691; 2.880041, -16.765749, 4.2135572; -1.6157807, -1.6065395, 1.0592053; -1.9234749, -8.752973, 2.0269108; -1.9358793, -15.725798, -1.3709817; -2.6323938, -17.001287, 0.8095839; -2.9405763, -17.007683, 2.0503106; 0.10755694, 2.4954088, -0.14205542; 0.2202093, 5.0062704, 0.0102838725; 0.34904963, 7.5342097, 0.30271286; 0.11692476, 9.103339, 0.4498746; 0.3597504, 10.600552, -0.015598983; 0.33429092, 12.173995, -0.4509198; 4.381205, 8.581679, -0.49531585; 4.526476, 3.7216988, -1.4765248; 4.2346787, 2.3834438, 1.5786111; 4.07555, 1.7174352, 3.1062312; 3.2555585, 1.6342847, 3.9266024; 2.6802478, 1.5358015, 4.660307; 3.610917, 1.1387068, 4.2273326; -3.6841645, 8.440389, 0.4360391; -4.266986, 3.9250484, -1.4699694; -3.6362185, 3.145497, 1.5886501; -3.3208346, 2.7557225, 3.117958; -2.954396, 2.0820034, 4.118447; -2.7128756, 1.6287705, 4.9954824; -3.5426702, 2.3235245, 4.4917893\",\n  \"-0.0, 0.0, 0.0; 1.3331429, -1.8643167, 1.1029288; 2.163891, -8.502011, 3.987043; 2.425909, -15.359112, 0.62191033; 2.6612673, -17.022133, 2.6123335; 2.7214143, -16.786394, 3.857664; -1.614273, -1.6104994, 1.0554837; -1.8976529, -8.752945, 2.0593858; -1.9178644, -15.735874, -1.317657; -2.6114876, -17.011307, 0.8638642; -2.9193275, -17.027174, 2.1045907; 0.1072487, 2.495077, -0.14799485; 0.21785244, 5.0065603, -0.004676312; 0.34132883, 7.5354843, 0.28148642; 0.106057405, 9.104599, 0.42372075; 0.34850496, 10.603013, -0.038069278; 0.3228975, 12.178014, -0.46771428; 4.3737803, 8.588159, -0.5081507; 4.55052, 3.7267628, -1.4771087; 4.2195706, 2.3768935, 1.5689137; 4.0408726, 1.705056, 3.0918102; 3.2128067, 1.6197183, 3.9038038; 2.6302497, 1.5191612, 4.6314845; 3.5648394, 1.1228487, 4.2063084; -3.6938646, 8.434712, 0.40130523; -4.2696934, 3.9213939, -1.5116054; -3.6441786, 3.1567833, 1.5518602; -3.3314214, 2.7744775, 3.0835907; -2.969027, 2.1081185, 4.0904617; -2.7314894, 1.6610743, 4.971751; -3.560372, 2.3500214, 4.4586678\",\n  \"-0.0, 0.0, 0.0; 1.3344445, -1.8656452, 1.0991015; 2.1239676, -8.544479, 3.8985791; 2.2824247, -15.283556, 0.29686522; 2.4954844, -17.0083, 2.2366273; 2.559943, -16.810905, 3.4883938; -1.6131593, -1.614008, 1.0518208; -1.8732669, -8.752069, 2.0925283; -1.9008911, -15.744745, -1.2642322; -2.592391, -17.020096, 0.9180105; -2.9001877, -17.045095, 2.1585975; 0.10694798, 2.4945996, -0.1560449; 0.21578854, 5.0066957, -0.022436082; 0.3347788, 7.53632, 0.25940147; 0.09711082, 9.105451, 0.39741915; 0.3389791, 10.605074, -0.060733765; 0.3126549, 12.181541, -0.48492092; 4.368069, 8.593334, -0.5200875; 4.5796256, 3.7308822, -1.4766908; 4.210312, 2.3708324, 1.5603797; 4.012432, 1.6938668, 3.0786266; 3.177414, 1.6050478, 3.8830922; 2.5886645, 1.501667, 4.6053734; 3.5277, 1.1081057, 4.1875; -3.702042, 8.429956, 0.36544853; -4.268609, 3.915926, -1.548547; -3.649722, 3.1713161, 1.5211852; -3.3402784, 2.7990103, 3.0560489; -2.981867, 2.1396875, 4.068959; -2.7483408, 1.6984875, 4.9542565; -3.576527, 2.3813248, 4.431964\",\n  \"-0.0, 0.0, 0.0; 1.3331903, -1.8691386, 1.0946796; 2.0832496, -8.591403, 3.799458; 2.1445982, -15.20822, -0.025013447; 2.333288, -16.991364, 1.8637989; 2.3995864, -16.81404, 3.1184697; -1.6142602, -1.6156588, 1.0475888; -1.8485969, -8.7489605, 2.1263564; -1.8845196, -15.751417, -1.2098742; -2.5740793, -17.026445, 0.97317076; -2.8817856, -17.060114, 2.213575; 0.10804739, 2.494104, -0.16304979; 0.21481259, 5.0067844, -0.03911251; 0.32821846, 7.5372725, 0.23722446; 0.08882363, 9.106494, 0.37115592; 0.3295032, 10.607456, -0.083224386; 0.30119485, 12.18538, -0.501833; 4.3626394, 8.599635, -0.52903014; 4.608608, 3.7367048, -1.474913; 4.202961, 2.3663826, 1.5528904; 3.9869137, 1.6842299, 3.0663314; 3.145288, 1.5899935, 3.8632598; 2.5506947, 1.4823971, 4.580118; 3.4949164, 1.0936863, 4.1694536; -3.7105622, 8.4239645, 0.32543248; -4.2687974, 3.9089642, -1.5887234; -3.6569328, 3.187999, 1.4880526; -3.351001, 2.8275154, 3.0264387; -2.996588, 2.1742566, 4.044671; -2.767139, 1.7380037, 4.9334793; -3.5947313, 2.4148972, 4.402579\",\n  \"-0.0, 0.0, 0.0; 1.3327647, -1.8721983, 1.0899585; 2.0412312, -8.640379, 3.689392; 2.0143197, -15.133086, -0.34255934; 2.1766887, -16.974178, 1.4923334; 2.2434673, -16.815145, 2.7494285; -1.6146424, -1.618198, 1.0430708; -1.8239704, -8.74635, 2.1603336; -1.8707515, -15.758741, -1.1548288; -2.5569835, -17.03319, 1.029603; -2.8638105, -17.075941, 2.2699451; 0.10970108, 2.493502, -0.17096257; 0.21454298, 5.0067396, -0.057090655; 0.32114652, 7.538021, 0.21464802; 0.08149564, 9.107399, 0.34627116; 0.32186168, 10.609554, -0.1043143; 0.2919667, 12.188745, -0.51800793; 4.356251, 8.607942, -0.53736216; 4.6351895, 3.7450118, -1.4740539; 4.1958594, 2.366707, 1.5454152; 3.9629607, 1.6804955, 3.0545156; 3.1156487, 1.5800169, 3.8446267; 2.5160918, 1.4679468, 4.5566487; 3.466286, 1.0860472, 4.153436; -3.7199392, 8.415786, 0.28470498; -4.2711163, 3.899541, -1.6285596; -3.6674695, 3.2019396, 1.4552178; -3.3656468, 2.8531394, 2.9971046; -3.0140798, 2.205756, 4.020065; -2.7879348, 1.7741361, 4.9119763; -3.6160812, 2.4439945, 4.3730774\",\n  \"-0.0, 0.0, 0.0; 1.3303199, -1.8767948, 1.0850294; 1.997434, -8.691957, 3.5701392; 1.8917483, -15.062103, -0.65155244; 2.0282497, -16.95752, 1.1293424; 2.0948312, -16.807985, 2.3876133; -1.6167715, -1.6191057, 1.0383539; -1.7977287, -8.742163, 2.1924572; -1.8576124, -15.763696, -1.1030855; -2.540473, -17.036608, 1.0832982; -2.8461618, -17.08824, 2.3235836; 0.110414304, 2.492851, -0.1797669; 0.21319869, 5.006622, -0.076259494; 0.3157263, 7.538456, 0.19187477; 0.07501826, 9.107711, 0.3230412; 0.31532526, 10.610882, -0.12417683; 0.28485903, 12.19097, -0.53438246; 4.3524175, 8.612037, -0.54627347; 4.666555, 3.7495818, -1.4742471; 4.193747, 2.3667312, 1.538078; 3.9440958, 1.678165, 3.043423; 3.091439, 1.5707777, 3.826847; 2.4872441, 1.4539251, 4.5341644; 3.443937, 1.0801247, 4.1388063; -3.726646, 8.411474, 0.24496827; -4.2679768, 3.8931942, -1.6663024; -3.6716337, 3.217769, 1.4238262; -3.3734617, 2.8800578, 2.9688888; -3.0241685, 2.2397165, 3.9970474; -2.8007362, 1.813791, 4.8923736; -3.629475, 2.4763713, 4.3454475\",\n  \"-0.0, 0.0, 0.0; 1.3274057, -1.8818923, 1.0797567; 1.9527435, -8.744529, 3.442049; 1.7795057, -14.996241, -0.9509773; 1.888648, -16.941029, 0.77781117; 1.9537457, -16.80528, 2.0377214; -1.619302, -1.6198046, 1.033308; -1.7712922, -8.737348, 2.2249956; -1.8454658, -15.768939, -1.048738; -2.524806, -17.03987, 1.1398935; -2.829235, -17.10037, 2.3800879; 0.11146307, 2.4922626, -0.18713018; 0.21217285, 5.00652, -0.09390701; 0.3104729, 7.539094, 0.16876511; 0.07068765, 9.1085, 0.2998109; 0.31098866, 10.612567, -0.14438686; 0.2791828, 12.193377, -0.55170256; 4.3480377, 8.6164055, -0.5591; 4.6971674, 3.754579, -1.4778128; 4.1928535, 2.3680546, 1.5277061; 3.9274375, 1.6775689, 3.0294704; 3.0707667, 1.5627794, 3.8074472; 2.4631276, 1.4408253, 4.5109425; 3.4259, 1.0758126, 4.1221867; -3.7332091, 8.406801, 0.207117; -4.265008, 3.8880339, -1.7056766; -3.6764452, 3.2354398, 1.3908434; -3.3821633, 2.9091444, 2.9391017; -3.0362442, 2.2763133, 3.9730346; -2.816485, 1.8564675, 4.8721337; -3.6452084, 2.5114157, 4.3160677\",\n  \"-0.0, 0.0, 0.0; 1.3258034, -1.8858954, 1.0747292; 1.90594, -8.797121, 3.3031037; 1.671554, -14.935513, -1.2441828; 1.7538744, -16.922462, 0.43750393; 1.8172443, -16.793499, 1.6982148; -1.6206975, -1.6214699, 1.0284969; -1.7465534, -8.73328, 2.2568913; -1.8363008, -15.77512, -0.9943464; -2.5105112, -17.043528, 1.1973329; -2.8124793, -17.109383, 2.4378562; 0.11313841, 2.4915342, -0.19563097; 0.21267298, 5.0062237, -0.113459475; 0.30658767, 7.5395164, 0.14383039; 0.06859088, 9.109219, 0.27458188; 0.30763072, 10.614489, -0.16620922; 0.27230784, 12.196136, -0.5699656; 4.3452272, 8.620726, -0.5721973; 4.725501, 3.7594085, -1.4811928; 4.19318, 2.368824, 1.5176127; 3.913751, 1.6762267, 3.0158584; 3.0537038, 1.5540109, 3.7889636; 2.4431787, 1.4269898, 4.489055; 3.411759, 1.0709722, 4.1064324; -3.7383852, 8.401757, 0.16593055; -4.2585115, 3.8810868, -1.7455764; -3.6795287, 3.248525, 1.3569009; -3.3900383, 2.9322445, 2.9081378; -3.04611, 2.3088503, 3.9484482; -2.8289142, 1.8966824, 4.851713; -3.6585562, 2.542403, 4.286304\",\n  \"-0.0, 0.0, 0.0; 1.3242681, -1.889704, 1.0699209; 1.8555648, -8.849311, 3.1553097; 1.5718007, -14.881448, -1.529283; 1.6247324, -16.904139, 0.11045432; 1.6842856, -16.78267, 1.3720951; -1.6220348, -1.6230441, 1.0238953; -1.7232592, -8.729096, 2.2873862; -1.8286848, -15.780796, -0.9419379; -2.4976895, -17.045506, 1.2534702; -2.7978706, -17.123957, 2.4936943; 0.11366785, 2.4908316, -0.20408745; 0.21231838, 5.0059094, -0.13355228; 0.3042588, 7.539959, 0.11691201; 0.06925957, 9.110036, 0.24858293; 0.30655384, 10.616602, -0.18871108; 0.2667068, 12.198893, -0.589519; 4.3448343, 8.62094, -0.5884564; 4.756613, 3.7600613, -1.4859967; 4.1952786, 2.3677292, 1.5067017; 3.9013338, 1.6741749, 3.0017238; 3.0383887, 1.5457673, 3.7705843; 2.4253848, 1.414754, 4.467768; 3.399359, 1.067034, 4.091256; -3.7411394, 8.400462, 0.122857325; -4.249231, 3.8790832, -1.790208; -3.6816509, 3.2664547, 1.3183705; -3.3978627, 2.9601386, 2.8726578; -3.0566597, 2.3473625, 3.9201493; -2.8425667, 1.9439343, 4.8280883; -3.672462, 2.5801578, 4.252378\",  \n]\n\nexport const seq7 = [\n  \"-0.0, 0.0, 0.0; 1.3236053, -1.8930218, 1.0648643; 1.8034232, -8.899367, 3.0008745; 1.481987, -14.836378, -1.8013315; 1.503159, -16.88778, -0.19692421; 1.5567421, -16.774368, 1.0657339; -1.6226231, -1.6254998, 1.0190563; -1.7018772, -8.725339, 2.318538; -1.8222878, -15.787455, -0.8874147; -2.4853072, -17.04818, 1.3120971; -2.7828104, -17.13349, 2.5525136; 0.11455394, 2.4901314, -0.21198586; 0.21289171, 5.005515, -0.15284517; 0.3028627, 7.5403175, 0.09061363; 0.0708103, 9.110839, 0.22221462; 0.306531, 10.618567, -0.21191137; 0.26250625, 12.201536, -0.60959095; 4.345024, 8.621242, -0.6056975; 4.78421, 3.760191, -1.4892061; 4.196329, 2.3652165, 1.497158; 3.8891041, 1.670266, 2.9888582; 3.0237017, 1.536727, 3.7540736; 2.4085906, 1.4025882, 4.448803; 3.3874283, 1.0623606, 4.0781035; -3.7429476, 8.39886, 0.08191874; -4.2384653, 3.8759274, -1.830772; -3.6824362, 3.282398, 1.2835938; -3.4044223, 2.9856336, 2.840775; -3.065991, 2.3833802, 3.8952453; -2.8549628, 1.9886396, 4.807709; -3.6848743, 2.6156902, 4.2220445\",\n  \"-0.0, 0.0, 0.0; 1.3237907, -1.8969535, 1.0576129; 1.7487125, -8.947727, 2.8389792; 1.4002862, -14.801514, -2.0624886; 1.3903005, -16.876606, -0.4887328; 1.4369378, -16.768833, 0.77469456; -1.6224916, -1.6299611, 1.0121167; -1.6780627, -8.72338, 2.3473926; -1.8155106, -15.7953825, -0.8360021; -2.4721909, -17.052551, 1.3674433; -2.7666273, -17.144053, 2.6081505; 0.11693084, 2.489235, -0.22102202; 0.21646695, 5.004833, -0.17430304; 0.30446732, 7.5402336, 0.06358503; 0.07563363, 9.111165, 0.19592337; 0.31051177, 10.61966, -0.23598947; 0.26308373, 12.202876, -0.6322925; 4.348437, 8.621417, -0.6217395; 4.8141346, 3.7600517, -1.4898071; 4.1967998, 2.3656826, 1.490891; 3.874849, 1.6709698, 2.9795933; 3.0071547, 1.5318375, 3.7412086; 2.3900614, 1.3940063, 4.433453; 3.373273, 1.0610521, 4.067758; -3.7416825, 8.396877, 0.03940466; -4.227379, 3.8749099, -1.8780824; -3.683827, 3.3003929, 1.2420462; -3.4120517, 3.0131338, 2.8021083; -3.0772974, 2.4222116, 3.8641362; -2.8700325, 2.0368855, 4.781474; -3.6992373, 2.6546187, 4.185006\",\n  \"-0.0, 0.0, 0.0; 1.3226638, -1.9017812, 1.050327; 1.6897974, -8.995523, 2.6662757; 1.3225816, -14.77519, -2.3210294; 1.2844272, -16.869518, -0.77340055; 1.3241957, -16.767101, 0.49070692; -1.6234844, -1.6332836, 1.0051439; -1.6588683, -8.719748, 2.3775194; -1.8120453, -15.801426, -0.7835696; -2.462565, -17.053534, 1.4245803; -2.7541208, -17.151527, 2.6654718; 0.11886894, 2.4883854, -0.2293949; 0.21933007, 5.004137, -0.19441128; 0.30646488, 7.5400496, 0.03828238; 0.07844348, 9.111102, 0.17059182; 0.31317824, 10.620296, -0.25895518; 0.26454422, 12.203927, -0.6534469; 4.3526826, 8.619886, -0.6358009; 4.8411717, 3.7574697, -1.4852511; 4.196513, 2.3648343, 1.4904686; 3.8609035, 1.6709232, 2.9765258; 2.991109, 1.5274984, 3.7349424; 2.3721895, 1.3871207, 4.4250417; 3.3595371, 1.0607145, 4.0646253; -3.7396042, 8.396502, -0.0013360605; -4.214042, 3.875948, -1.9249659; -3.6847732, 3.3214927, 1.201242; -3.4201388, 3.0442674, 2.7643442; -3.088428, 2.464167, 3.8332708; -2.884409, 2.0877764, 4.7550354; -3.7133012, 2.6962137, 4.1486607\",\n  \"-0.0, 0.0, 0.0; 1.323081, -1.9055831, 1.0428847; 1.6314746, -9.039587, 2.4844553; 1.2553792, -14.756105, -2.5744545; 1.1877228, -16.8658, -1.0488633; 1.2185404, -16.775066, 0.2163862; -1.6231532, -1.6379732, 0.9980225; -1.6394904, -8.71664, 2.410411; -1.8092984, -15.807766, -0.7285733; -2.4535482, -17.05617, 1.4835081; -2.742292, -17.162506, 2.7243705; 0.122396514, 2.4874585, -0.23745447; 0.225171, 5.003254, -0.21432808; 0.3105222, 7.5397563, 0.012523517; 0.082570225, 9.110808, 0.14495717; 0.31745458, 10.6206255, -0.2823103; 0.26820529, 12.204592, -0.67538166; 4.3591113, 8.619308, -0.6476333; 4.867791, 3.7556129, -1.4776914; 4.1964912, 2.364831, 1.4930003; 3.8475661, 1.6717888, 2.9763937; 2.9753494, 1.5241468, 3.7312107; 2.354289, 1.3811476, 4.4188437; 3.3455486, 1.0608108, 4.0637593; -3.735631, 8.394745, -0.045744553; -4.200964, 3.8762631, -1.9764525; -3.6865435, 3.3411784, 1.1556038; -3.4293342, 3.0736377, 2.7216303; -3.1008308, 2.5046997, 3.7975242; -2.9001274, 2.13756, 4.7237372; -3.7284253, 2.7367718, 4.107445\",\n  \"-0.0, 0.0, 0.0; 1.3219618, -1.9105992, 1.0350972; 1.5722349, -9.081165, 2.295094; 1.1958041, -14.746065, -2.821528; 1.0980232, -16.870129, -1.3176632; 1.1181493, -16.795982, -0.051118255; -1.6241437, -1.6415116, 0.9905696; -1.6225892, -8.711683, 2.4449804; -1.8068416, -15.811333, -0.6738546; -2.4454515, -17.053892, 1.543148; -2.7312932, -17.16363, 2.7843862; 0.12540855, 2.4866967, -0.24377425; 0.22997695, 5.0024934, -0.23126648; 0.31438708, 7.539545, -0.010280088; 0.08633804, 9.110637, 0.12151036; 0.32211807, 10.620843, -0.3038846; 0.27337727, 12.205087, -0.69589806; 4.3659153, 8.617397, -0.6550045; 4.895164, 3.752262, -1.4634845; 4.1947565, 2.3639164, 1.501621; 3.831289, 1.6720418, 2.9820647; 2.9557188, 1.5197673, 3.7320635; 2.33165, 1.3736445, 4.4163074; 3.3269212, 1.0591574, 4.0672674; -3.7314408, 8.394457, -0.08872123; -4.1855335, 3.877479, -2.0256147; -3.688709, 3.3627467, 1.1126866; -3.4402966, 3.105381, 2.6818354; -3.115568, 2.5465212, 3.7641382; -2.9186637, 2.187677, 4.694409; -3.7460163, 2.778186, 4.068521\",\n  \"-0.0, 0.0, 0.0; 1.3207196, -1.9147503, 1.0289944; 1.5164416, -9.117654, 2.100036; 1.1443692, -14.742901, -3.0604641; 1.0147208, -16.879353, -1.5766892; 1.0228893, -16.817863, -0.30933332; -1.6252325, -1.6439458, 0.9847297; -1.6053561, -8.704877, 2.4832292; -1.8050647, -15.811273, -0.6192498; -2.4375393, -17.046654, 1.6035151; -2.720609, -17.164762, 2.8446202; 0.13070329, 2.485886, -0.24920146; 0.23803836, 5.0015965, -0.2472005; 0.3198951, 7.539449, -0.03461361; 0.09072399, 9.1104355, 0.096482605; 0.32763386, 10.621404, -0.32556412; 0.27996123, 12.206327, -0.7149519; 4.3739843, 8.617437, -0.66280097; 4.924384, 3.7509098, -1.448456; 4.1940875, 2.3637996, 1.5100095; 3.8156905, 1.6724861, 2.9869704; 2.9363537, 1.5157186, 3.731618; 2.3088882, 1.3666097, 4.4121013; 3.30834, 1.0579667, 4.069856; -3.7259758, 8.391708, -0.1362674; -4.167209, 3.8766212, -2.0805283; -3.6899998, 3.3810656, 1.0638978; -3.4513953, 3.1332874, 2.6361089; -3.130034, 2.5846043, 3.724606; -2.9364834, 2.234187, 4.6587844; -3.7628875, 2.8163526, 4.023892\",\n  \"-0.0, 0.0, 0.0; 1.3192399, -1.9191699, 1.0226398; 1.46144, -9.149246, 1.9018579; 1.1054688, -14.747623, -3.28891; 0.94326967, -16.893486, -1.8220137; 0.937426, -16.84236, -0.5541847; -1.6265243, -1.6462983, 0.9786483; -1.5944936, -8.696977, 2.5244665; -1.8025959, -15.809246, -0.5639694; -2.4314466, -17.037804, 1.6636004; -2.7132678, -17.163597, 2.9042344; 0.13572654, 2.4851773, -0.25354698; 0.2462953, 5.000737, -0.26109022; 0.32709357, 7.539283, -0.05651872; 0.09734915, 9.11028, 0.07344349; 0.33507776, 10.621969, -0.34554875; 0.28778994, 12.207437, -0.73276246; 4.384674, 8.615038, -0.6657067; 4.959861, 3.746632, -1.4213982; 4.1933613, 2.3608627, 1.5285254; 3.7968864, 1.6701663, 3.0010262; 2.91351, 1.5095876, 3.7400591; 2.2823806, 1.358044, 4.4166045; 3.285925, 1.0547013, 4.0816746; -3.7181058, 8.391325, -0.18354945; -4.1440725, 3.8769631, -2.1328902; -3.6899247, 3.4013138, 1.0180185; -3.462851, 3.1634915, 2.5934715; -3.1468706, 2.624689, 3.6884606; -2.9583356, 2.2824688, 4.6266947; -3.7824545, 2.8567054, 3.9816914\",\n  \"-0.0, 0.0, 0.0; 1.3166558, -1.9246187, 1.0157062; 1.4088532, -9.176612, 1.699333; 1.074098, -14.761654, -3.5071876; 0.8804122, -16.912811, -2.0519118; 0.85936004, -16.878212, -0.78368545; -1.6287669, -1.6480112, 0.972013; -1.5847968, -8.687321, 2.56852; -1.7989069, -15.804622, -0.5078902; -2.4257755, -17.026049, 1.7241552; -2.7069666, -17.156693, 2.9644303; 0.14358814, 2.4843175, -0.25761014; 0.25788647, 4.999667, -0.27423432; 0.33468813, 7.5388994, -0.07677412; 0.102692634, 9.109687, 0.0517136; 0.34253633, 10.622114, -0.36339194; 0.29761624, 12.208345, -0.7477488; 4.3954167, 8.61696, -0.6603726; 4.9971323, 3.7465024, -1.381391; 4.19121, 2.36119, 1.558222; 3.7750535, 1.6706638, 3.025362; 2.888784, 1.5058122, 3.7599769; 2.255029, 1.3514779, 4.43343; 3.262236, 1.0538899, 4.104384; -3.7103567, 8.386421, -0.23511726; -4.1200542, 3.872439, -2.1888206; -3.6923223, 3.4197738, 0.9691632; -3.4784565, 3.1934428, 2.5481534; -3.1677377, 2.6638584, 3.649129; -2.9840136, 2.3293202, 4.5910807; -3.805677, 2.8964553, 3.936729\",\n  \"-0.0, 0.0, 0.0; 1.312307, -1.9297192, 1.0116484; 1.3601419, -9.198212, 1.4953604; 1.0482432, -14.782932, -3.7129226; 0.8246779, -16.936451, -2.265445; 0.78728914, -16.930225, -0.99713814; -1.6324996, -1.646603, 0.9681297; -1.5804082, -8.673247, 2.6192503; -1.7951713, -15.79521, -0.4463079; -2.4193382, -17.01037, 1.7899108; -2.699956, -17.14697, 3.0296745; 0.15071033, 2.4837608, -0.25890672; 0.26855916, 4.9989014, -0.28132513; 0.34364575, 7.538721, -0.09087634; 0.11167593, 9.10971, 0.035179675; 0.35265857, 10.622892, -0.37650004; 0.30814463, 12.209919, -0.7576064; 4.4074683, 8.616033, -0.65395534; 5.0345917, 3.7433362, -1.337204; 4.190787, 2.3589194, 1.5921834; 3.755722, 1.6687813, 3.054011; 2.865808, 1.5007187, 3.7834747; 2.2287233, 1.3444746, 4.4533362; 3.239679, 1.0518544, 4.1314077; -3.7005947, 8.384808, -0.27528596; -4.0956264, 3.8720727, -2.2348838; -3.6943142, 3.4446614, 0.9300785; -3.493659, 3.2309573, 2.512558; -3.1881123, 2.7102227, 3.6191878; -3.0089867, 2.3831291, 4.5646334; -3.827934, 2.9440408, 3.9015706\",\n  \"-0.0, 0.0, 0.0; 1.3088049, -1.9327216, 1.010453; 1.3092169, -9.212062, 1.2905484; 1.0320399, -14.809444, -3.9060936; 0.7793167, -16.958944, -2.45744; 0.72289807, -16.988125, -1.1901578; -1.6354882, -1.6443082, 0.9669856; -1.5790348, -8.657535, 2.6740637; -1.7904699, -15.782535, -0.38466024; -2.414274, -16.993456, 1.8539586; -2.6955523, -17.135681, 3.0929399; 0.1584736, 2.4832532, -0.25913993; 0.2806425, 4.998156, -0.2848624; 0.35390458, 7.53846, -0.100251496; 0.120914, 9.109511, 0.023102656; 0.3642981, 10.623315, -0.38486606; 0.32216626, 12.211176, -0.76275325; 4.421166, 8.615311, -0.6388562; 5.0736175, 3.740817, -1.2845405; 4.1888137, 2.3572924, 1.6331486; 3.7332902, 1.667542, 3.0889146; 2.838586, 1.4959247, 3.8116603; 2.1971056, 1.3374376, 4.4767833; 3.2122192, 1.049898, 4.163476; -3.6891973, 8.38314, -0.31378013; -4.0697308, 3.872913, -2.2820017; -3.697746, 3.4684062, 0.8895471; -3.5117538, 3.2661533, 2.4753199; -3.2120178, 2.7535398, 3.5873175; -3.0380075, 2.4332695, 4.536049; -3.853786, 2.9884596, 3.8643208\",\n  \"-0.0, 0.0, 0.0; 1.305405, -1.9350706, 1.0103557; 1.2603581, -9.219264, 1.0862323; 1.0204563, -14.843609, -4.0830803; 0.74503005, -16.980087, -2.6193812; 0.6716233, -17.038324, -1.3539728; -1.6383758, -1.6414857, 0.9668926; -1.5807097, -8.639854, 2.7338545; -1.7857382, -15.767702, -0.31866384; -2.4102612, -16.975506, 1.9214385; -2.6925602, -17.12002, 3.1599221; 0.1660201, 2.482791, -0.25884593; 0.29242733, 4.99747, -0.28591278; 0.36403403, 7.5380697, -0.10476181; 0.1307652, 9.109318, 0.015529931; 0.37621248, 10.623818, -0.38859493; 0.33573493, 12.212664, -0.76250863; 4.4343185, 8.614959, -0.6199428; 5.1082807, 3.7387104, -1.2292576; 4.1863203, 2.355864, 1.6772268; 3.7122538, 1.666392, 3.127193; 2.812286, 1.4923468, 3.8427873; 2.1659536, 1.3326423, 4.502903; 3.1853285, 1.0496699, 4.199427; -3.6778467, 8.38156, -0.34450716; -4.042953, 3.8738003, -2.321283; -3.702259, 3.492207, 0.8566148; -3.531912, 3.3014102, 2.445562; -3.2383232, 2.7958314, 3.5624094; -3.069557, 2.4815574, 4.5140886; -3.8816166, 3.0324588, 3.834371\",\n  \"-0.0, 0.0, 0.0; 1.302222, -1.9378092, 1.0092134; 1.2183427, -9.220975, 0.8838892; 1.0131574, -14.88537, -4.2430124; 0.72020334, -16.997751, -2.748073; 0.6335502, -17.065464, -1.4839747; -1.6410788, -1.6394278, 0.9657992; -1.5856984, -8.621328, 2.7968225; -1.7805598, -15.751858, -0.2500944; -2.4072115, -16.957508, 1.9905725; -2.6911223, -17.101236, 3.2287796; 0.17292266, 2.4823987, -0.25808564; 0.30491275, 4.9967766, -0.28647363; 0.37858617, 7.5375533, -0.10866399; 0.14471391, 9.108822, 0.010182291; 0.39092433, 10.624298, -0.38980356; 0.3510366, 12.214081, -0.7597714; 4.4527807, 8.608887, -0.60414726; 5.146857, 3.7313027, -1.179225; 4.189433, 2.349558, 1.7162971; 3.6976736, 1.6605787, 3.1605937; 2.792662, 1.4852656, 3.8694863; 2.1416657, 1.3252716, 4.5249324; 3.1648483, 1.0459021, 4.231085; -3.6609836, 8.385454, -0.37075394; -4.011559, 3.8792567, -2.3537142; -3.7009723, 3.5193367, 0.82979226; -3.5456777, 3.3393762, 2.4215434; -3.2590458, 2.8395138, 3.5427623; -3.09612, 2.5301673, 4.4970703; -3.9037511, 3.0780416, 3.809673\",\n  \"-0.0, 0.0, 0.0; 1.2980546, -1.9431243, 1.0043513; 1.1836559, -9.219919, 0.68433297; 1.012761, -14.936932, -4.385101; 0.70197034, -17.018538, -2.851104; 0.6022072, -17.090933, -1.5882324; -1.6446198, -1.6386136, 0.96114635; -1.594593, -8.602245, 2.8606105; -1.7742043, -15.735483, -0.18089771; -2.4029498, -16.93995, 2.059819; -2.6890113, -17.085983, 3.297261; 0.18189026, 2.4818492, -0.25720432; 0.32027555, 4.9958696, -0.28680897; 0.39494336, 7.536649, -0.10945104; 0.16180368, 9.108114, 0.008233041; 0.4082055, 10.624541, -0.38801092; 0.3672956, 12.215094, -0.7545459; 4.472532, 8.604713, -0.5836099; 5.183306, 3.7255874, -1.1241734; 4.192076, 2.3441226, 1.7600846; 3.6834545, 1.6552331, 3.1985726; 2.7727334, 1.4795485, 3.900022; 2.1164412, 1.3199207, 4.5502553; 3.1432862, 1.0431775, 4.2668843; -3.6425266, 8.387539, -0.39330733; -3.9787772, 3.882823, -2.3821044; -3.7011235, 3.5438383, 0.8067384; -3.5622957, 3.3743455, 2.4011576; -3.2819996, 2.8807366, 3.5267406; -3.1245122, 2.5766726, 4.4836555; -3.9283514, 3.1204207, 3.7885804\",\n  \"-0.0, 0.0, 0.0; 1.2936014, -1.9506396, 0.9954895; 1.1570266, -9.2165985, 0.49106407; 1.0124168, -14.99561, -4.508407; 0.67989314, -17.04047, -2.9301815; 0.5663462, -17.117363, -1.6687405; -1.6484122, -1.6397551, 0.9526656; -1.6052365, -8.582975, 2.9256005; -1.7677611, -15.718863, -0.110649586; -2.3986213, -16.92234, 2.130005; -2.6869986, -17.071468, 3.36654; 0.19171745, 2.4812522, -0.25582498; 0.33731803, 4.9948444, -0.28708133; 0.41342586, 7.5355167, -0.10880491; 0.18221736, 9.107102, 0.011055626; 0.42815036, 10.624493, -0.38177967; 0.38488957, 12.215397, -0.7465112; 4.4942207, 8.599991, -0.5630309; 5.2231216, 3.720087, -1.0714884; 4.1981363, 2.3389502, 1.801105; 3.6726809, 1.6501726, 3.2335835; 2.7563598, 1.47581, 3.9280348; 2.094857, 1.318031, 4.5734215; 3.125073, 1.0429566, 4.3008676; -3.6218553, 8.390123, -0.41196796; -3.9431424, 3.886722, -2.4062088; -3.6966138, 3.566074, 0.78708553; -3.57335, 3.4057496, 2.383731; -3.2996194, 2.91865, 3.5137565; -3.1477342, 2.6201038, 4.473311; -3.9475462, 3.1597033, 3.7704012\",\n  \"-0.0, 0.0, 0.0; 1.2883003, -1.9580201, 0.9878452; 1.1382496, -9.209437, 0.3083747; 1.0130159, -15.056807, -4.6115026; 0.65453994, -17.05897, -2.9849558; 0.5263666, -17.13859, -1.7250863; -1.6528988, -1.6394727, 0.94535005; -1.6161577, -8.560344, 2.9954329; -1.7611436, -15.698113, -0.037280083; -2.3922732, -16.901167, 2.2035265; -2.6818392, -17.05057, 3.4397504; 0.20389648, 2.4805984, -0.252731; 0.3576944, 4.993701, -0.28410998; 0.43408525, 7.53434, -0.10547896; 0.20319806, 9.105715, 0.017719544; 0.44812474, 10.624099, -0.37189114; 0.4025782, 12.215231, -0.7353517; 4.5174437, 8.597006, -0.54049814; 5.2625933, 3.7163186, -1.0168707; 4.205638, 2.3348434, 1.8439507; 3.664242, 1.6458455, 3.2703745; 2.7424028, 1.4741184, 3.9581473; 2.0757537, 1.3192502, 4.598927; 3.108921, 1.0447767, 4.337153; -3.5993462, 8.390731, -0.42762512; -3.9073067, 3.8886228, -2.4268827; -3.6889772, 3.585909, 0.7702122; -3.579812, 3.4345505, 2.3687577; -3.3127615, 2.9537187, 3.5030582; -3.1664958, 2.660527, 4.4651337; -3.9620366, 3.1964846, 3.7546315\",\n  \"-0.0, 0.0, 0.0; 1.2839653, -1.9646599, 0.9802768; 1.1285914, -9.198768, 0.1371882; 1.0125303, -15.117214, -4.6971807; 0.63512564, -17.070984, -3.0169525; 0.49755883, -17.140148, -1.7574564; -1.6565621, -1.6399351, 0.9381078; -1.626999, -8.536215, 3.0695615; -1.75561, -15.674449, 0.037204504; -2.3852766, -16.875736, 2.279369; -2.6753724, -17.029018, 3.514994; 0.21815553, 2.4799373, -0.24725282; 0.38117933, 4.9924736, -0.2773979; 0.45594084, 7.533216, -0.09955053; 0.22370623, 9.103987, 0.028716907; 0.46736977, 10.623286, -0.35810524; 0.41994524, 12.2143755, -0.72151196; 4.5408525, 8.597036, -0.51680017; 5.298887, 3.7155056, -0.96325815; 4.212415, 2.3360825, 1.8874782; 3.6563022, 1.6480705, 3.3087065; 2.7290568, 1.4799328, 3.9900692; 2.057358, 1.3286977, 4.6264277; 3.0930502, 1.0538945, 4.3751884; -3.576291, 8.388139, -0.44008672; -3.8738408, 3.8873267, -2.4438343; -3.6831355, 3.602044, 0.756629; -3.5877829, 3.4594014, 2.3568585; -3.326482, 2.9860053, 3.495617; -3.1850772, 2.699124, 4.4603176; -3.976983, 3.2304692, 3.74233\",\n  \"-0.0, 0.0, 0.0; 1.280185, -1.970978, 0.97250724; 1.128021, -9.186258, -0.019373775; 1.0133858, -15.179831, -4.760319; 0.623752, -17.081253, -3.023773; 0.48074496, -17.13526, -1.7641417; -1.6597561, -1.6409417, 0.9306728; -1.6399909, -8.509237, 3.1507566; -1.7493706, -15.646973, 0.116470814; -2.377245, -16.84679, 2.3599248; -2.6676495, -17.001802, 3.595261; 0.23337582, 2.4792235, -0.24041843; 0.4063021, 4.991132, -0.2675881; 0.47888786, 7.5318823, -0.08895627; 0.24192567, 9.101582, 0.043699294; 0.4847602, 10.621667, -0.34054804; 0.43770257, 12.212823, -0.703709; 4.564869, 8.598104, -0.4892683; 5.334218, 3.7155557, -0.90413725; 4.214753, 2.3410535, 1.9361917; 3.642195, 1.6554717, 3.3520544; 2.7095573, 1.491874, 4.0271335; 2.0328145, 1.3449227, 4.659137; 3.0705261, 1.0686011, 4.418103; -3.5524027, 8.384573, -0.4458449; -3.839201, 3.885892, -2.4559338; -3.676679, 3.6184235, 0.7476218; -3.5954182, 3.4846897, 2.3493977; -3.3404393, 3.0182867, 3.4924664; -3.2042243, 2.73744, 4.4596863; -3.9917965, 3.2652626, 3.7343707\",\n  \"-0.0, 0.0, 0.0; 1.2787498, -1.9757552, 0.96467066; 1.1335999, -9.171606, -0.1604532; 1.0135906, -15.242487, -4.801854; 0.62065244, -17.088463, -3.007197; 0.47736648, -17.118546, -1.7467991; -1.6609952, -1.6439216, 0.9231728; -1.6545752, -8.48117, 3.2371826; -1.7402365, -15.616646, 0.19682908; -2.3677945, -16.816525, 2.4403389; -2.6593893, -16.973255, 3.6751778; 0.25045916, 2.4785078, -0.23040015; 0.43461752, 4.9896636, -0.25287405; 0.5031105, 7.530584, -0.07504065; 0.26078987, 9.099014, 0.0628344; 0.50319797, 10.619735, -0.31916392; 0.4572456, 12.210788, -0.68291885; 4.5892115, 8.60209, -0.45970684; 5.3643327, 3.717916, -0.8435272; 4.2130136, 2.3512778, 1.9878491; 3.624579, 1.669603, 3.3990812; 2.6864934, 1.5109361, 4.0677586; 2.0046458, 1.3685702, 4.695309; 3.0442111, 1.0903939, 4.464618; -3.5278754, 8.377744, -0.44817168; -3.8044147, 3.8821292, -2.4665442; -3.6711485, 3.633229, 0.73985696; -3.6045165, 3.5087795, 2.3430557; -3.35684, 3.0496075, 3.4906487; -3.2266955, 2.7749496, 4.4604783; -4.0094037, 3.2987466, 3.727025\",\n  \"-0.0, 0.0, 0.0; 1.2794547, -1.9781845, 0.95873904; 1.139734, -9.15505, -0.28236127; 1.0055337, -15.306318, -4.816288; 0.6147665, -17.09798, -2.9669466; 0.47457704, -17.100681, -1.7058446; -1.660439, -1.6476572, 0.9174966; -1.6754823, -8.449689, 3.333024; -1.7308731, -15.583067, 0.2870481; -2.3571384, -16.783558, 2.5305917; -2.6496174, -16.939228, 3.7653558; 0.2674947, 2.4777646, -0.21896017; 0.46421003, 4.9880247, -0.23383406; 0.5298864, 7.528919, -0.054580644; 0.28228566, 9.096047, 0.08862525; 0.5248232, 10.61721, -0.29152474; 0.4807523, 12.20805, -0.6564448; 4.616772, 8.603867, -0.4208718; 5.393801, 3.7176914, -0.7741504; 4.2113237, 2.3604035, 2.0488698; 3.6073601, 1.6833887, 3.4557781; 2.6640246, 1.529738, 4.118212; 1.9772487, 1.3919643, 4.741399; 3.0183945, 1.111653, 4.5206337; -3.5001047, 8.37302, -0.44499004; -3.7685368, 3.8800273, -2.4702826; -3.6614428, 3.652488, 0.73868537; -3.6078956, 3.5387192, 2.3431678; -3.367523, 3.0874243, 3.4954293; -3.2434213, 2.8195074, 4.4679327; -4.021191, 3.3389375, 3.726168\",\n  \"-0.0, 0.0, 0.0; 1.279362, -1.981319, 0.9523689; 1.1453078, -9.14057, -0.38718468; 0.9932054, -15.370354, -4.812029; 0.6079364, -17.110899, -2.9133742; 0.47187892, -17.092604, -1.6519494; -1.6605507, -1.6509246, 0.9114003; -1.6998557, -8.41527, 3.4302757; -1.721116, -15.547165, 0.38039994; -2.3454957, -16.750595, 2.6228945; -2.638957, -16.906868, 3.8573494; 0.28284082, 2.477129, -0.20651285; 0.49122098, 4.9864836, -0.21291897; 0.55558753, 7.5272765, -0.03175786; 0.30405134, 9.093175, 0.11789563; 0.5466553, 10.614741, -0.26059467; 0.5038957, 12.205168, -0.6274631; 4.6436205, 8.603427, -0.38132703; 5.422805, 3.7156749, -0.70695364; 4.210609, 2.3676212, 2.1078749; 3.5918355, 1.6952072, 3.5105476; 2.6434574, 1.5473802, 4.1670804; 1.9519389, 1.4148704, 4.78615; 2.9943695, 1.1318419, 4.5751305; -3.4730432, 8.37068, -0.43741298; -3.7311513, 3.879427, -2.4678993; -3.6522613, 3.6750224, 0.7434423; -3.612815, 3.5728188, 2.349111; -3.3800302, 3.1295054, 3.5060196; -3.2622652, 2.868362, 4.48115; -4.0350037, 3.382987, 3.7308269\",\n  \"-0.0, 0.0, 0.0; 1.2805874, -1.9831072, 0.9469848; 1.1493974, -9.127303, -0.47093803; 0.9871298, -15.433283, -4.786132; 0.6042305, -17.125326, -2.8436604; 0.46761024, -17.110899, -1.5822464; -1.6595582, -1.6547546, 0.90624756; -1.7214564, -8.379936, 3.527458; -1.7099137, -15.51155, 0.4768722; -2.333564, -16.716707, 2.7186418; -2.6280446, -16.866106, 3.9537048; 0.29745343, 2.4766607, -0.19101593; 0.5176116, 4.985014, -0.18692824; 0.5812382, 7.5257998, -0.005406767; 0.32704633, 9.090578, 0.15131; 0.5694077, 10.612657, -0.22527131; 0.5269612, 12.202602, -0.59425193; 4.6705704, 8.602033, -0.33917367; 5.448687, 3.7125354, -0.64023286; 4.2084746, 2.3736167, 2.16674; 3.5757396, 1.7057606, 3.5653558; 2.6223035, 1.5620481, 4.2154446; 1.9260147, 1.4332882, 4.8299413; 2.9698257, 1.148473, 4.6283607; -3.4458141, 8.369156, -0.4265418; -3.694807, 3.8795624, -2.4618287; -3.6429698, 3.6995032, 0.7515204; -3.6170514, 3.6094735, 2.358193; -3.3919456, 3.172998, 3.5192137; -3.280699, 2.9175785, 4.496623; -4.0485377, 3.4274817, 3.7380905\",\n  \"-0.0, 0.0, 0.0; 1.2809904, -1.9857502, 0.94088185; 1.1525276, -9.118479, -0.53387964; 0.9869992, -15.493801, -4.7458234; 0.6037892, -17.136286, -2.7613301; 0.46441442, -17.130749, -1.500147; -1.6592525, -1.6582457, 0.90040785; -1.7403315, -8.345047, 3.6175318; -1.6994498, -15.477717, 0.5696702; -2.3219109, -16.684004, 2.8111625; -2.6173296, -16.830374, 4.0463643; 0.30987597, 2.4762335, -0.17623632; 0.5413083, 4.983528, -0.1608683; 0.6073431, 7.5239844, 0.02436769; 0.35416406, 9.088342, 0.1868239; 0.5949385, 10.611085, -0.18808287; 0.54953027, 12.200634, -0.558419; 4.6989145, 8.595902, -0.29555568; 5.4761953, 3.7049646, -0.5745745; 4.2113514, 2.375377, 2.2258353; 3.5663438, 1.7121747, 3.6210558; 2.607894, 1.5714724, 4.264395; 1.9068621, 1.445484, 4.874055; 2.9520783, 1.1594725, 4.6816583; -3.4174333, 8.372627, -0.40775642; -3.6526537, 3.88443, -2.447758; -3.629236, 3.7279835, 0.7671602; -3.617527, 3.6497612, 2.374617; -3.400856, 3.220479, 3.5399165; -3.2966616, 2.9711454, 4.5196714; -4.0588813, 3.4765747, 3.7525263\",\n  \"-0.0, 0.0, 0.0; 1.2830877, -1.9873793, 0.93456334; 1.1541969, -9.112612, -0.57596296; 0.99217063, -15.548838, -4.6943784; 0.60631907, -17.142532, -2.670997; 0.46173236, -17.1566, -1.410467; -1.657532, -1.6632314, 0.8943603; -1.7561831, -8.312246, 3.7021196; -1.6906074, -15.447498, 0.6607387; -2.3116696, -16.653042, 2.903019; -2.607979, -16.800909, 4.137829; 0.32054767, 2.4759486, -0.1604433; 0.5621674, 4.982173, -0.13249892; 0.63000715, 7.52222, 0.05763419; 0.38042915, 9.086846, 0.22304548; 0.6195126, 10.610485, -0.14929666; 0.5695836, 12.200182, -0.518416; 4.723581, 8.590847, -0.24733253; 5.5026627, 3.699201, -0.50832117; 4.214388, 2.3781126, 2.2854218; 3.557705, 1.7191494, 3.6772003; 2.5944114, 1.5808767, 4.313797; 1.8887855, 1.457168, 4.9186044; 2.9353855, 1.1703532, 4.7351327; -3.3925767, 8.37547, -0.38568628; -3.6150343, 3.888826, -2.430529; -3.6179585, 3.7541196, 0.78545666; -3.619421, 3.6867652, 2.3934476; -3.4118505, 3.2646906, 3.5630288; -3.315051, 3.0215864, 4.545105; -4.070754, 3.5236504, 3.7693515\",\n  \"-0.0, 0.0, 0.0; 1.2842064, -1.9891642, 0.929214; 1.1555686, -9.111131, -0.5966617; 0.99823517, -15.598131, -4.6348133; 0.60845804, -17.143856, -2.5752919; 0.45900732, -17.170515, -1.315533; -1.65662, -1.6668805, 0.8892417; -1.7742832, -8.278933, 3.7822614; -1.6809676, -15.417935, 0.7504232; -2.300742, -16.621996, 2.9938562; -2.5980475, -16.768871, 4.228545; 0.32924592, 2.4757376, -0.14537664; 0.5798479, 4.980893, -0.103930205; 0.6509509, 7.520297, 0.09346531; 0.4044692, 9.085322, 0.25974077; 0.6428139, 10.609657, -0.110217094; 0.59007454, 12.199771, -0.4771416; 4.7469797, 8.583594, -0.1968201; 5.529534, 3.691741, -0.4431147; 4.220009, 2.3771646, 2.3438115; 3.552737, 1.7214372, 3.7320771; 2.5845919, 1.5846384, 4.3615932; 1.8743436, 1.4624939, 4.9612865; 2.922563, 1.1758537, 4.787018; -3.3690634, 8.380838, -0.35897774; -3.575604, 3.8951316, -2.407543; -3.6072454, 3.7780204, 0.8089776; -3.6230657, 3.7194636, 2.4172359; -3.4252114, 3.3053944, 3.591354; -3.3363853, 3.0691357, 4.5758514; -4.0852604, 3.5668592, 3.7907364\",\n  \"-0.0, 0.0, 0.0; 1.2856642, -1.9899913, 0.9254196; 1.1583867, -9.112131, -0.59976274; 1.002063, -15.640875, -4.5701103; 0.60939187, -17.140425, -2.4772706; 0.45592824, -17.181953, -1.2183969; -1.6554154, -1.6700075, 0.8856104; -1.7926483, -8.245183, 3.8606532; -1.6714706, -15.388458, 0.8398833; -2.2905102, -16.591646, 3.0839875; -2.5891619, -16.738466, 4.318358; 0.33582842, 2.475631, -0.13147478; 0.5938957, 4.979738, -0.07514973; 0.66845906, 7.518173, 0.13313213; 0.42252952, 9.083355, 0.29874706; 0.6609441, 10.607962, -0.0700452; 0.6079161, 12.198498, -0.4350952; 4.7665997, 8.576499, -0.14526516; 5.5523243, 3.6844964, -0.37813827; 4.224516, 2.3769011, 2.4034164; 3.548135, 1.7246454, 3.7889066; 2.5753322, 1.5890517, 4.4114647; 1.8606349, 1.4682051, 5.006114; 2.9103394, 1.1817749, 4.840662; -3.3494325, 8.386696, -0.32290334; -3.5421035, 3.9024444, -2.3760016; -3.5979156, 3.800877, 0.84071875; -3.6258228, 3.7500944, 2.4490771; -3.4380782, 3.3432045, 3.6273575; -3.3574696, 3.1131346, 4.6140256; -4.0990524, 3.6074512, 3.8198876\",\n  \"-0.0, 0.0, 0.0; 1.2878383, -1.9888966, 0.9247496; 1.1640077, -9.114085, -0.5864115; 1.007409, -15.67728, -4.4995365; 0.6110421, -17.136166, -2.3788373; 0.45359737, -17.19216, -1.1210159; -1.6535933, -1.6721517, 0.8849688; -1.8154175, -8.21127, 3.9372435; -1.663823, -15.358319, 0.9267907; -2.2840729, -16.558786, 3.1720173; -2.5851896, -16.707893, 4.4055142; 0.34061322, 2.4756672, -0.117765464; 0.60446525, 4.9787416, -0.044795677; 0.6815651, 7.5160403, 0.17602497; 0.43706697, 9.081495, 0.34117573; 0.6768146, 10.606135, -0.026614815; 0.6246079, 12.197009, -0.3903098; 4.7812834, 8.571108, -0.09129515; 5.5652914, 3.678277, -0.31225264; 4.2196712, 2.3812816, 2.4657025; 3.5344164, 1.7343132, 3.8493102; 2.5566912, 1.5997468, 4.464334; 1.8372793, 1.4800199, 5.053499; 2.8884757, 1.1938503, 4.8973274; -3.3346913, 8.391304, -0.28152347; -3.513413, 3.908352, -2.3387175; -3.5950701, 3.818055, 0.87778664; -3.635898, 3.7729063, 2.4860368; -3.4590702, 3.3730576, 3.6684096; -3.3875594, 3.148905, 4.657139; -4.121684, 3.6386492, 3.8532977\",\n  \"-0.0, 0.0, 0.0; 1.2893124, -1.9885659, 0.92340547; 1.1708791, -9.119012, -0.56318945; 1.0111024, -15.710878, -4.427692; 0.6052479, -17.137352, -2.286833; 0.44079, -17.218264, -1.0312672; -1.6523594, -1.6740505, 0.88368255; -1.8387594, -8.17762, 4.009619; -1.6547214, -15.328897, 1.0110419; -2.2831764, -16.526468, 3.255534; -2.5897367, -16.667818, 4.4886036; 0.34435022, 2.475717, -0.10517898; 0.61288357, 4.977787, -0.016525127; 0.6924632, 7.5138526, 0.21720514; 0.4491708, 9.07959, 0.3814606; 0.6904771, 10.604242, 0.014745146; 0.6395931, 12.195589, -0.34705913; 4.7935486, 8.565894, -0.040907025; 5.574196, 3.6720963, -0.25212857; 4.2132654, 2.3860106, 2.52344; 3.5203795, 1.7444907, 3.9057837; 2.5377917, 1.6115657, 4.51337; 1.8137149, 1.4934609, 5.097123; 2.8661819, 1.2070503, 4.950227; -3.3224275, 8.395695, -0.23969704; -3.491841, 3.9146852, -2.3019047; -3.5967991, 3.8345149, 0.9141917; -3.6492777, 3.7944295, 2.5222383; -3.4827595, 3.4005623, 3.7081103; -3.420119, 3.1812341, 4.6985216; -4.147698, 3.6654918, 3.8854582\",\n  \"-0.0, 0.0, 0.0; 1.2923487, -1.9865023, 0.92360246; 1.1794093, -9.123734, -0.5305034; 1.0146116, -15.739937, -4.352978; 0.60194564, -17.139902, -2.1959846; 0.4331472, -17.23156, -0.9417341; -1.6497993, -1.676474, 0.883871; -1.8652178, -8.146598, 4.0766335; -1.6467311, -15.301563, 1.089185; -2.2854927, -16.493584, 3.3337224; -2.5982242, -16.619745, 4.56689; 0.3468151, 2.4758778, -0.0925309; 0.6200315, 4.976858, 0.011264592; 0.70316, 7.511814, 0.2555573; 0.4615084, 9.077839, 0.41949886; 0.7045434, 10.602472, 0.053844243; 0.6550744, 12.194119, -0.3068356; 4.8059716, 8.5588875, 0.0047856867; 5.5800433, 3.6636286, -0.19654104; 4.202959, 2.3916554, 2.5775623; 3.5020223, 1.7571785, 3.9590974; 2.5137694, 1.6265785, 4.557937; 1.7842345, 1.5108125, 5.135329; 2.8381715, 1.2242292, 4.9997454; -3.3100975, 8.401442, -0.20060247; -3.4674847, 3.9217505, -2.266624; -3.598941, 3.8500028, 0.9486973; -3.6646683, 3.8141277, 2.556356; -3.5092845, 3.4266076, 3.7458248; -3.4563358, 3.2122955, 4.737899; -4.177023, 3.6899347, 3.9148436\",\n  \"-0.0, 0.0, 0.0; 1.2944553, -1.9852304, 0.92338735; 1.1869069, -9.130217, -0.49254256; 1.0217907, -15.766471, -4.280084; 0.60033846, -17.146547, -2.1120007; 0.42611274, -17.24848, -0.8592862; -1.6480204, -1.6783311, 0.88366526; -1.8912095, -8.117923, 4.1356125; -1.6350617, -15.27663, 1.1601448; -2.2878864, -16.463505, 3.4033625; -2.608456, -16.566969, 4.6366305; 0.34937784, 2.4759262, -0.080864124; 0.62689936, 4.9758487, 0.03615091; 0.71325433, 7.5098634, 0.28894225; 0.47124946, 9.075847, 0.45275086; 0.7162946, 10.600487, 0.08846897; 0.6695487, 12.192467, -0.27110392; 4.817747, 8.552127, 0.04575689; 5.5818424, 3.6550202, -0.14864542; 4.19018, 2.396895, 2.624498; 3.4819727, 1.7693424, 4.0054874; 2.4881232, 1.6421713, 4.5957413; 1.7531846, 1.5296687, 5.166891; 2.8082724, 1.2421453, 5.04273; -3.2983193, 8.40651, -0.1682806; -3.4475975, 3.9296098, -2.2409415; -3.6037722, 3.8651538, 0.9734285; -3.6818588, 3.8329246, 2.5806117; -3.5379553, 3.452158, 3.7737007; -3.4950953, 3.2431064, 4.7673826; -4.20879, 3.7131128, 3.933906\",\n  \"-0.0, 0.0, 0.0; 1.2975696, -1.9829596, 0.923896; 1.1906941, -9.135573, -0.4530334; 1.0264938, -15.78763, -4.212792; 0.59856814, -17.151663, -2.0358412; 0.42103094, -17.251804, -0.78344715; -1.6453834, -1.6806607, 0.8841523; -1.9212139, -8.092734, 4.1874647; -1.6248302, -15.255344, 1.2251534; -2.291319, -16.434072, 3.4686482; -2.619444, -16.510756, 4.701885; 0.3492276, 2.4762506, -0.07097569; 0.62961245, 4.9752464, 0.05835946; 0.71995664, 7.508208, 0.32015198; 0.47838336, 9.07427, 0.4838484; 0.725727, 10.59875, 0.12045196; 0.6818118, 12.190928, -0.23859906; 4.826358, 8.544523, 0.083855346; 5.579533, 3.6455011, -0.1048231; 4.174603, 2.4006057, 2.6676002; 3.4597802, 1.7796648, 4.04817; 2.460888, 1.6577349, 4.6309705; 1.7210739, 1.5500582, 5.1967306; 2.7768345, 1.2605261, 5.0834293; -3.2897685, 8.413098, -0.13704509; -3.4329169, 3.9394374, -2.21712; -3.6127608, 3.8814557, 0.9961362; -3.702683, 3.8524659, 2.6027622; -3.570759, 3.478304, 3.7993202; -3.5383422, 3.2744098, 4.7944684; -4.2445107, 3.7370908, 3.9505482\",\n  \"-0.0, 0.0, 0.0; 1.2991791, -1.9811333, 0.9255499; 1.1910908, -9.141529, -0.41022462; 1.0289925, -15.805971, -4.1480756; 0.5928639, -17.15808, -1.9653223; 0.4107943, -17.261703, -0.71386266; -1.6440108, -1.6811703, 0.8857349; -1.953091, -8.069268, 4.232274; -1.6152997, -15.236237, 1.2849731; -2.2962258, -16.407278, 3.5281582; -2.63236, -16.456875, 4.760625; 0.34801355, 2.4766867, -0.06102193; 0.62991136, 4.9748926, 0.07978255; 0.7243726, 7.507043, 0.34789535; 0.48279938, 9.07311, 0.5115493; 0.73166096, 10.597541, 0.14898703; 0.68987006, 12.189878, -0.20961273; 4.8324804, 8.537233, 0.11449666; 5.575832, 3.6365008, -0.06861615; 4.158959, 2.4049003, 2.7036676; 3.438181, 1.7906096, 4.084116; 2.4350896, 1.6753824, 4.6610384; 1.6912162, 1.5737282, 5.222574; 2.747097, 1.2810955, 5.118755; -3.283831, 8.419625, -0.10735345; -3.4222445, 3.9502106, -2.1968563; -3.624481, 3.8982737, 1.0151715; -3.7255993, 3.8723063, 2.6211836; -3.6041312, 3.504124, 3.8207002; -3.5808725, 3.3048613, 4.817042; -4.2804976, 3.7606206, 3.963955\",\n  \"-0.0, 0.0, 0.0; 1.3017926, -1.9777378, 0.9291332; 1.1899084, -9.145973, -0.36358786; 1.0283321, -15.819777, -4.0847206; 0.5846361, -17.162056, -1.8974302; 0.3986867, -17.267195, -0.6466676; -1.6417769, -1.6815432, 0.8891637; -1.9880357, -8.049719, 4.2698565; -1.6087595, -15.220495, 1.3369007; -2.3044863, -16.382608, 3.5801861; -2.6489148, -16.408754, 4.811082; 0.3450622, 2.477308, -0.051872507; 0.62726426, 4.974826, 0.10007666; 0.7255434, 7.506237, 0.3737383; 0.4848054, 9.072311, 0.538541; 0.73504794, 10.596636, 0.17647907; 0.6947838, 12.188881, -0.18270296; 4.835139, 8.530823, 0.14186536; 5.567465, 3.6282592, -0.036611184; 4.1398964, 2.4095078, 2.7358644; 3.4137862, 1.8016477, 4.1163654; 2.4072924, 1.6945587, 4.6889133; 1.6601362, 1.6000923, 5.247338; 2.7156086, 1.3032444, 5.151654; -3.2813778, 8.425783, -0.07877731; -3.4163697, 3.960382, -2.1770656; -3.640036, 3.915324, 1.0336454; -3.7518692, 3.892796, 2.638999; -3.64178, 3.52946, 3.8410888; -3.628375, 3.3339226, 4.8383493; -4.3206086, 3.7838624, 3.9761915\",\n  \"-0.0, 0.0, 0.0; 1.3037136, -1.9747179, 0.9328555; 1.1861318, -9.150516, -0.31668305; 1.023554, -15.829827, -4.0278788; 0.5752628, -17.162657, -1.8357518; 0.38770524, -17.26116, -0.58468914; -1.6401287, -1.6812644, 0.89272624; -2.0196376, -8.033371, 4.299976; -1.6021993, -15.2077055, 1.3809378; -2.3110702, -16.36132, 3.6244955; -2.6629562, -16.367083, 4.853545; 0.33925414, 2.4782612, -0.0440725; 0.6201552, 4.975298, 0.11786678; 0.7241832, 7.505901, 0.39682528; 0.48516566, 9.071991, 0.5639714; 0.73604095, 10.596008, 0.20105717; 0.6962362, 12.187689, -0.1606712; 4.8356256, 8.5222645, 0.1615339; 5.561643, 3.6186237, -0.0130909085; 4.126841, 2.4092813, 2.7597706; 3.3971262, 1.806139, 4.14044; 2.3871336, 1.7091626, 4.7086124; 1.6366136, 1.6232686, 5.2639017; 2.6909013, 1.3198645, 5.17604; -3.2813883, 8.434916, -0.048240274; -3.4178388, 3.9745207, -2.157057; -3.6579356, 3.9363563, 1.052556; -3.7779841, 3.9172761, 2.6573608; -3.677833, 3.5587006, 3.8617468; -3.6730077, 3.3668594, 4.8598037; -4.35869, 3.8113968, 3.9896452\",\n  \"-0.0, 0.0, 0.0; 1.3072686, -1.9708909, 0.9359682; 1.1850477, -9.154575, -0.2669422; 1.0174862, -15.837442, -3.9715097; 0.5672258, -17.160542, -1.7738988; 0.3799832, -17.248016, -0.52196956; -1.6370856, -1.682645, 0.8957052; -2.048017, -8.021665, 4.3236217; -1.5970426, -15.199329, 1.4177883; -2.318065, -16.344458, 3.6618214; -2.6770763, -16.338528, 4.8888073; 0.33404645, 2.4790807, -0.037231248; 0.6139399, 4.9756775, 0.13302524; 0.7221208, 7.505677, 0.41584736; 0.4839604, 9.071528, 0.5864204; 0.7351362, 10.595252, 0.22248021; 0.695633, 12.186186, -0.14255121; 4.8348217, 8.516193, 0.17738771; 5.5545692, 3.611577, 0.0042266846; 4.113519, 2.4093952, 2.776962; 3.3806915, 1.8098557, 4.157552; 2.3679037, 1.7230006, 4.7223754; 1.6147006, 1.6455117, 5.275263; 2.6673934, 1.3349319, 5.1935687; -3.2825532, 8.4414425, -0.023106217; -3.4206429, 3.9860187, -2.1422992; -3.6772637, 3.9544804, 1.066107; -3.8055742, 3.9387112, 2.670308; -3.7145772, 3.583892, 3.8765316; -3.717603, 3.3949614, 4.8751507; -4.3971186, 3.8352132, 3.9980042\",\n  \"-0.0, 0.0, 0.0; 1.3082342, -1.9691662, 0.93824625; 1.1797082, -9.160025, -0.22032034; 1.0113329, -15.843954, -3.922934; 0.55801666, -17.155935, -1.7192938; 0.37016094, -17.234684, -0.46687722; -1.6362522, -1.6822939, 0.8978851; -2.0701768, -8.01215, 4.339871; -1.5932488, -15.192048, 1.4437153; -2.3245058, -16.329681, 3.6882484; -2.6895404, -16.31835, 4.9134183; 0.32882842, 2.4798522, -0.031911112; 0.60514444, 4.976358, 0.14537862; 0.7138021, 7.505865, 0.43239564; 0.4779061, 9.071861, 0.6047747; 0.7299943, 10.595103, 0.23945156; 0.69040066, 12.185299, -0.12876916; 4.8268843, 8.515739, 0.19781785; 5.542091, 3.6104512, 0.024860576; 4.095923, 2.4128823, 2.796927; 3.3605494, 1.8156755, 4.177174; 2.3454242, 1.7387934, 4.739241; 1.5899767, 1.6695334, 5.290155; 2.6408927, 1.3516762, 5.213745; -3.2903993, 8.443349, -0.0071995854; -3.4339278, 3.9931974, -2.1370814; -3.7036147, 3.9670784, 1.070302; -3.8384578, 3.95402, 2.6739917; -3.755677, 3.602615, 3.8818057; -3.7655993, 3.416437, 4.8808966; -4.4392962, 3.8536234, 3.997749\",\n  \"-0.0, 0.0, 0.0; 1.3084084, -1.9689649, 0.93842566; 1.173243, -9.166587, -0.17657125; 1.0014677, -15.851105, -3.877964; 0.5504725, -17.150244, -1.6662538; 0.3656755, -17.208902, -0.41228092; -1.6361037, -1.6823465, 0.89805704; -2.0864074, -8.005226, 4.350746; -1.5883797, -15.1870985, 1.4630492; -2.3307598, -16.318739, 3.7069602; -2.7019663, -16.302908, 4.9302244; 0.32622325, 2.4802465, -0.027732974; 0.5974252, 4.9768896, 0.15542315; 0.69941336, 7.5060897, 0.44754595; 0.46409523, 9.072325, 0.6185382; 0.7182194, 10.594858, 0.25167492; 0.6799933, 12.184617, -0.11857405; 4.810697, 8.526047, 0.22539893; 5.5173907, 3.6196332, 0.049406797; 4.069141, 2.4256163, 2.8219185; 3.3327303, 1.8302249, 4.2023973; 2.3160787, 1.7625886, 4.762892; 1.559171, 1.7007341, 5.3126817; 2.6080003, 1.375323, 5.239465; -3.3058443, 8.435033, -4.8020482E-4; -3.4619417, 3.9907875, -2.1417797; -3.7410288, 3.9689462, 1.0648315; -3.8805714, 3.9580255, 2.6681352; -3.8045113, 3.60962, 3.8772593; -3.819986, 3.4259257, 4.8767395; -4.4887476, 3.8609436, 3.9887834\",\n  \"-0.0, 0.0, 0.0; 1.3091519, -1.9683305, 0.93872035; 1.1669776, -9.171621, -0.13814795; 0.99371, -15.856611, -3.8386192; 0.542534, -17.144173, -1.6201868; 0.3586313, -17.192661, -0.36564815; -1.6354679, -1.6828142, 0.89833874; -2.097877, -8.001315, 4.357438; -1.586029, -15.184179, 1.4746268; -2.337361, -16.310352, 3.718309; -2.7134676, -16.29517, 4.9400835; 0.32323882, 2.4806697, -0.02468129; 0.58906245, 4.9775686, 0.16281784; 0.6840306, 7.5066137, 0.4586271; 0.44913515, 9.073136, 0.6275529; 0.70483756, 10.595093, 0.2593976; 0.6673282, 12.184466, -0.112573355; 4.7933426, 8.537025, 0.24857828; 5.489566, 3.6294198, 0.064287946; 4.0414157, 2.4395084, 2.8386164; 3.3050542, 1.8462174, 4.220025; 2.287763, 1.7872965, 4.780343; 1.5302527, 1.7323908, 5.3300405; 2.57692, 1.3997536, 5.258374; -3.3223333, 8.426265, 0.0014190376; -3.4957366, 3.9877348, -2.1503778; -3.7817252, 3.9685242, 1.0556419; -3.924719, 3.9589179, 2.65865; -3.8537903, 3.6137497, 3.8690138; -3.8733678, 3.4328318, 4.8689284; -4.5381165, 3.8662868, 3.9772024\",\n  \"-0.0, 0.0, 0.0; 1.3089913, -1.9689969, 0.9375459; 1.1580999, -9.176872, -0.10696638; 0.9838542, -15.8640175, -3.8034954; 0.5343567, -17.139336, -1.5776615; 0.3527615, -17.17077, -0.3222437; -1.6356081, -1.6832775, 0.8972149; -2.1082647, -7.999085, 4.359846; -1.5837271, -15.181889, 1.4791672; -2.3494978, -16.305395, 3.7193017; -2.7327414, -16.286488, 4.938804; 0.31971094, 2.4811344, -0.023898695; 0.57971007, 4.978463, 0.16603014; 0.6682386, 7.5072126, 0.46632835; 0.43191248, 9.073955, 0.63117504; 0.68876696, 10.595349, 0.26150268; 0.65243745, 12.184559, -0.11128417; 4.77562, 8.547389, 0.26691207; 5.4591837, 3.6384344, 0.07149097; 4.0131407, 2.453838, 2.849191; 3.2778301, 1.8632704, 4.2323256; 2.2605681, 1.8131016, 4.7935476; 1.5031023, 1.7648516, 5.3439302; 2.5470052, 1.4237471, 5.2717443; -3.3392286, 8.418461, 0.0020179749; -3.5338433, 3.986539, -2.161553; -3.822102, 3.9699588, 1.0442779; -3.9662309, 3.9616687, 2.6471915; -3.8987327, 3.6203916, 3.8588543; -3.9208722, 3.4428902, 4.8593273; -4.582629, 3.875051, 3.9647527\",\n  \"-0.0, 0.0, 0.0; 1.3097192, -1.96912, 0.9362691; 1.1483998, -9.179999, -0.08571237; 0.97345763, -15.871618, -3.774104; 0.5251775, -17.136166, -1.5418892; 0.34453142, -17.161592, -0.2861985; -1.6349901, -1.6845282, 0.8959933; -2.1152, -7.9993796, 4.359329; -1.5822333, -15.180242, 1.4753597; -2.3628533, -16.299166, 3.7126606; -2.752695, -16.272518, 4.929925; 0.31650054, 2.48155, -0.023478348; 0.57103336, 4.979397, 0.16703624; 0.65274495, 7.5082135, 0.4686989; 0.41327173, 9.074945, 0.62904036; 0.6704471, 10.595997, 0.25817874; 0.63501763, 12.185137, -0.114991456; 4.75791, 8.558631, 0.27749217; 5.429768, 3.6486697, 0.06732918; 3.9848561, 2.468123, 2.847341; 3.2501159, 1.8796662, 4.2316775; 2.2344012, 1.8398002, 4.796517; 1.4784472, 1.7991372, 5.3495846; 2.5184512, 1.4471564, 5.273444; -3.356084, 8.409777, -0.002707541; -3.572707, 3.9838467, -2.176429; -3.8622684, 3.971338, 1.0293031; -4.0070496, 3.9650826, 2.6321673; -3.9417834, 3.6279612, 3.845115; -3.965407, 3.4541593, 4.846204; -4.6248856, 3.8853693, 3.9494905\",\n  \"-0.0, 0.0, 0.0; 1.3106127, -1.9689945, 0.935283; 1.1373796, -9.181475, -0.07336575; 0.96119475, -15.879026, -3.7509143; 0.5167419, -17.132664, -1.5117912; 0.3391357, -17.142517, -0.25544834; -1.6342288, -1.6857684, 0.8950492; -2.1216092, -8.001541, 4.3557024; -1.5856367, -15.178167, 1.461765; -2.3771992, -16.292967, 3.69728; -2.7718349, -16.267141, 4.9130163; 0.31247476, 2.482059, -0.02360336; 0.5612448, 4.980582, 0.16565686; 0.63679165, 7.5098, 0.465561; 0.39282542, 9.076115, 0.62318045; 0.64966834, 10.596896, 0.25098464; 0.6151222, 12.185746, -0.12350178; 4.7398763, 8.569318, 0.27999413; 5.401749, 3.6586046, 0.056160226; 3.955431, 2.484418, 2.8381338; 3.2200015, 1.8992376, 4.2234926; 2.206225, 1.8704906, 4.7924743; 1.4521298, 1.8378401, 5.3486023; 2.4874935, 1.4735134, 5.2674594; -3.373312, 8.401987, -0.01279065; -3.607317, 3.9826035, -2.1979992; -3.8990567, 3.9763186, 1.0075533; -4.044927, 3.9731762, 2.6103277; -3.9804764, 3.6412306, 3.8247457; -4.004259, 3.4720786, 4.826627; -4.6622324, 3.902466, 3.9284139\",\n  \"-0.0, 0.0, 0.0; 1.3143423, -1.967288, 0.9336383; 1.1276847, -9.180491, -0.06741589; 0.95212364, -15.885906, -3.7306368; 0.50797915, -17.129707, -1.4859736; 0.33052045, -17.13574, -0.22958565; -1.631037, -1.68969, 0.8934756; -2.129709, -8.007305, 4.349153; -1.5925889, -15.178088, 1.4409771; -2.3944201, -16.288864, 3.6748343; -2.7932394, -16.262417, 4.8891916; 0.30675077, 2.4827642, -0.024487939; 0.55006975, 4.981989, 0.16257975; 0.6208695, 7.5115743, 0.4605348; 0.37016678, 9.07714, 0.6149962; 0.6261187, 10.5977745, 0.24158925; 0.59301233, 12.18646, -0.1337249; 4.7222576, 8.578176, 0.27806807; 5.3776135, 3.6673408, 0.03828281; 3.927174, 2.5026517, 2.8221023; 3.1897032, 1.9223225, 4.2084165; 2.1783037, 1.9048218, 4.782066; 1.4264537, 1.8802205, 5.341637; 2.456814, 1.5032411, 5.2548027; -3.390339, 8.396303, -0.022387028; -3.6416802, 3.983385, -2.2187083; -3.9356687, 3.9883642, 0.9866414; -4.082663, 3.9908538, 2.5893145; -4.022716, 3.6652331, 3.8056736; -4.049637, 3.5017204, 4.808411; -4.7032547, 3.930766, 3.9063845\",\n  \"-0.0, 0.0, 0.0; 1.316479, -1.9664662, 0.93235856; 1.1184928, -9.179667, -0.06652838; 0.942034, -15.893599, -3.7140753; 0.4994599, -17.129038, -1.4644897; 0.32283944, -17.130936, -0.20797062; -1.629204, -1.6921036, 0.8922508; -2.137215, -8.013033, 4.340499; -1.6038687, -15.176112, 1.41271; -2.4133291, -16.282701, 3.6458938; -2.814877, -16.258858, 4.8594055; 0.3012384, 2.4834268, -0.025714863; 0.5383625, 4.983473, 0.15831581; 0.6037035, 7.513604, 0.4528656; 0.34614846, 9.078355, 0.60427755; 0.600211, 10.598995, 0.22960451; 0.5671801, 12.187447, -0.14670321; 4.7030263, 8.588425, 0.27222723; 5.355516, 3.6777744, 0.021112293; 3.8969212, 2.5271158, 2.806505; 3.155406, 1.9538958, 4.1936193; 2.146521, 1.9473029, 4.771908; 1.3970106, 1.9304022, 5.3348927; 2.422148, 1.5408075, 5.2421274; -3.4089317, 8.389391, -0.034483165; -3.675891, 3.9807606, -2.237563; -3.9746091, 4.00051, 0.9672923; -4.1239676, 4.010386, 2.5697181; -4.067462, 3.6924968, 3.7882853; -4.0967236, 3.5357118, 4.7920313; -4.7468977, 3.9618807, 3.88616\",\n  \"-0.0, 0.0, 0.0; 1.3178692, -1.9663721, 0.9305915; 1.1111599, -9.179316, -0.06839675; 0.9357374, -15.901837, -3.7001362; 0.49103937, -17.129179, -1.4465404; 0.31284338, -17.133522, -0.1902498; -1.6280124, -1.69414, 0.89056; -2.1474085, -8.020771, 4.326634; -1.6186519, -15.173932, 1.3738697; -2.4334536, -16.276875, 3.6069143; -2.8367271, -16.258501, 4.8199487; 0.2953513, 2.4841263, -0.026438981; 0.5254147, 4.985087, 0.15408961; 0.58455485, 7.5159345, 0.44375175; 0.3193923, 9.079873, 0.5903432; 0.5710527, 10.600693, 0.21477953; 0.53754914, 12.189111, -0.16163072; 4.6817765, 8.599595, 0.26833743; 5.3367357, 3.6896505, 0.00996986; 3.8665028, 2.5604527, 2.7980256; 3.119207, 1.9980407, 4.1864614; 2.1127663, 2.0014017, 4.76902; 1.3655069, 1.9917042, 5.335159; 2.3860216, 1.5913169, 5.237506; -3.4291518, 8.381745, -0.052517354; -3.71172, 3.9759293, -2.2592762; -4.019238, 4.0168757, 0.944546; -4.172997, 4.03735, 2.5464551; -4.118226, 3.728664, 3.767465; -4.1485505, 3.579719, 4.7723727; -4.7967687, 4.00116, 3.8628948\",\n  \"-0.0, 0.0, 0.0; 1.3200699, -1.9656901, 0.9289114; 1.1062034, -9.178389, -0.070331514; 0.93137383, -15.90896, -3.687159; 0.48291275, -17.129753, -1.4307535; 0.30225754, -17.138906, -0.17483997; -1.6261193, -1.6968004, 0.8889519; -2.1599028, -8.0307665, 4.309273; -1.6374439, -15.172779, 1.3285341; -2.4580526, -16.274084, 3.5602605; -2.862739, -16.254263, 4.7728014; 0.2886741, 2.484891, -0.028266411; 0.51147777, 4.986821, 0.14788309; 0.56470555, 7.518364, 0.43257684; 0.2920352, 9.081446, 0.5744621; 0.5413376, 10.602378, 0.19778123; 0.50734866, 12.190628, -0.17929322; 4.6599107, 8.610424, 0.26224497; 5.318797, 3.7012348, -4.5871735E-4; 3.8341002, 2.597446, 2.7901065; 3.079619, 2.0478086, 4.1797714; 2.0758083, 2.060726, 4.7667184; 1.3309569, 2.0579562, 5.3360977; 2.3468814, 1.647265, 5.233499; -3.449951, 8.374605, -0.07253313; -3.744502, 3.9713745, -2.2828836; -4.0618434, 4.039818, 0.9195106; -4.2205133, 4.0740395, 2.5207062; -4.1684813, 3.7735407, 3.7438765; -4.200473, 3.6317503, 4.749767; -4.8455734, 4.0504694, 3.8368218\",\n  \"-0.0, 0.0, 0.0; 1.3218386, -1.9657048, 0.9263616; 1.1033008, -9.178063, -0.07432431; 0.92807186, -15.914475, -3.6802433; 0.4737274, -17.129608, -1.4219604; 0.28894544, -17.152418, -0.16682136; -1.6245981, -1.6995322, 0.88651186; -2.171986, -8.042869, 4.2872615; -1.6598239, -15.172473, 1.2751932; -2.4860613, -16.274675, 3.5043983; -2.8915923, -16.249964, 4.716567; 0.28078622, 2.4857602, -0.031145204; 0.49571538, 4.988776, 0.13926491; 0.54404056, 7.521023, 0.4185193; 0.26310122, 9.083028, 0.5560613; 0.50912815, 10.604351, 0.1788046; 0.47388884, 12.192547, -0.19838142; 4.637573, 8.619939, 0.25210726; 5.3008237, 3.7115946, -0.015358448; 3.8020024, 2.6329365, 2.7774823; 3.0405054, 2.0959353, 4.1682606; 2.0398355, 2.1204371, 4.7601795; 1.2978399, 2.1263096, 5.333252; 2.3085208, 1.7040905, 5.225775; -3.471335, 8.36907, -0.09463385; -3.7764215, 3.9673986, -2.3066604; -4.104008, 4.063353, 0.893996; -4.267802, 4.1113305, 2.4943223; -4.217884, 3.8209484, 3.7200217; -4.251098, 3.6878402, 4.7270584; -4.8936625, 4.1019626, 3.8102362\",\n  \"-0.0, 0.0, 0.0; 1.3220338, -1.9664865, 0.92442256; 1.1006271, -9.17872, -0.07652968; 0.9244256, -15.91974, -3.6737807; 0.46381876, -17.130852, -1.4146068; 0.27463225, -17.16933, -0.16050696; -1.624435, -1.7006545, 0.88465637; -2.182828, -8.055517, 4.2620163; -1.6863555, -15.171817, 1.2160506; -2.515967, -16.27581, 3.443116; -2.9207213, -16.243797, 4.6553736; 0.2730591, 2.4865835, -0.033991635; 0.47951424, 4.9907517, 0.12983735; 0.52260095, 7.5239277, 0.40141493; 0.23395777, 9.084957, 0.5339875; 0.4757501, 10.606897, 0.15648425; 0.43765754, 12.195144, -0.22021359; 4.6142855, 8.630129, 0.23785768; 5.27961, 3.7225347, -0.038083687; 3.76797, 2.6662707, 2.7564065; 3.000107, 2.1405392, 4.14799; 2.0021453, 2.178837, 4.743737; 1.2625344, 2.1952827, 5.3196793; 2.2675333, 1.76042, 5.20937; -3.493593, 8.362748, -0.120426774; -3.8083148, 3.961697, -2.3323374; -4.146605, 4.087115, 0.86618567; -4.315749, 4.149822, 2.4654455; -4.2678165, 3.871324, 3.6939788; -4.3020825, 3.7483764, 4.702271; -4.942075, 4.15691, 3.7811522\",\n  \"-0.0, 0.0, 0.0; 1.3223826, -1.9670935, 0.9226301; 1.0987698, -9.179415, -0.077204645; 0.91775, -15.922976, -3.6694493; 0.45426655, -17.129745, -1.4085407; 0.26337647, -17.174854, -0.1549201; -1.6241385, -1.701829, 0.8829409; -2.1928358, -8.070129, 4.233161; -1.7173215, -15.172211, 1.1508832; -2.5484223, -16.278233, 3.3763855; -2.9511395, -16.239676, 4.589131; 0.26419494, 2.4874854, -0.03783621; 0.4611487, 4.9928646, 0.119033694; 0.49856725, 7.526869, 0.38363522; 0.202573, 9.086895, 0.5117396; 0.44037133, 10.6093025, 0.1335825; 0.39950958, 12.197414, -0.24338856; 4.588302, 8.640943, 0.22481908; 5.254781, 3.7339716, -0.059309527; 3.7296617, 2.698841, 2.7357652; 2.9551067, 2.1837523, 4.12762; 1.9591826, 2.2363331, 4.725683; 1.2212567, 2.2636867, 5.303369; 2.2202947, 1.815641, 5.19168; -3.518315, 8.3560505, -0.14821738; -3.8411098, 3.95373, -2.3564355; -4.1902847, 4.1097198, 0.83957195; -4.3648725, 4.1877127, 2.437574; -4.319475, 3.9226475, 3.6691713; -4.3551106, 3.8112082, 4.678753; -4.9918485, 4.213703, 3.7527337\",\n  \"-0.0, 0.0, 0.0; 1.320384, -1.9692659, 0.92085606; 1.0959516, -9.182171, -0.074575126; 0.9091067, -15.925186, -3.6675446; 0.4453488, -17.126074, -1.4035623; 0.2552153, -17.165869, -0.14964676; -1.6258723, -1.7010534, 0.8812427; -2.2025018, -8.084539, 4.2010684; -1.749812, -15.17218, 1.0823288; -2.5792994, -16.280489, 3.3072958; -2.9784875, -16.236414, 4.52102; 0.25469628, 2.4883955, -0.042804167; 0.4413426, 4.995038, 0.10629076; 0.4741971, 7.52981, 0.36405662; 0.1701234, 9.088707, 0.4868721; 0.40343633, 10.611571, 0.10776338; 0.35967332, 12.199586, -0.26929373; 4.5622635, 8.650288, 0.20734324; 5.231149, 3.7438703, -0.080654815; 3.692562, 2.7321863, 2.7156236; 2.9113207, 2.22889, 4.1080556; 1.9164648, 2.2964966, 4.7063866; 1.1792512, 2.33548, 5.284314; 2.1723742, 1.8741875, 5.173806; -3.543391, 8.350825, -0.17508432; -3.873715, 3.9464955, -2.378177; -4.2323184, 4.1329093, 0.81515574; -4.4116206, 4.226117, 2.41182; -4.3691864, 3.97637, 3.6467202; -4.406487, 3.8780038, 4.6575994; -5.039515, 4.273294, 3.7259502\",\n  \"-0.0, 0.0, 0.0; 1.320156, -1.9703454, 0.9188723; 1.0963998, -9.184381, -0.06848341; 0.9019608, -15.9244, -3.6666665; 0.43648034, -17.120522, -1.4005158; 0.24621908, -17.159534, -0.146595; -1.6260747, -1.7018421, 0.8793443; -2.2086825, -8.101716, 4.1664143; -1.7859709, -15.174295, 1.0095088; -2.6091688, -16.28349, 3.2363696; -3.0028005, -16.24156, 4.451983; 0.24612941, 2.4891677, -0.047737986; 0.42296824, 4.997003, 0.09302035; 0.4494151, 7.5326433, 0.3428625; 0.13766328, 9.090336, 0.4616507; 0.36640632, 10.613674, 0.08166295; 0.3191398, 12.201355, -0.29637408; 4.535259, 8.662016, 0.1921469; 5.207139, 3.7562208, -0.099461734; 3.6527743, 2.7685428, 2.696673; 2.8636947, 2.2773151, 4.088995; 1.8687611, 2.3593092, 4.6853952; 1.131135, 2.409476, 5.2619324; 2.118764, 1.9357431, 5.154869; -3.568771, 8.342723, -0.20823163; -3.9048696, 3.936211, -2.4060812; -4.2751656, 4.1551614, 0.78384995; -4.460314, 4.264638, 2.3788137; -4.4204383, 4.030992, 3.6169462; -4.4590445, 3.9463277, 4.629016; -5.088597, 4.3338866, 3.6917803\",\n  \"-0.0, 0.0, 0.0; 1.3181157, -1.9724916, 0.91719544; 1.0954713, -9.187937, -0.060059786; 0.8932006, -15.922807, -3.6674438; 0.42753404, -17.113678, -1.3985674; 0.23888238, -17.142242, -0.144122; -1.62784, -1.7009825, 0.8777397; -2.2128742, -8.118701, 4.1293955; -1.8220634, -15.176033, 0.9344864; -2.6365638, -16.284613, 3.1648479; -3.0234818, -16.245615, 4.3827124; 0.2378033, 2.489857, -0.053625517; 0.4031253, 4.9989095, 0.07921692; 0.42037463, 7.5351963, 0.3232341; 0.10114381, 9.091842, 0.43571782; 0.3259049, 10.615432, 0.054364234; 0.27535787, 12.202839, -0.3244001; 4.5031147, 8.677456, 0.18616332; 5.1776533, 3.7718215, -0.10199751; 3.6056266, 2.8094034, 2.6930714; 2.8077753, 2.3308659, 4.0848136; 1.8126485, 2.4283254, 4.678559; 1.074449, 2.4906106, 5.2531767; 2.0562384, 2.0039167, 5.1506352; -3.5981777, 8.330958, -0.24576011; -3.9401565, 3.9201899, -2.4341416; -4.322503, 4.1711125, 0.75201106; -4.513677, 4.296575, 2.3450854; -4.477281, 4.080139, 3.586449; -4.5179815, 4.010028, 4.599549; -5.143401, 4.3887396, 3.655951\",\n  \"-0.0, 0.0, 0.0; 1.3170621, -1.9739052, 0.91566646; 1.0926701, -9.190309, -0.054090977; 0.8844433, -15.918382, -3.6737983; 0.41822976, -17.10283, -1.4016755; 0.23072873, -17.123098, -0.146896; -1.6287525, -1.7008632, 0.87627673; -2.2151785, -8.136906, 4.0912585; -1.8605824, -15.178852, 0.85840344; -2.662271, -16.28525, 3.0944836; -3.0402184, -16.247839, 4.3152113; 0.23089547, 2.4903767, -0.05938173; 0.3842982, 5.000599, 0.06542152; 0.38850403, 7.537546, 0.3030584; 0.062047243, 9.09307, 0.41018337; 0.28289238, 10.616774, 0.027001202; 0.22866993, 12.203637, -0.35352746; 4.466336, 8.698817, 0.18036883; 5.1437497, 3.7932935, -0.102875695; 3.5535684, 2.8578424, 2.6910787; 2.7466972, 2.3928342, 4.082207; 1.7503167, 2.505255, 4.6711864; 1.0105207, 2.5794563, 5.242326; 1.9870889, 2.080968, 5.146827; -3.6313186, 8.312793, -0.2849651; -3.980087, 3.8983102, -2.4647686; -4.3745766, 4.183212, 0.71704364; -4.57182, 4.325665, 2.3079479; -4.539537, 4.1263437, 3.5522876; -4.5828667, 4.0706644, 4.566174; -5.2036834, 4.440399, 3.6159995\",\n  \"-0.0, 0.0, 0.0; 1.3159324, -1.9755526, 0.913736; 1.0878489, -9.192626, -0.050153673; 0.87727916, -15.913404, -3.6832511; 0.40822393, -17.09172, -1.4085262; 0.22029975, -17.106926, -0.15373862; -1.6297315, -1.7008767, 0.8744289; -2.2180514, -8.156041, 4.0504913; -1.9003737, -15.182505, 0.78032184; -2.6924775, -16.285837, 3.021327; -3.0620782, -16.24193, 4.2443914; 0.22155695, 2.4910598, -0.06593924; 0.36275363, 5.0024314, 0.04981561; 0.35731542, 7.5400124, 0.28056544; 0.024964422, 9.094753, 0.38071132; 0.24176025, 10.618714, -0.0037583113; 0.1833036, 12.205293, -0.3848485; 4.4316792, 8.714827, 0.17244416; 5.1159678, 3.809442, -0.0963209; 3.5034502, 2.9025486, 2.6942449; 2.6854744, 2.4518414, 4.083594; 1.6867609, 2.5787334, 4.6656413; 0.9443432, 2.664734, 5.231701; 1.9164742, 2.155897, 5.1460123; -3.6625142, 8.2999735, -0.32703513; -4.0132575, 3.879589, -2.4945288; -4.4214144, 4.1982303, 0.6823559; -4.6254926, 4.357552, 2.270796; -4.599045, 4.176147, 3.518011; -4.646342, 4.1355596, 4.532437; -5.2610803, 4.495945, 3.5747478\",\n  \"-0.0, 0.0, 0.0; 1.3153785, -1.9767998, 0.9118334; 1.0845227, -9.194105, -0.04965341; 0.8729706, -15.908129, -3.6951628; 0.39752463, -17.080935, -1.4189165; 0.20659482, -17.099691, -0.16463077; -1.6302149, -1.7013483, 0.8726085; -2.2207303, -8.175879, 4.0085926; -1.9400897, -15.186928, 0.7021525; -2.7244253, -16.285112, 2.9484124; -3.085887, -16.229614, 4.173437; 0.21348353, 2.4915721, -0.07285411; 0.3429712, 5.003987, 0.033581525; 0.32633516, 7.542139, 0.25740594; -0.013127446, 9.0957575, 0.35089257; 0.19879363, 10.620042, -0.035012245; 0.13529466, 12.206132, -0.41732678; 4.3966103, 8.732637, 0.16859774; 5.089243, 3.8273993, -0.08076973; 3.4506674, 2.9520755, 2.7046936; 2.619732, 2.5171554, 4.091381; 1.618182, 2.6577077, 4.66536; 0.8726899, 2.7551637, 5.225492; 1.8412337, 2.237744, 5.1513577; -3.693012, 8.2846775, -0.37444454; -4.0436563, 3.85678, -2.5265653; -4.469226, 4.2099643, 0.6443763; -4.682009, 4.386555, 2.2298455; -4.662126, 4.2232156, 3.4796762; -4.7141333, 4.1977077, 4.494363; -5.322518, 4.547643, 3.5287738\",\n  \"-0.0, 0.0, 0.0; 1.3136812, -1.9790968, 0.90929437; 1.0816514, -9.196396, -0.051959693; 0.8688118, -15.90548, -3.7064762; 0.38512295, -17.074362, -1.4299483; 0.18922488, -17.107115, -0.17671669; -1.6316822, -1.7011861, 0.87017846; -2.2231188, -8.19509, 3.9656677; -1.9782081, -15.19093, 0.6243584; -2.7550583, -16.281456, 2.8769414; -3.1092062, -16.220675, 4.1038504; 0.20476532, 2.4921038, -0.07939942; 0.32125506, 5.0055475, 0.01730626; 0.29264545, 7.544277, 0.2332328; -0.052289903, 9.09715, 0.3187426; 0.15540732, 10.621784, -0.068074256; 0.086857386, 12.20764, -0.45048743; 4.358269, 8.751793, 0.16304743; 5.059364, 3.8464046, -0.05812335; 3.3923972, 3.0028992, 2.720302; 2.5473385, 2.583879, 4.103346; 1.5420467, 2.737959, 4.667223; 0.79260254, 2.8469682, 5.219902; 1.7579782, 2.3218727, 5.159728; -3.7262821, 8.267792, -0.4228927; -4.076728, 3.8321943, -2.5591311; -4.52073, 4.2219067, 0.6049967; -4.7427316, 4.4167647, 2.1870584; -4.730771, 4.2721577, 3.4392958; -4.7886205, 4.262214, 4.4539375; -5.3896384, 4.6008525, 3.4797454\",\n  \"-0.0, 0.0, 0.0; 1.3117793, -1.981524, 0.9067504; 1.0798177, -9.198362, -0.057968497; 0.8665904, -15.904081, -3.7186337; 0.3725829, -17.070858, -1.4432416; 0.17035332, -17.120762, -0.19158208; -1.6333225, -1.7008554, 0.8677442; -2.2260077, -8.21428, 3.9217036; -2.0149333, -15.195267, 0.5471811; -2.7855487, -16.27623, 2.8065052; -3.1329074, -16.208675, 4.0349994; 0.19475262, 2.4926603, -0.08677744; 0.29830766, 5.0070324, 1.8619001E-5; 0.26004705, 7.546216, 0.2090064; -0.09169993, 9.098007, 0.285968; 0.11122386, 10.622988, -0.1020135; 0.03770715, 12.20856, -0.4846798; 4.3220115, 8.767004, 0.15965179; 5.031367, 3.8613868, -0.027478188; 3.3352716, 3.0504973, 2.7430172; 2.4757214, 2.647753, 4.1219597; 1.466284, 2.8142686, 4.674787; 0.7125399, 2.934236, 5.219288; 1.6755893, 2.403367, 5.174454; -3.7572875, 8.254673, -0.47280487; -4.1018496, 3.809011, -2.588984; -4.5688963, 4.23844, 0.56667423; -4.80242, 4.453153, 2.1445014; -4.8012877, 4.327714, 3.3988605; -4.867397, 4.3335996, 4.4130297; -5.4588847, 4.6600485, 3.4288945\",\n  \"-0.0, 0.0, 0.0; 1.3098282, -1.9839962, 0.90416193; 1.0761385, -9.199799, -0.067860365; 0.8645277, -15.903361, -3.7325664; 0.35970098, -17.069262, -1.4591005; 0.15047751, -17.138813, -0.20952976; -1.6350056, -1.7005002, 0.86526704; -2.2268052, -8.23268, 3.8790739; -2.050907, -15.199394, 0.4731846; -2.8155386, -16.270445, 2.7392528; -3.1558356, -16.19347, 3.9691682; 0.18511173, 2.493147, -0.09362816; 0.27520758, 5.008377, -0.017319456; 0.22570753, 7.5480843, 0.18274988; -0.13328001, 9.098605, 0.25143352; 0.06511068, 10.623958, -0.13743195; -0.012921058, 12.20931, -0.5201154; 4.283008, 8.784882, 0.15179959; 4.997762, 3.8787093, 0.0038680136; 3.2720275, 3.1005142, 2.7654219; 2.39773, 2.714082, 4.1397533; 1.3836365, 2.891936, 4.6803927; 0.62508196, 3.021964, 5.215829; 1.5860001, 2.486143, 5.1870456; -3.790543, 8.238193, -0.52381283; -4.129299, 3.7804341, -2.615339; -4.619905, 4.253628, 0.5304699; -4.8652077, 4.4902244, 2.1033726; -4.876796, 4.382685, 3.3593397; -4.9527206, 4.4033136, 4.372628; -5.533211, 4.718166, 3.3782198\",\n  \"-0.0, 0.0, 0.0; 1.3094155, -1.9852027, 0.9021086; 1.0697155, -9.199108, -0.08245325; 0.86154264, -15.90031, -3.751671; 0.34625548, -17.065042, -1.4799552; 0.12973939, -17.157389, -0.2331065; -1.6353651, -1.7011532, 0.8633018; -2.2258449, -8.251983, 3.836616; -2.0853813, -15.204821, 0.40085816; -2.843586, -16.265413, 2.6739936; -3.1761734, -16.17561, 3.9051476; 0.17558143, 2.4935007, -0.10217795; 0.25249538, 5.0094953, -0.03753358; 0.19105981, 7.5496325, 0.15356798; -0.17553248, 9.098686, 0.21478772; 0.017616257, 10.624559, -0.17467138; -0.065745965, 12.209659, -0.55727905; 4.2431593, 8.803682, 0.14081714; 4.960922, 3.896809, 0.03738778; 3.2074182, 3.151166, 2.7904165; 2.3193057, 2.7809613, 4.1603494; 1.3002906, 2.96931, 4.688026; 0.53668207, 3.1088853, 5.213787; 1.4959211, 2.5694253, 5.201969; -3.8241193, 8.220129, -0.5775436; -4.1592035, 3.748764, -2.6404204; -4.6737504, 4.266447, 0.49453807; -4.9310226, 4.525287, 2.062016; -4.9560657, 4.436087, 3.3192227; -5.042454, 4.4717283, 4.3312554; -5.6114273, 4.77407, 3.3263636\",\n  \"-0.0, 0.0, 0.0; 1.3099273, -1.9858798, 0.8998723; 1.0572138, -9.196707, -0.103803635; 0.8557284, -15.89417, -3.7802134; 0.3331161, -17.058086, -1.509753; 0.110748306, -17.171692, -0.26569307; -1.6349353, -1.7026502, 0.8611622; -2.2227645, -8.270937, 3.7962446; -2.1166809, -15.211097, 0.3337245; -2.8700032, -16.260136, 2.6138337; -3.19445, -16.148872, 3.8454075; 0.16598415, 2.493712, -0.112531945; 0.229666, 5.0103717, -0.060653254; 0.15563548, 7.5507746, 0.122280195; -0.21920064, 9.098129, 0.17609343; -0.031745642, 10.624503, -0.21418715; -0.12070746, 12.209364, -0.5965196; 4.202007, 8.823236, 0.1281151; 4.9241467, 3.9162226, 0.0732238; 3.1441073, 3.205017, 2.8183239; 2.242791, 2.8519683, 4.184156; 1.2192571, 3.049739, 4.6994953; 0.45102054, 3.1981485, 5.2160134; 1.4090507, 2.6564355, 5.2206535; -3.8584251, 8.200726, -0.63312346; -4.191094, 3.7153568, -2.6657686; -4.727699, 4.2780347, 0.4577179; -4.996001, 4.5593753, 2.0194588; -5.0329742, 4.4880157, 3.2775102; -5.128657, 4.53819, 4.2880898; -5.6874046, 4.8278556, 3.2737706\",\n  \"-0.0, 0.0, 0.0; 1.3089324, -1.9865285, 0.8998884; 1.0450118, -9.194076, -0.12425327; 0.8458762, -15.886192, -3.8105137; 0.32356894, -17.04904, -1.5394347; 0.101098776, -17.164791, -0.29559088; -1.6357874, -1.7018237, 0.8611777; -2.218414, -8.287643, 3.7577562; -2.1441236, -15.216122, 0.2710979; -2.8929052, -16.254662, 2.5575; -3.20945, -16.122175, 3.7890298; 0.156734, 2.4938118, -0.12309113; 0.20631912, 5.0110087, -0.083296254; 0.118474856, 7.55154, 0.091561764; -0.2646789, 9.097131, 0.13681018; -0.083268434, 10.624067, -0.25412276; -0.17836252, 12.208866, -0.6352353; 4.158279, 8.844496, 0.11534036; 4.885061, 3.9378614, 0.11177847; 3.0797012, 3.2613034, 2.8490896; 2.1657865, 2.9255023, 4.2108936; 1.1370901, 3.1319485, 4.7123647; 0.363598, 3.2887526, 5.218454; 1.3208005, 2.7460337, 5.241171; -3.8946776, 8.178887, -0.68740666; -4.2240987, 3.6794496, -2.6892533; -4.7836165, 4.2865562, 0.42186904; -5.0633745, 4.59011, 1.9774283; -5.110986, 4.537244, 3.236035; -5.214976, 4.602398, 4.244938; -5.764619, 4.8783364, 3.2218547\",\n  \"-0.0, 0.0, 0.0; 1.3069135, -1.987398, 0.90090257; 1.035125, -9.192179, -0.14049715; 0.8324649, -15.8771, -3.8396015; 0.31546265, -17.04179, -1.568253; 0.09671727, -17.148785, -0.32296538; -1.6375117, -1.6996728, 0.86214817; -2.2127445, -8.302528, 3.7211761; -2.1675994, -15.220974, 0.2141571; -2.9125695, -16.248928, 2.50658; -3.2208426, -16.09007, 3.7370887; 0.1472764, 2.4939256, -0.13213429; 0.18277054, 5.0115128, -0.10352208; 0.08222592, 7.5522037, 0.061920777; -0.31042126, 9.0956135, 0.09960073; -0.13571565, 10.623123, -0.29214934; -0.23710902, 12.20764, -0.6728116; 4.115812, 8.864015, 0.10259574; 4.84771, 3.9583936, 0.15244853; 3.0178103, 3.3163352, 2.881762; 2.0916867, 2.9977052, 4.2394376; 1.0579262, 3.2117348, 4.727125; 0.27927142, 3.3760471, 5.222809; 1.2357938, 2.8331554, 5.2631807; -3.9295855, 8.158146, -0.74054873; -4.2555327, 3.6442013, -2.710044; -4.8363037, 4.295152, 0.3882928; -5.1266885, 4.6206284, 1.937459; -5.183765, 4.5869455, 3.1963315; -5.295104, 4.6676016, 4.203328; -5.836522, 4.9291525, 3.172112\",\n  \"-0.0, 0.0, 0.0; 1.3018411, -1.9896591, 0.9032525; 1.0246041, -9.192654, -0.14900863; 0.81342685, -15.867929, -3.865014; 0.30985796, -17.034107, -1.5914123; 0.10040681, -17.117744, -0.34274352; -1.641832, -1.6943549, 0.8643965; -2.2085087, -8.313733, 3.6866925; -2.1878667, -15.224682, 0.16469526; -2.9301326, -16.241999, 2.462734; -3.2301683, -16.052588, 3.6909528; 0.1371693, 2.4940536, -0.14034179; 0.15676263, 5.0119114, -0.122127816; 0.043033518, 7.5526876, 0.033151582; -0.35933277, 9.093762, 0.06304436; -0.19168082, 10.622051, -0.32874715; -0.29977426, 12.20649, -0.70788825; 4.069946, 8.884232, 0.09044748; 4.811455, 3.9808846, 0.19358721; 2.9562998, 3.374163, 2.9139206; 2.0176125, 3.07311, 4.266971; 0.9786655, 3.2936978, 4.7405105; 0.19472677, 3.464734, 5.225475; 1.1507912, 2.9226537, 5.2836637; -3.9672961, 8.136101, -0.793068; -4.2895083, 3.6069598, -2.7279873; -4.892012, 4.3002124, 0.35699415; -5.193264, 4.646839, 1.8994828; -5.2599707, 4.632312, 3.158249; -5.3788905, 4.728341, 4.163028; -5.91214, 4.9747634, 3.12386\",\n  \"-0.0, 0.0, 0.0; 1.297525, -1.9910161, 0.9064668; 1.0150664, -9.193649, -0.146882; 0.79027236, -15.856947, -3.883529; 0.3079865, -17.02455, -1.6060472; 0.11388245, -17.065123, -0.35276496; -1.6454891, -1.6892273, 0.86747247; -2.20298, -8.324478, 3.6540987; -2.2039537, -15.230469, 0.122329; -2.9436731, -16.238277, 2.4253724; -3.2357314, -16.01913, 3.6505647; 0.12818234, 2.4941363, -0.14719819; 0.13263209, 5.0121155, -0.13808444; 0.0049105138, 7.5528374, 0.006865099; -0.40731043, 9.091451, 0.028022463; -0.2476695, 10.620677, -0.36345607; -0.36375988, 12.2051735, -0.73997974; 4.0245056, 8.905446, 0.081842914; 4.7795568, 4.0055857, 0.23853084; 2.8976378, 3.4343476, 2.9481425; 1.9456381, 3.1509337, 4.2956905; 0.9020128, 3.3778002, 4.7557855; 0.113286674, 3.5554066, 5.230518; 1.0689088, 3.014662, 5.305869; -4.0036273, 8.112323, -0.8442234; -4.3234653, 3.5670714, -2.7413883; -4.947223, 4.3042064, 0.32916188; -5.2591014, 4.6727734, 1.8644353; -5.335112, 4.678694, 3.1227436; -5.461193, 4.7911882, 4.124937; -5.9861646, 5.022082, 3.0780168\",\n  \"-0.0, 0.0, 0.0; 1.2928611, -1.992108, 0.9107219; 1.003941, -9.195432, -0.13613379; 0.75866497, -15.841854, -3.9014382; 0.3064752, -17.01418, -1.6202106; 0.1330752, -17.004578, -0.36327827; -1.649421, -1.6832858, 0.87154484; -2.199545, -8.334198, 3.622068; -2.2213593, -15.237213, 0.08455014; -2.9547324, -16.23597, 2.3935595; -3.2377896, -15.990406, 3.6158512; 0.11761051, 2.4942365, -0.15416153; 0.10579414, 5.0122085, -0.15434; -0.035362504, 7.55284, -0.020707503; -0.45702007, 9.08898, -0.0070966994; -0.3061759, 10.619133, -0.39844382; -0.43133706, 12.203441, -0.7728526; 3.9769862, 8.925885, 0.069403246; 4.747753, 4.030381, 0.27735844; 2.8389668, 3.4953878, 2.9755514; 1.8736038, 3.229989, 4.317248; 0.82544625, 3.4630108, 4.763763; 0.032049596, 3.6471176, 5.2281227; 0.9870899, 3.1080205, 5.3206906; -4.0421667, 8.08867, -0.89487046; -4.3579288, 3.5276036, -2.7543924; -5.0002713, 4.308457, 0.30148458; -5.3214417, 4.698882, 1.8294218; -5.407199, 4.725179, 3.0868425; -5.5407014, 4.854082, 4.086095; -6.0568066, 5.0697575, 3.031548\",\n  \"-0.0, 0.0, 0.0; 1.286542, -1.9940152, 0.9154842; 0.99165213, -9.19952, -0.114561796; 0.7291546, -15.825176, -3.9151373; 0.30417028, -17.009977, -1.6351254; 0.14879093, -16.962463, -0.37669837; -1.6547241, -1.6756982, 0.8761019; -2.2018619, -8.341299, 3.5914373; -2.236584, -15.244076, 0.05355811; -2.9640431, -16.233702, 2.3683624; -3.2383232, -15.958269, 3.5862815; 0.10670159, 2.494399, -0.15937796; 0.07777269, 5.0122175, -0.16812208; -0.07684456, 7.552718, -0.047524467; -0.5086447, 9.086087, -0.041858636; -0.36725658, 10.617414, -0.43214235; -0.5019986, 12.201754, -0.8030771; 3.9280283, 8.946431, 0.05675383; 4.715258, 4.055801, 0.3122692; 2.7784653, 3.5548115, 2.9969983; 1.7991743, 3.3063054, 4.331819; 0.74695015, 3.5457351, 4.765186; -0.050679743, 3.7365918, 5.219459; 0.90354145, 3.1991963, 5.3288403; -4.08168, 8.064089, -0.94504714; -4.390872, 3.486507, -2.7646613; -5.053282, 4.310636, 0.275527; -5.3844867, 4.722698, 1.7956197; -5.4802456, 4.769037, 3.0517387; -5.621364, 4.914045, 4.0477314; -6.128333, 5.1146045, 2.985796\",\n  \"-0.0, 0.0, 0.0; 1.2800622, -1.99607, 0.9200784; 0.9793108, -9.2056, -0.07966405; 0.69990337, -15.805446, -3.9236946; 0.30059743, -17.01294, -1.6509581; 0.16115393, -16.941647, -0.39178705; -1.6601338, -1.6680255, 0.8804992; -2.2090335, -8.347314, 3.561629; -2.2477326, -15.252026, 0.027569294; -2.9681582, -16.233398, 2.3480802; -3.2353857, -15.935496, 3.5622728; 0.096784666, 2.4944565, -0.16472362; 0.050645195, 5.011979, -0.1813127; -0.11922767, 7.5520144, -0.07197156; -0.5613164, 9.0824585, -0.07402018; -0.42954907, 10.614884, -0.46335652; -0.57425046, 12.199115, -0.8309897; 3.8769126, 8.969145, 0.050168686; 4.673059, 4.082656, 0.35292634; 2.7103705, 3.6148202, 3.0248; 1.7182018, 3.3827946, 4.353061; 0.6623024, 3.628362, 4.773873; -0.13919574, 3.825672, 5.2184777; 0.81400424, 3.2899384, 5.3437605; -4.12156, 8.036718, -0.99509203; -4.4227386, 3.442892, -2.7746708; -5.103403, 4.311155, 0.24915695; -5.4437366, 4.745286, 1.7610687; -5.549549, 4.8121977, 3.0154526; -5.6981688, 4.9737782, 4.0077972; -6.195576, 5.159376, 2.9386444\",\n  \"-0.0, 0.0, 0.0; 1.2735323, -1.9976223, 0.92575365; 0.9685549, -9.213264, -0.027526021; 0.67483354, -15.780785, -3.9254737; 0.296268, -17.019304, -1.6659219; 0.16899133, -16.939373, -0.40598142; -1.6655444, -1.6597352, 0.8859298; -2.218709, -8.351826, 3.5340562; -2.2602096, -15.259092, 0.0050246716; -2.9697537, -16.229698, 2.3334026; -3.2298923, -15.916157, 3.5451946; 0.086058766, 2.4945972, -0.16850144; 0.02203969, 5.011674, -0.19197701; -0.16313815, 7.5511527, -0.095292374; -0.6162406, 9.078336, -0.1059516; -0.49340937, 10.611947, -0.49353835; -0.6468432, 12.196356, -0.8568357; 3.8239477, 8.991949, 0.044600606; 4.626696, 4.1096888, 0.3944762; 2.6361217, 3.6728911, 3.05093; 1.6300904, 3.4562955, 4.3713465; 0.5710082, 3.708604, 4.779996; -0.23394227, 3.9126775, 5.2152114; 0.71748865, 3.3775291, 5.3555384; -4.1624994, 8.008467, -1.0448843; -4.454828, 3.3987112, -2.7842941; -5.1554284, 4.311703, 0.22175384; -5.5057297, 4.768198, 1.7247759; -5.621991, 4.854736, 2.9770327; -5.7782636, 5.032182, 3.9654837; -6.2653747, 5.2042375, 2.8893476\",\n  \"-0.0, 0.0, 0.0; 1.2677623, -1.9984559, 0.93185383; 0.9597508, -9.222085, 0.042159557; 0.6512379, -15.749487, -3.9214807; 0.29278445, -17.020365, -1.6766648; 0.17667148, -16.940046, -0.4156711; -1.6702919, -1.6518197, 0.8917674; -2.2246835, -8.355734, 3.5095582; -2.2701755, -15.265099, -0.015314102; -2.9674327, -16.227598, 2.3201306; -3.2209013, -15.904191, 3.5307426; 0.07650151, 2.4946027, -0.17296872; -0.005226314, 5.011097, -0.2029655; -0.20776685, 7.5496473, -0.117357224; -0.6713912, 9.073611, -0.13443369; -0.5583046, 10.608335, -0.5205821; -0.7218783, 12.192522, -0.88040483; 3.768821, 9.017435, 0.039688125; 4.5793324, 4.1399975, 0.4358657; 2.5606577, 3.7338362, 3.0759246; 1.5406594, 3.5324745, 4.3880105; 0.47871542, 3.791833, 4.784643; -0.32941484, 4.002857, 5.2105517; 0.6198363, 3.467888, 5.365557; -4.204539, 7.976668, -1.091635; -4.4853477, 3.350634, -2.7892225; -5.2055874, 4.309537, 0.19782972; -5.5657067, 4.7889876, 1.6913542; -5.6914773, 4.8935704, 2.9413128; -5.8546314, 5.0856104, 3.9259167; -6.332141, 5.2454, 2.8436038\",\n  \"-0.0, 0.0, 0.0; 1.2607274, -2.0000312, 0.9379981; 0.9443758, -9.232553, 0.12693971; 0.6292928, -15.709528, -3.9180703; 0.29083258, -17.015932, -1.6906123; 0.18482248, -16.939787, -0.42847025; -1.6760517, -1.6427754, 0.8976476; -2.223703, -8.358084, 3.4875028; -2.2823057, -15.26724, -0.03758478; -2.9633472, -16.22076, 2.306313; -3.2087975, -15.893206, 3.5174618; 0.06569715, 2.4946234, -0.17706354; -0.035115935, 5.010348, -0.21299778; -0.2548939, 7.5477962, -0.13786015; -0.72872365, 9.068515, -0.16243643; -0.62531745, 10.604331, -0.5469491; -0.7990012, 12.188464, -0.90224177; 3.71109, 9.042581, 0.032163292; 4.5288243, 4.170191, 0.47308412; 2.483314, 3.793648, 3.096828; 1.4499798, 3.607015, 4.4006305; 0.3852198, 3.8719423, 4.785869; -0.42603528, 4.088536, 5.20295; 0.52122444, 3.5540853, 5.371348; -4.2498136, 7.9445887, -1.1323081; -4.5214696, 3.3024974, -2.78701; -5.259722, 4.3062143, 0.18086052; -5.6288486, 4.8080697, 1.6647947; -5.7642927, 4.9316516, 2.9120054; -5.934411, 5.1390133, 3.8923137; -6.4020267, 5.28574, 2.8038487\",\n  \"-0.0, 0.0, 0.0; 1.2554545, -1.9998792, 0.9453654; 0.9261509, -9.241904, 0.22990948; 0.60732245, -15.657352, -3.911706; 0.29113317, -17.001795, -1.7036934; 0.19608381, -16.92961, -0.44044626; -1.6803222, -1.6345246, 0.90469795; -2.2190785, -8.359813, 3.4704094; -2.2934196, -15.266808, -0.058615208; -2.9575303, -16.212797, 2.2931786; -3.1945965, -15.882394, 3.5052235; 0.054257948, 2.4946024, -0.18118554; -0.06618334, 5.0093813, -0.22250263; -0.30458507, 7.54543, -0.15760335; -0.7865911, 9.063438, -0.1896493; -0.6925044, 10.6003, -0.5723762; -0.8770242, 12.184204, -0.9231987; 3.649601, 9.069348, 0.027873337; 4.4764524, 4.202793, 0.5139165; 2.4025319, 3.8551114, 3.119276; 1.3550818, 3.6828222, 4.4137554; 0.2878059, 3.9538662, 4.787609; -0.5263026, 4.176536, 5.195836; 0.4187051, 3.6425226, 5.3777328; -4.296954, 7.9099016, -1.1744125; -4.5570583, 3.2523007, -2.7868474; -5.313056, 4.301576, 0.16072941; -5.691056, 4.8262153, 1.634515; -5.835813, 4.9680004, 2.8787398; -6.0125084, 5.190079, 3.8546515; -6.4702525, 5.324758, 2.760448\",\n  \"-0.0, 0.0, 0.0; 1.2498181, -1.9996624, 0.9532598; 0.91180944, -9.251543, 0.35057074; 0.5851851, -15.594047, -3.901319; 0.28734064, -16.982735, -1.718282; 0.20091248, -16.927914, -0.45354342; -1.6848614, -1.6256285, 0.9122524; -2.213037, -8.359732, 3.4569588; -2.3030777, -15.2625475, -0.07986736; -2.952508, -16.203257, 2.278136; -3.1807842, -15.863707, 3.48934; 0.04222359, 2.4945977, -0.18442701; -0.0983405, 5.0082464, -0.23063675; -0.35525858, 7.5427465, -0.17685339; -0.8468647, 9.057511, -0.21578443; -0.76158285, 10.595294, -0.59686893; -0.9555276, 12.178928, -0.94380563; 3.586749, 9.095688, 0.026288137; 4.421421, 4.234689, 0.55288166; 2.3206062, 3.9154391, 3.1402712; 1.2597916, 3.7572746, 4.425638; 0.19017088, 4.03408, 4.7884045; -0.62659436, 4.2626643, 5.1879635; 0.31644994, 3.729914, 5.38326; -4.343992, 7.874714, -1.2187531; -4.5914245, 3.2010489, -2.7860694; -5.364668, 4.2991924, 0.13914776; -5.7512875, 4.8482637, 1.601755; -5.9050984, 5.008669, 2.8426275; -6.0881424, 5.2457566, 3.8138266; -6.536142, 5.3679132, 2.7141342\",\n  \"-0.0, 0.0, 0.0; 1.2455987, -1.9987236, 0.9607223; 0.9066475, -9.260252, 0.4889467; 0.5638354, -15.519837, -3.882857; 0.2840788, -16.958153, -1.7297652; 0.2074367, -16.918484, -0.46383035; -1.6882277, -1.6180954, 0.9193944; -2.204173, -8.359236, 3.4479237; -2.3129747, -15.255991, -0.1001811; -2.9434423, -16.192936, 2.2644582; -3.162429, -15.852275, 3.4770646; 0.030531915, 2.4946074, -0.18659094; -0.1291631, 5.00702, -0.23760393; -0.40417343, 7.539854, -0.1962206; -0.9053397, 9.051284, -0.2422406; -0.82965463, 10.590191, -0.6208043; -1.0340525, 12.173622, -0.96262884; 3.5254493, 9.121311, 0.025976896; 4.3692136, 4.2661796, 0.5908186; 2.243328, 3.9735525, 3.16082; 1.1700603, 3.828613, 4.437378; 0.09813869, 4.111226, 4.7886944; -0.7212829, 4.345716, 5.179292; 0.21947557, 3.8140464, 5.388092; -4.388243, 7.8394012, -1.2654319; -4.6251082, 3.1506367, -2.7886624; -5.4120507, 4.3010545, 0.1127131; -5.8055224, 4.8762617, 1.5633993; -5.9688706, 5.0553737, 2.800488; -6.1586733, 5.307476, 3.7665951; -6.596521, 5.416632, 2.6614602\",\n  \"-0.0, 0.0, 0.0; 1.2410281, -1.997197, 0.9697692; 0.90816, -9.267187, 0.6477562; 0.54357815, -15.433218, -3.8533273; 0.27743602, -16.92915, -1.738102; 0.20833933, -16.918135, -0.47115958; -1.6918482, -1.609348, 0.9280518; -2.1941543, -8.356851, 3.4423203; -2.3226037, -15.2460785, -0.11972308; -2.936545, -16.18103, 2.250048; -3.1464496, -15.836223, 3.4630885; 0.017891694, 2.4945676, -0.18874924; -0.1616501, 5.0055394, -0.24449798; -0.45459652, 7.536547, -0.2166785; -0.96621567, 9.044207, -0.27065754; -0.9004168, 10.584595, -0.64502376; -1.1153053, 12.168192, -0.9795712; 3.4620514, 9.14642, 0.029284313; 4.311812, 4.296506, 0.6288913; 2.1626565, 4.029415, 3.1822658; 1.0778253, 3.8971548, 4.4503984; 0.0035078526, 4.1849637, 4.789983; -0.818653, 4.424972, 5.1713634; 0.12007636, 3.8953362, 5.394005; -4.4320903, 7.803468, -1.3185164; -4.66035, 3.1000605, -2.797267; -5.4601226, 4.3029437, 0.07921624; -5.8600087, 4.9043837, 1.5174567; -6.0324817, 5.1023808, 2.7504218; -6.228837, 5.3695297, 3.711161; -6.6571383, 5.46468, 2.6010017\",\n  \"-0.0, 0.0, 0.0; 1.2377582, -1.9945028, 0.9794447; 0.9141034, -9.2704115, 0.8256742; 0.52385545, -15.330181, -3.8153925; 0.2625624, -16.891973, -1.7477009; 0.1964449, -16.92868, -0.4810834; -1.6943961, -1.6012809, 0.9373112; -2.1817539, -8.354356, 3.4395306; -2.3328912, -15.236169, -0.13593078; -2.9302163, -16.17148, 2.2379417; -3.1309235, -15.823655, 3.4516773; 0.0067404164, 2.4944787, -0.19064179; -0.1916621, 5.0039263, -0.25090998; -0.50381184, 7.532753, -0.23711365; -1.0288486, 9.035521, -0.29819566; -0.97328687, 10.577465, -0.66778135; -1.1976739, 12.1613865, -0.99446154; 3.3986137, 9.173242, 0.03156784; 4.2568464, 4.329012, 0.6641506; 2.084748, 4.0852532, 3.200387; 0.9885192, 3.964573, 4.4598436; -0.08774912, 4.2571816, 4.788987; -0.912182, 4.502281, 5.1621366; 0.024605393, 3.974533, 5.3970995; -4.4745417, 7.764597, -1.3708262; -4.6953583, 3.0462413, -2.8023298; -5.5064626, 4.2995343, 0.049351454; -5.9120145, 4.9261813, 1.4751897; -6.0929055, 5.143303, 2.703721; -6.2951956, 5.425674, 3.6588593; -6.714385, 5.50672, 2.5441124\",\n  \"-0.0, 0.0, 0.0; 1.2356573, -1.990286, 0.99061173; 0.92653894, -9.268384, 1.0219984; 0.5028812, -15.2081785, -3.7688208; 0.2399114, -16.855005, -1.768414; 0.1732167, -16.962954, -0.5059016; -1.6959817, -1.5932918, 0.94799733; -2.1687589, -8.353071, 3.4348629; -2.3451462, -15.227631, -0.15337086; -2.924471, -16.16397, 2.2245533; -3.1151714, -15.812681, 3.4389045; -0.0046859807, 2.4941456, -0.19501407; -0.22202328, 5.0018806, -0.2609933; -0.55379623, 7.528245, -0.26074865; -1.09268, 9.025812, -0.32857445; -1.0483397, 10.569609, -0.69189465; -1.2831821, 12.154112, -1.0082424; 3.333971, 9.200158, 0.026104957; 4.199681, 4.361608, 0.6911329; 2.0069306, 4.1406455, 3.2116385; 0.9004426, 4.031277, 4.463132; -0.17754388, 4.3285723, 4.7823024; -1.0039971, 4.5787215, 5.147548; -0.06902647, 4.0532007, 5.394437; -4.518625, 7.7241683, -1.4215673; -4.7322006, 2.9902987, -2.8020418; -5.5549064, 4.293424, 0.023863316; -5.9662576, 4.944988, 1.4368137; -6.155412, 5.1815457, 2.6605022; -6.363686, 5.479244, 3.6096814; -6.7742815, 5.5448065, 2.4907258\",\n  \"-0.0, 0.0, 0.0; 1.2327017, -1.9860289, 1.0027635; 0.9535171, -9.261646, 1.2366276; 0.4858556, -15.06978, -3.7090254; 0.21639073, -16.817814, -1.7973282; 0.14714465, -17.011564, -0.54524827; -1.6982315, -1.5839058, 0.9596269; -2.1561658, -8.352253, 3.4258833; -2.3583272, -15.219965, -0.17408681; -2.922575, -16.15883, 2.2064657; -3.1041129, -15.803011, 3.4209023; -0.014572482, 2.4937851, -0.199091; -0.25050935, 4.999674, -0.27106017; -0.6031705, 7.523162, -0.28622752; -1.1572281, 9.014915, -0.35967737; -1.1247636, 10.5606165, -0.71608806; -1.370327, 12.14556, -1.0219153; 3.2684793, 9.228774, 0.019594103; 4.142743, 4.396387, 0.71743476; 1.9270711, 4.197587, 3.219674; 0.8091974, 4.0992055, 4.461927; -0.27063453, 4.400387, 4.771058; -1.0992321, 4.654905, 5.1283402; -0.16592962, 4.132079, 5.386983; -4.5610867, 7.680192, -1.4761834; -4.768257, 2.9319415, -2.8073642; -5.6039453, 4.283272, -0.008033752; -6.021788, 4.958936, 1.3916299; -6.21957, 5.2149568, 2.6100256; -6.4342084, 5.527907, 3.5528598; -6.836094, 5.57723, 2.4299154\",\n  \"-0.0, 0.0, 0.0; 1.2307305, -1.9807658, 1.0155134; 0.9951165, -9.247778, 1.4652603; 0.47032046, -14.914993, -3.6357071; 0.19548762, -16.763235, -1.8215164; 0.12527013, -17.042688, -0.5857922; -1.699676, -1.574891, 0.9718287; -2.1419349, -8.352502, 3.4153981; -2.3726156, -15.214859, -0.19305825; -2.921081, -16.156885, 2.189933; -3.0928092, -15.795421, 3.4041295; -0.024682218, 2.4933844, -0.20307407; -0.2788324, 4.997342, -0.28005856; -0.65189207, 7.5177717, -0.30923986; -1.2215601, 9.003399, -0.3873093; -1.201551, 10.550946, -0.7365547; -1.4582193, 12.136164, -1.0316569; 3.2036538, 9.2563095, 0.014133662; 4.087452, 4.430352, 0.7437397; 1.8496015, 4.252322, 3.2277403; 0.72071207, 4.164226, 4.460769; -0.36078966, 4.4688153, 4.7605834; -1.1912925, 4.7274423, 5.110413; -0.2591567, 4.2082486, 5.380334; -4.602996, 7.637045, -1.5259172; -4.806289, 2.874432, -2.805386; -5.6531653, 4.2729263, -0.0327096; -6.0766034, 4.972172, 1.3536271; -6.2819996, 5.2478485, 2.5664616; -6.502334, 5.5760894, 3.5027597; -6.896704, 5.608191, 2.3765311\",\n  \"-0.0, 0.0, 0.0; 1.227988, -1.9763263, 1.0274137; 1.0438275, -9.227576, 1.7002454; 0.45718753, -14.749155, -3.5514803; 0.17810887, -16.694284, -1.8422685; 0.10865542, -17.05029, -0.6263424; -1.7017322, -1.5655743, 0.98321724; -2.1304834, -8.352906, 3.402089; -2.387251, -15.21091, -0.21287608; -2.9231339, -16.157774, 2.1710598; -3.0863051, -15.789771, 3.384472; -0.03529718, 2.492838, -0.20815289; -0.30857095, 4.994604, -0.29067126; -0.70263183, 7.5116568, -0.33255526; -1.2866589, 8.991481, -0.41464296; -1.2793703, 10.540878, -0.7560951; -1.548167, 12.126155, -1.0398618; 3.1358871, 9.283974, 0.009464562; 4.028597, 4.4646587, 0.7714055; 1.7679522, 4.305949, 3.2359996; 0.6277417, 4.227407, 4.459218; -0.4552908, 4.5354686, 4.749817; -1.2875667, 4.7982607, 5.092251; -0.3566934, 4.282709, 5.37328; -4.6463585, 7.592689, -1.5760202; -4.8459373, 2.816803, -2.8056238; -5.7050676, 4.260732, -0.060139656; -6.134632, 4.982696, 1.312601; -6.3480387, 5.277307, 2.5195866; -6.5744886, 5.62018, 3.4491575; -6.961244, 5.6349354, 2.3199315\",\n  \"-0.0, 0.0, 0.0; 1.2282164, -1.9700973, 1.0390381; 1.1009514, -9.1979885, 1.938278; 0.4457547, -14.576381, -3.452103; 0.16738755, -16.616726, -1.8576363; 0.10317414, -17.035213, -0.66148245; -1.7014288, -1.5588642, 0.99434096; -2.12117, -8.355179, 3.3894541; -2.4031124, -15.208909, -0.2317338; -2.9275894, -16.160442, 2.1528802; -3.0827167, -15.785876, 3.3653386; -0.0456398, 2.4922602, -0.21300252; -0.3367166, 4.9918365, -0.30083716; -0.7515899, 7.5053034, -0.3552004; -1.3500104, 8.979158, -0.4409361; -1.3554647, 10.530301, -0.77440345; -1.6363788, 12.11544, -1.0469817; 3.0693674, 9.311176, 0.0073213577; 3.9724898, 4.499003, 0.8014514; 1.686929, 4.3593454, 3.2441208; 0.5343466, 4.290223, 4.4562626; -0.55052495, 4.601079, 4.7368536; -1.3849201, 4.8674483, 5.071272; -0.45540053, 4.3559103, 5.363878; -4.686866, 7.5484037, -1.6270094; -4.883933, 2.7600284, -2.8074634; -5.7577395, 4.2477307, -0.09012604; -6.1946425, 4.9915814, 1.2685409; -6.416308, 5.305105, 2.469257; -6.649181, 5.662491, 3.391748; -7.028354, 5.659132, 2.2598622\",\n  \"-0.0, 0.0, 0.0; 1.2296607, -1.9632417, 1.0502452; 1.1658688, -9.160531, 2.1737256; 0.4303044, -14.404169, -3.337699; 0.15827551, -16.532017, -1.8608497; 0.10370111, -17.006092, -0.68513167; -1.700166, -1.5533539, 1.0050663; -2.1125271, -8.358493, 3.376287; -2.4187884, -15.207058, -0.25269175; -2.93146, -16.164087, 2.13229; -3.0777695, -15.7793, 3.3426416; -0.055761356, 2.491565, -0.21865357; -0.3646222, 4.988782, -0.31265613; -0.80146456, 7.4982185, -0.37964445; -1.4158161, 8.965252, -0.46958992; -1.4343541, 10.518156, -0.794274; -1.7270539, 12.1033125, -1.0540519; 3.0006685, 9.339504, 0.0021505058; 3.913569, 4.534429, 0.8274709; 1.6042993, 4.4124846, 3.2486959; 0.43994343, 4.352106, 4.4500046; -0.6465845, 4.6659536, 4.7206817; -1.4829032, 4.936183, 5.047103; -0.55467933, 4.4291205, 5.3513794; -4.728075, 7.5013194, -1.6786723; -4.9220576, 2.7010503, -2.8103247; -5.8121004, 4.2321615, -0.122529745; -6.2571216, 4.997717, 1.2213658; -6.485567, 5.330852, 2.4155126; -6.7238917, 5.7031517, 3.3306835; -7.097275, 5.679986, 2.1971064\",\n  \"-0.0, 0.0, 0.0; 1.2314562, -1.9569241, 1.0598878; 1.2369645, -9.116775, 2.4029284; 0.41557425, -14.239777, -3.2089133; 0.1529958, -16.43937, -1.8393637; 0.110316224, -16.962545, -0.68415606; -1.6986396, -1.5490204, 1.0142937; -2.1085258, -8.361724, 3.364126; -2.4359822, -15.204355, -0.27418232; -2.9356663, -16.16698, 2.1113033; -3.0737982, -15.776296, 3.3207264; -0.064642765, 2.490809, -0.22473836; -0.3909679, 4.9855433, -0.32540545; -0.8513812, 7.4904203, -0.40414974; -1.4818819, 8.950211, -0.49999002; -1.5133979, 10.504764, -0.8156593; -1.8177941, 12.089914, -1.0616652; 2.9302177, 9.369465, -0.0028804839; 3.8524165, 4.5719476, 0.85541284; 1.51618, 4.4671125, 3.2514381; 0.33843875, 4.415172, 4.4400253; -0.7499261, 4.7316966, 4.699993; -1.5883968, 5.005517, 5.017787; -0.66170806, 4.503132, 5.334257; -4.7688465, 7.451323, -1.7299285; -4.958481, 2.6395998, -2.8126125; -5.8680167, 4.2124586, -0.1556251; -6.3227825, 4.998888, 1.172867; -6.55899, 5.3517876, 2.3598044; -6.8037634, 5.7389402, 3.2670765; -7.171018, 5.6943846, 2.132137\",\n  \"-0.0, 0.0, 0.0; 1.23283, -1.9509803, 1.0692079; 1.3156533, -9.067789, 2.6220841; 0.40056813, -14.087876, -3.0677266; 0.1494779, -16.34138, -1.7865182; 0.121609464, -16.898859, -0.6470102; -1.6974517, -1.5444497, 1.023213; -2.1062372, -8.3639555, 3.3534222; -2.4555922, -15.199528, -0.2961011; -2.9415967, -16.168274, 2.0897336; -3.0713742, -15.772722, 3.2985; -0.07391619, 2.4900725, -0.22997932; -0.4181945, 4.98213, -0.33696038; -0.90228504, 7.4821267, -0.4278692; -1.5499192, 8.933881, -0.53123885; -1.5945234, 10.489973, -0.83760893; -1.910127, 12.075227, -1.0683509; 2.8581793, 9.399183, -0.008203477; 3.788508, 4.608934, 0.8813406; 1.4255815, 4.5210466, 3.251737; 0.23459351, 4.477463, 4.42739; -0.8554853, 4.7962527, 4.6772103; -1.695961, 5.0733123, 4.9867945; -0.7706263, 4.575866, 5.314818; -4.810209, 7.4003034, -1.7796044; -4.9965487, 2.5780325, -2.8148959; -5.9265127, 4.190399, -0.18884182; -6.3914943, 4.996583, 1.1241827; -6.634469, 5.3691196, 2.30373; -6.885071, 5.7708974, 3.2030168; -7.2474804, 5.704152, 2.0676079\",\n  \"-0.0, 0.0, 0.0; 1.2331332, -1.946004, 1.0778915; 1.4023346, -9.01527, 2.8283489; 0.39116895, -13.952123, -2.9177487; 0.14909713, -16.241697, -1.7003467; 0.13723482, -16.812487, -0.5671662; -1.6971157, -1.5392821, 1.0315236; -2.1039302, -8.365077, 3.3435936; -2.4748514, -15.19194, -0.32007718; -2.9501252, -16.16707, 2.065318; -3.0723839, -15.765761, 3.2729702; -0.082736574, 2.489224, -0.23607887; -0.44522184, 4.978401, -0.3497689; -0.95353276, 7.473156, -0.45179486; -1.618748, 8.916343, -0.5631751; -1.6767645, 10.473743, -0.8605183; -2.0037215, 12.058857, -1.075904; 2.7848725, 9.428872, -0.013828874; 3.723205, 4.645767, 0.90525776; 1.332912, 4.5728335, 3.248569; 0.12834096, 4.536614, 4.410554; -0.9633231, 4.857733, 4.650265; -1.8057024, 5.1380224, 4.95166; -0.8819448, 4.645264, 5.2910085; -4.851545, 7.348192, -1.8286171; -5.029932, 2.5156512, -2.816327; -5.9852047, 4.164879, -0.22244525; -6.462841, 4.9894915, 1.0744941; -6.7117906, 5.382478, 2.2461333; -6.9677906, 5.7993493, 3.13699; -7.326525, 5.708551, 2.002083\",\n  \"-0.0, 0.0, 0.0; 1.23427, -1.9401575, 1.0870904; 1.4958837, -8.958269, 3.0222714; 0.38825917, -13.83391, -2.7582033; 0.1538657, -16.143093, -1.576867; 0.16007768, -16.703325, -0.43838537; -1.6961131, -1.5344553, 1.0403264; -2.1016755, -8.365967, 3.335671; -2.4967384, -15.182922, -0.34388876; -2.9597645, -16.163214, 2.0417998; -3.074027, -15.7579975, 3.2489302; -0.09172141, 2.4883416, -0.24198668; -0.47206742, 4.974556, -0.36198488; -1.0041845, 7.4638667, -0.47501022; -1.6880018, 8.897688, -0.59440696; -1.7595788, 10.456201, -0.8828347; -2.0973852, 12.041029, -1.0830463; 2.7120037, 9.45759, -0.0196791; 3.6565998, 4.681783, 0.93042064; 1.2370522, 4.6228957, 3.2439132; 0.017970204, 4.59359, 4.3908625; -1.0753068, 4.917061, 4.619818; -1.9196923, 5.200497, 4.9125314; -0.99802065, 4.711963, 5.263462; -4.892009, 7.2963495, -1.8759077; -5.0609627, 2.45397, -2.8159392; -6.041891, 4.1375837, -0.2539196; -6.532355, 4.979391, 1.0270873; -6.789103, 5.3929586, 2.1899266; -7.0519276, 5.8249435, 3.071548; -7.405289, 5.7095366, 1.9371911\",\n  \"-0.0, 0.0, 0.0; 1.2354367, -1.9346718, 1.0955088; 1.5997413, -8.898235, 3.2034237; 0.39484477, -13.73481, -2.5903986; 0.16570279, -16.050852, -1.4215273; 0.18932174, -16.59182, -0.27399278; -1.6950948, -1.5300912, 1.0483826; -2.0997446, -8.367068, 3.3275585; -2.5211642, -15.173137, -0.36919045; -2.9712949, -16.159273, 2.0165575; -3.0773337, -15.751683, 3.223639; -0.10167617, 2.4873893, -0.2477316; -0.5002816, 4.970435, -0.37391722; -1.0555041, 7.454199, -0.49735308; -1.7574271, 8.878569, -0.6245481; -1.8430488, 10.4380045, -0.904019; -2.192333, 12.022238, -1.088639; 2.6387222, 9.484726, -0.026220888; 3.5894213, 4.71618, 0.95378995; 1.1400762, 4.670481, 3.236014; -0.093782306, 4.6476617, 4.3672013; -1.188669, 4.972659, 4.5860825; -2.0350413, 5.258436, 4.870669; -1.1152698, 4.7740855, 5.232222; -4.933275, 7.2454176, -1.920396; -5.0959353, 2.3935742, -2.811466; -6.1006956, 4.110472, -0.28096437; -6.603075, 4.9689198, 0.984285; -6.868697, 5.404009, 2.1372356; -7.1389623, 5.851864, 3.0086288; -7.4853883, 5.711689, 1.874923\",\n  \"-0.0, 0.0, 0.0; 1.2376074, -1.9285285, 1.1038587; 1.7141439, -8.8344, 3.3730216; 0.4105705, -13.655115, -2.412651; 0.18775913, -15.967661, -1.2356606; 0.22821246, -16.489183, -0.07962561; -1.6932836, -1.5265968, 1.0563734; -2.0988903, -8.368664, 3.3200538; -2.5467896, -15.163214, -0.39472604; -2.9827843, -16.154272, 1.9916077; -3.0799809, -15.743211, 3.1982563; -0.111651875, 2.486362, -0.25367916; -0.528032, 4.966173, -0.38591725; -1.1060097, 7.4442353, -0.5191118; -1.8272047, 8.858311, -0.65318084; -1.9272108, 10.418488, -0.9235939; -2.2875865, 12.001968, -1.092694; 2.5661113, 9.510889, -0.032503337; 3.5221071, 4.7494555, 0.9765116; 1.0440917, 4.715226, 3.2277765; -0.20398092, 4.6980443, 4.3433623; -1.3003548, 5.0251384, 4.551408; -2.148677, 5.313678, 4.8272667; -1.2314441, 4.8329844, 5.1999784; -4.9734855, 7.195015, -1.9635053; -5.1270084, 2.333488, -2.8018546; -6.156119, 4.082013, -0.30299258; -6.670674, 4.9562755, 0.94643617; -6.9468207, 5.412616, 2.0886483; -7.225903, 5.87599, 2.949079; -7.564043, 5.7103553, 1.8163056\",\n  \"-0.0, 0.0, 0.0; 1.2413577, -1.9210567, 1.1126415; 1.8359412, -8.765701, 3.53433; 0.43438983, -13.595083, -2.22113; 0.22259748, -15.896632, -1.0207821; 0.2803122, -16.400833, 0.14218366; -1.6902133, -1.5241579, 1.0647786; -2.0983582, -8.371021, 3.3134499; -2.5732648, -15.153395, -0.42017913; -2.9964914, -16.149399, 1.9663937; -3.0855885, -15.736798, 3.1731422; -0.12110183, 2.4852147, -0.2604924; -0.5546401, 4.9617386, -0.39903972; -1.1560233, 7.433711, -0.54145306; -1.8969684, 8.836979, -0.6812539; -2.011611, 10.397663, -0.94277906; -2.383037, 11.980125, -1.0968367; 2.492999, 9.537298, -0.039585233; 3.452987, 4.783031, 0.9989972; 0.9458029, 4.7568865, 3.2178423; -0.3167274, 4.7436504, 4.317094; -1.4146657, 5.0722604, 4.514214; -2.2650423, 5.363004, 4.7812934; -1.350426, 4.885966, 5.16497; -5.012806, 7.143277, -2.00659; -5.157259, 2.272657, -2.792109; -6.209965, 4.0511503, -0.32441974; -6.736318, 4.9403954, 0.90942395; -7.024862, 5.4161797, 2.0405846; -7.314232, 5.8935986, 2.8898666; -7.642332, 5.7036433, 1.7579584\",\n  \"-0.0, 0.0, 0.0; 1.2459544, -1.9137559, 1.12006; 1.9565117, -8.694578, 3.6857584; 0.46623576, -13.555998, -2.0202272; 0.2718969, -15.840396, -0.7846801; 0.3465459, -16.331894, 0.38275123; -1.6864777, -1.5233194, 1.0718782; -2.100131, -8.374717, 3.305685; -2.6026225, -15.143962, -0.44810534; -3.0120687, -16.144587, 1.9389391; -3.0925891, -15.730084, 3.145639; -0.13077968, 2.484086, -0.26651058; -0.5810167, 4.9572563, -0.41155708; -1.2051227, 7.4229994, -0.56385213; -1.9661587, 8.814952, -0.70875436; -2.095358, 10.376031, -0.96097535; -2.4773767, 11.957353, -1.1001205; 2.4204764, 9.562659, -0.045004606; 3.3820672, 4.815238, 1.0229936; 0.84480476, 4.7975717, 3.207465; -0.4326303, 4.788477, 4.289403; -1.5326371, 5.1176534, 4.4736223; -2.3856866, 5.4098697, 4.730371; -1.4740896, 4.937328, 5.1265926; -5.0499, 7.092048, -2.0517735; -5.179939, 2.212906, -2.7851946; -6.258742, 4.0205617, -0.3501823; -6.798143, 4.92439, 0.8673214; -7.1004496, 5.41937, 1.9865881; -7.401105, 5.910585, 2.8239994; -7.717666, 5.6963434, 1.6931419\",\n  \"-0.0, 0.0, 0.0; 1.2520548, -1.9054563, 1.1273834; 2.076727, -8.620404, 3.8286138; 0.5072373, -13.537727, -1.807807; 0.33855265, -15.802199, -0.53245103; 0.43074787, -16.286688, 0.63665557; -1.6815342, -1.5238369, 1.0788863; -2.1028624, -8.37936, 3.298555; -2.6333241, -15.13515, -0.47557187; -3.0282218, -16.140182, 1.9120712; -3.1003191, -15.726283, 3.1195102; -0.14168386, 2.4828477, -0.27241004; -0.60865927, 4.952545, -0.42356998; -1.2546382, 7.412062, -0.58505875; -2.0360756, 8.79226, -0.73376703; -2.1800392, 10.353545, -0.9765382; -2.572471, 11.933537, -1.1010435; 2.347968, 9.586335, -0.050192416; 3.3100035, 4.84594, 1.0481818; 0.7429397, 4.8350153, 3.197598; -0.54925656, 4.829199, 4.261885; -1.6511356, 5.159206, 4.4329624; -2.50672, 5.453065, 4.6791854; -1.5985583, 4.9846616, 5.088009; -5.087525, 7.042239, -2.094351; -5.201469, 2.155939, -2.7813282; -6.309794, 3.9894688, -0.37914062; -6.863955, 4.9062333, 0.8219516; -7.18092, 5.4180894, 1.9295114; -7.4939575, 5.921015, 2.755355; -7.7990055, 5.682253, 1.6262457\",\n  \"-0.0, 0.0, 0.0; 1.2587934, -1.897652, 1.1330292; 2.1933527, -8.546308, 3.9595516; 0.5549717, -13.541639, -1.5879662; 0.4178806, -15.781962, -0.26699066; 0.53083646, -16.246843, 0.9082395; -1.6760737, -1.5260165, 1.0842885; -2.1053307, -8.385804, 3.2892122; -2.6663105, -15.127711, -0.50527096; -3.0462182, -16.137877, 1.8826385; -3.1092591, -15.723477, 3.0904126; -0.15209456, 2.481578, -0.27830076; -0.63567513, 4.94767, -0.43598253; -1.3044871, 7.400486, -0.6062059; -2.1064548, 8.768416, -0.7589145; -2.2650354, 10.329722, -0.99226236; -2.6675322, 11.908285, -1.1018629; 2.2736845, 9.610638, -0.05462885; 3.235285, 4.877011, 1.0729303; 0.64017653, 4.8713155, 3.1884222; -0.6659087, 4.8680243, 4.2356296; -1.7698894, 5.1980085, 4.3926215; -2.6283164, 5.492795, 4.627584; -1.72383, 5.029012, 5.04961; -5.1246767, 6.9905577, -2.1371734; -5.2274914, 2.097766, -2.7781591; -6.365852, 3.9596934, -0.4121325; -6.935031, 4.890656, 0.7708794; -7.2661333, 5.419869, 1.8660768; -7.5910683, 5.934831, 2.6798182; -7.8848305, 5.6711526, 1.553263\",\n  \"-0.0, 0.0, 0.0; 1.2675154, -1.8887204, 1.1382172; 2.301878, -8.471858, 4.080944; 0.6178677, -13.5686655, -1.3595767; 0.5146111, -15.780068, 0.0122305155; 0.6482286, -16.214214, 1.1970099; -1.6689833, -1.5302458, 1.0892538; -2.1108813, -8.393817, 3.2798605; -2.6999946, -15.122222, -0.53427434; -3.0669537, -16.13603, 1.854116; -3.1217833, -15.720099, 3.0617647; -0.16324866, 2.4802215, -0.28401646; -0.6627452, 4.9426894, -0.448573; -1.3531865, 7.388831, -0.62822026; -2.175104, 8.744452, -0.784575; -2.3480916, 10.305769, -1.0073745; -2.7604575, 11.882803, -1.1011697; 2.2006793, 9.633268, -0.058262467; 3.162414, 4.906467, 1.0974623; 0.5373535, 4.905336, 3.1756783; -0.78355956, 4.904235, 4.2041235; -1.8897873, 5.2334394, 4.3462276; -2.7512832, 5.5285125, 4.5692997; -1.8507416, 5.069731, 5.005007; -5.159451, 6.9402986, -2.1828656; -5.2462063, 2.0411425, -2.7758195; -6.4187684, 3.929234, -0.44753098; -7.005048, 4.8732796, 0.71661186; -7.35022, 5.4186325, 1.7994778; -7.6871037, 5.9445734, 2.6012506; -7.969795, 5.65631, 1.4778903\",\n  \"-0.0, 0.0, 0.0; 1.275917, -1.8804785, 1.1424687; 2.4073296, -8.398112, 4.193306; 0.6951927, -13.619897, -1.1183934; 0.6299934, -15.798997, 0.30641913; 0.7848499, -16.196428, 1.5014534; -1.6621153, -1.5348126, 1.0933226; -2.1143272, -8.402474, 3.2689552; -2.7367346, -15.1174555, -0.5635047; -3.088808, -16.136223, 1.825016; -3.1344512, -15.720248, 3.0330315; -0.17453341, 2.4788845, -0.28893664; -0.6901508, 4.937565, -0.46026328; -1.4021814, 7.376774, -0.6496348; -2.2435055, 8.720205, -0.80796856; -2.4308686, 10.281336, -1.0202016; -2.8531804, 11.85656, -1.0989355; 2.127305, 9.655408, -0.064085126; 3.0912662, 4.935507, 1.1176931; 0.438267, 4.9375224, 3.1601224; -0.89647126, 4.937909, 4.170561; -2.0047839, 5.266292, 4.297513; -2.8692434, 5.5616074, 4.5084686; -1.9729455, 5.1078463, 4.957965; -5.194917, 6.8893814, -2.2255015; -5.2668858, 1.9843483, -2.7698534; -6.472346, 3.895724, -0.47764277; -7.0750756, 4.8514104, 0.6684612; -7.4350147, 5.4138303, 1.737704; -7.784482, 5.9512568, 2.5263667; -8.055548, 5.636413, 1.4072841\",\n  \"-0.0, 0.0, 0.0; 1.2858112, -1.8715768, 1.1459882; 2.5060153, -8.326047, 4.2953; 0.7847831, -13.690353, -0.86940575; 0.75684476, -15.834815, 0.60820115; 0.92807126, -16.206696, 1.8092113; -1.6539749, -1.541191, 1.0966903; -2.122831, -8.412386, 3.2575908; -2.776948, -15.114252, -0.59250355; -3.1149762, -16.137749, 1.7960248; -3.1518123, -15.7211, 3.0041084; -0.18710443, 2.4774346, -0.2934699; -0.7192793, 4.9321327, -0.471147; -1.4527693, 7.3642673, -0.66940165; -2.3125699, 8.695702, -0.82980466; -2.5143378, 10.256397, -1.0317775; -2.9470325, 11.829468, -1.095824; 2.0521855, 9.676631, -0.0689162; 3.0183501, 4.9634085, 1.137461; 0.33754587, 4.967439, 3.1432524; -1.0109502, 4.9687443, 4.135255; -2.121488, 5.295338, 4.2463923; -2.989108, 5.59016, 4.444684; -2.0971155, 5.142297, 4.908434; -5.2320137, 6.838672, -2.265275; -5.284768, 1.9280682, -2.759272; -6.5246305, 3.8587947, -0.501894; -7.1445613, 4.8241568, 0.62679374; -7.522544, 5.403264, 1.6807939; -7.8873262, 5.9515524, 2.454911; -8.143912, 5.6083517, 1.3407631\",\n  \"-0.0, 0.0, 0.0; 1.2949097, -1.8634088, 1.1490495; 2.6020195, -8.255723, 4.3889627; 0.88906014, -13.776012, -0.6115136; 0.8991669, -15.8818445, 0.9208659; 1.0848578, -16.228619, 2.1272264; -1.6464293, -1.5471709, 1.0996202; -2.1314697, -8.422071, 3.2451081; -2.8191733, -15.111507, -0.62072086; -3.1420887, -16.139664, 1.7678971; -3.1703093, -15.726519, 2.977415; -0.20020732, 2.4759448, -0.29737082; -0.7498504, 4.9262977, -0.48172602; -1.5052826, 7.35085, -0.6901971; -2.382825, 8.6705475, -0.8515111; -2.5985606, 10.23074, -1.0426481; -3.0414042, 11.801513, -1.0920374; 1.9743531, 9.697889, -0.07712573; 2.9438286, 4.9917245, 1.1538966; 0.23542881, 4.996021, 3.1222663; -1.126713, 4.997369, 4.0954466; -2.2391717, 5.322387, 4.1908803; -3.109694, 5.616853, 4.3765807; -2.2223127, 5.174599, 4.854348; -5.270812, 6.785354, -2.3047416; -5.304328, 1.8699231, -2.7500083; -6.576795, 3.8171716, -0.5252001; -7.213029, 4.7907944, 0.5872024; -7.6110024, 5.3856797, 1.6249312; -7.9927783, 5.943836, 2.3836484; -8.233187, 5.5712914, 1.2753329\",\n  \"-0.0, 0.0, 0.0; 1.3037443, -1.8555992, 1.1516948; 2.6943994, -8.188291, 4.472892; 1.006786, -13.871854, -0.35014296; 1.0630322, -15.934933, 1.2383665; 1.2657824, -16.250378, 2.450565; -1.6390475, -1.5531957, 1.1021513; -2.1423993, -8.4315, 3.2324567; -2.8631256, -15.10944, -0.6472063; -3.171812, -16.142199, 1.7413073; -3.190826, -15.726749, 2.9502158; -0.21344274, 2.47436, -0.30132857; -0.78080994, 4.9202166, -0.49159524; -1.5583458, 7.3370495, -0.70826703; -2.4531288, 8.645108, -0.86967105; -2.6833272, 10.204472, -1.0504147; -3.137192, 11.772472, -1.0858731; 1.8955119, 9.7183895, -0.081848025; 2.8672786, 5.0199413, 1.1765386; 0.13198781, 5.023262, 3.1073675; -1.2434483, 5.0240273, 4.061667; -2.357708, 5.3472266, 4.1408925; -3.2310853, 5.641159, 4.3135753; -2.3486285, 5.204821, 4.805689; -5.310049, 6.732669, -2.3408113; -5.3231273, 1.8130293, -2.7380788; -6.6291037, 3.77218, -0.5433414; -7.282091, 4.751754, 0.5540267; -7.7005095, 5.3620567, 1.5746193; -8.099443, 5.929773, 2.3172457; -8.322632, 5.5284815, 1.2153832\",\n  \"-0.0, 0.0, 0.0; 1.3123387, -1.8473036, 1.1552643; 2.7840395, -8.122713, 4.549464; 1.1364993, -13.972741, -0.084690094; 1.2483382, -15.986746, 1.5627611; 1.4722525, -16.257816, 2.7819505; -1.6318052, -1.5583853, 1.1055673; -2.1555443, -8.44026, 3.2193642; -2.9115562, -15.107117, -0.6726265; -3.2023873, -16.143475, 1.7165687; -3.2114275, -15.729281, 2.926024; -0.22730978, 2.4725788, -0.30577537; -0.813331, 4.9136105, -0.5013944; -1.6137316, 7.322332, -0.72502434; -2.5254345, 8.618683, -0.8861995; -2.7694178, 10.177135, -1.0564127; -3.233533, 11.742389, -1.0777789; 1.8135717, 9.738583, -0.08655709; 2.783672, 5.0472193, 1.1992497; 0.022264242, 5.048686, 3.0925407; -1.3660778, 5.0484414, 4.0279655; -2.4821148, 5.369014, 4.09124; -3.3583508, 5.6616817, 4.2511144; -2.4807758, 5.2314157, 4.757108; -5.3519006, 6.6786036, -2.373496; -5.3457055, 1.7552729, -2.7222419; -6.6843753, 3.7238588, -0.5558274; -7.3537107, 4.70815, 0.5273788; -7.7946253, 5.3317285, 1.5303227; -8.212382, 5.9071393, 2.2564943; -8.416275, 5.477725, 1.161515\",\n  \"-0.0, 0.0, 0.0; 1.3198555, -1.840097, 1.1581982; 2.8699923, -8.060907, 4.617366; 1.2788022, -14.078104, 0.18182182; 1.4513712, -16.036575, 1.88987; 1.697896, -16.251047, 3.1159477; -1.6254269, -1.5630491, 1.1083755; -2.1722019, -8.448192, 3.205634; -2.9616845, -15.10383, -0.6988907; -3.236032, -16.14506, 1.6901364; -3.2357323, -15.732281, 2.9001088; -0.24029206, 2.4706976, -0.31100976; -0.8456657, 4.906571, -0.5119248; -1.6710699, 7.306361, -0.7406267; -2.5981474, 8.592167, -0.89853966; -2.8515735, 10.151094, -1.0495172; -3.3270838, 11.713046, -1.0581279; 1.7268877, 9.759935, -0.08781004; 2.6936793, 5.076124, 1.2276793; -0.09430146, 5.073856, 3.0816169; -1.4957702, 5.0716405, 3.9972548; -2.6132922, 5.3896704, 4.0453253; -3.492033, 5.6812882, 4.192898; -2.6190207, 5.2578063, 4.712329; -5.3944197, 6.6212997, -2.4058917; -5.3706293, 1.6947713, -2.7052164; -6.7398763, 3.6709652, -0.56499696; -7.424499, 4.65906, 0.5051124; -7.889614, 5.293775, 1.4899764; -8.327382, 5.875171, 2.1994; -8.509772, 5.41942, 1.1112946\",\n  \"-0.0, 0.0, 0.0; 1.3271936, -1.8325459, 1.1617793; 2.9537044, -8.004172, 4.6735787; 1.4315813, -14.185301, 0.44399166; 1.6655546, -16.082125, 2.2132092; 1.9328011, -16.238218, 3.443759; -1.6191571, -1.5671175, 1.1118026; -2.1934175, -8.454743, 3.193504; -3.0161343, -15.099967, -0.7218833; -3.271141, -16.145033, 1.6676109; -3.2608938, -15.735005, 2.878475; -0.25432274, 2.468595, -0.31650212; -0.87961185, 4.899026, -0.5222732; -1.729409, 7.2898774, -0.7552216; -2.6710584, 8.565482, -0.90959895; -2.9379973, 10.123121, -1.0502398; -3.4251437, 11.681502, -1.0465349; 1.6396897, 9.77947, -0.08932495; 2.5993526, 5.103457, 1.2587205; -0.21388602, 5.097466, 3.074094; -1.627828, 5.093278, 3.9703436; -2.7469919, 5.407486, 4.0028157; -3.6284094, 5.6971607, 4.137706; -2.759711, 5.2820807, 4.670967; -5.4384236, 6.5649424, -2.4355283; -5.3950815, 1.6359968, -2.689428; -6.7933135, 3.6159801, -0.57156754; -7.492428, 4.6059704, 0.48736203; -7.9817686, 5.2498293, 1.4543905; -8.439451, 5.83568, 2.1473906; -8.599809, 5.3556123, 1.0662943\",\n  \"-0.0, 0.0, 0.0; 1.3360168, -1.8237761, 1.1654607; 3.0328956, -7.951644, 4.7203283; 1.5965604, -14.2907715, 0.69975615; 1.8903126, -16.122625, 2.527553; 2.1774096, -16.194113, 3.7614508; -1.6115667, -1.5724294, 1.1153255; -2.2179074, -8.461585, 3.182819; -3.0720682, -15.096735, -0.7429068; -3.309349, -16.14529, 1.6468844; -3.2895248, -15.735629, 2.8577535; -0.26771003, 2.4665227, -0.32157797; -0.9120841, 4.891609, -0.5314821; -1.7866554, 7.2731647, -0.7679339; -2.7428985, 8.538269, -0.9189806; -3.0225825, 10.09446, -1.0506004; -3.5204225, 11.649397, -1.0363004; 1.5523231, 9.798954, -0.08681244; 2.4995394, 5.130776, 1.2967257; -0.33876157, 5.120102, 3.0726366; -1.7650737, 5.1134562, 3.9490507; -2.8858938, 5.4229536, 3.9658787; -3.7700198, 5.710025, 4.0880065; -2.9055147, 5.3042893, 4.635095; -5.4801183, 6.508413, -2.4647665; -5.4201145, 1.5775094, -2.6731863; -6.845318, 3.5596886, -0.5754535; -7.557918, 4.5507774, 0.47341132; -8.073279, 5.2009454, 1.4225359; -8.552219, 5.788973, 2.0991335; -8.688365, 5.286558, 1.0248929\",\n  \"-0.0, 0.0, 0.0; 1.3446976, -1.8153657, 1.1686038; 3.1114407, -7.901096, 4.761619; 1.7721424, -14.390593, 0.95303416; 2.1278718, -16.155651, 2.834746; 2.4329371, -16.136875, 4.0662575; -1.604039, -1.5779797, 1.1183338; -2.2462811, -8.468456, 3.1705277; -3.132113, -15.09371, -0.764879; -3.351787, -16.14622, 1.6248581; -3.3224876, -15.7374735, 2.8358445; -0.28225517, 2.4640012, -0.32839727; -0.9469167, 4.8831863, -0.54308236; -1.8468043, 7.2551346, -0.7811029; -2.815551, 8.511183, -0.9279984; -3.1066499, 10.066003, -1.0507631; -3.6146045, 11.617534, -1.0260307; 1.4613725, 9.817074, -0.084860325; 2.3968744, 5.158376, 1.3380456; -0.46623278, 5.1446023, 3.073659; -1.9047819, 5.136277, 3.9298244; -3.0276442, 5.4387474, 3.930845; -3.9148788, 5.721404, 4.040041; -3.0540664, 5.3269167, 4.601002; -5.524902, 6.4510527, -2.4930604; -5.4500365, 1.518816, -2.661223; -6.8997765, 3.4987383, -0.5782249; -7.624647, 4.4886975, 0.46327257; -8.166523, 5.143918, 1.3939761; -8.667046, 5.733038, 2.0537934; -8.77804, 5.2089586, 0.9870368\",\n  \"-0.0, 0.0, 0.0; 1.3535494, -1.8066828, 1.1718359; 3.190816, -7.8521833, 4.797249; 1.9625187, -14.482726, 1.2000563; 2.3802795, -16.179749, 3.130966; 2.6993804, -16.069534, 4.354104; -1.5963043, -1.5836182, 1.1214265; -2.271389, -8.475765, 3.1574054; -3.193995, -15.090684, -0.7869272; -3.394628, -16.14654, 1.603008; -3.3549, -15.73901, 2.814107; -0.29679045, 2.4614687, -0.3345184; -0.98099124, 4.8748016, -0.55364627; -1.9048178, 7.2373176, -0.7937587; -2.8859396, 8.484111, -0.9373261; -3.1882603, 10.0374565, -1.0513185; -3.7058954, 11.585574, -1.015781; 1.3733153, 9.833431, -0.08217472; 2.2970235, 5.184577, 1.3800843; -0.589278, 5.1643767, 3.076782; -2.0392632, 5.1527076, 3.9133937; -3.1639357, 5.4480095, 3.8986344; -4.054104, 5.7261066, 3.9948988; -3.1972618, 5.3428636, 4.569566; -5.5671844, 6.3957996, -2.5213785; -5.4816675, 1.4625993, -2.6520333; -6.9529085, 3.437441, -0.5793128; -7.688529, 4.42486, 0.4570465; -8.256936, 5.0832057, 1.369541; -8.779032, 5.6718493, 2.0128593; -8.864474, 5.127468, 0.953946\",\n  \"-0.0, 0.0, 0.0; 1.3627127, -1.7979507, 1.1746433; 3.2687283, -7.8077207, 4.8238926; 2.1659412, -14.568148, 1.433748; 2.642315, -16.198797, 3.407796; 2.9701176, -16.02084, 4.620609; -1.5882291, -1.589821, 1.1241124; -2.2995117, -8.483448, 3.1426823; -3.2600644, -15.088093, -0.80980086; -3.4405107, -16.147669, 1.5800972; -3.3899364, -15.741908, 2.7913857; -0.31146368, 2.4586208, -0.34203544; -1.0154871, 4.865832, -0.56566244; -1.9638584, 7.2186437, -0.8053708; -2.956891, 8.456447, -0.9447801; -3.269683, 10.008332, -1.0500766; -3.7963488, 11.553124, -1.0040456; 1.2831755, 9.848782, -0.07635766; 2.1943164, 5.210846, 1.4278567; -0.71457744, 5.1863723, 3.085465; -2.1756947, 5.1724305, 3.9024434; -3.302339, 5.458795, 3.8711944; -4.1957, 5.7309446, 3.9539258; -3.3428893, 5.3604183, 4.542755; -5.6100745, 6.3406334, -2.5489178; -5.515794, 1.4068298, -2.6466093; -7.005854, 3.372783, -0.5788889; -7.7508836, 4.3557577, 0.4549706; -8.345112, 5.0159354, 1.3495159; -8.888157, 5.6030817, 1.9766557; -8.948304, 5.0396805, 0.9259844\",\n  \"-0.0, 0.0, 0.0; 1.3719144, -1.7890214, 1.1775621; 3.3446333, -7.7675786, 4.842598; 2.382975, -14.648167, 1.6574254; 2.9171224, -16.20956, 3.6722586; 3.250345, -15.975854, 4.8740835; -1.5800517, -1.5959793, 1.1269066; -2.3273897, -8.490682, 3.1287062; -3.329113, -15.085136, -0.83056664; -3.4901268, -16.14761, 1.5594335; -3.4283035, -15.741422, 2.7700567; -0.32780635, 2.4553277, -0.35031912; -1.0517558, 4.856164, -0.5788065; -2.0222902, 7.2000003, -0.8177318; -3.027484, 8.428613, -0.9511564; -3.3510826, 9.978875, -1.0473019; -3.8867276, 11.520229, -0.99083084; 1.1961396, 9.860508, -0.072264075; 2.094952, 5.234791, 1.4763362; -0.83546543, 5.2066736, 3.0955305; -2.3071823, 5.1907654, 3.89322; -3.4356768, 5.4672284, 3.8444588; -4.3322544, 5.732717, 3.9127827; -3.48399, 5.375993, 4.516514; -5.6534166, 6.289473, -2.5760305; -5.561993, 1.3551941, -2.6493683; -7.0697384, 3.3090348, -0.58298707; -7.823611, 4.2859545, 0.4502015; -8.442823, 4.946001, 1.3277361; -9.006234, 5.5300436, 1.9396231; -9.041716, 4.948947, 0.8975018\",\n  \"-0.0, 0.0, 0.0; 1.3809557, -1.7806427, 1.1796917; 3.4183908, -7.732586, 4.8526306; 2.6206696, -14.723467, 1.8687019; 3.2051349, -16.213713, 3.9230602; 3.5387914, -15.948049, 5.118106; -1.5719469, -1.6025298, 1.1289437; -2.355556, -8.498105, 3.1137972; -3.3997355, -15.081898, -0.8522434; -3.5403042, -16.147305, 1.5377407; -3.466985, -15.7420845, 2.7480464; -0.34344307, 2.4520288, -0.35835212; -1.0868008, 4.8464556, -0.591723; -2.0794168, 7.1811266, -0.8296614; -3.096869, 8.400313, -0.9564631; -3.4310732, 9.948907, -1.0427282; -3.9753122, 11.486806, -0.9752858; 1.1102483, 9.8715925, -0.06825107; 1.9965197, 5.25914, 1.5264561; -0.9550477, 5.230232, 3.1067543; -2.4371758, 5.2137833, 3.8849177; -3.567329, 5.479393, 3.8177261; -4.467098, 5.7374516, 3.8708725; -3.62401, 5.395224, 4.4900484; -5.695429, 6.238415, -2.6020896; -5.6175184, 1.3037205, -2.661874; -7.140724, 3.2432013, -0.59330463; -7.902327, 4.21294, 0.4409784; -8.546518, 4.872695, 1.3005675; -9.1303215, 5.453245, 1.8964529; -9.14081, 4.8534656, 0.8644146\",\n  \"-0.0, 0.0, 0.0; 1.3893399, -1.7723248, 1.1823697; 3.4912093, -7.7022963, 4.85454; 2.8740644, -14.792892, 2.0697298; 3.5051448, -16.207798, 4.1631947; 3.8365705, -15.91584, 5.3527136; -1.5643657, -1.6081302, 1.1315072; -2.382951, -8.504704, 3.0986927; -3.4748173, -15.077486, -0.8727665; -3.5929255, -16.14617, 1.5169699; -3.5073378, -15.745081, 2.7278466; -0.35755393, 2.44878, -0.36666802; -1.1198651, 4.8367825, -0.604678; -2.1355948, 7.161648, -0.84107924; -3.166747, 8.369974, -0.96098083; -3.5118783, 9.916687, -1.037382; -4.064329, 11.451136, -0.95901245; 1.0235138, 9.88307, -0.062484264; 1.8968507, 5.283788, 1.5767761; -1.0756384, 5.2562366, 3.117385; -2.5680609, 5.240311, 3.8756287; -3.6995802, 5.494594, 3.7901106; -4.6022873, 5.7449613, 3.8280597; -3.7644804, 5.4183226, 4.4626327; -5.735429, 6.1857314, -2.6284056; -5.669225, 1.2507515, -2.6777852; -7.207172, 3.1683292, -0.59972477; -7.9761443, 4.127116, 0.43930483; -8.644684, 4.7855635, 1.2811209; -9.248503, 5.36157, 1.8612621; -9.2344475, 4.742847, 0.8405106\",\n  \"-0.0, 0.0, 0.0; 1.397914, -1.7643243, 1.1842276; 3.5613198, -7.677237, 4.848159; 3.1424046, -14.855883, 2.2589183; 3.8182483, -16.195538, 4.3876214; 4.146694, -15.888148, 5.5740757; -1.5565517, -1.6144478, 1.1332853; -2.4083223, -8.511968, 3.0829911; -3.551199, -15.07407, -0.89177275; -3.647956, -16.146435, 1.4972742; -3.5495384, -15.745899, 2.7073588; -0.37031797, 2.4459047, -0.37313443; -1.1506469, 4.8277016, -0.61490667; -2.1898115, 7.142292, -0.85027504; -3.2361484, 8.338115, -0.9638206; -3.5925012, 9.882763, -1.0297687; -4.152566, 11.413794, -0.93948716; 0.93758893, 9.895008, -0.053884804; 1.7971811, 5.3088098, 1.6287236; -1.1954813, 5.285563, 3.1298428; -2.697826, 5.271636, 3.8682728; -3.8300848, 5.515508, 3.7642264; -4.7351737, 5.759051, 3.786706; -3.9033382, 5.448137, 4.436843; -5.772399, 6.132534, -2.6533866; -5.7171154, 1.1973581, -2.6961732; -7.2683463, 3.0872421, -0.60267305; -8.043961, 4.0321827, 0.44407582; -8.735563, 4.687361, 1.2696543; -9.358352, 5.2573767, 1.8354813; -9.320644, 4.6220512, 0.8255857\",\n  \"-0.0, 0.0, 0.0; 1.4056077, -1.756958, 1.1860713; 3.6261134, -7.658575, 4.8340197; 3.4231977, -14.911249, 2.4319065; 4.1332726, -16.176651, 4.5946293; 4.4547157, -15.863036, 5.781372; -1.5494845, -1.6199979, 1.1350493; -2.4304137, -8.519436, 3.0649076; -3.6303651, -15.069872, -0.9122803; -3.7062755, -16.145725, 1.4759517; -3.5945313, -15.745899, 2.6851134; -0.38369367, 2.4429834, -0.37871668; -1.1815305, 4.8186474, -0.6236672; -2.2415426, 7.123844, -0.85826236; -3.304106, 8.305835, -0.96578896; -3.6719282, 9.848182, -1.0218978; -4.238887, 11.375959, -0.92026395; 0.8568404, 9.904202, -0.044662356; 1.7031945, 5.332113, 1.6824634; -1.3097893, 5.31437, 3.1424432; -2.8221245, 5.303028, 3.8602357; -3.9547498, 5.5368576, 3.73861; -4.8618045, 5.7739153, 3.7462995; -4.0358944, 5.4788013, 4.411188; -5.807744, 6.084142, -2.676773; -5.7644544, 1.148818, -2.7161152; -7.3272195, 3.007733, -0.6035526; -8.108603, 3.9371896, 0.4527266; -8.821948, 4.5865126, 1.2643117; -9.462654, 5.148676, 1.8178561; -9.4022875, 4.499863, 0.8176826\",\n  \"-0.0, 0.0, 0.0; 1.413245, -1.7498307, 1.1875314; 3.689727, -7.6442814, 4.8124914; 3.7130892, -14.957039, 2.5908659; 4.455019, -16.147846, 4.7850256; 4.7668962, -15.816166, 5.969407; -1.5424138, -1.6257555, 1.1364461; -2.4501648, -8.527196, 3.046619; -3.7135994, -15.064993, -0.9317033; -3.7652836, -16.144815, 1.455384; -3.6391258, -15.750841, 2.6650484; -0.39580286, 2.440498, -0.3822605; -1.2103088, 4.810259, -0.6295156; -2.2914453, 7.1055775, -0.86456037; -3.36972, 8.273661, -0.9675628; -3.7492702, 9.813485, -1.0140176; -4.3236814, 11.337659, -0.90076786; 0.7762916, 9.914101, -0.03179121; 1.6108716, 5.3573647, 1.7410363; -1.4225285, 5.344981, 3.1581662; -2.9448934, 5.3361416, 3.8544703; -4.0771384, 5.561271, 3.7143013; -4.9855366, 5.793117, 3.7062788; -4.166698, 5.514043, 4.386659; -5.8392553, 6.0350475, -2.7010686; -5.8128333, 1.0995989, -2.739734; -7.382569, 2.9255137, -0.6036897; -8.167437, 3.8384695, 0.46433067; -8.897823, 4.479831, 1.2670406; -9.552588, 5.0333357, 1.8128052; -9.474174, 4.377304, 0.8186108\",\n  \"-0.0, 0.0, 0.0; 1.4196186, -1.7439497, 1.1885794; 3.7547421, -7.6331005, 4.784738; 4.0102496, -14.991941, 2.7366247; 4.781559, -16.109474, 4.959016; 5.082178, -15.7553625, 6.1398087; -1.536474, -1.6306708, 1.1374496; -2.4694958, -8.534215, 3.0277386; -3.7976518, -15.059607, -0.94987106; -3.8271658, -16.143253, 1.4358599; -3.6864007, -15.750153, 2.644196; -0.40591556, 2.4384568, -0.38467652; -1.2367578, 4.8024464, -0.6328244; -2.3404944, 7.087094, -0.866794; -3.4354553, 8.239817, -0.9667725; -3.8264978, 9.777002, -1.0044576; -4.407376, 11.297818, -0.8796415; 0.6952734, 9.925016, -0.016721845; 1.5189387, 5.3846836, 1.8026838; -1.5343093, 5.376622, 3.1765616; -3.0664167, 5.3697577, 3.851182; -4.1974535, 5.5881634, 3.6919193; -5.1064506, 5.8165, 3.6676202; -4.2958136, 5.552811, 4.3637757; -5.8704777, 5.9843817, -2.7185488; -5.8723783, 1.0488358, -2.7535756; -7.4432087, 2.8436165, -0.59210086; -8.228623, 3.741006, 0.48863482; -8.969965, 4.3709016, 1.290381; -9.633894, 4.9142632, 1.8352659; -9.54386, 4.2602267, 0.84074134\",\n  \"-0.0, 0.0, 0.0; 1.4262882, -1.7380524, 1.189233; 3.8232455, -7.6221557, 4.752823; 4.31213, -15.013672, 2.8715787; 5.1090465, -16.067154, 5.1161094; 5.3980083, -15.69499, 6.294258; -1.5302159, -1.6361104, 1.1380746; -2.4886844, -8.541623, 3.008337; -3.8837202, -15.053872, -0.96791816; -3.8910525, -16.141602, 1.416126; -3.7355318, -15.750193, 2.6232018; -0.41518933, 2.4367862, -0.38536376; -1.2609692, 4.795492, -0.63333035; -2.3859906, 7.0698137, -0.86652493; -3.4979196, 8.206302, -0.96508473; -3.9008894, 9.740582, -0.9946209; -4.488366, 11.257896, -0.85857517; 0.6183095, 9.935179, 0.0030605793; 1.4320464, 5.4137216, 1.8732322; -1.6420877, 5.408373, 3.1997309; -3.1844378, 5.4026647, 3.8506045; -4.313823, 5.6153946, 3.6729996; -5.2229195, 5.841101, 3.6329415; -4.4206176, 5.59239, 4.344103; -5.8972406, 5.9371657, -2.7357454; -5.9347568, 1.0017586, -2.7702668; -7.5026517, 2.7641945, -0.5802336; -8.286596, 3.6454124, 0.5147824; -9.034668, 4.259926, 1.3221943; -9.704504, 4.790956, 1.8719851; -9.607545, 4.146327, 0.87198436\",\n  \"-0.0, 0.0, 0.0; 1.4324076, -1.7331493, 1.1890335; 3.892056, -7.613699, 4.715578; 4.6156306, -15.023872, 2.9897819; 5.4365287, -16.022945, 5.250489; 5.713213, -15.63353, 6.426006; -1.5244393, -1.6416259, 1.1378844; -2.5062156, -8.549496, 2.9872365; -3.9712937, -15.047776, -0.9866793; -3.9577837, -16.139725, 1.3954077; -3.787449, -15.749303, 2.6008024; -0.42429662, 2.4351137, -0.38601592; -1.2847856, 4.788553, -0.6334146; -2.4304225, 7.0527897, -0.8643718; -3.5585027, 8.173281, -0.9625575; -3.9734547, 9.704489, -0.98473; -4.5678167, 11.218098, -0.8377591; 0.5436256, 9.943974, 0.02355194; 1.3511858, 5.4433064, 1.9458232; -1.7411649, 5.4413996, 3.2292914; -3.2924395, 5.437171, 3.8586097; -4.419951, 5.6432996, 3.6622996; -5.328869, 5.8661923, 3.6058147; -4.53479, 5.636502, 4.332435; -5.924278, 5.892209, -2.7489882; -6.0007725, 0.95728254, -2.7877245; -7.562558, 2.6828508, -0.56422305; -8.3434515, 3.545633, 0.5475265; -9.09492, 4.1425014, 1.3649589; -9.768101, 4.660015, 1.9234842; -9.66797, 4.0295477, 0.9148052\",\n  \"-0.0, 0.0, 0.0; 1.4365045, -1.7295321, 1.1893576; 3.9632206, -7.606474, 4.6742563; 4.9202194, -15.022545, 3.0935478; 5.763772, -15.973386, 5.366682; 6.029969, -15.575818, 6.541892; -1.520549, -1.6450152, 1.1381949; -2.524974, -8.555073, 2.967095; -4.061278, -15.039146, -1.0031295; -4.025644, -16.135414, 1.376745; -3.8403063, -15.748427, 2.5810337; -0.43259683, 2.4338248, -0.3849299; -1.3084902, 4.7818146, -0.6300417; -2.4761214, 7.035042, -0.858508; -3.6203995, 8.138893, -0.9577282; -4.046951, 9.667001, -0.97242546; -4.6476545, 11.176933, -0.8138811; 0.46486044, 9.953398, 0.05041367; 1.2673666, 5.4765368, 2.0295503; -1.8414748, 5.4763093, 3.2725434; -3.400816, 5.472627, 3.8816032; -4.526444, 5.670126, 3.6665106; -5.4350896, 5.8891597, 3.5930872; -4.648767, 5.683652, 4.335219; -5.950472, 5.8450813, -2.7607794; -6.0707154, 0.9111805, -2.8156364; -7.62352, 2.5933363, -0.5529237; -8.39992, 3.4344125, 0.5784323; -9.149922, 4.010467, 1.4119854; -9.822991, 4.5124073, 1.9846793; -9.725492, 3.900683, 0.9642695\",\n  \"-0.0, 0.0, 0.0; 1.4408132, -1.7263488, 1.1887709; 4.0361867, -7.5999947, 4.628476; 5.2226796, -15.00988, 3.1798778; 6.0869627, -15.913864, 5.4643135; 6.3441434, -15.514393, 6.6408844; -1.5164424, -1.6491892, 1.1376331; -2.5433145, -8.560793, 2.9481342; -4.15329, -15.030109, -1.0169675; -4.094594, -16.130013, 1.3607719; -3.8933723, -15.744017, 2.562827; -0.43927836, 2.432821, -0.38370723; -1.3300192, 4.775507, -0.62604445; -2.521071, 7.0168557, -0.8504182; -3.6809247, 8.104227, -0.95075554; -4.1190677, 9.629106, -0.9579435; -4.7264786, 11.135068, -0.78762746; 0.38482785, 9.963304, 0.08044952; 1.1852005, 5.514252, 2.1221704; -1.9394567, 5.513461, 3.3248534; -3.5065212, 5.5091815, 3.9137535; -4.6300387, 5.6959066, 3.678911; -5.5383654, 5.9094496, 3.5875537; -4.7604704, 5.7306433, 4.345316; -5.975299, 5.7967052, -2.7701294; -6.1432085, 0.8645215, -2.8490036; -7.6870728, 2.4976301, -0.5446253; -8.459003, 3.3141851, 0.6075618; -9.202791, 3.8662474, 1.4626403; -9.872329, 4.3505125, 2.0543752; -9.783014, 3.7620988, 1.019609\",\n  \"-0.0, 0.0, 0.0; 1.4448917, -1.7230828, 1.1885592; 4.111597, -7.5929604, 4.5797925; 5.5201373, -14.985296, 3.2448835; 6.401138, -15.845073, 5.539974; 6.65184, -15.454853, 6.72104; -1.5125374, -1.6529108, 1.1374302; -2.5624924, -8.565965, 2.9290571; -4.2476954, -15.018147, -1.0327029; -4.1672225, -16.123339, 1.3419445; -3.9506452, -15.7413, 2.5425944; -0.44559503, 2.4321406, -0.38072518; -1.3510085, 4.769538, -0.61972946; -2.5655923, 6.9984264, -0.8420665; -3.7401466, 8.069859, -0.94286275; -4.189725, 9.591421, -0.9424749; -4.804161, 11.093217, -0.7609365; 0.3035481, 9.973428, 0.11172342; 1.1028178, 5.556436, 2.2223244; -2.0380876, 5.555407, 3.3819108; -3.6130776, 5.550662, 3.94927; -4.7345705, 5.723092, 3.6946518; -5.6427627, 5.9284706, 3.5850582; -4.8732433, 5.7803125, 4.3578362; -5.997544, 5.7469215, -2.7814465; -6.223422, 0.81774473, -2.895658; -7.7548633, 2.3977768, -0.5464225; -8.520585, 3.187791, 0.62819314; -9.253351, 3.7138615, 1.5087926; -9.91584, 4.179129, 2.1232662; -9.840209, 3.617027, 1.0728996\",\n  \"-0.0, 0.0, 0.0; 1.4490576, -1.7197638, 1.1882942; 4.186281, -7.587236, 4.5270996; 5.795527, -14.955126, 3.2872877; 6.691623, -15.770481, 5.592722; 6.9294295, -15.3649435, 6.7712913; -1.5085332, -1.6567403, 1.1371769; -2.5830789, -8.570452, 2.911602; -4.3457484, -15.003719, -1.047209; -4.2429695, -16.11327, 1.3245432; -4.010717, -15.735385, 2.5235767; -0.45156726, 2.4316194, -0.37699872; -1.3715603, 4.7636743, -0.6124905; -2.610047, 6.979496, -0.8335682; -3.7990313, 8.034731, -0.93603814; -4.25965, 9.552967, -0.92796546; -4.8806396, 11.050609, -0.73478043; 0.22128439, 9.9835, 0.14205611; 1.0194445, 5.6012793, 2.3243423; -2.1347203, 5.6002207, 3.4473605; -3.7161665, 5.5951395, 3.996464; -4.8353605, 5.7497582, 3.7211323; -5.7435694, 5.9437647, 3.5925953; -4.9837227, 5.826969, 4.380179; -6.0190744, 5.6955886, -2.7921047; -6.3166223, 0.77146053, -2.9510798; -7.8305492, 2.2959125, -0.5542505; -8.587511, 3.058138, 0.64416313; -9.305703, 3.5560548, 1.552696; -9.958276, 4.0011263, 2.1922305; -9.900082, 3.4698915, 1.1248262\",\n  \"-0.0, 0.0, 0.0; 1.4533305, -1.7168107, 1.1873462; 4.2623587, -7.5849633, 4.4647527; 6.042616, -14.925257, 3.2971106; 6.96149, -15.692903, 5.6099463; 7.1750875, -15.226062, 6.7703233; -1.5044074, -1.6611085, 1.1362695; -2.6061764, -8.574723, 2.894301; -4.4491067, -14.9876175, -1.0610139; -4.323307, -16.101383, 1.3076513; -4.074849, -15.7275715, 2.5047116; -0.45973566, 2.430366, -0.3752042; -1.3940907, 4.756937, -0.6083792; -2.652566, 6.961716, -0.82696354; -3.8551452, 8.001507, -0.92865926; -4.327791, 9.515972, -0.9121233; -4.9564466, 11.008804, -0.7068882; 0.14768767, 9.989254, 0.16546112; 0.94931537, 5.6461253, 2.4233165; -2.2138386, 5.6418414, 3.5207524; -3.7996435, 5.6348534, 4.057117; -4.916049, 5.769453, 3.7607534; -5.8241544, 5.94989, 3.6131346; -5.075246, 5.8638186, 4.4150224; -6.0436554, 5.6515694, -2.7992153; -6.422586, 0.7348628, -3.0072062; -7.9142547, 2.1990309, -0.5593796; -8.660088, 2.931116, 0.66453147; -9.359721, 3.3975823, 1.6037195; -9.99925, 3.8202844, 2.2710037; -9.962721, 3.3250122, 1.1854992\",\n  \"-0.0, 0.0, 0.0; 1.4586927, -1.7127112, 1.186691; 4.3408628, -7.5825877, 4.3968153; 6.2789245, -14.890934, 3.281201; 7.224915, -15.613912, 5.597496; 7.418071, -15.096143, 6.7397065; -1.4992044, -1.6662335, 1.135642; -2.6309552, -8.579182, 2.8771698; -4.5576735, -14.969126, -1.0753584; -4.409044, -16.087114, 1.2899926; -4.143564, -15.7140875, 2.4836388; -0.46849146, 2.4288628, -0.37410626; -1.4180273, 4.749408, -0.60600275; -2.697944, 6.9419403, -0.8232751; -3.914157, 7.965938, -0.9230705; -4.398032, 9.476717, -0.8968922; -5.033162, 10.964915, -0.67836523; 0.06910682, 9.995207, 0.18335652; 0.8808889, 5.693671, 2.5159693; -2.2895126, 5.686528, 3.5922737; -3.8788202, 5.677797, 4.1181426; -4.9929914, 5.7901235, 3.8045924; -5.9012313, 5.9552507, 3.640771; -5.161228, 5.902494, 4.453734; -6.0703506, 5.6021943, -2.8076406; -6.5400677, 0.69600296, -3.07127; -8.003462, 2.0946722, -0.5686867; -8.735159, 2.7940066, 0.6826025; -9.4129305, 3.2251215, 1.6541568; -10.036685, 3.6228416, 2.3510737; -10.025138, 3.1694934, 1.2468586\",\n  \"-0.0, 0.0, 0.0; 1.4657209, -1.7065938, 1.1868442; 4.423027, -7.5793877, 4.322427; 6.5050735, -14.852754, 3.2380652; 7.484911, -15.535672, 5.5524464; 7.666425, -14.983813, 6.680517; -1.4923424, -1.6722825, 1.1357893; -2.6586547, -8.5835905, 2.8609505; -4.6725764, -14.949364, -1.0871074; -4.49807, -16.070187, 1.2751327; -4.2144213, -15.698275, 2.4649413; -0.4782165, 2.4269605, -0.37414607; -1.4432088, 4.7412224, -0.6050222; -2.7447124, 6.921218, -0.8201915; -3.9734359, 7.9306893, -0.9145828; -4.4684777, 9.437619, -0.877564; -5.110635, 10.9207325, -0.6454295; -0.010049343, 10.000151, 0.19671786; 0.8263879, 5.745632, 2.6056037; -2.3492923, 5.733372, 3.666185; -3.9411297, 5.7217393, 4.184288; -5.0537906, 5.8098536, 3.8578968; -5.9625053, 5.958186, 3.6811533; -5.2290926, 5.9411736, 4.501588; -6.100334, 5.5515223, -2.8125486; -6.6661825, 0.65915966, -3.1372828; -8.096333, 1.9857675, -0.5769112; -8.811408, 2.6490703, 0.7032726; -9.459709, 3.044497, 1.7095008; -10.061606, 3.4174256, 2.4386015; -10.082986, 3.009471, 1.3169667\",\n  \"-0.0, 0.0, 0.0; 1.4728857, -1.7001497, 1.1872224; 4.504741, -7.5737853, 4.2491684; 6.7223964, -14.810699, 3.1900766; 7.73769, -15.459726, 5.4989204; 7.912967, -14.885747, 6.616894; -1.4852961, -1.678299, 1.136151; -2.6849735, -8.588065, 2.8445272; -4.7869806, -14.92874, -1.0980003; -4.588563, -16.053282, 1.2605822; -4.2873993, -15.683844, 2.4468517; -0.48850965, 2.424993, -0.3736058; -1.4679451, 4.733342, -0.602853; -2.7882094, 6.9022446, -0.81581783; -4.028324, 7.8982935, -0.90360355; -4.534011, 9.401367, -0.8553795; -5.182962, 10.879376, -0.60996217; -0.08196449, 10.003151, 0.21030581; 0.7898842, 5.799747, 2.6951718; -2.3893628, 5.781983, 3.7449331; -3.9828837, 5.7672224, 4.2577543; -5.095096, 5.828965, 3.9238677; -6.0048237, 5.9589877, 3.738144; -5.2749553, 5.9814806, 4.5616016; -6.1290736, 5.506843, -2.815126; -6.7928743, 0.6319194, -3.2092476; -8.19126, 1.8783631, -0.5916889; -8.890452, 2.501583, 0.7170898; -9.50058, 2.8592613, 1.7606238; -10.073766, 3.2060437, 2.5249166; -10.136872, 2.847412, 1.388101\",\n  \"-0.0, 0.0, 0.0; 1.4798784, -1.6941783, 1.187063; 4.5847936, -7.566057, 4.1783485; 6.932581, -14.764305, 3.1363635; 7.9805174, -15.381743, 5.4392786; 8.147787, -14.786161, 6.547133; -1.4783691, -1.6845073, 1.1359981; -2.7128031, -8.592217, 2.8278468; -4.9026585, -14.905961, -1.1100838; -4.6843057, -16.032673, 1.2456999; -4.366074, -15.659381, 2.4262934; -0.4991454, 2.4226854, -0.37451783; -1.4933908, 4.7247705, -0.6029942; -2.8325055, 6.8823986, -0.81276643; -4.083189, 7.8658123, -0.8927239; -4.5987234, 9.365121, -0.832959; -5.2541013, 10.83809, -0.5746558; -0.15547442, 10.004654, 0.22518337; 0.7670694, 5.859197, 2.7878747; -2.4129224, 5.832564, 3.8351908; -4.0067296, 5.812933, 4.3469577; -5.119649, 5.8467956, 4.0114384; -6.0309134, 5.9576764, 3.8208966; -5.3012834, 6.0242596, 4.642178; -6.1577387, 5.462332, -2.820747; -6.918152, 0.6085758, -3.2936852; -8.284235, 1.7678624, -0.6196263; -8.967276, 2.3475049, 0.71740186; -9.532983, 2.665394, 1.7981765; -10.072239, 2.984653, 2.5983138; -10.182684, 2.6792219, 1.4496351\",\n  \"-0.0, 0.0, 0.0; 1.4854636, -1.6884537, 1.1882426; 4.6627483, -7.557559, 4.1081247; 7.132395, -14.716533, 3.077328; 8.208191, -15.3046465, 5.3750668; 8.367406, -14.69192, 6.474728; -1.4727981, -1.6886207, 1.1371273; -2.7407262, -8.594154, 2.813016; -5.018813, -14.879256, -1.1206758; -4.7831607, -16.006409, 1.2332292; -4.4482923, -15.62615, 2.406978; -0.51001036, 2.420419, -0.37453392; -1.5196035, 4.71598, -0.6013453; -2.8774643, 6.8620996, -0.8086514; -4.1373124, 7.8344116, -0.8800441; -4.6621184, 9.329968, -0.80819136; -5.324136, 10.797605, -0.536797; -0.22987509, 10.005719, 0.24027342; 0.76148593, 5.9249716, 2.8799682; -2.4182343, 5.8847685, 3.9276738; -4.011814, 5.8579264, 4.439822; -5.1265345, 5.86244, 4.108631; -6.0401244, 5.9525566, 3.9182727; -5.3080316, 6.0621657, 4.7327185; -6.186784, 5.4169436, -2.8250053; -7.042491, 0.5879588, -3.3813503; -8.37929, 1.6552198, -0.654696; -9.047688, 2.1888504, 0.7086296; -9.563309, 2.4645987, 1.825433; -10.063805, 2.7545633, 2.661117; -10.226174, 2.5057468, 1.5049703\",\n  \"-0.0, 0.0, 0.0; 1.4914122, -1.6830964, 1.1883916; 4.7368865, -7.5477386, 4.041481; 7.3186345, -14.668446, 3.0203469; 8.417338, -15.229241, 5.3140726; 8.568658, -14.602971, 6.4071994; -1.466831, -1.6937107, 1.1372696; -2.7726054, -8.595318, 2.8002234; -5.1392574, -14.849329, -1.130732; -4.887309, -15.977328, 1.2210786; -4.536237, -15.591507, 2.388259; -0.52010053, 2.4183319, -0.3741414; -1.5451591, 4.7071447, -0.5997785; -2.9233723, 6.8404093, -0.805454; -4.1915736, 7.80249, -0.8668532; -4.724522, 9.294537, -0.7829656; -5.392732, 10.757122, -0.49973908; -0.3087418, 10.007342, 0.25594056; 0.76785123, 6.00026, 2.97394; -2.4109983, 5.93671, 4.023132; -4.00403, 5.897801, 4.536209; -5.1207304, 5.872164, 4.2127395; -6.0369473, 5.940156, 4.025851; -5.301756, 6.0889874, 4.831232; -6.2141304, 5.3675117, -2.832085; -7.1669292, 0.56769466, -3.476116; -8.477304, 1.5416107, -0.70210695; -9.132491, 2.0285697, 0.6848953; -9.595775, 2.2553978, 1.8351431; -10.055311, 2.5106795, 2.7049713; -10.270392, 2.324895, 1.5455865\",\n  \"-0.0, 0.0, 0.0; 1.497796, -1.6764668, 1.1897328; 4.8055687, -7.539015, 3.974769; 7.4864044, -14.623665, 2.9581842; 8.606374, -15.160175, 5.247429; 8.753795, -14.526936, 6.3370676; -1.4603829, -1.6984142, 1.1385533; -2.8069777, -8.595767, 2.7865343; -5.2634344, -14.816116, -1.142739; -4.9966073, -15.944112, 1.207432; -4.6295695, -15.552103, 2.367618; -0.5316648, 2.4160764, -0.3724524; -1.5721629, 4.698151, -0.5956615; -2.968906, 6.8194304, -0.8002897; -4.2449527, 7.7715936, -0.853158; -4.786509, 9.259796, -0.75700873; -5.4615445, 10.7167425, -0.46118456; -0.3854227, 10.007349, 0.27446848; 0.7904326, 6.084174, 3.0725656; -2.3830066, 5.9845347, 4.135244; -3.9732265, 5.9272027, 4.6552687; -5.0912695, 5.8674793, 4.341068; -6.010015, 5.9098063, 4.1590815; -5.272809, 6.0987997, 4.9541316; -6.241231, 5.321499, -2.838388; -7.2810454, 0.5546293, -3.584436; -8.571009, 1.4321218, -0.7689924; -9.21599, 1.8708696, 0.63872683; -9.627605, 2.041338, 1.8179917; -10.046356, 2.2557015, 2.7189023; -10.312004, 2.1381514, 1.561076\",\n  \"-0.0, 0.0, 0.0; 1.5034338, -1.670608, 1.190863; 4.8689384, -7.531852, 3.9086652; 7.6357546, -14.583205, 2.8909523; 8.776086, -15.099096, 5.1748786; 8.923122, -14.463645, 6.263282; -1.454653, -1.7026008, 1.1396343; -2.8433056, -8.5952215, 2.7724433; -5.390887, -14.780071, -1.1548436; -5.1086645, -15.909294, 1.1929386; -4.7258396, -15.515056, 2.3472528; -0.54250354, 2.4139576, -0.3705573; -1.5989695, 4.68892, -0.59134734; -3.0158708, 6.796875, -0.7950841; -4.2991114, 7.7398214, -0.8381011; -4.8483505, 9.224372, -0.7298309; -5.529846, 10.675908, -0.42245063; -0.4664042, 10.007608, 0.292907; 0.82400346, 6.1776023, 3.1685266; -2.3370502, 6.030581, 4.2621675; -3.9209955, 5.9491897, 4.797896; -5.0397882, 5.8586, 4.4939146; -5.960444, 5.8776426, 4.31775; -5.2216287, 6.1033545, 5.1016517; -6.268242, 5.271352, -2.8446236; -7.394141, 0.5424614, -3.699489; -8.666232, 1.3250098, -0.84815216; -9.302278, 1.7162839, 0.5775142; -9.664933, 1.825502, 1.7798889; -10.044386, 1.994906, 2.7073917; -10.356401, 1.9501897, 1.5560466\",\n  \"-0.0, 0.0, 0.0; 1.508992, -1.6649208, 1.1917974; 4.9287844, -7.525113, 3.8432908; 7.76582, -14.547335, 2.8174992; 8.927109, -15.046113, 5.094657; 9.074591, -14.407285, 6.1810207; -1.4489709, -1.7068415, 1.1405294; -2.883235, -8.59421, 2.7559807; -5.520732, -14.745774, -1.1642201; -5.2245383, -15.875853, 1.1814282; -4.825932, -15.476188, 2.3285115; -0.5542474, 2.411537, -0.36893463; -1.627136, 4.679042, -0.5872367; -3.0636492, 6.773842, -0.7893125; -4.3547816, 7.7063594, -0.82237136; -4.912148, 9.186971, -0.70233774; -5.60001, 10.633095, -0.38382572; -0.54677963, 10.006459, 0.3097191; 0.8696705, 6.2785516, 3.2592373; -2.2701464, 6.0769367, 4.4041514; -3.8434238, 5.9678764, 4.9657707; -4.9625587, 5.846538, 4.674012; -5.884768, 5.8423886, 4.5051436; -5.1444263, 6.1054087, 5.2758646; -6.297695, 5.2216167, -2.8477821; -7.507596, 0.5343604, -3.8103917; -8.764984, 1.2220037, -0.92823243; -9.393677, 1.565823, 0.51284635; -9.712367, 1.6133898, 1.731586; -10.055838, 1.7371943, 2.6800814; -10.407999, 1.7654204, 1.5398468\",\n  \"-0.0, 0.0, 0.0; 1.5153326, -1.6581174, 1.1932361; 4.9835925, -7.5183487, 3.7809207; 7.8760104, -14.515115, 2.7360353; 9.058287, -15.001055, 5.0051546; 9.200657, -14.349635, 6.0847015; -1.4424448, -1.7114422, 1.1419063; -2.9298854, -8.59214, 2.737574; -5.6546106, -14.711286, -1.1736977; -5.3475447, -15.843517, 1.169513; -4.9343476, -15.439691, 2.3099566; -0.56726444, 2.4087918, -0.36707908; -1.6573594, 4.6682954, -0.5830883; -3.1137335, 6.749381, -0.78470474; -4.411063, 7.6735625, -0.8077157; -4.975956, 9.150322, -0.6759915; -5.6707416, 10.5906925, -0.34662136; -0.6304784, 10.0045185, 0.32427484; 0.9185927, 6.3844557, 3.340698; -2.191645, 6.129744, 4.5537405; -3.750115, 5.9937506, 5.149718; -4.8696465, 5.8413296, 4.8745337; -5.793318, 5.8138347, 4.716168; -5.0502453, 6.116163, 5.469651; -6.3285728, 5.1691117, -2.8519027; -7.6219053, 0.5286608, -3.9263127; -8.867392, 1.118711, -1.0174773; -9.490133, 1.4137378, 0.43693864; -9.771485, 1.4035331, 1.6657141; -10.083647, 1.484476, 2.629533; -10.468423, 1.581935, 1.5037452\",\n  \"-0.0, 0.0, 0.0; 1.5208664, -1.6522279, 1.1943648; 5.0351324, -7.510349, 3.7241092; 7.9695764, -14.485273, 2.6507673; 9.173285, -14.964197, 4.9100895; 9.301536, -14.287354, 5.9756756; -1.4367146, -1.7155365, 1.1429859; -2.981082, -8.589341, 2.7140927; -5.7919765, -14.677847, -1.1839955; -5.4778996, -15.812151, 1.1572828; -5.050441, -15.3997965, 2.2893882; -0.582436, 2.4050825, -0.36764356; -1.6910756, 4.6556797, -0.5822473; -3.1661463, 6.723828, -0.7810453; -4.470281, 7.6385975, -0.79257697; -5.042677, 9.111406, -0.6494935; -5.7437105, 10.546401, -0.3100526; -0.71315575, 9.999373, 0.33517766; 0.9685869, 6.4937263, 3.4150262; -2.1027734, 6.186484, 4.7120514; -3.641811, 6.0238357, 5.3503475; -4.7617335, 5.839605, 5.097086; -5.686793, 5.7880864, 4.9535074; -4.9395223, 6.1304593, 5.6853976; -6.365323, 5.118148, -2.8529553; -7.741678, 0.5282068, -4.035721; -8.976904, 1.0204556, -1.1044023; -9.594517, 1.2665806, 0.36125505; -9.847509, 1.1974937, 1.5942897; -10.135139, 1.2342767, 2.568384; -10.543314, 1.400843, 1.4590607\",\n  \"-0.0, 0.0, 0.0; 1.5270666, -1.6460516, 1.1949812; 5.0827293, -7.4996204, 3.6769643; 8.04599, -14.457201, 2.5707252; 9.271359, -14.935415, 4.818524; 9.390289, -14.2400465, 5.873207; -1.4302524, -1.720536, 1.1435758; -3.0351243, -8.58635, 2.6887696; -5.933223, -14.645863, -1.1905923; -5.6146264, -15.783888, 1.1482687; -5.173324, -15.364438, 2.2724278; -0.5993054, 2.400856, -0.36815333; -1.7277796, 4.641686, -0.5815784; -3.2220268, 6.6962795, -0.777694; -4.531412, 7.603591, -0.7771383; -5.1112156, 9.072331, -0.62252516; -5.8195357, 10.501277, -0.27284616; -0.7998798, 9.992939, 0.34371543; 1.0212923, 6.6085033, 3.4793518; -2.0019503, 6.245243, 4.871463; -3.5169268, 6.0541945, 5.557655; -4.6371517, 5.8378797, 5.3326807; -5.5634136, 5.762004, 5.209048; -4.8101025, 6.1446905, 5.914292; -6.4057183, 5.0638304, -2.8525364; -7.860258, 0.52705526, -4.142044; -9.090279, 0.9209551, -1.1937201; -9.705289, 1.1179044, 0.28043985; -9.939126, 0.98652095, 1.5121912; -10.209507, 0.97584736, 2.491846; -10.6322775, 1.2121693, 1.4008073\",\n  \"-0.0, 0.0, 0.0; 1.5329186, -1.639369, 1.1966742; 5.1246567, -7.4868646, 3.6407413; 8.102089, -14.43142, 2.4915466; 9.345988, -14.915405, 4.7279034; 9.457155, -14.205739, 5.7738743; -1.4241097, -1.7245488, 1.1451962; -3.0937347, -8.582199, 2.6576848; -6.0803375, -14.612253, -1.2003944; -5.760038, -15.754581, 1.1361346; -5.3046885, -15.325111, 2.2508686; -0.61954105, 2.3953764, -0.37034425; -1.7700664, 4.6249886, -0.5835214; -3.2828727, 6.666195, -0.77713597; -4.597844, 7.5652866, -0.76337874; -5.1844077, 9.030027, -0.5967916; -5.8989525, 10.453396, -0.23717332; -0.89112043, 9.983117, 0.34974563; 1.0751907, 6.726438, 3.53266; -1.8900434, 6.3063226, 5.0295963; -3.3760052, 6.086459, 5.768575; -4.496643, 5.8355303, 5.585504; -5.423983, 5.7330127, 5.493123; -4.659725, 6.1571274, 6.161953; -6.4509907, 5.0078616, -2.8552866; -7.969577, 0.5221548, -4.245676; -9.205556, 0.8156961, -1.2881587; -9.823545, 0.96246713, 0.19059801; -10.048026, 0.76790273, 1.4157126; -10.308977, 0.7085369, 2.3961837; -10.737355, 1.0134442, 1.3245155\",\n  \"-0.0, 0.0, 0.0; 1.539623, -1.6318694, 1.1983166; 5.162284, -7.4716144, 3.6151235; 8.138078, -14.407894, 2.4129248; 9.397743, -14.900768, 4.638489; 9.506827, -14.184745, 5.680338; -1.4170256, -1.7293334, 1.146768; -3.150972, -8.579261, 2.6214108; -6.2302656, -14.57785, -1.2127767; -5.9119864, -15.724477, 1.1219223; -5.443191, -15.287409, 2.2280965; -0.6412247, 2.389062, -0.37420237; -1.8151257, 4.606414, -0.5878183; -3.3476171, 6.633247, -0.77757823; -4.667216, 7.5252323, -0.7506287; -5.2603345, 8.9859705, -0.5724992; -5.9817705, 10.403446, -0.20348585; -0.9880686, 9.971016, 0.35562205; 1.1250703, 6.845764, 3.5759835; -1.7686474, 6.3645544, 5.189911; -3.218835, 6.1137757, 5.987769; -4.338978, 5.8286858, 5.8600435; -5.2662706, 5.6996417, 5.81025; -4.4864726, 6.163659, 6.433065; -6.4995537, 4.9482803, -2.8589087; -8.073581, 0.51390934, -4.3487563; -9.321596, 0.7096177, -1.3882029; -9.945604, 0.80747205, 0.09207165; -10.168511, 0.5519129, 1.3062193; -10.426168, 0.4452506, 2.2835522; -10.8529625, 0.8161813, 1.2322644\",\n  \"-0.0, 0.0, 0.0; 1.546164, -1.6249069, 1.1993552; 5.194594, -7.4539185, 3.6032772; 8.151857, -14.386496, 2.3357716; 9.422389, -14.893315, 4.5520077; 9.5324135, -14.176731, 5.5933723; -1.4100649, -1.7343562, 1.147762; -3.209342, -8.577003, 2.5772495; -6.3835754, -14.541668, -1.2323589; -6.073378, -15.693042, 1.1010914; -5.5913115, -15.244687, 2.196997; -0.665087, 2.3819454, -0.37790257; -1.8632945, 4.5861053, -0.593083; -3.4140835, 6.5991254, -0.78121614; -4.7386336, 7.4833193, -0.74284077; -5.339087, 8.9395485, -0.55277175; -6.067833, 10.350516, -0.17332989; -1.0852709, 9.957035, 0.35605574; 1.1793771, 6.9704905, 3.604933; -1.6329541, 6.4282584, 5.338918; -3.0424066, 6.146618, 6.197192; -4.15839, 5.826792, 6.1293597; -5.082823, 5.6705303, 6.126101; -4.289416, 6.174009, 6.699085; -6.550004, 4.887716, -2.8651626; -8.175893, 0.50751925, -4.456139; -9.436556, 0.6075006, -1.4961643; -10.066887, 0.65749145, -0.016178489; -10.295361, 0.34456342, 1.1834166; -10.555324, 0.19326681, 2.1542265; -10.973892, 0.62711656, 1.1239238\",\n  \"-0.0, 0.0, 0.0; 1.5530812, -1.6172516, 1.2007643; 5.2243366, -7.4334126, 3.601057; 8.139769, -14.368698, 2.2539635; 9.422176, -14.8967, 4.4583826; 9.53767, -14.182904, 5.501069; -1.4026462, -1.7394717, 1.1491097; -3.2674031, -8.574646, 2.5295856; -6.5397263, -14.502881, -1.2538059; -6.2403865, -15.659636, 1.0784013; -5.7446465, -15.199153, 2.1631212; -0.6893083, 2.3743382, -0.3823434; -1.9117761, 4.564997, -0.59892905; -3.4805846, 6.564278, -0.78415215; -4.810824, 7.4393463, -0.73492146; -5.41919, 8.890754, -0.5334692; -6.155359, 10.295161, -0.14414647; -1.1814206, 9.941593, 0.3559798; 1.2418928, 7.1036625, 3.6235461; -1.4751332, 6.4989924, 5.4842105; -2.8368697, 6.1857986, 6.4062166; -3.9442334, 5.8308854, 6.3966737; -4.862597, 5.64693, 6.4387746; -4.0609484, 6.189621, 6.9623604; -6.6019425, 4.827247, -2.868763; -8.275396, 0.5031376, -4.5606484; -9.552332, 0.5109179, -1.6059747; -10.190799, 0.514806, -0.12863982; -10.429056, 0.15136373, 1.0547012; -10.694432, -0.039123625, 2.0171115; -11.100397, 0.4528841, 1.0081168\",\n  \"-0.0, 0.0, 0.0; 1.5587059, -1.6102121, 1.2029345; 5.248767, -7.4114857, 3.6104085; 8.10113, -14.354495, 2.1712246; 9.397526, -14.906848, 4.3614483; 9.516105, -14.189175, 5.401122; -1.3965644, -1.7429882, 1.1511871; -3.3265834, -8.570833, 2.4771602; -6.6974506, -14.461281, -1.278635; -6.4154854, -15.623862, 1.0528398; -5.9073925, -15.153232, 2.1274412; -0.71372944, 2.3663168, -0.38723186; -1.9610622, 4.542771, -0.6052491; -3.54811, 6.5278788, -0.78750354; -4.884055, 7.393627, -0.7289022; -5.5012107, 8.839764, -0.5165716; -6.2458563, 10.236923, -0.11741468; -1.2787564, 9.924981, 0.3535667; 1.3051789, 7.2401295, 3.627423; -1.3003788, 6.571395, 5.6208596; -2.6063077, 6.225866, 6.6096325; -3.7012343, 5.8376446, 6.6618767; -4.6103325, 5.6271734, 6.752685; -3.801846, 6.2060556, 7.224428; -6.655299, 4.7643137, -2.8710017; -8.370477, 0.49797535, -4.6647053; -9.666738, 0.42065668, -1.7194631; -10.314865, 0.38199726, -0.24684286; -10.56706, -0.028347075, 0.91813254; -10.841, -0.25524142, 1.8701935; -11.230101, 0.29253462, 0.88353735\",\n  \"-0.0, 0.0, 0.0; 1.5657539, -1.6022239, 1.2044467; 5.268428, -7.3880343, 3.6297002; 8.034702, -14.344288, 2.0899382; 9.346596, -14.926222, 4.2632093; 9.466551, -14.198913, 5.296007; -1.3888947, -1.7481527, 1.1526341; -3.3851562, -8.568801, 2.4160974; -6.85616, -14.417913, -1.3129957; -6.596134, -15.588536, 1.017005; -6.076194, -15.109957, 2.0823889; -0.7381971, 2.357993, -0.3921075; -2.0095387, 4.520243, -0.6127589; -3.6139789, 6.4914145, -0.7939954; -4.9570985, 7.3454537, -0.72803515; -5.583537, 8.785993, -0.5051056; -6.3359046, 10.176103, -0.09594259; -1.3733845, 9.908346, 0.34470248; 1.367353, 7.374412, 3.6113248; -1.1084473, 6.646975, 5.744673; -2.3494277, 6.271808, 6.80379; -3.4270306, 5.8512764, 6.9230967; -4.322861, 5.615058, 7.0669436; -3.5098124, 6.2301126, 7.4816184; -6.7073936, 4.7005086, -2.8746665; -8.451136, 0.49102736, -4.7721605; -9.770255, 0.33363736, -1.8402889; -10.429813, 0.25494212, -0.3743546; -10.700183, -0.20159754, 0.76915944; -10.986368, -0.46475017, 1.7081975; -11.355116, 0.13643718, 0.7451045\",\n  \"-0.0, 0.0, 0.0; 1.571435, -1.5953251, 1.2062044; 5.286251, -7.362206, 3.6578314; 7.9518337, -14.332617, 2.0083919; 9.278097, -14.945757, 4.1642914; 9.387249, -14.192572, 5.179593; -1.3826636, -1.751978, 1.154316; -3.4440174, -8.56598, 2.3471444; -7.016328, -14.371561, -1.3541989; -6.780752, -15.555858, 0.971488; -6.2499275, -15.077075, 2.0313993; -0.7617058, 2.3498082, -0.39625758; -2.0565143, 4.497836, -0.61935216; -3.6779108, 6.455084, -0.80058527; -5.02931, 7.295478, -0.7287355; -5.6661315, 8.729897, -0.4959798; -6.4266624, 10.112767, -0.077481985; -1.4658694, 9.8917465, 0.33455205; 1.4284081, 7.501979, 3.577306; -0.8955791, 6.7249317, 5.8587985; -2.0606072, 6.324692, 6.99239; -3.115724, 5.8747435, 7.1836605; -3.9938998, 5.615091, 7.384638; -3.1783555, 6.264626, 7.7371826; -6.7573347, 4.636531, -2.878028; -8.519327, 0.48208046, -4.8772216; -9.863783, 0.25367555, -1.961576; -10.536011, 0.13947286, -0.50375533; -10.830438, -0.36181158, 0.6148058; -11.133773, -0.66033757, 1.5377433; -11.477048, -0.0076491237, 0.59906906\",\n  \"-0.0, 0.0, 0.0; 1.5768185, -1.5885744, 1.2080866; 5.2993145, -7.3328238, 3.700851; 7.8523808, -14.318678, 1.9423594; 9.187552, -14.964432, 4.0831857; 9.29023, -14.191857, 5.0844975; -1.3767174, -1.7554693, 1.1561176; -3.503799, -8.562576, 2.2703247; -7.1707363, -14.322386, -1.4099307; -6.9686046, -15.523023, 0.9105191; -6.4301505, -15.048218, 1.9683691; -0.78274643, 2.3421361, -0.4006496; -2.0993166, 4.4765806, -0.62673414; -3.7377162, 6.419542, -0.80877453; -5.09837, 7.2446995, -0.7350198; -5.746356, 8.672751, -0.494071; -6.5152903, 10.048383, -0.06715694; -1.5554912, 9.875952, 0.3241151; 1.4893799, 7.622095, 3.526017; -0.6609721, 6.807624, 5.9596453; -1.7391633, 6.3884187, 7.1697206; -2.7641828, 5.9070024, 7.4340734; -3.6189485, 5.6220593, 7.6932783; -2.8077345, 6.3076534, 7.981703; -6.801526, 4.5731153, -2.884715; -8.565006, 0.47017622, -4.986351; -9.947081, 0.18134019, -2.0937457; -10.638117, 0.036921784, -0.6474447; -10.963291, -0.50795066, 0.4418341; -11.289306, -0.8411497, 1.34496; -11.601167, -0.13808256, 0.43205887\",\n  \"-0.0, 0.0, 0.0; 1.5816611, -1.5807892, 1.2119622; 5.3080497, -7.2999597, 3.7560465; 7.738331, -14.300666, 1.8861688; 9.070278, -14.981192, 4.0182147; 9.167383, -14.195096, 5.009508; -1.3713155, -1.7572504, 1.1598257; -3.5666866, -8.555599, 2.192031; -7.318369, -14.268007, -1.4766724; -7.159679, -15.485579, 0.83832455; -6.616327, -15.012942, 1.8946406; -0.8021735, 2.3350368, -0.40365228; -2.1391377, 4.4565, -0.63222134; -3.7941434, 6.384981, -0.8179885; -5.1643143, 7.194333, -0.7452769; -5.824317, 8.615703, -0.4975268; -6.6026053, 9.983811, -0.06344876; -1.6436975, 9.861097, 0.3153776; 1.5482817, 7.737286, 3.4624362; -0.41264772, 6.8962064, 6.0426044; -1.3961034, 6.463461, 7.326372; -2.3809, 5.9480767, 7.6682262; -3.204328, 5.6355658, 7.98964; -2.404552, 6.3589916, 8.2094345; -6.838843, 4.51042, -2.8968287; -8.58388, 0.45186186, -5.097692; -10.016968, 0.11391446, -2.23539; -10.73351, -0.05505912, -0.80424035; -11.094993, -0.63823736, 0.25329757; -11.44826, -1.0019475, 1.1341271; -11.723522, -0.2526341, 0.24659723\",\n  \"-0.0, 0.0, 0.0; 1.5858365, -1.5742764, 1.2149795; 5.315504, -7.2653203, 3.8166819; 7.613717, -14.279993, 1.8354733; 8.934705, -15.000114, 3.9613225; 9.032057, -14.20987, 4.949288; -1.366633, -1.7589887, 1.1627138; -3.6320496, -8.545392, 2.1194072; -7.457759, -14.210472, -1.5462358; -7.3545127, -15.446189, 0.76227427; -6.8101525, -14.976714, 1.8194805; -0.81963116, 2.3284237, -0.40677002; -2.1760626, 4.4370556, -0.6393416; -3.8481941, 6.3501105, -0.8311417; -5.2283154, 7.1424804, -0.75958204; -5.900681, 8.556885, -0.50530195; -6.6885567, 9.9174795, -0.06494844; -1.7325251, 9.846876, 0.30414927; 1.5995138, 7.850683, 3.3889537; -0.16183603, 6.991272, 6.1035414; -1.0454495, 6.5491385, 7.4549327; -1.9764173, 5.998312, 7.8817797; -2.7575505, 5.6568117, 8.271923; -1.9773645, 6.419718, 8.415381; -6.8703814, 4.4457226, -2.9157147; -8.576588, 0.42343807, -5.211567; -10.074727, 0.050787836, -2.3871324; -10.823797, -0.13553561, -0.9749174; -11.225565, -0.75036985, 0.049638033; -11.609582, -1.139336, 0.9064809; -11.844784, -0.34999788, 0.042435408\",\n  \"-0.0, 0.0, 0.0; 1.5890249, -1.5687635, 1.217941; 5.3197465, -7.2307444, 3.8808217; 7.4775705, -14.258259, 1.7902622; 8.786775, -15.022309, 3.9080513; 8.891356, -14.235243, 4.8978124; -1.363035, -1.7599047, 1.1655481; -3.697543, -8.531887, 2.056034; -7.5859213, -14.149173, -1.6172111; -7.547369, -15.407073, 0.6812835; -7.004906, -14.94126, 1.7410818; -0.8365728, 2.3218365, -0.40992257; -2.2118576, 4.4177566, -0.64663947; -3.9001262, 6.3159347, -0.84478045; -5.290563, 7.0903406, -0.77632856; -5.9751654, 8.497839, -0.51644003; -6.77193, 9.8513775, -0.07037276; -1.8189034, 9.831753, 0.2953297; 1.6463568, 7.959527, 3.310297; 0.09876311, 7.0887375, 6.148713; -0.6779006, 6.640711, 7.5624237; -1.5427191, 6.059458, 8.078702; -2.2711325, 5.693014, 8.541451; -1.5172656, 6.492568, 8.602234; -6.89881, 4.3839765, -2.9379086; -8.534383, 0.3850975, -5.3242683; -10.116939, -0.0062368214, -2.548823; -10.908214, -0.20190346, -1.1611009; -11.355312, -0.8329243, -0.16557693; -11.774017, -1.2342551, 0.669027; -11.963668, -0.41640186, -0.17955863\",\n  \"-0.0, 0.0, 0.0; 1.5931892, -1.5613054, 1.222077; 5.3216395, -7.1952534, 3.946879; 7.331332, -14.234063, 1.749403; 8.626406, -15.043429, 3.8590307; 8.738403, -14.258872, 4.8499722; -1.3583038, -1.7609363, 1.1695064; -3.7580204, -8.517412, 2.0025907; -7.702357, -14.081493, -1.6919096; -7.740414, -15.367504, 0.59098387; -7.203773, -14.910141, 1.6574053; -0.85216224, 2.3155406, -0.4134069; -2.2451925, 4.3991895, -0.6546463; -3.9500132, 6.281717, -0.8602391; -5.350468, 7.0380507, -0.79398274; -6.0474334, 8.438507, -0.5289639; -6.8535595, 9.784997, -0.07840538; -1.9048927, 9.817331, 0.2839777; 1.6863554, 8.065581, 3.2229562; 0.36415124, 7.1914554, 6.172127; -0.29974037, 6.741579, 7.641607; -1.0889978, 6.135245, 8.243056; -1.756731, 5.7481284, 8.775294; -1.0364528, 6.580035, 8.754639; -6.923712, 4.320725, -2.9619946; -8.462645, 0.3393016, -5.4400587; -10.1443815, -0.0594593, -2.7246451; -10.98525, -0.25883907, -1.3669411; -11.483243, -0.8886403, -0.3950836; -11.940818, -1.2877066, 0.41997176; -12.078301, -0.45402014, -0.4232447\",\n  \"-0.0, 0.0, 0.0; 1.5965707, -1.5544726, 1.2263668; 5.3195763, -7.1629753, 4.0104594; 7.1766953, -14.209979, 1.7075377; 8.457298, -15.059197, 3.8103223; 8.57302, -14.2701025, 4.797225; -1.354432, -1.7611873, 1.1736118; -3.813086, -8.501882, 1.9614575; -7.8060265, -14.009598, -1.7651517; -7.930023, -15.328219, 0.49598432; -7.4039803, -14.886074, 1.5740405; -0.86712974, 2.3091843, -0.41781265; -2.2775078, 4.3805647, -0.66385806; -3.9984813, 6.247594, -0.8760917; -5.4087152, 6.9858193, -0.81310135; -6.118086, 8.379161, -0.5435338; -6.9335356, 9.71855, -0.08860698; -1.9883592, 9.8023615, 0.2707969; 1.721693, 8.165749, 3.1274195; 0.6334152, 7.2977276, 6.172435; 0.086571395, 6.8507366, 7.6902204; -0.62240815, 6.2244496, 8.36655; -1.2255731, 5.8207774, 8.9600525; -0.5455427, 6.6808653, 8.864639; -6.948441, 4.2582374, -2.9846334; -8.377354, 0.28757358, -5.5444946; -10.171303, -0.111181974, -2.9018705; -11.068276, -0.3105585, -1.5805601; -11.619754, -0.9280333, -0.62990254; -12.118349, -1.3156428, 0.1664046; -12.200364, -0.47598487, -0.6781053\",\n  \"-0.0, 0.0, 0.0; 1.6013913, -1.5455786, 1.2313126; 5.3171625, -7.130429, 4.072042; 7.0158806, -14.183659, 1.6681054; 8.280358, -15.071132, 3.7648425; 8.401206, -14.277638, 4.7475953; -1.3488907, -1.7622801, 1.1783442; -3.85856, -8.488265, 1.9302323; -7.8999887, -13.930452, -1.840121; -8.119608, -15.284067, 0.39289713; -7.607086, -14.860196, 1.4847189; -0.88218814, 2.3023102, -0.4241771; -2.3094978, 4.361416, -0.6755612; -4.046566, 6.2129016, -0.8927874; -5.465694, 6.9341264, -0.83266145; -6.18725, 8.320367, -0.5588597; -7.012391, 9.652446, -0.09996346; -2.070866, 9.786087, 0.25667936; 1.7508388, 8.259261, 3.0255523; 0.90186864, 7.4053936, 6.149666; 0.4747752, 6.9653287, 7.707371; -0.1431976, 6.320353, 8.451969; -0.67305446, 5.9009457, 9.101856; -0.04287803, 6.7877855, 8.935457; -6.9738226, 4.1961546, -3.006943; -8.287773, 0.22500515, -5.626934; -10.207348, -0.16231683, -3.0723433; -11.167131, -0.35597837, -1.7950479; -11.771471, -0.95699453, -0.8662283; -12.310948, -1.3299141, -0.08980137; -12.337832, -0.49020272, -0.93780553\",\n  \"-0.0, 0.0, 0.0; 1.6063445, -1.5358864, 1.236976; 5.305725, -7.1029916, 4.133382; 6.8487167, -14.156773, 1.6281981; 8.094141, -15.084063, 3.7191; 8.224626, -14.294243, 4.703578; -1.3431461, -1.7630347, 1.1837643; -3.8870306, -8.479614, 1.9040763; -7.983947, -13.8430395, -1.9188883; -8.30489, -15.24012, 0.27474713; -7.8097005, -14.846059, 1.3855678; -0.8965448, 2.2953978, -0.43147537; -2.3402781, 4.342244, -0.68911517; -4.09351, 6.177726, -0.9122227; -5.5216064, 6.881094, -0.85290164; -6.2552085, 8.26042, -0.57620126; -7.0899034, 9.586073, -0.115975946; -2.1524549, 9.769997, 0.2367813; 1.7741323, 8.345637, 2.9119265; 1.1652346, 7.5133257, 6.097272; 0.85829484, 7.083901, 7.685949; 0.34944832, 6.4263725, 8.498993; -0.091952026, 5.9962645, 9.205517; 0.47596937, 6.9072194, 8.962776; -6.998122, 4.132054, -3.0298164; -8.194012, 0.15326, -5.69438; -10.246727, -0.20951405, -3.2417336; -11.273082, -0.39090055, -2.0154102; -11.934689, -0.9723235, -1.1135361; -12.519276, -1.3281875, -0.36216217; -12.486949, -0.49450278, -1.2159033\",\n  \"-0.0, 0.0, 0.0; 1.610837, -1.5260595, 1.2432803; 5.2920704, -7.077865, 4.191707; 6.6790514, -14.128321, 1.5878696; 7.901264, -15.097674, 3.6733837; 8.0469675, -14.321716, 4.6667104; -1.337881, -1.7629771, 1.1897972; -3.9092512, -8.470854, 1.8934221; -8.05822, -13.749235, -1.9912739; -8.4815235, -15.192499, 0.15457702; -8.00797, -14.835288, 1.2870816; -0.9121754, 2.2875996, -0.44004324; -2.3729157, 4.321619, -0.7033427; -4.141457, 6.1419754, -0.92951894; -5.578132, 6.827563, -0.86919343; -6.323482, 8.200167, -0.590467; -7.167457, 9.519959, -0.13032374; -2.2313206, 9.751885, 0.21601295; 1.7941749, 8.4226675, 2.7912514; 1.43129, 7.6186233, 6.0210743; 1.2474885, 7.203206, 7.6323338; 0.8565837, 6.546873, 8.509106; 0.5113881, 6.1176596, 9.267801; 1.0096164, 7.0447946, 8.946109; -7.0276923, 4.0693007, -3.0459824; -8.096106, 0.079404116, -5.7478456; -10.282752, -0.24292684, -3.4078884; -11.376074, -0.4040928, -2.2379112; -12.100133, -0.96398425, -1.3710703; -12.734733, -1.3014544, -0.6525015; -12.637816, -0.47965217, -1.5128486\",\n  \"-0.0, 0.0, 0.0; 1.6158303, -1.5151739, 1.2500956; 5.2739983, -7.054907, 4.2494993; 6.506233, -14.0984745, 1.5509157; 7.7008615, -15.110214, 3.6322768; 7.8635664, -14.353759, 4.6379313; -1.331983, -1.7630293, 1.1963196; -3.9238453, -8.463592, 1.8944285; -8.119843, -13.649636, -2.0634334; -8.648181, -15.141717, 0.024969578; -8.202666, -14.8301, 1.1820484; -0.927343, 2.2796543, -0.4494719; -2.4050155, 4.300477, -0.71981215; -4.1896906, 6.104397, -0.950898; -5.6343403, 6.7728877, -0.8891599; -6.3903646, 8.139203, -0.6082953; -7.242971, 9.453634, -0.14871842; -2.3131342, 9.733513, 0.18943721; 1.807158, 8.494209, 2.657353; 1.7005414, 7.7246523, 5.9140906; 1.6450126, 7.3263664, 7.5391436; 1.3646076, 6.681575, 8.465386; 1.1095444, 6.2619367, 9.264042; 1.538051, 7.1972885, 8.873152; -7.0553246, 4.001837, -3.0658767; -7.992147, -0.0038580894, -5.7930756; -10.311583, -0.2695807, -3.5771492; -11.471298, -0.40244126, -2.4691858; -12.259844, -0.93773407, -1.6440736; -12.946513, -1.2545402, -0.9650576; -12.781308, -0.45172644, -1.8328978\",\n  \"-0.0, 0.0, 0.0; 1.6208738, -1.5030988, 1.2581182; 5.253577, -7.0334635, 4.305377; 6.33175, -14.06642, 1.5147359; 7.497677, -15.120894, 3.5911543; 7.6798534, -14.389888, 4.612173; -1.3259529, -1.7623487, 1.2039965; -3.9305668, -8.457268, 1.9087548; -8.168443, -13.545528, -2.1305685; -8.804656, -15.086042, -0.10845947; -8.389758, -14.819553, 1.0710584; -0.942097, 2.2713122, -0.4608779; -2.4358742, 4.2792635, -0.7385185; -4.2356343, 6.067738, -0.9726423; -5.688604, 6.7177033, -0.90838546; -6.454813, 8.078201, -0.62688476; -7.3146963, 9.388717, -0.16968873; -2.3881407, 9.7152405, 0.15643096; 1.8206716, 8.5565405, 2.5115538; 1.9770219, 7.8300014, 5.776155; 2.053104, 7.453123, 7.405476; 1.8696399, 6.8221154, 8.364892; 1.6933751, 6.413796, 9.190247; 2.056277, 7.353194, 8.746254; -7.085705, 3.9359894, -3.0794168; -7.887022, -0.08852959, -5.8220406; -10.3377495, -0.28383246, -3.744419; -11.563114, -0.38148454, -2.7056124; -12.411611, -0.8896494, -1.9239633; -13.146674, -1.1839976, -1.286794; -12.915096, -0.40656722, -2.1625347\",\n  \"-0.0, 0.0, 0.0; 1.6257598, -1.4909227, 1.2662755; 5.224415, -7.014353, 4.3660583; 6.156252, -14.032565, 1.487; 7.290493, -15.1281, 3.5597079; 7.492303, -14.428168, 4.598653; -1.3200486, -1.7614303, 1.2118032; -3.9315112, -8.451905, 1.9332254; -8.202451, -13.43778, -2.1979039; -8.958764, -15.023546, -0.25362706; -8.581265, -14.802479, 0.9476404; -0.95690495, 2.2624774, -0.473649; -2.4665027, 4.2572107, -0.7608351; -4.2806225, 6.030362, -1.000614; -5.74074, 6.6640954, -0.936237; -6.516669, 8.01911, -0.65490973; -7.384219, 9.325509, -0.20042667; -2.4620826, 9.696508, 0.11500132; 1.8291113, 8.612057, 2.353953; 2.239497, 7.9333305, 5.6067734; 2.4427233, 7.580278, 7.2305236; 2.353527, 6.964524, 8.21297; 2.253903, 6.568633, 9.056977; 2.5504894, 7.5093975, 8.568823; -7.1141768, 3.8684375, -3.0988994; -7.7689466, -0.18264413, -5.841319; -10.349495, -0.2922572, -3.9205186; -11.639768, -0.34706384, -2.9601192; -12.542365, -0.82508975, -2.2212272; -13.320652, -1.0947548, -1.6258327; -13.025458, -0.3481773, -2.5092533\",\n  \"-0.0, 0.0, 0.0; 1.6305232, -1.4780993, 1.2751528; 5.1884575, -6.9962544, 4.4308324; 5.980752, -13.995113, 1.4642112; 7.081178, -15.130723, 3.533576; 7.302466, -14.467562, 4.5924845; -1.3142164, -1.759925, 1.2202991; -3.926381, -8.447292, 1.9675372; -8.222401, -13.329079, -2.260759; -9.109766, -14.955014, -0.40717041; -8.781823, -14.786485, 0.8169501; -0.9693547, 2.2541573, -0.48779246; -2.494417, 4.23543, -0.78623474; -4.3252892, 5.9902577, -1.0333718; -5.7916975, 6.6092052, -0.968132; -6.5761766, 7.9594703, -0.6876829; -7.451151, 9.26232, -0.23726079; -2.5412345, 9.678369, 0.06540203; 1.8252263, 8.655794, 2.1847532; 2.4707856, 8.0331335, 5.410505; 2.7917004, 7.70804, 7.021045; 2.8129601, 7.1109185, 8.018694; 2.80358, 6.730151, 8.875392; 3.0214314, 7.6697006, 8.345219; -7.1387863, 3.7923143, -3.121201; -7.6343446, -0.29466748, -5.843671; -10.336482, -0.30513424, -4.0946536; -11.687549, -0.31036815, -3.2201447; -12.642355, -0.75343823, -2.5264683; -13.461527, -0.9946891, -1.9753788; -13.100477, -0.28485906, -2.8646107\",\n  \"-0.0, 0.0, 0.0; 1.6352645, -1.4653013, 1.2838227; 5.144175, -6.9779844, 4.5033135; 5.8051395, -13.954496, 1.4530663; 6.866629, -15.1278, 3.5217419; 7.106864, -14.509825, 4.603607; -1.3083558, -1.7585193, 1.2285954; -3.9167874, -8.443402, 2.0103016; -8.232903, -13.2192545, -2.3173413; -9.250604, -14.876549, -0.56105685; -8.98475, -14.7697315, 0.6848688; -0.98124313, 2.2455888, -0.50329536; -2.521481, 4.2129965, -0.8152212; -4.3692007, 5.948686, -1.0719432; -5.8407536, 6.555269, -1.0064063; -6.633209, 7.9013352, -0.7282074; -7.5161676, 9.200734, -0.28343177; -2.6212857, 9.659592, 0.00800395; 1.811599, 8.683373, 2.0079575; 2.678608, 8.132334, 5.194582; 3.1102915, 7.8429904, 6.785947; 3.2484956, 7.2648664, 7.785437; 3.3353426, 6.8994627, 8.644472; 3.4693542, 7.835681, 8.0815935; -7.1606646, 3.7127242, -3.1489496; -7.483782, -0.42265892, -5.823843; -10.29731, -0.3171456, -4.2638283; -11.704072, -0.26438934, -3.4838214; -12.711734, -0.66741705, -2.8424647; -13.571259, -0.8763371, -2.3419511; -13.138282, -0.20907259, -3.2320287\",\n  \"-0.0, 0.0, 0.0; 1.638188, -1.452936, 1.2941082; 5.091453, -6.9590306, 4.5842648; 5.6282997, -13.909302, 1.4508755; 6.647979, -15.117696, 3.520382; 6.903495, -14.545899, 4.6239214; -1.3045903, -1.7544075, 1.2384387; -3.8916616, -8.444102, 2.0494175; -8.239449, -13.105162, -2.3706942; -9.38605, -14.784463, -0.7177795; -9.193182, -14.748117, 0.54550993; -0.993687, 2.236481, -0.5191851; -2.549258, 4.1893682, -0.8459148; -4.412506, 5.906347, -1.1158798; -5.8874197, 6.504945, -1.0525186; -6.686749, 7.8475113, -0.77708644; -7.578004, 9.143117, -0.33782908; -2.6998441, 9.64006, -0.058294058; 1.7890899, 8.69094, 1.826361; 2.8718507, 8.230663, 4.9609585; 3.411376, 7.9866514, 6.5268073; 3.659287, 7.426058, 7.51503; 3.8374343, 7.07495, 8.365907; 3.8939855, 8.005882, 7.781558; -7.1810703, 3.6314354, -3.1812088; -7.3199983, -0.5647602, -5.776105; -10.231698, -0.32572013, -4.4249625; -11.687546, -0.20620026, -3.7493925; -12.748155, -0.56467825, -3.1699486; -13.646885, -0.737902, -2.7281108; -13.13554, -0.118679225, -3.6113086\",\n  \"-0.0, 0.0, 0.0; 1.640349, -1.4415605, 1.3040541; 5.030473, -6.9399767, 4.671803; 5.4479094, -13.861469, 1.4575713; 6.4231353, -15.100928, 3.5301287; 6.6905994, -14.575663, 4.653783; -1.3017206, -1.7497882, 1.247957; -3.8635626, -8.445491, 2.088891; -8.23147, -12.99396, -2.4276261; -9.501983, -14.68581, -0.8815614; -9.39444, -14.723702, 0.3917879; -1.0050555, 2.227676, -0.53491795; -2.5751655, 4.1659513, -0.8786702; -4.4533644, 5.863618, -1.1665732; -5.9311724, 6.455389, -1.1066097; -6.736705, 7.7950397, -0.83507824; -7.6360555, 9.087421, -0.4028813; -2.7775843, 9.621007, -0.13404989; 1.7600548, 8.674295, 1.6314112; 3.0460176, 8.3138895, 4.701645; 3.6869931, 8.119788, 6.235916; 4.0312543, 7.581312, 7.207429; 4.2914033, 7.2489824, 8.044617; 4.2850027, 8.16803, 7.4391365; -7.1958275, 3.5473895, -3.2207727; -7.1400437, -0.7164655, -5.7061853; -10.131714, -0.333059, -4.582073; -11.627547, -0.14135617, -4.0200176; -12.740515, -0.45126203, -3.5156226; -13.676474, -0.58579886, -3.1430306; -13.079528, -0.018831551, -4.0074105\",\n  \"-0.0, 0.0, 0.0; 1.6430953, -1.4278402, 1.3156401; 4.963004, -6.9184375, 4.7651033; 5.2638626, -13.808044, 1.4703486; 6.1929183, -15.074482, 3.5478008; 6.4675274, -14.589791, 4.687846; -1.2980644, -1.7445538, 1.2590443; -3.834618, -8.447168, 2.1213045; -8.207714, -12.88352, -2.5004845; -9.597002, -14.5819235, -1.0679418; -9.581914, -14.691922, 0.20567214; -1.013787, 2.2198987, -0.550545; -2.5969794, 4.1440425, -0.91316825; -4.491244, 5.8196335, -1.2242117; -5.971526, 6.405749, -1.1700177; -6.7816987, 7.7435093, -0.9030117; -7.687862, 9.0336, -0.4782625; -2.8580399, 9.603417, -0.22025001; 1.7236929, 8.642573, 1.4191982; 3.1888351, 8.386453, 4.4188128; 3.9192758, 8.244502, 5.918419; 4.3456206, 7.7312827, 6.8708606; 4.6754317, 7.4204164, 7.691586; 4.6119018, 8.325049, 7.067968; -7.2016954, 3.4564593, -3.267398; -6.9517136, -0.8781378, -5.6146564; -9.999775, -0.3417548, -4.7301593; -11.523804, -0.07356298, -4.2879105; -12.687468, -0.3283592, -3.8754556; -13.657612, -0.4196685, -3.5866191; -12.966484, 0.08377665, -4.419586\",\n  \"-0.0, 0.0, 0.0; 1.6450697, -1.4148526, 1.3271537; 4.890492, -6.8991895, 4.8565354; 5.0785713, -13.751909, 1.4775615; 5.962113, -15.041021, 3.5609152; 6.2415037, -14.5952635, 4.7155924; -1.2953134, -1.7386017, 1.2700623; -3.8051708, -8.448479, 2.1536992; -8.174094, -12.779087, -2.5711777; -9.664146, -14.478354, -1.2448641; -9.734797, -14.6498785, 0.02004993; -1.0220228, 2.2124045, -0.5652871; -2.6182117, 4.1221166, -0.9467356; -4.528529, 5.774613, -1.282198; -6.0107775, 6.3561344, -1.2324262; -6.824209, 7.69279, -0.9698339; -7.736042, 8.9814625, -0.552986; -2.9387767, 9.585212, -0.31042773; 1.6855414, 8.606919, 1.1935368; 3.3082209, 8.447814, 4.1178355; 4.117368, 8.354405, 5.580391; 4.612576, 7.875086, 6.5170507; 4.9999833, 7.592914, 7.3228416; 4.8829665, 8.477634, 6.678735; -7.206064, 3.362701, -3.3117886; -6.767751, -1.0402131, -5.4988136; -9.846048, -0.35634655, -4.852956; -11.385196, -0.014414281, -4.530028; -12.595308, -0.19653359, -4.2273517; -13.5929165, -0.23077084, -4.0361743; -12.798144, 0.19431444, -4.818855\",\n  \"-0.0, 0.0, 0.0; 1.6480223, -1.4010174, 1.3381226; 4.812436, -6.880454, 4.9477644; 4.891608, -13.692888, 1.4840834; 5.728555, -15.001598, 3.5744462; 6.009075, -14.588932, 4.7410884; -1.2913369, -1.7338533, 1.2805595; -3.778943, -8.449684, 2.1817162; -8.135821, -12.680101, -2.6439755; -9.706956, -14.371536, -1.404032; -9.848337, -14.587238, -0.15187252; -1.0291317, 2.205154, -0.580516; -2.6369221, 4.100814, -0.9827678; -4.562415, 5.729805, -1.3453376; -6.046375, 6.3073807, -1.3008978; -6.8617725, 7.6436744, -1.0425954; -7.7776666, 8.931815, -0.63307285; -3.0153582, 9.567416, -0.41170514; 1.6455677, 8.566909, 0.95870996; 3.4081569, 8.497897, 3.8044863; 4.2872357, 8.449592, 5.228354; 4.8452716, 8.010183, 6.1491284; 5.28459, 7.7616773, 6.9392223; 5.1144967, 8.62191, 6.274118; -7.2068768, 3.2673404, -3.3575115; -6.5931325, -1.2015855, -5.3607264; -9.680398, -0.3840558, -4.9592805; -11.224029, 0.024709463, -4.7585583; -12.46657, -0.07608097, -4.5712466; -13.478488, -0.047134504, -4.4810963; -12.587214, 0.28855973, -5.2007413\",\n  \"-0.0, 0.0, 0.0; 1.6499863, -1.3878502, 1.3493761; 4.730412, -6.8634815, 5.0366096; 4.7040496, -13.6320915, 1.4872675; 5.4945, -14.95639, 3.5858955; 5.77407, -14.57354, 4.762885; -1.2885326, -1.7279422, 1.291329; -3.7575488, -8.448788, 2.2061172; -8.0893955, -12.59105, -2.7175894; -9.726613, -14.272561, -1.5518652; -9.921077, -14.514492, -0.31167448; -1.0358471, 2.1978977, -0.59588695; -2.654831, 4.079208, -1.0200181; -4.594576, 5.684308, -1.4119804; -6.0804405, 6.257216, -1.3709103; -6.896985, 7.5936947, -1.1172274; -7.8157444, 8.882548, -0.71645796; -3.0895853, 9.548658, -0.5208483; 1.6019516, 8.525387, 0.7224076; 3.4895892, 8.542373, 3.4876316; 4.431165, 8.537145, 4.871799; 5.0520444, 8.136636, 5.7698026; 5.5437417, 7.921007, 6.5383997; 5.320904, 8.755193, 5.8559237; -7.20552, 3.170277, -3.4040573; -6.433256, -1.3599434, -5.20449; -9.507719, -0.41894072, -5.0531363; -11.044949, 0.051562518, -4.9774585; -12.303219, 0.037614238, -4.9018755; -13.315032, 0.13319951, -4.9082685; -12.342569, 0.37107924, -5.558406\",\n  \"-0.0, 0.0, 0.0; 1.651809, -1.373316, 1.3619578; 4.650072, -6.8435564, 5.1241574; 4.5223794, -13.566162, 1.4905822; 5.2655206, -14.90324, 3.598373; 5.5416594, -14.5450735, 4.7839117; -1.2858213, -1.7209073, 1.3033698; -3.7361908, -8.447754, 2.2241702; -8.033789, -12.513508, -2.7924438; -9.726804, -14.183262, -1.6913103; -9.957352, -14.434578, -0.45919526; -1.0414824, 2.191366, -0.60995454; -2.670358, 4.05925, -1.0550369; -4.6231837, 5.6405582, -1.4775622; -6.1102524, 6.2104964, -1.438816; -6.926302, 7.548076, -1.1893809; -7.8464146, 8.838592, -0.7971559; -3.1577406, 9.5309105, -0.6349768; 1.5568318, 8.480539, 0.49321288; 3.5601313, 8.579694, 3.1740499; 4.559509, 8.615658, 4.516608; 5.2371645, 8.24916, 5.387683; 5.7765884, 8.062355, 6.1314096; 5.5061846, 8.871717, 5.436348; -7.2023597, 3.0745356, -3.4445732; -6.279953, -1.514168, -5.011038; -9.319092, -0.45931923, -5.118969; -10.838659, 0.068104565, -5.172934; -12.096354, 0.139328, -5.2207346; -13.093931, 0.29900777, -5.3315754; -12.050207, 0.43506426, -5.8946714\",\n  \"-0.0, 0.0, 0.0; 1.6534287, -1.3598702, 1.3734355; 4.5696597, -6.825491, 5.206168; 4.34431, -13.500113, 1.4898186; 5.0415473, -14.848358, 3.6061623; 5.313541, -14.512678, 4.799216; -1.283365, -1.7143749, 1.3143529; -3.7157686, -8.448187, 2.231867; -7.9722824, -12.449245, -2.8710468; -9.711267, -14.108486, -1.8271472; -9.967239, -14.361166, -0.60034215; -1.0483129, 2.1832075, -0.62726295; -2.6871164, 4.036997, -1.0942868; -4.651106, 5.597089, -1.5431185; -6.1393456, 6.164032, -1.5053978; -6.954076, 7.50323, -1.2603709; -7.8737764, 8.796428, -0.8760934; -3.2154756, 9.510703, -0.75895965; 1.5203323, 8.43265, 0.247625; 3.634547, 8.593145, 2.8388147; 4.6892476, 8.659908, 4.137145; 5.4091935, 8.325095, 4.9867845; 5.9861574, 8.16572, 5.7083907; 5.687227, 8.94557, 4.9916134; -7.2089443, 2.982058, -3.4731002; -6.1517296, -1.6594753, -4.776677; -9.132481, -0.5016898, -5.144614; -10.622854, 0.077203214, -5.3285813; -11.859847, 0.224017, -5.522095; -12.825897, 0.43868127, -5.753632; -11.720057, 0.47350717, -6.201798\",\n  \"-0.0, 0.0, 0.0; 1.6557057, -1.3460805, 1.3842342; 4.4951334, -6.809355, 5.277502; 4.171425, -13.432524, 1.4773126; 4.8235126, -14.789206, 3.6026397; 5.0911384, -14.475124, 4.802543; -1.2800671, -1.7088772, 1.3246881; -3.697348, -8.449664, 2.2308822; -7.90782, -12.394135, -2.9536319; -9.683968, -14.04052, -1.9528357; -9.974474, -14.304002, -0.7360356; -1.0568886, 2.173437, -0.6465075; -2.7051415, 4.0133615, -1.1346297; -4.677347, 5.5569015, -1.6041834; -6.166428, 6.121668, -1.5670146; -6.9786687, 7.462927, -1.3250135; -7.8956237, 8.759488, -0.94553936; -3.2572997, 9.489515, -0.88980734; 1.4993246, 8.382675, -0.022213936; 3.7249327, 8.583476, 2.4710314; 4.835104, 8.670547, 3.7210116; 5.5844407, 8.365694, 4.556397; 6.1898885, 8.232535, 5.25975; 5.8795104, 8.976547, 4.510479; -7.228519, 2.8984082, -3.4829297; -6.076317, -1.7897432, -4.509826; -8.975212, -0.5335913, -5.1256256; -10.424659, 0.094483376, -5.4335246; -11.623693, 0.29710412, -5.7658086; -12.54564, 0.5499055, -6.110845; -11.399491, 0.49492034, -6.4398885\",\n  \"-0.0, 0.0, 0.0; 1.6575752, -1.3325497, 1.3950465; 4.423264, -6.797865, 5.33821; 4.002727, -13.36735, 1.4552197; 4.611601, -14.731161, 3.5887868; 4.874452, -14.433948, 4.79403; -1.2772402, -1.7029303, 1.3350345; -3.682414, -8.450465, 2.2230406; -7.8310547, -12.350799, -3.044056; -9.637655, -13.981148, -2.071929; -9.971814, -14.261391, -0.8701713; -1.0632586, 2.1641583, -0.66686946; -2.7204647, 3.9898825, -1.177479; -4.702386, 5.5141726, -1.6685176; -6.1916275, 6.078266, -1.627749; -6.999586, 7.4224396, -1.3875912; -7.912533, 8.723173, -1.0127614; -3.301539, 9.466501, -1.0289564; 1.4715204, 8.322317, -0.3133918; 3.808112, 8.557513, 2.0730176; 4.973552, 8.661985, 3.270242; 5.7467475, 8.381943, 4.0924673; 6.3764887, 8.270281, 4.7780046; 6.060068, 8.97771, 3.9965196; -7.244691, 2.8088293, -3.4915793; -6.042088, -1.919384, -4.2389693; -8.83843, -0.56773126, -5.084089; -10.236599, 0.10809612, -5.506648; -11.379925, 0.34399974, -5.982368; -12.244078, 0.6159073, -6.4430737; -11.073846, 0.48423344, -6.638441\",\n  \"-0.0, 0.0, 0.0; 1.6600285, -1.3188019, 1.405157; 4.354398, -6.789413, 5.390133; 3.8408842, -13.302454, 1.4241269; 4.40559, -14.673594, 3.5651314; 4.663539, -14.400512, 4.7771244; -1.2736527, -1.6979977, 1.3447098; -3.6687107, -8.451956, 2.2109623; -7.7417393, -12.315405, -3.1416368; -9.572385, -13.921362, -2.1738997; -9.953472, -14.217678, -0.9900969; -1.0692334, 2.1540992, -0.6895004; -2.7349362, 3.9656801, -1.2223525; -4.726417, 5.4720387, -1.7297759; -6.2154264, 6.036423, -1.6847762; -7.018342, 7.38387, -1.4460561; -7.926225, 8.689049, -1.074391; -3.3398094, 9.441488, -1.170217; 1.444572, 8.254339, -0.6191678; 3.8863, 8.516119, 1.6566532; 5.1041126, 8.634123, 2.7992468; 5.89805, 8.3724165, 3.6076293; 6.5497956, 8.276333, 4.274712; 6.2300053, 8.94809, 3.4636803; -7.266697, 2.7227716, -3.4888263; -6.031727, -2.0333304, -3.9527113; -8.712975, -0.5950736, -5.0029726; -10.053597, 0.12405342, -5.5281014; -11.122122, 0.38164723, -6.145397; -11.913231, 0.6623553, -6.7183657; -10.738064, 0.459242, -6.7701054\",\n  \"-0.0, 0.0, 0.0; 1.6623622, -1.3055176, 1.4147704; 4.2829504, -6.7850018, 5.4365892; 3.6846476, -13.239433, 1.3875217; 4.2042565, -14.61642, 3.5361805; 4.455681, -14.36854, 4.754942; -1.2701914, -1.6932731, 1.35391; -3.6519456, -8.455099, 2.1951; -7.6379585, -12.287597, -3.244549; -9.489978, -13.86487, -2.2703278; -9.913268, -14.17051, -1.1033534; -1.0747879, 2.1429768, -0.7150495; -2.7485807, 3.9401193, -1.2709451; -4.7491612, 5.430021, -1.7910035; -6.236994, 5.9969077, -1.7390598; -7.0336766, 7.3483124, -1.5018331; -7.935692, 8.658524, -1.133605; -3.3713846, 9.41395, -1.319455; 1.4167485, 8.177455, -0.9345565; 3.9539847, 8.459347, 1.2317524; 5.219387, 8.587679, 2.3202372; 6.031329, 8.337491, 3.1142554; 6.703019, 8.2507515, 3.7625704; 6.381735, 8.888678, 2.9252396; -7.294401, 2.6391885, -3.4758658; -6.04043, -2.1310446, -3.658282; -8.599624, -0.61734974, -4.8911552; -9.87922, 0.13949656, -5.5075893; -10.849896, 0.41141453, -6.264558; -11.549171, 0.69343984, -6.946041; -10.392204, 0.41830617, -6.842705\",\n  \"-0.0, 0.0, 0.0; 1.6642524, -1.2925181, 1.4244508; 4.219092, -6.782035, 5.47479; 3.5371518, -13.177018, 1.3454132; 4.0148554, -14.558692, 3.5007775; 4.2605567, -14.339965, 4.7262683; -1.2672576, -1.6880301, 1.3631746; -3.630714, -8.458811, 2.1836872; -7.524762, -12.263937, -3.3411226; -9.394776, -13.809818, -2.3510873; -9.848667, -14.114321, -1.1953708; -1.0805664, 2.1313894, -0.7405201; -2.762983, 3.9139414, -1.3169796; -4.773077, 5.388346, -1.8444691; -6.2586308, 5.960328, -1.783876; -7.0476217, 7.3163223, -1.5471302; -7.942541, 8.631779, -1.1802895; -3.399896, 9.384207, -1.4705853; 1.3849018, 8.09479, -1.2551805; 4.0121593, 8.387596, 0.7994994; 5.322443, 8.521687, 1.83279; 6.1479106, 8.272708, 2.6131246; 6.836266, 8.186217, 3.2437513; 6.5177364, 8.79534, 2.3842137; -7.3304834, 2.557786, -3.442391; -6.0653777, -2.212028, -3.3463397; -8.5029745, -0.637902, -4.739526; -9.721772, 0.14915925, -5.436118; -10.570294, 0.42565775, -6.3264613; -11.158525, 0.6997655, -7.108633; -10.047105, 0.35583565, -6.8414145\",\n  \"-0.0, 0.0, 0.0; 1.6663737, -1.2801759, 1.4330901; 4.158491, -6.7833385, 5.5039372; 3.394357, -13.11787, 1.2965136; 3.83313, -14.50338, 3.4576845; 4.073279, -14.311354, 4.6887383; -1.2640272, -1.6837497, 1.3714421; -3.6033244, -8.465027, 2.1743233; -7.399423, -12.246977, -3.4339383; -9.286745, -13.760395, -2.4267373; -9.765166, -14.057782, -1.2790904; -1.0849695, 2.1199553, -0.76644945; -2.7752142, 3.888514, -1.3627687; -4.794942, 5.348272, -1.8941792; -6.2776146, 5.9265957, -1.823983; -7.058097, 7.2875576, -1.5875399; -7.9450264, 8.608556, -1.2212105; -3.4234598, 9.353239, -1.6266146; 1.3493626, 8.003865, -1.5752306; 4.061942, 8.299772, 0.36494398; 5.4147816, 8.435753, 1.3415949; 6.2504168, 8.178122, 2.108178; 6.953229, 8.08313, 2.7213953; 6.6406436, 8.667613, 1.8427793; -7.3695316, 2.4799902, -3.3942463; -6.0929794, -2.2731998, -3.0221605; -8.417152, -0.6506063, -4.547325; -9.579239, 0.16068918, -5.309906; -10.313306, 0.431415, -6.2983418; -10.799807, 0.68933165, -7.15259; -9.749313, 0.28868836, -6.7514696\",\n  \"-0.0, 0.0, 0.0; 1.6688368, -1.268071, 1.4409645; 4.1026907, -6.7888775, 5.523157; 3.2583547, -13.061685, 1.2392812; 3.6600502, -14.450467, 3.4055552; 3.8946817, -14.292217, 4.642464; -1.2603455, -1.6803519, 1.3789773; -3.5696812, -8.472771, 2.174376; -7.2695894, -12.237325, -3.5093656; -9.171622, -13.713111, -2.474378; -9.675989, -14.004157, -1.3362541; -1.0901054, 2.108699, -0.7898563; -2.78889, 3.863274, -1.4029808; -4.8187404, 5.3085995, -1.9352715; -6.2964616, 5.89741, -1.8495543; -7.0680656, 7.263357, -1.6127198; -7.9483266, 8.588963, -1.2469473; -3.4484093, 9.319929, -1.7811849; 1.3049762, 7.907163, -1.8938878; 4.097218, 8.196132, -0.06911087; 5.489814, 8.329006, 0.8504185; 6.335983, 8.056923, 1.6002705; 7.053704, 7.9479628, 2.193573; 6.7445774, 8.50898, 1.2985884; -7.413162, 2.40435, -3.3281326; -6.1166186, -2.3142493, -2.6842031; -8.345993, -0.6550399, -4.308283; -9.460679, 0.17456275, -5.120322; -10.103923, 0.43506122, -6.1727147; -10.5109415, 0.6739682, -7.0728273; -9.522013, 0.22742224, -6.5752673\",\n  \"-0.0, 0.0, 0.0; 1.6724865, -1.2541248, 1.4489166; 4.047041, -6.7947035, 5.5392375; 3.12789, -13.007075, 1.1832995; 3.4943686, -14.398343, 3.3542178; 3.7228072, -14.274717, 4.596221; -1.2550232, -1.6780714, 1.3865873; -3.532469, -8.481463, 2.1801484; -7.1310406, -12.235873, -3.5749195; -9.051335, -13.677002, -2.5249243; -9.58376, -13.962561, -1.398248; -1.097172, 2.0968118, -0.8114235; -2.804316, 3.8380895, -1.4390655; -4.8422556, 5.2722206, -1.9707248; -6.3145905, 5.8720307, -1.8699145; -7.076976, 7.2430387, -1.6324683; -7.9496093, 8.573476, -1.2659644; -3.4677129, 9.284903, -1.9342401; 1.2579932, 7.8030787, -2.2084398; 4.1197796, 8.074862, -0.49197745; 5.5470753, 8.1995325, 0.37393075; 6.4041123, 7.9160266, 1.1070206; 7.1364913, 7.7948, 1.6796713; 6.82642, 8.3266535, 0.76737535; -7.461222, 2.3382323, -3.2507553; -6.1284776, -2.325044, -2.3350627; -8.287344, -0.6392989, -4.0257072; -9.366777, 0.20357221, -4.871027; -9.908635, 0.44734836, -5.9828343; -10.228636, 0.66336507, -6.9229836; -9.31164, 0.18488431, -6.3270607\",\n  \"-0.0, 0.0, 0.0; 1.6757478, -1.2401589, 1.4571458; 3.9867105, -6.8024836, 5.5543704; 2.9988065, -12.9543915, 1.1282334; 3.3312373, -14.347281, 3.3035874; 3.5524426, -14.258123, 4.5498447; -1.2501258, -1.6751986, 1.394463; -3.4953241, -8.488712, 2.193058; -6.990552, -12.239528, -3.6276703; -8.928892, -13.646992, -2.565241; -9.483541, -13.922035, -1.4466995; -1.1070318, 2.0846844, -0.8290869; -2.824229, 3.8118427, -1.4682126; -4.8698244, 5.2349687, -2.0000405; -6.337208, 5.8448477, -1.8880676; -7.0897164, 7.221281, -1.6505042; -7.95276, 8.557322, -1.2816832; -3.491412, 9.245548, -2.0869102; 1.1974494, 7.684034, -2.5106316; 4.121542, 7.9290447, -0.8983103; 5.579926, 8.040753, -0.08397061; 6.448075, 7.7512755, 0.6335452; 7.194323, 7.6216087, 1.1860883; 6.8783135, 8.118596, 0.25633723; -7.513054, 2.2735078, -3.161437; -6.1209016, -2.3123395, -1.9812837; -8.242682, -0.6063225, -3.698337; -9.303571, 0.24668592, -4.5568633; -9.715047, 0.4719758, -5.726942; -9.925176, 0.66522, -6.702363; -9.101597, 0.16512436, -5.9976854\",\n  \"-0.0, 0.0, 0.0; 1.6794754, -1.2252865, 1.4654127; 3.9190407, -6.810341, 5.571356; 2.871264, -12.903753, 1.0785742; 3.1726282, -14.296834, 3.2583272; 3.3862734, -14.235117, 4.507561; -1.2445138, -1.6727715, 1.4023738; -3.4567897, -8.495811, 2.211452; -6.8387947, -12.249275, -3.6740956; -8.795275, -13.625211, -2.6036468; -9.36762, -13.885533, -1.4905108; -1.1170089, 2.0737185, -0.84308755; -2.843841, 3.7878027, -1.4913851; -4.89653, 5.200097, -2.024754; -6.3583994, 5.820835, -1.9009539; -7.1009164, 7.2027497, -1.6637722; -7.9546413, 8.544431, -1.2937412; -3.515903, 9.205416, -2.2335868; 1.1291041, 7.55628, -2.788155; 4.109168, 7.7679462, -1.2767507; 5.595491, 7.863424, -0.51239425; 6.4722066, 7.57223, 0.1939233; 7.2293396, 7.4371595, 0.730122; 6.9066525, 7.896249, -0.21666527; -7.561283, 2.2143734, -3.0689259; -6.0895553, -2.2698796, -1.6245093; -8.206138, -0.55239546, -3.3365393; -9.264427, 0.30634475, -4.1925545; -9.553197, 0.50510514, -5.403446; -9.661527, 0.67133105, -6.4002295; -8.9295225, 0.16648847, -5.6038294\",\n  \"-0.0, 0.0, 0.0; 1.6824735, -1.2109126, 1.4738967; 3.8529248, -6.818427, 5.586338; 2.7480352, -12.854536, 1.0303302; 3.0199444, -14.247196, 3.2142212; 3.2257793, -14.213783, 4.465842; -1.2397954, -1.6694456, 1.410493; -3.4172106, -8.501565, 2.2373283; -6.6801395, -12.2603, -3.7117321; -8.655392, -13.603786, -2.6345623; -9.2506275, -13.85349, -1.5310398; -1.1306434, 2.061473, -0.8548622; -2.868248, 3.7625728, -1.5085526; -4.925354, 5.169065, -2.040234; -6.38179, 5.7999587, -1.9043279; -7.114624, 7.1871057, -1.6675737; -7.9582014, 8.534685, -1.2957058; -3.5347314, 9.162317, -2.3755167; 1.0590901, 7.414935, -3.043909; 4.0937595, 7.591228, -1.640474; 5.607385, 7.6695046, -0.9296134; 6.4898286, 7.37677, -0.23110831; 7.25508, 7.2360106, 0.2919408; 6.926609, 7.6569996, -0.670437; -7.619149, 2.1684945, -2.9599056; -6.047497, -2.1878097, -1.2530459; -8.19198, -0.47657704, -2.936374; -9.26422, 0.37903917, -3.778037; -9.471021, 0.56305486, -5.0078845; -9.512109, 0.7124098, -6.0123487; -8.849541, 0.19777316, -5.163172\",\n  \"-0.0, 0.0, 0.0; 1.6853273, -1.1977834, 1.481346; 3.7843356, -6.827004, 5.6012115; 2.6268735, -12.807091, 0.9847789; 2.873617, -14.199675, 3.171705; 3.0722256, -14.196089, 4.424933; -1.2352777, -1.666754, 1.4176219; -3.3768344, -8.507179, 2.2690651; -6.5172863, -12.268593, -3.7438753; -8.507824, -13.575523, -2.6499982; -9.127262, -13.817188, -1.5580667; -1.1454991, 2.049692, -0.8633706; -2.8942523, 3.738125, -1.5201652; -4.9548845, 5.1400585, -2.0502276; -6.4055767, 5.7812724, -1.9017663; -7.1277056, 7.174092, -1.6654218; -7.9596763, 8.528414, -1.2919073; -3.5538645, 9.116748, -2.5143375; 0.98019886, 7.259548, -3.286583; 4.0643725, 7.3997474, -1.9911509; 5.6027894, 7.460483, -1.3338096; 6.490443, 7.1655793, -0.64286005; 7.262866, 7.0183263, -0.13228834; 6.926814, 7.4024954, -1.1073673; -7.6778526, 2.1294186, -2.8422177; -5.987851, -2.0765336, -0.88908947; -8.195947, -0.39005506, -2.5141506; -9.299992, 0.45318377, -3.3266814; -9.486475, 0.6179524, -4.562492; -9.511027, 0.7490418, -5.5700417; -8.870459, 0.2374888, -4.702324\",\n  \"-0.0, 0.0, 0.0; 1.6874057, -1.1853645, 1.4889498; 3.717054, -6.8344784, 5.6163325; 2.5088143, -12.760988, 0.9441557; 2.7347453, -14.152621, 3.1339347; 2.9276779, -14.171016, 4.3879194; -1.2317638, -1.6631458, 1.4248986; -3.3366408, -8.511015, 2.3074086; -6.3506336, -12.275569, -3.7679594; -8.355137, -13.544975, -2.655552; -8.9969015, -13.777793, -1.5746479; -1.161877, 2.0377343, -0.8697674; -2.9227457, 3.7135987, -1.5263817; -4.986556, 5.112527, -2.052003; -6.4318094, 5.763539, -1.8934762; -7.1421824, 7.1623783, -1.6570604; -7.9604716, 8.524076, -1.2801548; -3.5758772, 9.068869, -2.6433232; 0.8909321, 7.0957823, -3.5138545; 4.0155115, 7.194888, -2.3150606; 5.574173, 7.235595, -1.7056109; 6.469797, 6.941143, -1.0248287; 7.2508307, 6.7891335, -0.52896225; 6.9010468, 7.1340137, -1.5138507; -7.7386284, 2.097219, -2.7151537; -5.9040904, -1.9391403, -0.5464854; -8.207747, -0.2926619, -2.0771685; -9.359573, 0.5305782, -2.842509; -9.553128, 0.660099, -4.081425; -9.583428, 0.7632928, -5.0920568; -8.935252, 0.2800009, -4.213851\",\n  \"-0.0, 0.0, 0.0; 1.6883405, -1.1738307, 1.497006; 3.6564236, -6.8413954, 5.628907; 2.395327, -12.715152, 0.90437317; 2.6034627, -14.105458, 3.096757; 2.7917068, -14.145699, 4.3509436; -1.2297708, -1.6579894, 1.4326081; -3.2949395, -8.513095, 2.3519835; -6.1836443, -12.280096, -3.7824435; -8.198677, -13.509064, -2.6439548; -8.86049, -13.732814, -1.5732732; -1.1803364, 2.0247655, -0.8751823; -2.9548, 3.6878057, -1.5277925; -5.0215054, 5.086181, -2.0434146; -6.4608903, 5.747186, -1.8732727; -7.160259, 7.1516514, -1.6373999; -7.9654894, 8.520305, -1.2575737; -3.6014147, 9.017805, -2.7631278; 0.7880626, 6.9136295, -3.716131; 3.9448946, 6.96973, -2.6020436; 5.5197086, 6.989518, -2.0345216; 6.4278607, 6.700715, -1.3680671; 7.220257, 6.5473733, -0.89099467; 6.8478384, 6.845504, -1.8828207; -7.804496, 2.072655, -2.5719733; -5.8106613, -1.7790191, -0.21611333; -8.229427, -0.18246365, -1.6165788; -9.43881, 0.6158127, -2.316809; -9.729354, 0.69634175, -3.54084; -9.839127, 0.76392376, -4.54897; -9.109664, 0.33323443, -3.7079353\",\n  \"-0.0, 0.0, 0.0; 1.6889961, -1.1608772, 1.5063381; 3.5971913, -6.849145, 5.6378813; 2.2825818, -12.671255, 0.86426353; 2.476296, -14.061644, 3.0579166; 2.660791, -14.125378, 4.3116865; -1.2280196, -1.6515342, 1.4415385; -3.253037, -8.5134, 2.3990073; -6.018579, -12.283749, -3.7898827; -8.040632, -13.465526, -2.614478; -8.720785, -13.67907, -1.5532473; -1.2008898, 2.0101137, -0.88097686; -2.9903464, 3.6594164, -1.5274813; -5.0600944, 5.058247, -2.0294857; -6.4934053, 5.729463, -1.848397; -7.181519, 7.1394444, -1.61233; -7.972763, 8.514794, -1.2273324; -3.6336179, 8.96155, -2.879022; 0.67032766, 6.7112994, -3.8868456; 3.8541865, 6.7238274, -2.8510795; 5.442548, 6.7224774, -2.32229; 6.3674226, 6.447413, -1.6732478; 7.173291, 6.2988725, -1.2177094; 6.770517, 6.543326, -2.2123508; -7.8727074, 2.0509996, -2.4186156; -5.7402554, -1.6170282, 0.1031034; -8.298187, -0.087978125, -1.1133302; -9.577151, 0.6765464, -1.7215459; -9.961855, 0.7128825, -2.9214776; -10.149587, 0.74531883, -3.9198003; -9.352435, 0.35035554, -3.1238723\",\n  \"-0.0, 0.0, 0.0; 1.6901634, -1.1457399, 1.5165839; 3.5380797, -6.853413, 5.648766; 2.1744456, -12.6265545, 0.8296447; 2.354741, -14.016595, 3.0246615; 2.5356252, -14.099405, 4.2778425; -1.2254043, -1.6448756, 1.4513441; -3.2168856, -8.510612, 2.450498; -5.8481784, -12.285707, -3.7937841; -7.8713846, -13.414061, -2.5689049; -8.5708, -13.619574, -1.5186658; -1.2175306, 1.9973125, -0.8872295; -3.0199237, 3.6349044, -1.5275384; -5.0941935, 5.0320826, -2.0152755; -6.5227585, 5.710228, -1.8228536; -7.200009, 7.1254516, -1.5867418; -7.9769516, 8.507839, -1.1978422; -3.6702812, 8.90994, -2.978092; 0.5445845, 6.510413, -4.0175467; 3.7482898, 6.471001, -3.0456178; 5.3465867, 6.444355, -2.5483766; 6.288168, 6.189969, -1.9151134; 7.1067057, 6.051534, -1.4794121; 6.6729116, 6.237053, -2.473747; -7.926671, 2.029985, -2.2802894; -5.7117376, -1.4546232, 0.4238603; -8.417069, -0.018349528, -0.565593; -9.769733, 0.6997866, -1.0603186; -10.251208, 0.70116746, -2.2253647; -10.5198965, 0.70043105, -3.2055433; -9.67085, 0.31236625, -2.4615843\",\n  \"-0.0, 0.0, 0.0; 1.6924417, -1.1273465, 1.527786; 3.4814916, -6.8553743, 5.657707; 2.0723443, -12.583355, 0.79796076; 2.2367191, -13.973571, 2.994116; 2.4120317, -14.079177, 4.2463746; -1.2210065, -1.6386408, 1.4620639; -3.1887264, -8.504737, 2.5048676; -5.672445, -12.288116, -3.7945995; -7.6978436, -13.367784, -2.5301023; -8.414531, -13.564082, -1.4897915; -1.2297196, 1.9866041, -0.8944317; -3.0415378, 3.6157985, -1.5295408; -5.1200323, 5.0113106, -2.0038798; -6.545533, 5.6928983, -1.8011729; -7.212916, 7.1127615, -1.5648189; -7.9756207, 8.502106, -1.1725402; -3.701903, 8.866543, -3.06143; 0.4228313, 6.3205843, -4.1140203; 3.6397576, 6.217769, -3.1916642; 5.244653, 6.160099, -2.7189095; 6.198559, 5.925558, -2.096524; 7.0263424, 5.7961354, -1.6757771; 6.567156, 5.9233193, -2.66788; -7.966335, 2.0148387, -2.1634753; -5.7278943, -1.279655, 0.7514076; -8.568961, 0.038389802, 0.008562505; -9.989492, 0.6974114, -0.36286056; -10.659834, 0.6817026, -1.4303567; -11.089724, 0.65752566, -2.3509839; -10.151427, 0.24557537, -1.7387376\",\n  \"-0.0, 0.0, 0.0; 1.6959065, -1.1059781, 1.5395167; 3.420807, -6.854694, 5.667983; 1.9745271, -12.54129, 0.77068853; 2.121671, -13.931995, 2.9677563; 2.2899308, -14.060257, 4.2188663; -1.2146766, -1.633281, 1.4732908; -3.168795, -8.496047, 2.5625615; -5.494201, -12.287887, -3.7920084; -7.524498, -13.329547, -2.5037098; -8.248405, -13.508771, -1.4653188; -1.2398573, 1.9763926, -0.9030175; -3.0579085, 3.6000943, -1.5343695; -5.138007, 4.997318, -1.996481; -6.5616636, 5.680061, -1.7848955; -7.220173, 7.1039977, -1.5481586; -7.96873, 8.500144, -1.1527903; -3.7212374, 8.83012, -3.1343307; 0.32589507, 6.165139, -4.193519; 3.5453854, 5.9691114, -3.2955313; 5.151469, 5.8654065, -2.834823; 6.113129, 5.647271, -2.218433; 6.9467945, 5.52389, -1.8076006; 6.4682746, 5.596704, -2.7960403; -7.998705, 2.0111208, -2.065652; -5.778454, -1.0811143, 1.0759106; -8.740991, 0.0820812, 0.5952121; -10.222258, 0.66367733, 0.3548637; -11.108776, 0.6504186, -0.54127294; -11.729878, 0.61545223, -1.344985; -10.71365, 0.1558691, -0.9195303\",\n  \"-0.0, 0.0, 0.0; 1.6998342, -1.0846784, 1.5503017; 3.3665128, -6.852216, 5.6764307; 1.8844801, -12.502106, 0.7474432; 2.0142117, -13.893705, 2.9450417; 2.1748548, -14.045156, 4.1945596; -1.2075646, -1.6292076, 1.4836112; -3.1516874, -8.486325, 2.6250863; -5.320814, -12.287423, -3.779027; -7.3587346, -13.297772, -2.4778938; -8.093137, -13.464428, -1.4447923; -1.2483706, 1.9669808, -0.91179585; -3.0715094, 3.5863447, -1.5396085; -5.153202, 4.985482, -1.988563; -6.5746913, 5.669282, -1.7660978; -7.223361, 7.097667, -1.5289952; -7.9568133, 8.501282, -1.1317666; -3.7397008, 8.7964735, -3.201276; 0.23442745, 6.019148, -4.2482004; 3.4506633, 5.72688, -3.3648353; 5.0550256, 5.5756116, -2.9113464; 6.022367, 5.3712425, -2.2991428; 6.8602896, 5.251753, -1.8958917; 6.364914, 5.2743, -2.8784347; -8.026064, 2.010228, -1.97184; -5.856165, -0.8824153, 1.3874763; -8.919919, 0.091461, 1.2271795; -10.451795, 0.57839805, 1.1470315; -11.540937, 0.59175336, 0.5124121; -12.352694, 0.5609866, -0.09836578; -11.305124, 0.025370121, 0.10328516\",\n  \"-0.0, 0.0, 0.0; 1.7031025, -1.0636735, 1.5612302; 3.3144994, -6.8495865, 5.683591; 1.7978604, -12.466183, 0.7271557; 1.9145676, -13.857523, 2.9256485; 2.0699074, -14.025313, 4.173749; -1.2012185, -1.6243341, 1.4940696; -3.1404154, -8.473146, 2.692369; -5.1534233, -12.283655, -3.756967; -7.197673, -13.266444, -2.4446995; -7.947187, -13.42779, -1.4216571; -1.2566823, 1.9571598, -0.9214604; -3.0840106, 3.5732074, -1.5456282; -5.1655674, 4.9771028, -1.9801261; -6.5847816, 5.661767, -1.7460939; -7.2230043, 7.0947456, -1.5083575; -7.9405646, 8.506196, -1.109868; -3.7524204, 8.766454, -3.2592466; 0.15448642, 5.884753, -4.2766757; 3.3628037, 5.4948, -3.4022822; 4.9631243, 5.295224, -2.95322; 5.9354315, 5.1048856, -2.3443692; 6.7768936, 4.9897757, -1.9472613; 6.2660623, 4.9650064, -2.9218044; -8.051876, 2.0163734, -1.8849673; -5.9644012, -0.69240093, 1.6739426; -9.082792, 0.066489756, 1.9197913; -10.641986, 0.44593436, 2.0427158; -11.863922, 0.50804704, 1.739125; -12.817314, 0.49945667, 1.3871124; -11.797588, -0.12048641, 1.359218\",\n  \"-0.0, 0.0, 0.0; 1.7052151, -1.04456, 1.5717934; 3.2643583, -6.846976, 5.691052; 1.717316, -12.433653, 0.71025896; 1.8176914, -13.82527, 2.9093828; 1.9652534, -14.013364, 4.155531; -1.1965053, -1.6184721, 1.504179; -3.137989, -8.455221, 2.7659824; -4.9931784, -12.277968, -3.723316; -7.047966, -13.239908, -2.4120598; -7.816459, -13.399988, -1.4029948; -1.2646148, 1.9474089, -0.93121517; -3.095128, 3.5609422, -1.5525484; -5.1744595, 4.972033, -1.9742045; -6.589982, 5.6608844, -1.73031; -7.217878, 7.0982857, -1.4917741; -7.92105, 8.516441, -1.0914489; -3.757552, 8.73852, -3.315197; 0.0905385, 5.7628946, -4.2853208; 3.2857358, 5.277894, -3.4104404; 4.879414, 5.0313077, -2.9611104; 5.854067, 4.8487387, -2.353632; 6.6972103, 4.732945, -1.9603062; 6.173271, 4.6674714, -2.9259653; -8.075981, 2.0294735, -1.8060895; -6.101631, -0.5156207, 1.9336015; -9.192769, 0.028227866, 2.6476135; -10.738337, 0.30015153, 3.0046172; -11.989883, 0.42519146, 3.0891643; -13.005177, 0.45435402, 3.0534992; -12.073182, -0.24225774, 2.7869143\",\n  \"-0.0, 0.0, 0.0; 1.7053201, -1.028075, 1.5825119; 3.218874, -6.84531, 5.6978703; 1.6420599, -12.4065075, 0.6979356; 1.7286696, -13.797679, 2.8979263; 1.8703802, -13.99883, 4.1427135; -1.1947584, -1.6101762, 1.514436; -3.1451263, -8.431118, 2.8461518; -4.844401, -12.270556, -3.6759105; -6.911499, -13.213848, -2.3704677; -7.7031894, -13.377275, -1.3800449; -1.2730341, 1.9363818, -0.9426687; -3.1056232, 3.5480542, -1.562711; -5.1788015, 4.971548, -1.9728155; -6.589589, 5.6669855, -1.7203276; -7.2071342, 7.1085906, -1.4801464; -7.8964453, 8.532679, -1.0767858; -3.749104, 8.711505, -3.3731735; 0.049203157, 5.654376, -4.2842765; 3.2282307, 5.0824747, -3.403005; 4.8137507, 4.7928977, -2.950475; 5.7873845, 4.606134, -2.3426378; 6.6298213, 4.480467, -1.9508317; 6.0950356, 4.387669, -2.9082704; -8.101575, 2.0549457, -1.7349514; -6.254755, -0.33101487, 2.1711078; -9.224945, 0.009407371, 3.3639212; -10.710037, 0.17961939, 3.9603288; -11.874771, 0.36129555, 4.40703; -12.852067, 0.4266169, 4.6782684; -12.051514, -0.32871747, 4.216172\",\n  \"-0.0, 0.0, 0.0; 1.7047012, -1.0117743, 1.5936452; 3.1709533, -6.842675, 5.706789; 1.5707684, -12.382425, 0.6904979; 1.6390653, -13.77459, 2.8905053; 1.7719715, -13.99216, 4.133501; -1.1939948, -1.6006591, 1.5250895; -3.1648717, -8.40157, 2.927194; -4.7065353, -12.2614355, -3.6219153; -6.787509, -13.188108, -2.3266544; -7.6126075, -13.366838, -1.3666087; -1.280199, 1.9254088, -0.95535636; -3.112871, 3.535953, -1.5780797; -5.1774645, 4.9731236, -1.9837693; -6.5814185, 5.6797643, -1.7243925; -7.188208, 7.125701, -1.4828378; -7.8658357, 8.554804, -1.0774193; -3.7286694, 8.686539, -3.4342365; 0.031379223, 5.5636225, -4.27846; 3.1900349, 4.91306, -3.3786883; 4.7652664, 4.5845046, -2.9169421; 5.732937, 4.3840637, -2.3039603; 6.5712123, 4.242057, -1.908825; 6.031662, 4.136255, -2.8622334; -8.122733, 2.0843265, -1.6905222; -6.415616, -0.13451481, 2.3743691; -9.189002, 0.024335906, 4.0003505; -10.575694, 0.10376096, 4.81334; -11.574236, 0.3461176, 5.5436344; -12.440242, 0.4541949, 6.064496; -11.795127, -0.3532729, 5.467193\",\n  \"-0.0, 0.0, 0.0; 1.7026397, -0.9975263, 1.6047922; 3.1253314, -6.8412695, 5.715007; 1.5035106, -12.362921, 0.6857252; 1.5520847, -13.755655, 2.8858955; 1.675498, -13.988171, 4.127163; -1.1954501, -1.5893333, 1.5357572; -3.1956947, -8.367192, 3.0062292; -4.580306, -12.252004, -3.563186; -6.679018, -13.166839, -2.288289; -7.54229, -13.367363, -1.366893; -1.2863047, 1.9137992, -0.97036463; -3.1173713, 3.5242445, -1.598046; -5.1704435, 4.978686, -2.0006433; -6.5678463, 5.695508, -1.7339302; -7.163348, 7.1462145, -1.4928842; -7.828403, 8.581661, -1.089063; -3.6954703, 8.664701, -3.4939816; 0.051278353, 5.5113044, -4.2821712; 3.174922, 4.7602973, -3.339428; 4.73244, 4.3817143, -2.8563907; 5.6929684, 4.1651697, -2.23768; 6.5260644, 4.0053186, -1.8384273; 5.9824843, 3.8913314, -2.7885978; -8.14227, 2.12243, -1.6603491; -6.5898952, 0.056736946, 2.544873; -9.093459, 0.12118776, 4.5669346; -10.34524, 0.15341271, 5.5779643; -11.12196, 0.42189783, 6.5338793; -11.825167, 0.5506401, 7.2562847; -11.3606825, -0.27580202, 6.5308905\",\n  \"-0.0, 0.0, 0.0; 1.6985086, -0.98560464, 1.6164935; 3.0778193, -6.8418536, 5.723695; 1.4389979, -12.347779, 0.6826978; 1.4680438, -13.740266, 2.8833697; 1.5822704, -13.983702, 4.123422; -1.2000778, -1.5749203, 1.5469555; -3.2340283, -8.329549, 3.0768843; -4.471849, -12.239686, -3.5067887; -6.584546, -13.1457405, -2.2488337; -7.4839964, -13.372602, -1.3690935; -1.2936038, 1.9011515, -0.98540664; -3.1228828, 3.5114331, -1.618695; -5.161475, 4.986221, -2.0208542; -6.5514297, 5.7145586, -1.7465292; -7.1356235, 7.1702538, -1.5079014; -7.78893, 8.612431, -1.1089079; -3.6530185, 8.643802, -3.5502245; 0.09505248, 5.4769764, -4.2758045; 3.1818388, 4.6355867, -3.2890222; 4.720705, 4.211879, -2.784171; 5.6602764, 3.9742455, -2.1414855; 6.479046, 3.7940369, -1.7217888; 5.952656, 3.6831746, -2.681955; -8.163716, 2.1668067, -1.6424272; -6.7806215, 0.22781503, 2.680559; -8.965252, 0.2686048, 5.044126; -10.057565, 0.28900024, 6.225909; -10.5914135, 0.5685545, 7.3331614; -11.111576, 0.7107385, 8.194648; -10.857419, -0.11800265, 7.3739524\",\n  \"-0.0, 0.0, 0.0; 1.6937468, -0.97573763, 1.6274388; 3.033646, -6.8435283, 5.7312117; 1.376563, -12.336206, 0.68174124; 1.3829045, -13.729288, 2.882219; 1.4854568, -13.989204, 4.1199446; -1.205822, -1.5601386, 1.5574312; -3.2809665, -8.290567, 3.1378553; -4.3781977, -12.226078, -3.455623; -6.5018682, -13.127851, -2.2131634; -7.432017, -13.381111, -1.3734597; -1.2989794, 1.8887818, -1.0019828; -3.1250057, 3.499864, -1.6425793; -5.1479316, 4.996106, -2.0446026; -6.5301094, 5.7369075, -1.764421; -7.1030893, 7.1978407, -1.5306622; -7.745512, 8.647003, -1.1393821; -3.6033373, 8.627315, -3.6005177; 0.15063882, 5.450874, -4.2494974; 3.1964228, 4.547927, -3.1922312; 4.714438, 4.093312, -2.6523533; 5.627164, 3.8296576, -1.9817362; 6.427773, 3.6284807, -1.5372627; 5.9319925, 3.5395918, -2.5158315; -8.181217, 2.2140696, -1.6381564; -6.9625416, 0.36319685, 2.7720528; -8.845822, 0.46195662, 5.3805428; -9.787459, 0.5113346, 6.6847878; -10.081787, 0.7827112, 7.8801446; -10.422031, 0.93045264, 8.826374; -10.41487, 0.12779987, 7.942832\",\n  \"-0.0, 0.0, 0.0; 1.6885617, -0.96615523, 1.6385059; 2.9914794, -6.8450904, 5.7382345; 1.317432, -12.325802, 0.6813612; 1.3020942, -13.71862, 2.8819616; 1.3945587, -13.987857, 4.1184893; -1.212208, -1.5445035, 1.5680218; -3.3335972, -8.251168, 3.1875873; -4.301785, -12.2086115, -3.412971; -6.431685, -13.111361, -2.181937; -7.379363, -13.380776, -1.3672343; -1.3021072, 1.8777839, -1.0184592; -3.1232991, 3.4911773, -1.6669531; -5.1299686, 5.008811, -2.0702603; -6.505151, 5.760743, -1.7853469; -7.0667706, 7.2270994, -1.5580668; -7.6977706, 8.683926, -1.1767886; -3.5478466, 8.615478, -3.64543; 0.21441841, 5.433072, -4.2119465; 3.2148106, 4.497113, -3.0580163; 4.7096643, 4.025714, -2.470047; 5.5923223, 3.7315998, -1.772393; 6.3726673, 3.5087361, -1.3029282; 5.9170494, 3.4581177, -2.3035011; -8.193882, 2.2634785, -1.6444261; -7.097899, 0.431862, 2.8058379; -8.67601, 0.68511283, 5.599786; -9.465066, 0.8117389, 6.9967575; -9.530438, 1.054834, 8.231983; -9.69893, 1.200539, 9.22361; -9.967042, 0.4672172, 8.320668\",\n  \"-0.0, 0.0, 0.0; 1.6832594, -0.95675015, 1.6494441; 2.949822, -6.8462296, 5.74543; 1.262797, -12.3153305, 0.68030643; 1.2247851, -13.709579, 2.8797257; 1.3052672, -13.993847, 4.1137247; -1.2187932, -1.5285766, 1.5784894; -3.3932402, -8.210071, 3.2313843; -4.2396693, -12.188613, -3.3732262; -6.378248, -13.101896, -2.165224; -7.333456, -13.374343, -1.360382; -1.3043399, 1.8679489, -1.033576; -3.1185102, 3.4860828, -1.6898924; -5.1054173, 5.0286126, -2.0965784; -6.474391, 5.788932, -1.8041229; -7.0269313, 7.259933, -1.5847373; -7.6477933, 8.724494, -1.2166743; -3.4786592, 8.604207, -3.6969218; 0.29461384, 5.4201646, -4.1739645; 3.248547, 4.47135, -2.9154105; 4.7196856, 3.9931972, -2.275385; 5.554395, 3.6667695, -1.5344303; 6.302009, 3.4211502, -1.0247753; 5.912052, 3.4127688, -2.0539303; -8.205278, 2.327857, -1.6465428; -7.1919937, 0.45292425, 2.8052804; -8.445484, 0.9383509, 5.7299757; -9.072228, 1.1810639, 7.192322; -8.92317, 1.3781815, 8.428476; -8.927226, 1.5167228, 9.43532; -9.476981, 0.9110716, 8.565892\",\n  \"-0.0, 0.0, 0.0; 1.6782831, -0.94772196, 1.6596951; 2.9009287, -6.848369, 5.752952; 1.2093407, -12.306517, 0.677546; 1.1518351, -13.700197, 2.8769016; 1.2238798, -13.986229, 4.1110144; -1.2249612, -1.5134099, 1.5882984; -3.4577055, -8.168553, 3.2695367; -4.185578, -12.16965, -3.3355777; -6.3364882, -13.101407, -2.1641307; -7.294909, -13.368806, -1.3614182; -1.3019589, 1.8614928, -1.0481234; -3.1070864, 3.486291, -1.7128553; -5.076194, 5.050354, -2.123845; -6.440111, 5.817733, -1.8262483; -6.9846606, 7.292981, -1.6155756; -7.5966806, 8.764664, -1.2613746; -3.4093475, 8.599895, -3.7408476; 0.37475157, 5.4164786, -4.1278133; 3.2777312, 4.4714613, -2.7531943; 4.7228847, 3.9948347, -2.0554328; 5.502341, 3.6371636, -1.2700484; 6.2115703, 3.3702724, -0.717992; 5.8982925, 3.4066129, -1.7724268; -8.207056, 2.3881056, -1.6592082; -7.260264, 0.4373176, 2.774623; -8.17981, 1.1587822, 5.7737303; -8.639584, 1.5195141, 7.2732816; -8.3183155, 1.6762446, 8.482155; -8.182273, 1.8211122, 9.478874; -8.971122, 1.4014276, 8.687337\",\n  \"-0.0, 0.0, 0.0; 1.6731086, -0.93880767, 1.6699541; 2.852009, -6.8525105, 5.7571974; 1.1585978, -12.300301, 0.6712818; 1.0778337, -13.694645, 2.8694854; 1.1375833, -13.991749, 4.101637; -1.2314323, -1.4977409, 1.598117; -3.5232854, -8.12719, 3.3011918; -4.1424117, -12.148548, -3.3027067; -6.3066998, -13.10395, -2.1757905; -7.2682853, -13.366109, -1.3751378; -1.2939777, 1.8592412, -1.0619124; -3.0884016, 3.4925544, -1.7347083; -5.0435896, 5.072913, -2.1497958; -6.403356, 5.8459015, -1.8477545; -6.9404993, 7.325327, -1.6476244; -7.544621, 8.8040695, -1.3096389; -3.3453002, 8.603687, -3.775146; 0.4473505, 5.4207177, -4.071442; 3.2932062, 4.4924054, -2.5716853; 4.709286, 4.023741, -1.8116968; 5.428077, 3.6363776, -0.98368806; 6.0943193, 3.3498197, -0.38954192; 5.8650117, 3.431895, -1.4628441; -8.197861, 2.439501, -1.6791894; -7.300463, 0.38015175, 2.715649; -7.889472, 1.3095742, 5.7405396; -8.183978, 1.7742847, 7.252983; -7.7454915, 1.8727695, 8.43077; -7.5051694, 1.9996308, 9.410104; -8.427323, 1.7639023, 8.689678\",\n  \"-0.0, 0.0, 0.0; 1.667535, -0.9304418, 1.68018; 2.8019347, -6.858788, 5.758795; 1.11168, -12.298836, 0.6635504; 1.0095872, -13.692599, 2.8612356; 1.0583429, -13.996541, 4.092203; -1.238534, -1.4813226, 1.6079016; -3.5850887, -8.086955, 3.3289309; -4.108319, -12.129567, -3.2702832; -6.2861557, -13.113052, -2.1948032; -7.250716, -13.369596, -1.3959113; -1.2811714, 1.8605343, -1.0750933; -3.063904, 3.5035758, -1.7552427; -5.0093436, 5.095145, -2.1732886; -6.365598, 5.872461, -1.8665991; -6.8954363, 7.355883, -1.6768504; -7.492064, 8.841296, -1.3551964; -3.2885783, 8.615202, -3.7982447; 0.50733495, 5.429102, -4.005842; 3.290401, 4.527515, -2.3774652; 4.6745934, 4.071811, -1.5535369; 5.328163, 3.6611602, -0.68375444; 5.947205, 3.3603873, -0.047101915; 5.808223, 3.4847102, -1.1317787; -8.179492, 2.4804256, -1.7051536; -7.3083315, 0.2893026, 2.630848; -7.5873528, 1.3538347, 5.655685; -7.7268634, 1.8861, 7.1681013; -7.1961193, 1.9214699, 8.310998; -6.869323, 2.0164585, 9.268664; -7.86657, 1.9338739, 8.617798\",\n  \"-0.0, 0.0, 0.0; 1.6623431, -0.9229723, 1.6894188; 2.7528658, -6.868901, 5.7543836; 1.0656545, -12.303142, 0.65193844; 0.940936, -13.697375, 2.8481572; 0.97754204, -14.010791, 4.0771685; -1.2451845, -1.4660443, 1.6167438; -3.637609, -8.051246, 3.3528502; -4.0874567, -12.111752, -3.2407873; -6.2755356, -13.123403, -2.2132921; -7.242109, -13.375565, -1.4154387; -1.2694778, 1.862206, -1.086015; -3.0406828, 3.5148115, -1.7730746; -4.97565, 5.117744, -2.196277; -6.3270597, 5.901435, -1.8844688; -6.8499064, 7.388579, -1.7047204; -7.440489, 8.879787, -1.3991255; -3.230505, 8.625854, -3.8210688; 0.564857, 5.4346857, -3.943371; 3.2782886, 4.564564, -2.1855016; 4.627204, 4.124206, -1.297231; 5.2157717, 3.7052438, -0.38598573; 5.78662, 3.402769, 0.29345876; 5.7388825, 3.5589058, -0.79495233; -8.162456, 2.5226765, -1.7318975; -7.2494392, 0.1980474, 2.5252557; -7.2940397, 1.3198828, 5.541912; -7.3163414, 1.8807994, 7.0502386; -6.725499, 1.8670009, 8.163733; -6.3414907, 1.9316455, 9.1025095; -7.3747945, 1.9430456, 8.50493\",\n  \"-0.0, 0.0, 0.0; 1.656786, -0.9181447, 1.6974893; 2.7049723, -6.8816066, 5.7478814; 1.0232971, -12.31382, 0.64145184; 0.8806355, -13.708226, 2.8364682; 0.9085581, -14.024315, 4.065023; -1.2526019, -1.451111, 1.624468; -3.683128, -8.018607, 3.374662; -4.0738378, -12.09684, -3.2118006; -6.270499, -13.138422, -2.23371; -7.2391863, -13.387616, -1.43749; -1.2541249, 1.8659415, -1.097382; -3.01295, 3.5290585, -1.7908509; -4.9399633, 5.141115, -2.2156844; -6.286619, 5.931017, -1.8990159; -6.802834, 7.421663, -1.7293922; -7.3882194, 8.918081, -1.4396808; -3.1760201, 8.643929, -3.831581; 0.60979676, 5.439454, -3.8786626; 3.249328, 4.602197, -1.9966949; 4.560883, 4.1779194, -1.046788; 5.085133, 3.7660632, -0.09397864; 5.606928, 3.4746203, 0.62837523; 5.6483502, 3.651194, -0.4571671; -8.139108, 2.559401, -1.761834; -7.120253, 0.11577296, 2.403675; -7.0376196, 1.2348561, 5.4205513; -6.996304, 1.7943985, 6.9289875; -6.3823533, 1.7495576, 8.029081; -5.9775076, 1.7899204, 8.960432; -7.0228786, 1.8299924, 8.385504\",\n  \"-0.0, 0.0, 0.0; 1.6518583, -0.91494966, 1.7040039; 2.6596112, -6.896678, 5.737688; 0.98631084, -12.329079, 0.62870646; 0.8231029, -13.724483, 2.8216562; 0.8389477, -14.051737, 4.0474997; -1.2592696, -1.4382918, 1.6307014; -3.7251682, -7.988703, 3.3953815; -4.0647845, -12.084759, -3.182848; -6.2686357, -13.156856, -2.2552047; -7.2368007, -13.398837, -1.4561298; -1.2385443, 1.8697432, -1.1085494; -2.9843102, 3.5437567, -1.8087662; -4.902446, 5.166089, -2.2346585; -6.2444334, 5.962303, -1.9140077; -6.7541885, 7.4562173, -1.7538689; -7.334377, 8.957417, -1.4788063; -3.11767, 8.663679, -3.8389506; 0.6506877, 5.438382, -3.8239129; 3.2058072, 4.6371884, -1.8140919; 4.4747615, 4.230569, -0.8007176; 4.9325886, 3.832071, 0.19120139; 5.4021354, 3.5575778, 0.95486563; 5.532095, 3.7546551, -0.12010747; -8.115187, 2.5990517, -1.7937922; -6.9563828, 0.041567087, 2.265431; -6.806375, 1.1213428, 5.294012; -6.7313714, 1.6612289, 6.808301; -6.149044, 1.5969952, 7.9245095; -5.7738404, 1.6165506, 8.868853; -6.8024707, 1.6397724, 8.263601\",\n  \"-0.0, 0.0, 0.0; 1.6470014, -0.91539675, 1.7084594; 2.6182976, -6.9142666, 5.7255974; 0.95427704, -12.350067, 0.6172018; 0.7709853, -13.746195, 2.8081033; 0.77566737, -14.081141, 4.031961; -1.2661419, -1.4273764, 1.6349657; -3.7605634, -7.962343, 3.4167378; -4.0650606, -12.07711, -3.1515267; -6.2735467, -13.181176, -2.273744; -7.240244, -13.4164715, -1.470904; -1.2224599, 1.8750062, -1.117478; -2.9554768, 3.559997, -1.8230141; -4.865833, 5.1915746, -2.2485564; -6.2027063, 5.9950414, -1.9246504; -6.7060466, 7.4920673, -1.7735338; -7.2815957, 8.997437, -1.5118392; -3.0627246, 8.686498, -3.8380947; 0.68381286, 5.43649, -3.7733727; 3.156121, 4.666775, -1.650837; 4.3833447, 4.2755938, -0.58153284; 4.7674813, 3.8902485, 0.44621098; 5.1781197, 3.6313999, 1.2483193; 5.3958945, 3.8442004, 0.19068694; -8.090258, 2.6366277, -1.8230119; -6.7917414, -0.030754805, 2.121576; -6.6004753, 0.95828444, 5.178689; -6.504842, 1.4528039, 6.7072434; -5.9601912, 1.3959424, 7.8427057; -5.621923, 1.4129577, 8.800948; -6.62685, 1.3803622, 8.157514\",\n  \"-0.0, 0.0, 0.0; 1.6415718, -0.9186717, 1.7119237; 2.5838459, -6.9349823, 5.709845; 0.9268763, -12.375287, 0.6039524; 0.727198, -13.772398, 2.7927942; 0.7224549, -14.114915, 4.014555; -1.2740138, -1.4165293, 1.6382815; -3.7897756, -7.9381866, 3.4387178; -4.0717516, -12.07289, -3.1180215; -6.2812605, -13.214068, -2.291791; -7.2427044, -13.43981, -1.4799498; -1.2056288, 1.8809531, -1.1257391; -2.9260697, 3.577116, -1.8352726; -4.8293114, 5.217803, -2.2576575; -6.1603518, 6.029545, -1.9303777; -6.6573915, 7.5294914, -1.7875992; -7.2288485, 9.038428, -1.5377492; -3.0099525, 8.71152, -3.8312497; 0.7123194, 5.4346175, -3.731825; 3.0949123, 4.691185, -1.5001249; 4.276981, 4.3128996, -0.37668073; 4.5954547, 3.9373705, 0.67681897; 4.9527645, 3.6905127, 1.507719; 5.243081, 3.9174953, 0.47065997; -8.064441, 2.6740208, -1.8467321; -6.649089, -0.08234644, 1.9951506; -6.455203, 0.7971117, 5.085407; -6.3582616, 1.2368405, 6.630533; -5.828658, 1.1899687, 7.773545; -5.507829, 1.2056574, 8.737789; -6.496849, 1.112971, 8.075824\",\n  \"-0.0, 0.0, 0.0; 1.6359687, -0.92260367, 1.71517; 2.5541816, -6.9544196, 5.6952877; 0.90569854, -12.401499, 0.593874; 0.69075596, -13.799643, 2.7806096; 0.6771739, -14.148888, 4.0003977; -1.282116, -1.4055808, 1.6413873; -3.8099751, -7.921157, 3.4468913; -4.096997, -12.061371, -3.106151; -6.296074, -13.2350025, -2.2977433; -7.2525835, -13.467587, -1.4820144; -1.1903456, 1.886221, -1.1331646; -2.8971539, 3.5947692, -1.8459; -4.788907, 5.2495236, -2.265005; -6.1147985, 6.0684996, -1.9348624; -6.6065965, 7.570898, -1.7999253; -7.173821, 9.083185, -1.5609242; -2.9446487, 8.73549, -3.8267558; 0.7544477, 5.433298, -3.7022471; 3.0426726, 4.714124, -1.3662796; 4.1772914, 4.347744, -0.19115508; 4.4433784, 3.9821165, 0.88021004; 4.757253, 3.7469797, 1.7317951; 5.102863, 3.986765, 0.7147635; -8.041499, 2.7264664, -1.8642776; -6.541178, -0.112787485, 1.8838577; -6.3440704, 0.6445026, 5.0060973; -6.2455177, 1.0231478, 6.567215; -5.718624, 0.97876555, 7.7115774; -5.4040747, 0.98635566, 8.677985; -6.379827, 0.83854187, 8.006414\",\n  \"-0.0, 0.0, 0.0; 1.6307803, -0.92908144, 1.7166135; 2.5323353, -6.974873, 5.679296; 0.8868797, -12.430862, 0.58643246; 0.6606796, -13.830385, 2.7711492; 0.64057136, -14.1853075, 3.9892068; -1.2897649, -1.3969431, 1.6427684; -3.8205588, -7.910299, 3.4521675; -4.1403193, -12.050331, -3.099473; -6.3213835, -13.253889, -2.2862806; -7.2702303, -13.500064, -1.4656062; -1.1775384, 1.8919007, -1.1370705; -2.8728395, 3.6119838, -1.8495247; -4.754196, 5.280146, -2.2622285; -6.074379, 6.1067257, -1.9281805; -6.560887, 7.6114235, -1.7998468; -7.123936, 9.126646, -1.5697273; -2.888389, 8.75971, -3.8126202; 0.7814474, 5.425621, -3.673218; 2.9773026, 4.7264395, -1.2443719; 4.065505, 4.3698535, -0.02323556; 4.280728, 4.0148935, 1.0630386; 4.5518723, 3.791988, 1.9324048; 4.948263, 4.043864, 0.937051; -8.022598, 2.7764113, -1.8690174; -6.460462, -0.15907812, 1.7783763; -6.2388525, 0.47569108, 4.9261813; -6.1280484, 0.7930763, 6.500082; -5.5901265, 0.738425, 7.638856; -5.268797, 0.7291249, 8.603016; -6.238974, 0.5464089, 7.9319572\",\n  \"-0.0, 0.0, 0.0; 1.6267636, -0.93659127, 1.716344; 2.5146208, -6.99625, 5.6608953; 0.86913884, -12.464024, 0.5806942; 0.6344844, -13.865473, 2.7632833; 0.6085906, -14.228571, 3.9788194; -1.2958045, -1.3916483, 1.6425092; -3.8237522, -7.903058, 3.4628572; -4.194572, -12.046197, -3.084127; -6.3568034, -13.280063, -2.2660768; -7.29377, -13.534084, -1.4342194; -1.1679884, 1.8980979, -1.1365924; -2.8544307, 3.6288435, -1.8442332; -4.7271886, 5.3091383, -2.246698; -6.0404453, 6.1439877, -1.90598; -6.521107, 7.6510744, -1.7837943; -7.0799274, 9.1691475, -1.5623167; -2.8443885, 8.785786, -3.7830238; 0.798542, 5.4224424, -3.6406658; 2.9021485, 4.736992, -1.1277144; 3.944028, 4.3870687, 0.13504207; 4.1107416, 4.042725, 1.2331965; 4.3406496, 3.831846, 2.117321; 4.7828097, 4.095457, 1.1445415; -8.00868, 2.8213816, -1.8611691; -6.4104958, -0.2243278, 1.6786485; -6.1291094, 0.2940547, 4.8429527; -5.9884167, 0.5532466, 6.425103; -5.4299335, 0.47859782, 7.5527897; -5.0922766, 0.44802228, 8.510911; -6.0673676, 0.2563449, 7.849544\",\n  \"-0.0, 0.0, 0.0; 1.6240042, -0.94552946, 1.7140547; 2.5037794, -7.018939, 5.639223; 0.8510817, -12.50121, 0.57702017; 0.613675, -13.903748, 2.7586126; 0.5851643, -14.273361, 3.9721246; -1.3001698, -1.3901577, 1.6403205; -3.8156648, -7.9006968, 3.4809213; -4.2574506, -12.048907, -3.058443; -6.400633, -13.316486, -2.24181; -7.3199835, -13.569811, -1.3903166; -1.1626883, 1.904458, -1.131375; -2.8437686, 3.6443405, -1.8293005; -4.710055, 5.3352156, -2.2172537; -6.015036, 6.1795096, -1.8681166; -6.4892735, 7.689022, -1.7508757; -7.04387, 9.209614, -1.5361667; -2.8158855, 8.811844, -3.7395859; 0.80391836, 5.4233985, -3.6026914; 2.8160517, 4.743473, -1.0144587; 3.8120253, 4.396107, 0.28549743; 3.9335144, 4.0599766, 1.3920984; 4.1246047, 3.858896, 2.2876735; 4.6071024, 4.135146, 1.3378431; -8.001628, 2.860099, -1.8363336; -6.3683777, -0.28387904, 1.6000518; -6.032269, 0.13783094, 4.7733645; -5.864217, 0.3486864, 6.3600187; -5.277843, 0.24948083, 7.4715385; -4.9162173, 0.19890682, 8.420018; -5.909051, 0.025794342, 7.7802825\",\n  \"-0.0, 0.0, 0.0; 1.6224265, -0.9555662, 1.7099779; 2.49583, -7.0442114, 5.612902; 0.837273, -12.544273, 0.5719595; 0.5989183, -13.948767, 2.7521896; 0.568275, -14.326105, 3.96327; -1.3029655, -1.3921376, 1.6364182; -3.7957644, -7.904813, 3.5001936; -4.323222, -12.056139, -3.03084; -6.446772, -13.358698, -2.2179742; -7.3418646, -13.602419, -1.3382988; -1.1589925, 1.910771, -1.124502; -2.8362002, 3.6591868, -1.810315; -4.6973176, 5.359946, -2.1794395; -5.993369, 6.2139254, -1.8207284; -6.4609513, 7.7258706, -1.7081991; -7.011308, 9.248868, -1.4997164; -2.7953424, 8.839682, -3.6848466; 0.8068502, 5.432021, -3.5609882; 2.7259402, 4.749039, -0.9038174; 3.6752443, 4.3999577, 0.43015254; 3.7534714, 4.0679803, 1.5418992; 3.9074743, 3.87277, 2.4458792; 4.4265666, 4.1615167, 1.5193455; -7.9970717, 2.8950353, -1.8031548; -6.3350205, -0.34354472, 1.530017; -5.9370017, 0.0058225095, 4.7049565; -5.737992, 0.18050486, 6.2924247; -5.123673, 0.05025302, 7.3854933; -4.7367587, -0.02163969, 8.322549; -5.753612, -0.15215196, 7.7110553\",\n  \"-0.0, 0.0, 0.0; 1.6221206, -0.9663138, 1.7042187; 2.4931169, -7.069842, 5.5843673; 0.8256072, -12.592195, 0.5708232; 0.5911878, -13.998589, 2.7502546; 0.5612422, -14.381602, 3.9595692; -1.3040673, -1.3975627, 1.630907; -3.7656746, -7.914398, 3.5214047; -4.390081, -12.068977, -2.9990025; -6.493797, -13.406864, -2.1919627; -7.3636875, -13.641411, -1.284936; -1.1570036, 1.9172096, -1.1155559; -2.8316362, 3.6734982, -1.787404; -4.6885905, 5.383218, -2.1355023; -5.973986, 6.2484293, -1.7655401; -6.434567, 7.7628307, -1.6572397; -6.9814715, 9.287872, -1.4547006; -2.7812848, 8.868317, -3.6216333; 0.8068285, 5.445207, -3.516518; 2.6342301, 4.752044, -0.7980523; 3.5375586, 4.397722, 0.56612; 3.5741956, 4.062413, 1.6790149; 3.6929314, 3.8661025, 2.5880625; 4.245838, 4.1680946, 1.6856263; -7.994949, 2.9263372, -1.7647154; -6.310841, -0.40666652, 1.4626231; -5.8395734, -0.10896444, 4.632797; -5.603939, 0.03988655, 6.2178817; -4.9658914, -0.13131094, 7.2915387; -4.5560036, -0.23020756, 8.216285; -5.596585, -0.29812092, 7.635314\",\n  \"-0.0, 0.0, 0.0; 1.622359, -0.97727555, 1.6977285; 2.4879365, -7.098244, 5.551528; 0.8161062, -12.645191, 0.5666561; 0.58856, -14.053407, 2.7456396; 0.561312, -14.4387, 3.954294; -1.3044356, -1.4044353, 1.6246969; -3.722138, -7.930069, 3.5413246; -4.461812, -12.083851, -2.967523; -6.543596, -13.4513, -2.1531916; -7.3865376, -13.679078, -1.2193898; -1.1568812, 1.9239063, -1.1040945; -2.8308132, 3.6871438, -1.7592802; -4.68529, 5.404098, -2.0842035; -5.9596987, 6.279155, -1.6996744; -6.4127994, 7.7961035, -1.59555; -6.955444, 9.3235855, -1.400066; -2.7768416, 8.896666, -3.5512114; 0.80020905, 5.4613748, -3.4689405; 2.5411696, 4.7516785, -0.69850516; 3.4011593, 4.3889804, 0.6912359; 3.3960364, 4.0386877, 1.8000991; 3.479987, 3.8307714, 2.7104435; 4.066042, 4.1491165, 1.834948; -7.9957585, 2.9521942, -1.7171649; -6.2962723, -0.47183776, 1.4051098; -5.7474236, -0.21668619, 4.566499; -5.473001, -0.08911021, 6.147192; -4.814257, -0.3067854, 7.199725; -4.3828516, -0.43634582, 8.110794; -5.4435806, -0.43154916, 7.563273\",\n  \"-0.0, 0.0, 0.0; 1.6234258, -0.9898654, 1.6893944; 2.480451, -7.129787, 5.5148516; 0.8074987, -12.704674, 0.5616226; 0.5890288, -14.115497, 2.7398481; 0.5645688, -14.506221, 3.9468174; -1.3037888, -1.4142066, 1.6167206; -3.6673794, -7.952247, 3.558396; -4.530965, -12.103994, -2.936474; -6.5905504, -13.495451, -2.106516; -7.4057865, -13.717192, -1.1470156; -1.1583946, 1.9303151, -1.0912471; -2.832333, 3.6998, -1.7293506; -4.6838984, 5.4241476, -2.0308821; -5.9463844, 6.3103566, -1.6328025; -6.3922234, 7.829691, -1.5321773; -6.9315915, 9.359045, -1.3423499; -2.7734032, 8.924255, -3.4771068; 0.7948997, 5.479433, -3.4163005; 2.4544888, 4.749709, -0.6014836; 3.273686, 4.3769255, 0.81006205; 3.2257047, 4.002795, 1.9100772; 3.274426, 3.7751927, 2.8182774; 3.8938975, 4.1117, 1.9731064; -7.998895, 2.9775872, -1.6690917; -6.287904, -0.53246737, 1.3496621; -5.670689, -0.3232395, 4.5018024; -5.362082, -0.21862519, 6.077871; -4.686439, -0.48347604, 7.1086535; -4.236245, -0.64504164, 8.005406; -5.3109255, -0.56915265, 7.491352\",\n  \"-0.0, 0.0, 0.0; 1.6248497, -1.0018363, 1.6809481; 2.4760048, -7.161072, 5.47655; 0.8015857, -12.767138, 0.5591364; 0.59207785, -14.180598, 2.7365324; 0.56962717, -14.579618, 3.9408236; -1.3026209, -1.4244632, 1.6086376; -3.6032214, -7.9793477, 3.569089; -4.598202, -12.128271, -2.908763; -6.636861, -13.54302, -2.0666049; -7.424301, -13.758905, -1.0828614; -1.1615144, 1.9364939, -1.0768888; -2.8362138, 3.712198, -1.6954184; -4.6844726, 5.444454, -1.9707725; -5.9352026, 6.3408446, -1.558628; -6.373505, 7.862599, -1.4615204; -6.9087253, 9.394099, -1.2773365; -2.7719245, 8.952492, -3.3949034; 0.7914989, 5.5022717, -3.3591974; 2.374569, 4.7489433, -0.50677514; 3.1554096, 4.364314, 0.9232111; 3.0634472, 3.9653246, 2.0116317; 3.07619, 3.7166579, 2.9155157; 3.7292616, 4.0688624, 2.102653; -8.004407, 3.003929, -1.6135317; -6.281613, -0.5864718, 1.3022622; -5.6103477, -0.4351286, 4.4466567; -5.2747164, -0.35945684, 6.018852; -4.599695, -0.66611505, 7.038391; -4.1465535, -0.85752076, 7.927756; -5.2227163, -0.72525513, 7.428428\",\n  \"-0.0, 0.0, 0.0; 1.6267865, -1.0145559, 1.6714187; 2.4695826, -7.193741, 5.4363384; 0.7968708, -12.833516, 0.55703783; 0.6003988, -14.2491665, 2.7342267; 0.58317405, -14.65062, 3.9377952; -1.3008165, -1.4363319, 1.5995183; -3.533312, -8.010821, 3.5730174; -4.6610384, -12.159943, -2.8829205; -6.6804323, -13.59791, -2.0337024; -7.439124, -13.805612, -1.0258996; -1.1657223, 1.9431949, -1.0601413; -2.8415475, 3.724627, -1.6588341; -4.6863375, 5.4641285, -1.9107766; -5.924243, 6.371203, -1.4835646; -6.355241, 7.895206, -1.3890618; -6.8871264, 9.428465, -1.2099161; -2.7708106, 8.979174, -3.3134618; 0.787637, 5.5236545, -3.302475; 2.2979484, 4.7434144, -0.41801476; 3.042318, 4.345302, 1.0276452; 2.9068964, 3.9230962, 2.102686; 2.8839617, 3.6545374, 3.000658; 3.5693774, 4.020185, 2.2210407; -8.011217, 3.0295079, -1.5592779; -6.2860575, -0.6452899, 1.2479511; -5.576117, -0.56225926, 4.386392; -5.2211485, -0.52074385, 5.9556108; -4.5467157, -0.86394763, 6.963829; -4.0917473, -1.0832415, 7.8457913; -5.1677947, -0.9108799, 7.358593\",\n  \"-0.0, 0.0, 0.0; 1.629334, -1.0273482, 1.6610914; 2.4649153, -7.2263384, 5.3949327; 0.79426026, -12.902859, 0.5577197; 0.6114616, -14.320492, 2.7348092; 0.599231, -14.726287, 3.9369817; -1.2982129, -1.449597, 1.5896363; -3.4611115, -8.045696, 3.568523; -4.721913, -12.200218, -2.8592644; -6.724731, -13.661346, -2.0103254; -7.4543314, -13.8582, -0.9791361; -1.1714691, 1.9495096, -1.0420587; -2.8487115, 3.7361603, -1.620903; -4.689002, 5.483417, -1.851157; -5.913913, 6.401263, -1.4097302; -6.3380156, 7.9273367, -1.3174733; -6.8669167, 9.462114, -1.1425449; -2.7685342, 9.002924, -3.2357812; 0.7844434, 5.5417933, -3.2502992; 2.2239752, 4.734924, -0.33711624; 2.9328802, 4.323474, 1.1225669; 2.7556121, 3.875675, 2.1810381; 2.698131, 3.5851278, 3.0705786; 3.413817, 3.9655015, 2.3259945; -8.020091, 3.056817, -1.503008; -6.3095284, -0.71004057, 1.1887585; -5.5658026, -0.70150095, 4.320454; -5.193941, -0.69723165, 5.8863006; -4.520341, -1.074014, 6.8830204; -4.0648026, -1.320594, 7.75745; -5.140245, -1.12025, 7.2797103\",\n  \"-0.0, 0.0, 0.0; 1.6315587, -1.0401579, 1.6509047; 2.4623108, -7.2603106, 5.3504725; 0.7930217, -12.974746, 0.5576334; 0.6254787, -14.39418, 2.7347772; 0.6196193, -14.801949, 3.9363303; -1.2960347, -1.4621506, 1.5798866; -3.3903308, -8.081366, 3.5553768; -4.7802877, -12.246214, -2.8390086; -6.765515, -13.729439, -1.9870737; -7.469953, -13.9216385, -0.9376712; -1.1781155, 1.9552511, -1.0236462; -2.8566885, 3.7471013, -1.5822057; -4.690936, 5.503413, -1.7907677; -5.903656, 6.4307756, -1.3357794; -6.3217454, 7.95863, -1.2455757; -6.8478246, 9.494788, -1.0742964; -2.7624893, 9.025798, -3.156862; 0.77802634, 5.5520897, -3.194026; 2.1480513, 4.71503, -0.2559502; 2.8221211, 4.288471, 1.215848; 2.6054525, 3.8146644, 2.2554975; 2.515203, 3.501721, 3.1346593; 3.258532, 3.8970864, 2.425826; -8.030188, 3.087518, -1.4463812; -6.3387585, -0.7722826, 1.1230265; -5.569032, -0.84016865, 4.247708; -5.1841702, -0.87411225, 5.8100467; -4.514844, -1.2826402, 6.7970924; -4.0624256, -1.5560881, 7.6651287; -5.13565, -1.3348938, 7.1916194\",\n  \"-0.0, 0.0, 0.0; 1.6343545, -1.051466, 1.6409458; 2.4570837, -7.2932043, 5.3057885; 0.793056, -13.049238, 0.5611391; 0.6403926, -14.469728, 2.7386882; 0.64128363, -14.876306, 3.9406586; -1.293024, -1.4750257, 1.5703565; -3.3275647, -8.116503, 3.533536; -4.8320255, -12.29978, -2.822792; -6.800868, -13.807674, -1.9761596; -7.4835997, -13.997057, -0.91200197; -1.1829052, 1.9615625, -1.0058935; -2.8613033, 3.7594433, -1.5452693; -4.6894493, 5.524402, -1.7334015; -5.8918014, 6.4599733, -1.2678261; -6.304431, 7.9894524, -1.1800431; -6.8276043, 9.526979, -1.0121804; -2.7521744, 9.050081, -3.0783415; 0.7740238, 5.562104, -3.1351254; 2.073511, 4.6916995, -0.17477822; 2.7122335, 4.2484584, 1.3078154; 2.4583828, 3.7487845, 2.326734; 2.3370075, 3.4134548, 3.1938128; 3.1056483, 3.8233573, 2.5211558; -8.03681, 3.118714, -1.3963614; -6.366892, -0.8284979, 1.0514414; -5.5814457, -0.97294223, 4.169603; -5.188721, -1.0451641, 5.7286816; -4.526395, -1.4857993, 6.7065964; -4.079817, -1.787004, 7.5684476; -5.1495748, -1.5475559, 7.095974\",\n  \"-0.0, 0.0, 0.0; 1.6367253, -1.0630537, 1.6310873; 2.455166, -7.327225, 5.258423; 0.795094, -13.127126, 0.5660982; 0.65830564, -14.549236, 2.7436445; 0.66649866, -14.954794, 3.9459314; -1.2905883, -1.4871225, 1.5609227; -3.2665987, -8.152023, 3.504404; -4.8829503, -12.35815, -2.8092332; -6.8345366, -13.888572, -1.9630699; -7.493697, -14.072847, -0.8832693; -1.1865654, 1.9677645, -0.98933303; -2.864068, 3.7719321, -1.510185; -4.6857834, 5.545633, -1.6773088; -5.879284, 6.488328, -1.2034034; -6.2875133, 8.019112, -1.1178161; -6.8082075, 9.557702, -0.9519993; -2.738695, 9.075247, -2.997529; 0.7731309, 5.5731096, -3.0709734; 2.0026681, 4.6679106, -0.091245174; 2.6063461, 4.2072644, 1.4006968; 2.3191402, 3.681585, 2.397433; 2.1696506, 3.3236845, 3.2509925; 2.9602947, 3.7481222, 2.6137872; -8.041589, 3.150274, -1.350847; -6.397523, -0.87929463, 0.9773426; -5.604754, -1.1003847, 4.089152; -5.20837, -1.21093, 5.645055; -4.552576, -1.6807696, 6.613733; -4.1113915, -2.007161, 7.4691677; -5.177868, -1.750406, 6.9983664\",\n  \"-0.0, 0.0, 0.0; 1.6398872, -1.0734359, 1.6210809; 2.449705, -7.3618917, 5.2081084; 0.7961825, -13.207916, 0.571033; 0.6745284, -14.630613, 2.7490942; 0.6895907, -15.034605, 3.9518423; -1.2870526, -1.5001504, 1.5513465; -3.207151, -8.1899805, 3.4649925; -4.9302535, -12.41991, -2.804356; -6.86457, -13.970988, -1.9561515; -7.499939, -14.149507, -0.8612282; -1.1876303, 1.974868, -0.97377896; -2.8622923, 3.7862158, -1.4786057; -4.6778584, 5.5677786, -1.6280887; -5.864374, 6.515105, -1.1459495; -6.267893, 8.047305, -1.0634209; -6.7851624, 9.587563, -0.9024336; -2.7194505, 9.102219, -2.9183164; 0.7791238, 5.5871363, -3.0046782; 1.9351702, 4.645261, -0.006953001; 2.502039, 4.1662683, 1.4936264; 2.1856227, 3.6151154, 2.4674952; 2.0112565, 3.2351077, 3.306658; 2.8205, 3.6741714, 2.7036288; -8.0418415, 3.1814635, -1.3200755; -6.43194, -0.9283068, 0.88873696; -5.6407237, -1.2252865, 3.9946184; -5.2451143, -1.373777, 5.547557; -4.5980883, -1.8708732, 6.5084963; -4.1641293, -2.2205431, 7.3584104; -5.2261543, -1.9461213, 6.887513\",\n  \"-0.0, 0.0, 0.0; 1.6422201, -1.0862001, 1.6101804; 2.4456296, -7.3987837, 5.1560335; 0.8003391, -13.293859, 0.57851124; 0.6949177, -14.716271, 2.7576044; 0.7185236, -15.113101, 3.962597; -1.2847434, -1.512828, 1.5409144; -3.1476011, -8.228089, 3.4217827; -4.9795885, -12.484409, -2.7986414; -6.8941655, -14.056277, -1.943948; -7.504637, -14.230083, -0.8342023; -1.1881896, 1.9825919, -0.9572611; -2.8599734, 3.8011558, -1.4454076; -4.6693044, 5.590476, -1.576731; -5.849849, 6.5421534, -1.0885413; -6.2487407, 8.075733, -1.009221; -6.7623744, 9.617651, -0.85254866; -2.6998606, 9.129124, -2.8383093; 0.7852819, 5.6010547, -2.9372613; 1.8700886, 4.6221194, 0.07518077; 2.4012835, 4.124601, 1.5827682; 2.0596883, 3.5476665, 2.5329094; 1.8638338, 3.1450949, 3.3566697; 2.688722, 3.5981493, 2.7860582; -8.041456, 3.213626, -1.2853161; -6.468797, -0.9740453, 0.8005887; -5.68456, -1.3466711, 3.9000793; -5.292444, -1.5329831, 5.4498234; -4.657067, -2.0545964, 6.405526; -4.232899, -2.42517, 7.2515173; -5.2889986, -2.1344063, 6.7771125\",\n  \"-0.0, 0.0, 0.0; 1.6447666, -1.0977297, 1.5997286; 2.4415653, -7.4365525, 5.09997; 0.80643916, -13.382606, 0.5851698; 0.7176411, -14.804615, 2.7652664; 0.7496392, -15.195143, 3.9721231; -1.2820885, -1.5251852, 1.5309117; -3.0883884, -8.265463, 3.3771458; -5.030484, -12.550427, -2.7899818; -6.9222383, -14.143937, -1.9246106; -7.504739, -14.312055, -0.7990669; -1.1870214, 1.9908651, -0.94140905; -2.8546178, 3.8174834, -1.4135424; -4.6576705, 5.614324, -1.5273709; -5.833425, 6.5682697, -1.0321; -6.228672, 8.102961, -0.95609075; -6.739127, 9.64647, -0.8047888; -2.6763523, 9.157488, -2.7572818; 0.79712987, 5.618332, -2.8694506; 1.8097471, 4.602011, 0.15571475; 2.3048, 4.0858064, 1.6693091; 1.9397207, 3.4834769, 2.5946336; 1.7236726, 3.0585833, 3.4019704; 2.5627065, 3.525186, 2.8638253; -8.038066, 3.2468164, -1.2561033; -6.5064745, -1.0151355, 0.70625234; -5.733525, -1.4641525, 3.7984445; -5.3470507, -1.6886613, 5.3445387; -4.725349, -2.2321532, 6.2970386; -4.3127007, -2.621211, 7.140424; -5.3617525, -2.314765, 6.660288\",\n  \"-0.0, 0.0, 0.0; 1.647667, -1.1094344, 1.5886307; 2.4354596, -7.4753857, 5.041355; 0.8150698, -13.47444, 0.5918274; 0.74119383, -14.896965, 2.7721446; 0.78033197, -15.282758, 3.9803128; -1.2789824, -1.5383596, 1.5202914; -3.0319712, -8.302942, 3.3286319; -5.0783577, -12.616735, -2.7844367; -6.946305, -14.23406, -1.9115633; -7.5016193, -14.398344, -0.7718018; -1.1839334, 2.0000637, -0.9256683; -2.8454204, 3.8358378, -1.383617; -4.6412725, 5.6407204, -1.4831419; -5.8130884, 6.596657, -0.98240465; -6.204356, 8.132527, -0.90969384; -6.7109675, 9.677816, -0.76372933; -2.6445527, 9.187189, -2.6781242; 0.8169024, 5.6365757, -2.7996178; 1.7579478, 4.5810366, 0.23521304; 2.2171707, 4.045239, 1.7532866; 1.828558, 3.419547, 2.6531749; 1.5921742, 2.973937, 3.4434648; 2.4449732, 3.45227, 2.9382644; -8.031258, 3.2841344, -1.2376708; -6.544649, -1.0480175, 0.60170484; -5.7905164, -1.573756, 3.686442; -5.4134507, -1.8366243, 5.2288084; -4.80704, -2.4015005, 6.178721; -4.4074125, -2.808723, 7.0197983; -5.4485073, -2.487305, 6.5321903\",\n  \"-0.0, 0.0, 0.0; 1.6498598, -1.1216029, 1.5777735; 2.4303374, -7.5157933, 4.979601; 0.8255842, -13.569525, 0.59899616; 0.7689899, -14.991627, 2.780106; 0.81664693, -15.370661, 3.9901063; -1.2768284, -1.5503347, 1.5099014; -2.9768534, -8.3379345, 3.2821999; -5.132414, -12.681125, -2.7722502; -6.9727926, -14.32026, -1.8816803; -7.5011454, -14.4846325, -0.7291852; -1.1802905, 2.0099864, -0.9086712; -2.8347282, 3.8557944, -1.3515614; -4.622082, 5.6697865, -1.437531; -5.7902308, 6.627984, -0.9325645; -6.177927, 8.164907, -0.8630482; -6.6811266, 9.711756, -0.72188187; -2.6066577, 9.218253, -2.5945811; 0.84314346, 5.6567516, -2.7282226; 1.7139006, 4.563127, 0.31409454; 2.137941, 4.008315, 1.8355695; 1.72797, 3.3610847, 2.7103984; 1.4731576, 2.8961108, 3.4836214; 2.3382277, 3.383989, 3.0093594; -8.023329, 3.3265889, -1.2214401; -6.5787697, -1.0696638, 0.49525988; -5.846858, -1.6730292, 3.5711298; -5.4809027, -1.9747115, 5.109063; -4.888839, -2.5601153, 6.0555916; -4.501307, -2.9846232, 6.8937774; -5.5347753, -2.6478667, 6.400333\",\n  \"-0.0, 0.0, 0.0; 1.6521504, -1.134599, 1.5660406; 2.4234385, -7.5567436, 4.916924; 0.8376174, -13.666611, 0.6079459; 0.7985492, -15.087804, 2.7900326; 0.8552504, -15.457151, 4.002636; -1.2745955, -1.5630155, 1.4986728; -2.9275856, -8.371039, 3.2367983; -5.1867657, -12.745272, -2.757225; -6.9979267, -14.407169, -1.8491127; -7.502386, -14.576368, -0.6866534; -1.1757492, 2.020301, -0.8915219; -2.8222115, 3.8765965, -1.3200684; -4.600462, 5.7000594, -1.393543; -5.765924, 6.6594925, -0.88473016; -6.150099, 8.197434, -0.81824607; -6.6493382, 9.74599, -0.68181413; -2.5643187, 9.249812, -2.5096493; 0.872211, 5.675914, -2.6538734; 1.674123, 4.5438004, 0.39328623; 2.0637057, 3.9697824, 1.9168483; 1.6338009, 3.3022847, 2.7665174; 1.3617222, 2.818926, 3.5223887; 2.2379465, 3.3151493, 3.0782156; -8.013695, 3.3715098, -1.2106391; -6.6107955, -1.0834334, 0.38504398; -5.905618, -1.7655888, 3.4506774; -5.553032, -2.1066656, 4.983493; -4.974568, -2.7126603, 5.92546; -4.598466, -3.1545162, 6.7598786; -5.624587, -2.802236, 6.2619596\",\n  \"-0.0, 0.0, 0.0; 1.653902, -1.1468078, 1.5552617; 2.4166641, -7.5979333, 4.851991; 0.8517295, -13.764317, 0.61651134; 0.82987374, -15.185542, 2.798817; 0.8950513, -15.547076, 4.0133467; -1.2730176, -1.5741191, 1.4883568; -2.881251, -8.401247, 3.1932192; -5.240473, -12.806899, -2.7389312; -7.019878, -14.491427, -1.8099763; -7.5007896, -14.667643, -0.6386131; -1.170803, 2.0306337, -0.874392; -2.807941, 3.8982291, -1.289349; -4.5749145, 5.7329874, -1.3530666; -5.7399926, 6.6916556, -0.8419373; -6.120306, 8.230701, -0.77888197; -6.6135697, 9.781629, -0.6477599; -2.5131805, 9.28035, -2.4290726; 0.91250134, 5.69641, -2.5819304; 1.6443499, 4.5274854, 0.46896124; 1.9988744, 3.9351041, 1.9940543; 1.5504003, 3.2491057, 2.8190308; 1.2621081, 2.7488794, 3.5577223; 2.1483467, 3.2525032, 3.1427035; -8.002747, 3.4235249, -1.2043993; -6.643189, -1.0850701, 0.2737831; -5.9655986, -1.844181, 3.3275256; -5.626805, -2.2237341, 4.854396; -5.0625114, -2.851748, 5.790518; -4.6980057, -3.3117507, 6.6202626; -5.7162547, -2.9405496, 6.119935\",\n  \"-0.0, 0.0, 0.0; 1.6557419, -1.1578053, 1.5451227; 2.4073112, -7.63784, 4.7872753; 0.8679426, -13.861364, 0.62666416; 0.8625158, -15.28136, 2.809873; 0.9359232, -15.632554, 4.026965; -1.2712556, -1.5846515, 1.4786552; -2.8452063, -8.42827, 3.1490464; -5.2882566, -12.866746, -2.7244153; -7.0357485, -14.574055, -1.776658; -7.494613, -14.757243, -0.5975462; -1.1639487, 2.0415533, -0.85796183; -2.7903066, 3.9211278, -1.2610542; -4.546058, 5.766844, -1.3181595; -5.7111526, 6.7263803, -0.80870026; -6.088247, 8.266357, -0.74915075; -6.5768914, 9.81908, -0.6220416; -2.4575915, 9.311211, -2.3516421; 0.95802045, 5.71774, -2.5060747; 1.6167444, 4.5107384, 0.54665446; 1.9346867, 3.899368, 2.0723186; 1.4680845, 3.1979606, 2.8739538; 1.1638887, 2.683516, 3.5963218; 2.059606, 3.1925554, 3.209197; -7.988206, 3.4765754, -1.2084484; -6.6742997, -1.0810375, 0.15634418; -6.028494, -1.9172771, 3.1967976; -5.705592, -2.3353968, 4.717023; -5.1587195, -2.9855623, 5.648349; -4.8085613, -3.4636805, 6.474022; -5.8170147, -3.0725276, 5.9690766\",\n  \"-0.0, 0.0, 0.0; 1.6569151, -1.1697465, 1.5348371; 2.3958929, -7.6795073, 4.719829; 0.88663435, -13.959715, 0.6340337; 0.8968548, -15.378718, 2.8178701; 0.97786975, -15.71959, 4.0374117; -1.2704034, -1.5944589, 1.4688116; -2.814604, -8.453039, 3.1052582; -5.33348, -12.925574, -2.7100503; -7.0468807, -14.656519, -1.743115; -7.482671, -14.846121, -0.5562881; -1.1557539, 2.0520673, -0.8438408; -2.7705712, 3.9435616, -1.2374607; -4.5147376, 5.800391, -1.2890112; -5.6805286, 6.7598715, -0.7810407; -6.0545206, 8.300755, -0.7255062; -6.5382347, 9.85543, -0.6035084; -2.3987887, 9.340601, -2.2799654; 1.0054333, 5.7364974, -2.4380682; 1.5926471, 4.4935513, 0.61483073; 1.8748217, 3.8642616, 2.1402435; 1.3912618, 3.149932, 2.920123; 1.0720603, 2.6234944, 3.6272142; 1.9762671, 3.1368423, 3.2664092; -7.97129, 3.5303502, -1.2189435; -6.7008524, -1.0712037, 0.03506446; -6.0923405, -1.9896092, 3.0594592; -5.7880864, -2.448812, 4.5716553; -5.2602415, -3.123233, 5.4966893; -4.925821, -3.6213245, 6.317062; -5.923421, -3.2088037, 5.8075814\",\n  \"-0.0, 0.0, 0.0; 1.6583439, -1.1803658, 1.525133; 2.3837633, -7.7201376, 4.6512165; 0.90940297, -14.057486, 0.6416173; 0.93133146, -15.47542, 2.8260624; 1.0172956, -15.808718, 4.0473576; -1.2691445, -1.6039608, 1.459525; -2.7892964, -8.476338, 3.0602117; -5.375231, -12.983274, -2.698833; -7.0535183, -14.738024, -1.713398; -7.467869, -14.935904, -0.5202606; -1.1467674, 2.0626721, -0.83013445; -2.748933, 3.966566, -1.2155902; -4.480753, 5.8349934, -1.2642783; -5.6469135, 6.7962217, -0.760478; -6.0184064, 8.337872, -0.7096597; -6.4984474, 9.894057, -0.59250873; -2.3357952, 9.368689, -2.2153163; 1.0528314, 5.7498827, -2.3725967; 1.5733699, 4.4721327, 0.6780298; 1.8221909, 3.8255017, 2.2019947; 1.3219391, 3.1017919, 2.9624562; 0.9878621, 2.5665267, 3.655917; 1.9000928, 3.082415, 3.3197765; -7.9522176, 3.586948, -1.2330611; -6.7201395, -1.053257, -0.08792853; -6.155034, -2.0614147, 2.9162343; -5.8724813, -2.565493, 4.418314; -5.3658266, -3.2658625, 5.3358846; -5.0489645, -3.7853365, 6.1499414; -6.034274, -3.3497581, 5.6357574\",\n  \"-0.0, 0.0, 0.0; 1.6588149, -1.1921667, 1.515411; 2.371428, -7.76203, 4.5807548; 0.9349625, -14.15654, 0.64891005; 0.9693259, -15.573644, 2.833734; 1.060156, -15.900745, 4.056351; -1.2691753, -1.6123532, 1.4502213; -2.770447, -8.496872, 3.0161808; -5.41706, -13.039921, -2.686649; -7.057868, -14.818612, -1.6812243; -7.4510427, -15.02593, -0.48253655; -1.1377175, 2.072728, -0.8174425; -2.7265158, 3.989289, -1.1953812; -4.4438, 5.8711634, -1.2409565; -5.610977, 6.833634, -0.74190474; -5.9807343, 8.375847, -0.69570166; -6.457364, 9.933409, -0.58299863; -2.2664616, 9.395083, -2.1539197; 1.1021173, 5.7576075, -2.3111665; 1.565986, 4.4456224, 0.73406696; 1.7864547, 3.78195, 2.255068; 1.2692993, 3.0527217, 2.9987655; 0.9203098, 2.5118842, 3.680458; 1.8407094, 3.0271773, 3.366398; -7.93233, 3.649479, -1.2464346; -6.740651, -1.0268254, -0.21061432; -6.2182627, -2.126296, 2.7691498; -5.9570684, -2.6760297, 4.2590303; -5.4739127, -3.4036696, 5.168015; -5.1764727, -3.9455123, 5.9747863; -6.14788, -3.4848309, 5.4560485\",\n  \"-0.0, 0.0, 0.0; 1.6589355, -1.204055, 1.5058497; 2.3579924, -7.804867, 4.5071573; 0.96273196, -14.25659, 0.6547394; 1.0093528, -15.672614, 2.840036; 1.1049019, -15.992665, 4.0641584; -1.2696449, -1.6201682, 1.4410717; -2.7607775, -8.515064, 2.9706388; -5.4568777, -13.096754, -2.677837; -7.057185, -14.8996935, -1.6505592; -7.428605, -15.116081, -0.44654799; -1.1265095, 2.0834153, -0.8057111; -2.7006938, 4.013215, -1.1773822; -4.4037476, 5.908023, -1.2209991; -5.5713286, 6.8725686, -0.7269231; -5.938921, 8.415446, -0.68595856; -6.412232, 9.974399, -0.5786166; -2.19436, 9.422216, -2.0935626; 1.149477, 5.761862, -2.2479706; 1.5637127, 4.4175186, 0.790298; 1.7593423, 3.737742, 2.3075802; 1.2258252, 3.005371, 3.0364847; 0.862337, 2.4611225, 3.707807; 1.7903674, 2.974789, 3.4142041; -7.908393, 3.7123086, -1.2663112; -6.763012, -0.9989283, -0.3426242; -6.28083, -2.1893997, 2.608816; -6.0397396, -2.7846339, 4.0845346; -5.581438, -3.539802, 4.9838862; -5.304199, -4.1037703, 5.782649; -6.2604547, -3.6149693, 5.2614985\",\n  \"-0.0, 0.0, 0.0; 1.6573653, -1.2193959, 1.4951965; 2.3445463, -7.8518457, 4.428734; 0.9944829, -14.361673, 0.65884376; 1.0529953, -15.775784, 2.8450935; 1.153038, -16.087183, 4.0710874; -1.2724205, -1.6270124, 1.4308769; -2.7604375, -8.529881, 2.9271607; -5.494305, -13.15745, -2.665485; -7.050308, -14.987441, -1.6181732; -7.39929, -15.212767, -0.40909946; -1.114496, 2.0942948, -0.79413015; -2.6746087, 4.036605, -1.1599201; -4.364335, 5.9433584, -1.2012206; -5.5309877, 6.911345, -0.7117027; -5.8966312, 8.4548235, -0.67628753; -6.367938, 10.0147705, -0.574736; -2.125158, 9.448424, -2.033637; 1.193613, 5.7651024, -2.1825812; 1.5622627, 4.3869247, 0.8463876; 1.7350764, 3.690313, 2.3587961; 1.1859074, 2.9570858, 3.0751061; 0.8086347, 2.4113941, 3.7375937; 1.7439601, 2.921769, 3.4619486; -7.8835278, 3.7722092, -1.2857611; -6.793192, -0.9738326, -0.48133487; -6.3445826, -2.2508838, 2.4390435; -6.120277, -2.8894086, 3.899231; -5.6877723, -3.6708117, 4.788895; -5.4311376, -4.2553387, 5.5797243; -6.37116, -3.736533, 5.0580473\",\n  \"-0.0, 0.0, 0.0; 1.6542356, -1.2388356, 1.4826293; 2.3272464, -7.9033318, 4.3459826; 1.0257357, -14.472292, 0.6625838; 1.0973194, -15.884088, 2.84994; 1.2026143, -16.183865, 4.0783887; -1.2773069, -1.6337025, 1.4188497; -2.7682238, -8.542787, 2.8832169; -5.5292873, -13.220968, -2.6536832; -7.039487, -15.077972, -1.5870494; -7.3662395, -15.311305, -0.37329137; -1.1038512, 2.103987, -0.7833043; -2.6502402, 4.057962, -1.1452241; -4.3240204, 5.978744, -1.1857961; -5.4895344, 6.950854, -0.70176613; -5.8536234, 8.49482, -0.67205346; -6.3233376, 10.055605, -0.57616615; -2.0506232, 9.470556, -1.9802942; 1.2473781, 5.7683706, -2.1227424; 1.5722606, 4.355964, 0.8954499; 1.723178, 3.6423223, 2.4022517; 1.1584228, 2.9096835, 3.1069512; 0.76755416, 2.3636997, 3.7612658; 1.7102158, 2.8692274, 3.5021775; -7.8601537, 3.8371358, -1.3083755; -6.827508, -0.94057655, -0.62430143; -6.41338, -2.3001099, 2.2637577; -6.206317, -2.979875, 3.707786; -5.7984734, -3.7866404, 4.5863905; -5.5612946, -4.390916, 5.3684015; -6.485329, -3.8420131, 4.8489647\",\n  \"-0.0, 0.0, 0.0; 1.651654, -1.255745, 1.4712383; 2.30477, -7.9525766, 4.2628574; 1.0621144, -14.581868, 0.6682911; 1.142982, -15.990323, 2.8574767; 1.2508855, -16.279173, 4.088314; -1.2813108, -1.6399853, 1.4079497; -2.7828093, -8.553103, 2.842154; -5.5551786, -13.285879, -2.6424532; -7.0195627, -15.171873, -1.5628794; -7.326636, -15.414414, -0.345793; -1.090898, 2.114344, -0.7735021; -2.6218247, 4.080889, -1.1330674; -4.280087, 6.015047, -1.1754009; -5.443826, 6.992688, -0.6982911; -5.806677, 8.537052, -0.67472816; -6.276222, 10.098255, -0.5850081; -1.9730422, 9.493452, -1.930753; 1.307095, 5.7750015, -2.0615704; 1.585968, 4.3268356, 0.9442525; 1.713875, 3.5954015, 2.444638; 1.1332879, 2.8645985, 3.1382911; 0.72861433, 2.3193994, 3.784821; 1.6785986, 2.8192096, 3.5418887; -7.831839, 3.902219, -1.3390068; -6.8604636, -0.9045179, -0.7799369; -6.481879, -2.339213, 2.076467; -6.292588, -3.056561, 3.5046668; -5.910762, -3.8880453, 4.3718433; -5.69424, -4.5116205, 5.1446404; -6.601142, -3.9332182, 4.6270223\",\n  \"-0.0, 0.0, 0.0; 1.6489172, -1.2721177, 1.460201; 2.279916, -8.001095, 4.178649; 1.1001071, -14.691132, 0.67664075; 1.1893905, -16.095085, 2.868389; 1.3000146, -16.366272, 4.102998; -1.2854246, -1.6457905, 1.3973866; -2.7998357, -8.561826, 2.8036792; -5.576127, -13.349848, -2.6307623; -6.9946966, -15.262795, -1.537526; -7.28279, -15.513703, -0.31749856; -1.0760486, 2.1251962, -0.7645094; -2.590407, 4.10485, -1.1222994; -4.23363, 6.0517573, -1.1665587; -5.3951674, 7.0362163, -0.6981814; -5.7569604, 8.580922, -0.6818951; -6.227497, 10.142223, -0.59935486; -1.8938141, 9.517473, -1.8781724; 1.3694057, 5.783695, -1.9947032; 1.6039617, 4.300441, 0.99776495; 1.7097064, 3.5515485, 2.4912477; 1.1136117, 2.8238285, 3.174917; 0.69547343, 2.2804816, 3.8144; 1.6525986, 2.773642, 3.5863643; -7.7995605, 3.9670303, -1.3758663; -6.8897586, -0.8645632, -0.9413464; -6.548488, -2.369082, 1.8836632; -6.377854, -3.1213393, 3.296167; -6.0213675, -3.9776483, 4.1498675; -5.824971, -4.620817, 4.911908; -6.7148786, -4.013487, 4.3979397\",\n  \"-0.0, 0.0, 0.0; 1.646477, -1.2897954, 1.4473908; 2.2540555, -8.049488, 4.0940213; 1.1411428, -14.801085, 0.6896174; 1.237659, -16.199602, 2.8845332; 1.3500986, -16.451729, 4.123011; -1.2891618, -1.6532142, 1.3851267; -2.8200798, -8.569806, 2.7706542; -5.5896535, -13.416473, -2.6150107; -6.964142, -15.356014, -1.5123605; -7.237469, -15.618116, -0.2912898; -1.0601118, 2.1363745, -0.755567; -2.5568361, 4.129401, -1.1133168; -4.1844864, 6.089253, -1.1615441; -5.344149, 7.0805693, -0.7030909; -5.704427, 8.625691, -0.6945428; -6.17535, 10.187268, -0.6198015; -1.8113356, 9.540777, -1.8304632; 1.437624, 5.7941084, -1.9305336; 1.6260188, 4.277443, 1.048419; 1.708689, 3.5119324, 2.5349154; 1.0983211, 2.7865021, 3.2083478; 0.66777533, 2.2443156, 3.840541; 1.63132, 2.7313855, 3.6269042; -7.7642584, 4.03358, -1.4168773; -6.9144316, -0.8184099, -1.1056894; -6.6102266, -2.3919415, 1.6857575; -6.458126, -3.1787074, 3.081479; -6.126089, -4.0588245, 3.9207034; -5.949113, -4.7208858, 4.671235; -6.822344, -4.085901, 4.162107\",\n  \"-0.0, 0.0, 0.0; 1.6438088, -1.3105122, 1.4317297; 2.2268062, -8.100375, 4.005662; 1.1838734, -14.912802, 0.70176554; 1.2868854, -16.304928, 2.900445; 1.400948, -16.532349, 4.1435494; -1.2932385, -1.6624928, 1.3701397; -2.8432398, -8.578243, 2.7385478; -5.597066, -13.484377, -2.6011539; -6.928148, -15.449279, -1.490183; -7.187751, -15.72183, -0.26840496; -1.0439005, 2.1472456, -0.74727654; -2.5215225, 4.1541495, -1.1068497; -4.130319, 6.1293964, -1.1594292; -5.2882547, 7.128354, -0.7133657; -5.6483684, 8.673538, -0.71338165; -6.121028, 10.234935, -0.64621377; -1.7192631, 9.561784, -1.7901757; 1.5180359, 5.8045983, -1.8722465; 1.6603426, 4.259015, 1.0943756; 1.7199781, 3.4791355, 2.5744915; 1.0966263, 2.7551322, 3.2374854; 0.65489495, 2.213229, 3.8621597; 1.6243727, 2.6941464, 3.6618412; -7.726744, 4.1086826, -1.4564023; -6.9323735, -0.7588115, -1.2632; -6.6666665, -2.4031029, 1.4911468; -6.5338144, -3.2252471, 2.868319; -6.2236576, -4.128333, 3.691357; -6.064018, -4.808844, 4.429167; -6.9220676, -4.147997, 3.9271898\",\n  \"-0.0, 0.0, 0.0; 1.6401219, -1.3331162, 1.4149914; 2.2018025, -8.152248, 3.9152296; 1.2280016, -15.024113, 0.7149496; 1.3377203, -16.409252, 2.917713; 1.4530712, -16.612774, 4.1648345; -1.298542, -1.6714588, 1.3541216; -2.8684218, -8.584912, 2.7114296; -5.601385, -13.552744, -2.5817423; -6.8885803, -15.543498, -1.4650946; -7.1344175, -15.826136, -0.24276102; -1.0297583, 2.1570153, -0.7387127; -2.488514, 4.1773653, -1.1000168; -4.0751176, 6.170377, -1.156445; -5.2310357, 7.1764717, -0.7213232; -5.591268, 8.7216015, -0.73040503; -6.065377, 10.28291, -0.6719873; -1.6220922, 9.578372, -1.7569039; 1.6068687, 5.8137474, -1.8254682; 1.7053182, 4.243674, 1.1300524; 1.7430358, 3.4516366, 2.6044223; 1.1076789, 2.7297153, 3.258227; 0.6557343, 2.1886096, 3.8762517; 1.6308537, 2.6626754, 3.6873066; -7.691291, 4.190481, -1.4866792; -6.94691, -0.6881194, -1.409198; -6.7198477, -2.4039218, 1.3046892; -6.606316, -3.261821, 2.6616318; -6.314438, -4.187516, 3.466025; -6.1691017, -4.8864346, 4.1894436; -7.0141497, -4.2010655, 3.698412\",\n  \"-0.0, 0.0, 0.0; 1.6357121, -1.356974, 1.3973069; 2.1758747, -8.205381, 3.8211033; 1.2727346, -15.134388, 0.7250085; 1.3918029, -16.509853, 2.9333422; 1.5097709, -16.682016, 4.1849337; -1.3046585, -1.6802971, 1.337198; -2.8964257, -8.589857, 2.6888258; -5.602806, -13.621983, -2.557061; -6.8454285, -15.636957, -1.4333882; -7.0787363, -15.930683, -0.211213; -1.0133574, 2.1678903, -0.7295022; -2.4530816, 4.2016587, -1.0918604; -4.0198793, 6.210205, -1.1508322; -5.1732774, 7.2239423, -0.7269053; -5.533541, 8.768983, -0.7452099; -6.0094824, 10.330028, -0.6952253; -1.5301976, 9.596296, -1.7237056; 1.6905355, 5.824415, -1.779174; 1.7487092, 4.234552, 1.1668192; 1.766297, 3.4327078, 2.6362574; 1.1206374, 2.71235, 3.281639; 0.6599951, 2.1716065, 3.893529; 1.6400169, 2.6393054, 3.714333; -7.6529837, 4.2667894, -1.5106145; -6.96284, -0.62025833, -1.5468554; -6.769098, -2.4057212, 1.1243439; -6.672226, -3.2984526, 2.4599414; -6.3999157, -4.2492456, 3.2416015; -6.2699347, -4.9688315, 3.947466; -7.1009307, -4.2569995, 3.4702976\",\n  \"-0.0, 0.0, 0.0; 1.6302419, -1.3809401, 1.3801141; 2.1489203, -8.257288, 3.7283192; 1.3220289, -15.241595, 0.73694706; 1.4471531, -16.607485, 2.9508815; 1.5652016, -16.749733, 4.206218; -1.3119229, -1.6876384, 1.3207446; -2.9262533, -8.592764, 2.66827; -5.596687, -13.6895485, -2.5334296; -6.795038, -15.727844, -1.4037484; -7.016275, -16.031336, -0.18171465; -0.9952173, 2.179517, -0.71976584; -2.415657, 4.226655, -1.0829487; -3.964343, 6.249095, -1.145397; -5.115953, 7.2704782, -0.7351833; -5.4752483, 8.815597, -0.76330256; -5.951821, 10.376694, -0.721691; -1.441067, 9.615316, -1.6875639; 1.7716713, 5.836476, -1.7318802; 1.7891908, 4.229885, 1.205548; 1.7864593, 3.419764, 2.6705425; 1.1305425, 2.7017446, 3.3081398; 0.66127235, 2.1620324, 3.9143577; 1.646174, 2.622832, 3.7442737; -7.611659, 4.339037, -1.538484; -6.97586, -0.5532632, -1.6868474; -6.8164144, -2.4093616, 0.9380708; -6.7366924, -3.3374107, 2.2505279; -6.483338, -4.31351, 3.0069628; -6.368255, -5.0541673, 3.6933491; -7.185506, -4.316335, 3.2322044\",\n  \"-0.0, 0.0, 0.0; 1.6230792, -1.4058334, 1.3633214; 2.1224825, -8.309452, 3.6344213; 1.3733023, -15.346008, 0.7468281; 1.5044965, -16.701694, 2.9666748; 1.6217389, -16.817677, 4.224785; -1.3210728, -1.6929917, 1.3046751; -2.9564042, -8.593475, 2.6506557; -5.58972, -13.75407, -2.5068645; -6.742841, -15.813789, -1.3689978; -6.953198, -16.129845, -0.1482284; -0.97837263, 2.1900134, -0.7109452; -2.3802822, 4.249896, -1.0740663; -3.909426, 6.287134, -1.1370901; -5.0580945, 7.317176, -0.740505; -5.4149, 8.862651, -0.7788899; -5.890664, 10.424202, -0.74598616; -1.3511062, 9.631844, -1.6472218; 1.8540092, 5.8464284, -1.6811604; 1.8333427, 4.227376, 1.2493975; 1.8115253, 3.411107, 2.7108152; 1.1465247, 2.6953661, 3.3415277; 0.66968095, 2.1566556, 3.9427056; 1.6589828, 2.6107605, 3.780327; -7.5719213, 4.4134283, -1.5626547; -6.989669, -0.48093176, -1.8216267; -6.862863, -2.4078612, 0.7535596; -6.79946, -3.3713248, 2.041151; -6.56518, -4.3722215, 2.7708573; -6.4650826, -5.133615, 3.4365933; -7.268343, -4.3701158, 2.9929824\",\n  \"-0.0, 0.0, 0.0; 1.6144866, -1.4305692, 1.3477031; 2.0949814, -8.359549, 3.5444307; 1.4262102, -15.445341, 0.7593138; 1.5622916, -16.788036, 2.98675; 1.6779617, -16.869093, 4.247737; -1.3317076, -1.69611, 1.2897278; -2.9869723, -8.591982, 2.6349745; -5.576398, -13.814573, -2.4822059; -6.684493, -15.893986, -1.3354528; -6.884342, -16.221827, -0.11602676; -0.9601243, 2.2013752, -0.7006586; -2.3429377, 4.2741523, -1.0636275; -3.8530302, 6.325424, -1.1306696; -4.998947, 7.363599, -0.74756026; -5.352892, 8.909448, -0.79603827; -5.8273525, 10.471563, -0.77236116; -1.2608376, 9.648399, -1.610972; 1.9333541, 5.8536777, -1.6335967; 1.8742292, 4.226278, 1.2918091; 1.8331838, 3.405923, 2.7505226; 1.1592783, 2.6922789, 3.374119; 0.67499983, 2.1543965, 3.9700727; 1.668553, 2.6018832, 3.815463; -7.5292177, 4.4865704, -1.5889379; -6.9974375, -0.40643597, -1.9584606; -6.909738, -2.4053497, 0.5629225; -6.8658895, -3.4048047, 1.8236132; -6.650441, -4.4286523, 2.5267992; -6.565336, -5.2094116, 3.1718693; -7.3548465, -4.422456, 2.7448761\",\n  \"-0.0, 0.0, 0.0; 1.6052493, -1.4542637, 1.3333007; 2.0701847, -8.407104, 3.4567657; 1.4826553, -15.538307, 0.77100015; 1.6211056, -16.868748, 3.0056322; 1.7332022, -16.918898, 4.268549; -1.3428617, -1.6977389, 1.2759454; -3.0184047, -8.588871, 2.6203766; -5.559493, -13.870374, -2.4604416; -6.6228585, -15.966511, -1.3018496; -6.8147187, -16.309752, -0.08538115; -0.9417161, 2.2118058, -0.6927486; -2.3047643, 4.297598, -1.0559225; -3.794187, 6.363868, -1.1247556; -4.9388385, 7.4094415, -0.7583484; -5.2896247, 8.955624, -0.8178966; -5.7612314, 10.518709, -0.8027627; -1.166579, 9.6628275, -1.5773671; 2.0195339, 5.861262, -1.5856147; 1.9202144, 4.2270765, 1.3349161; 1.8590764, 3.403417, 2.7910614; 1.1767375, 2.6921573, 3.4081774; 0.68552077, 2.1552932, 3.9993515; 1.6832504, 2.5956845, 3.8514085; -7.4854035, 4.562944, -1.6119357; -6.998866, -0.32547998, -2.0888422; -6.9543715, -2.3960981, 0.37515497; -6.9321237, -3.431406, 1.6071517; -6.735043, -4.476157, 2.284505; -6.664693, -5.2746615, 2.9093132; -7.440804, -4.46631, 2.498013\",\n  \"-0.0, 0.0, 0.0; 1.5939064, -1.478492, 1.3201977; 2.050325, -8.452754, 3.3741207; 1.5403522, -15.6252575, 0.7841935; 1.6808219, -16.94276, 3.0263512; 1.7890527, -16.959608, 4.290488; -1.3562074, -1.6965075, 1.2634062; -3.0513556, -8.583005, 2.607007; -5.5398865, -13.921835, -2.439796; -6.557558, -16.03326, -1.2680002; -6.7409706, -16.391542, -0.05456984; -0.92305547, 2.2223423, -0.68408906; -2.2663774, 4.3209906, -1.0466961; -3.7345424, 6.4023285, -1.1182138; -4.8785744, 7.4547744, -0.76999843; -5.226732, 9.001012, -0.84219384; -5.695605, 10.564983, -0.836836; -1.0712612, 9.676036, -1.5449336; 2.107425, 5.8682528, -1.5393778; 1.9660287, 4.2287035, 1.3764087; 1.8838662, 3.402443, 2.8300438; 1.1931884, 2.6941545, 3.441273; 0.6950038, 2.1589754, 4.028128; 1.6966181, 2.592702, 3.8868968; -7.44063, 4.6400723, -1.6331115; -6.9963913, -0.24053907, -2.2188878; -6.998327, -2.379382, 0.18653679; -6.9992948, -3.4488025, 1.3892472; -6.821043, -4.512955, 2.0411353; -6.766071, -5.328062, 2.6457198; -7.52859, -4.4999857, 2.2484756\",\n  \"-0.0, 0.0, 0.0; 1.5818808, -1.5013074, 1.3088654; 2.0365427, -8.494439, 3.2979937; 1.601959, -15.704568, 0.8004377; 1.7420546, -17.009829, 3.0497682; 1.8449382, -16.995106, 4.314378; -1.3700413, -1.6934314, 1.2525609; -3.0836492, -8.575716, 2.5943289; -5.516689, -13.970289, -2.4201508; -6.487792, -16.096563, -1.2357566; -6.661578, -16.468657, -0.025068998; -0.9030863, 2.2334342, -0.6745528; -2.2257745, 4.345412, -1.0356199; -3.6726458, 6.4414825, -1.1107417; -4.8152704, 7.5011187, -0.78015983; -5.1601963, 9.047451, -0.8647657; -5.626072, 10.61232, -0.86949444; -0.9743552, 9.6894, -1.5139489; 2.1967635, 5.8753586, -1.4944495; 2.0156102, 4.2292914, 1.41546; 1.9135802, 3.3998606, 2.8660278; 1.2142156, 2.6959293, 3.4723933; 0.7089152, 2.1635234, 4.0556765; 1.714792, 2.58907, 3.9199634; -7.3930397, 4.7175703, -1.6516173; -6.987879, -0.15253925, -2.3435137; -7.0383434, -2.3561325, 0.0021951199; -7.0635767, -3.4579277, 1.1750484; -6.905487, -4.539721, 1.8026495; -6.86704, -5.3698406, 2.3877711; -7.6149316, -4.5227065, 2.0031009\",\n  \"-0.0, 0.0, 0.0; 1.5683483, -1.5246756, 1.2980934; 2.0284052, -8.533718, 3.229135; 1.6660515, -15.777784, 0.81981945; 1.8041708, -17.070265, 3.0766394; 1.900736, -17.024536, 4.341006; -1.3852812, -1.68862, 1.2422521; -3.116606, -8.566742, 2.582624; -5.487797, -14.019224, -2.3987412; -6.410882, -16.160475, -1.2029853; -6.572955, -16.542376, 0.0062725544; -0.8832331, 2.2442195, -0.66497517; -2.1853895, 4.369285, -1.0238724; -3.6101284, 6.4803576, -1.1018645; -4.748749, 7.5492287, -0.78759825; -5.090512, 9.095501, -0.8851471; -5.554938, 10.660727, -0.90109104; -0.87633634, 9.701132, -1.4830652; 2.2903159, 5.8834867, -1.4486499; 2.0672777, 4.2293234, 1.4537497; 1.9443249, 3.395936, 2.900422; 1.2366953, 2.6968658, 3.5028093; 0.724659, 2.1677165, 4.0831747; 1.7346134, 2.5849836, 3.9521146; -7.345151, 4.7962055, -1.6666577; -6.977194, -0.060750008, -2.4638042; -7.07559, -2.3223233, -0.17550254; -7.124788, -3.4531083, 0.9686471; -6.9867253, -4.551311, 1.5720065; -6.9645977, -5.395343, 2.1377487; -7.6977205, -4.5295534, 1.7664151\",\n  \"-0.0, 0.0, 0.0; 1.5552627, -1.5462872, 1.288236; 2.0244753, -8.568993, 3.1667204; 1.7344403, -15.843924, 0.84210134; 1.8696344, -17.123472, 3.1064546; 1.9589912, -17.0466, 4.3698406; -1.3997335, -1.6836073, 1.2328199; -3.14708, -8.55794, 2.5718396; -5.453558, -14.068859, -2.375487; -6.3265386, -16.223442, -1.166128; -6.475069, -16.612404, 0.042618394; -0.86284435, 2.2551982, -0.6545188; -2.1430264, 4.39404, -1.0106258; -3.5439963, 6.5208178, -1.0924209; -4.676882, 7.600628, -0.7952929; -5.0158715, 9.146617, -0.9061017; -5.4803123, 10.711683, -0.9333146; -0.77290726, 9.711924, -1.4532928; 2.3839655, 5.886304, -1.4077935; 2.1273234, 4.224634, 1.4875329; 1.9875708, 3.3875859, 2.9305615; 1.2707219, 2.6950006, 3.5295293; 0.7511985, 2.1704414, 4.107402; 1.7656908, 2.5779543, 3.9807725; -7.2942657, 4.8789115, -1.6801093; -6.9590235, 0.037898064, -2.5818024; -7.1060615, -2.2786078, -0.35180235; -7.1795774, -3.436859, 0.7631972; -7.0609627, -4.55122, 1.3405038; -7.0547156, -5.409096, 1.8854382; -7.7733946, -4.5251145, 1.5290304\",\n  \"-0.0, 0.0, 0.0; 1.5423403, -1.5667566, 1.2790068; 2.0213497, -8.601212, 3.1104653; 1.8021662, -15.903797, 0.8661804; 1.9316165, -17.170416, 3.1381261; 2.0121822, -17.059494, 4.3995714; -1.4137474, -1.6783338, 1.2239873; -3.1779952, -8.548972, 2.5598006; -5.4150295, -14.1164, -2.3560462; -6.236282, -16.281618, -1.1295668; -6.3690805, -16.67224, 0.08047426; -0.8429048, 2.265679, -0.6442238; -2.100429, 4.4181995, -0.9986412; -3.4758751, 6.5613174, -1.0868824; -4.6014185, 7.653496, -0.8075913; -4.937207, 9.199193, -0.93144673; -5.4020095, 10.763918, -0.9697994; -0.66553354, 9.719953, -1.4294044; 2.4750278, 5.881078, -1.3728745; 2.1898031, 4.2099247, 1.5143075; 2.0357542, 3.3682315, 2.953173; 1.3087481, 2.6844466, 3.550006; 0.7809574, 2.1665187, 4.126366; 1.8003469, 2.5628798, 4.0037317; -7.2416906, 4.963913, -1.697361; -6.935254, 0.14242983, -2.7074332; -7.132658, -2.2254963, -0.5361023; -7.231361, -3.409458, 0.54956186; -7.13224, -4.5385804, 1.1012952; -7.142085, -5.4091816, 1.6256049; -7.8463254, -4.508355, 1.282813\",\n  \"-0.0, 0.0, 0.0; 1.5313623, -1.5843624, 1.2704821; 2.0226495, -8.628691, 3.0602665; 1.8733307, -15.956258, 0.8929975; 1.9952006, -17.209478, 3.1727786; 2.0657656, -17.063984, 4.431306; -1.4254688, -1.6743445, 1.2158296; -3.205697, -8.541921, 2.5461779; -5.3709574, -14.1616535, -2.3422132; -6.1443844, -16.33215, -1.0941604; -6.265203, -16.726522, 0.11591935; -0.82082933, 2.2766502, -0.63396955; -2.0536802, 4.4436364, -0.9869175; -3.4040933, 6.6023045, -1.0824536; -4.5211124, 7.7076855, -0.82148314; -4.8525543, 9.253211, -0.9584899; -5.317162, 10.817671, -1.008327; -0.55585, 9.729109, -1.403265; 2.5694466, 5.8779926, -1.3346015; 2.2531948, 4.195451, 1.5427176; 2.0836344, 3.3481638, 2.9765468; 1.3454117, 2.6746302, 3.5712643; 0.8084154, 2.1645892, 4.146153; 1.8329852, 2.5488188, 4.028168; -7.1836066, 5.0482635, -1.7196252; -6.89888, 0.24929857, -2.837531; -7.1503983, -2.1694052, -0.728662; -7.276158, -3.378755, 0.3257718; -7.1960535, -4.520455, 0.85421956; -7.2220535, -5.4020543, 1.3592446; -7.912506, -4.4872255, 1.0256085\",\n  \"-0.0, 0.0, 0.0; 1.5232685, -1.5995842, 1.2611034; 2.0278485, -8.651225, 3.0180922; 1.9450285, -16.001564, 0.9256606; 2.056227, -17.240896, 3.2135653; 2.1152585, -17.05705, 4.4676604; -1.4340146, -1.6735402, 1.2068542; -3.2331066, -8.537125, 2.5324173; -5.3218727, -14.205584, -2.3329434; -6.0535836, -16.376907, -1.0613989; -6.1696534, -16.784004, 0.14492595; -0.7968285, 2.287842, -0.6242261; -2.002522, 4.47003, -0.97732854; -3.3275728, 6.6439447, -1.0818524; -4.436097, 7.762315, -0.84075797; -4.7719707, 9.305749, -0.9900038; -5.234975, 10.870276, -1.051319; -0.44168758, 9.738289, -1.3802059; 2.6699245, 5.876474, -1.2933726; 2.3188975, 4.1787443, 1.5709631; 2.1319628, 3.323975, 2.998176; 1.3809385, 2.663886, 3.591939; 0.83350164, 2.164382, 4.166232; 1.8639817, 2.5337832, 4.0524354; -7.119691, 5.1332, -1.7476182; -6.851593, 0.36017752, -2.975309; -7.159334, -2.1048377, -0.92842937; -7.313206, -3.3373432, 0.095009565; -7.251896, -4.49142, 0.5984981; -7.2944164, -5.384166, 1.0823785; -7.9715357, -4.4569464, 0.7556944\",\n  \"-0.0, 0.0, 0.0; 1.5157639, -1.6149052, 1.250576; 2.0358434, -8.670634, 2.9865072; 2.0195842, -16.04175, 0.9668598; 2.1182437, -17.267326, 3.2627363; 2.164522, -17.048464, 4.5117345; -1.4418595, -1.6740348, 1.196779; -3.2600617, -8.533441, 2.5178914; -5.2703066, -14.246681, -2.3281298; -5.9657784, -16.416798, -1.0343789; -6.0825915, -16.845255, 0.1644535; -0.7701247, 2.2997658, -0.6138395; -1.9469314, 4.497644, -0.9670834; -3.2475686, 6.685807, -1.0805564; -4.3466473, 7.817568, -0.8595397; -4.6745944, 9.361232, -1.0233254; -5.1342697, 10.926166, -1.0978855; -0.32619786, 9.748925, -1.3548169; 2.7697935, 5.8750763, -1.2479712; 2.3836741, 4.159942, 1.6014417; 2.1792064, 3.2965884, 3.0210633; 1.4153845, 2.6504998, 3.6138995; 0.8576013, 2.1618805, 4.1876006; 1.894014, 2.515492, 4.077584; -7.0505347, 5.2164783, -1.7764528; -6.7944903, 0.4717269, -3.1116004; -7.157575, -2.0356517, -1.1261681; -7.3391185, -3.289339, -0.13345271; -7.298739, -4.455328, 0.3440321; -7.359975, -5.358885, 0.8053113; -8.022145, -4.4195733, 0.4825525\",\n  \"-0.0, 0.0, 0.0; 1.5082042, -1.6319311, 1.237546; 2.0482857, -8.688742, 2.9629393; 2.0974553, -16.07806, 1.0114912; 2.1828768, -17.28937, 3.315455; 2.2158072, -17.03323, 4.5577703; -1.4496903, -1.6761384, 1.1843098; -3.2823915, -8.53236, 2.5019138; -5.217928, -14.2877245, -2.3246377; -5.880371, -16.45641, -1.0113014; -5.997642, -16.904654, 0.18022847; -0.74240196, 2.311829, -0.6025777; -1.8894237, 4.5253515, -0.9561044; -3.1652224, 6.7276316, -1.0781324; -4.2559404, 7.8709927, -0.87623066; -4.5746293, 9.414991, -1.0545032; -5.0279527, 10.981057, -1.1429015; -0.208668, 9.758673, -1.330891; 2.869304, 5.871068, -1.2047619; 2.4533179, 4.1379933, 1.6295518; 2.2339222, 3.2657874, 3.041513; 1.4577234, 2.6343024, 3.634009; 0.889998, 2.1570706, 4.2075434; 1.9321177, 2.4944847, 4.1006107; -6.979019, 5.300126, -1.801275; -6.732556, 0.58482885, -3.2386599; -7.1521482, -1.9619482, -1.3154881; -7.3619432, -3.2353354, -0.35390335; -7.3419456, -4.4127026, 0.096162856; -7.4214606, -5.3266377, 0.5335914; -8.068671, -4.3753595, 0.21557069\",\n  \"-0.0, 0.0, 0.0; 1.5001216, -1.6496441, 1.2238088; 2.0642188, -8.705112, 2.9470053; 2.174252, -16.109499, 1.0560951; 2.247987, -17.306852, 3.367745; 2.2682977, -17.009233, 4.601053; -1.4579763, -1.6781876, 1.1711632; -3.300187, -8.532866, 2.483524; -5.172153, -14.325649, -2.3232963; -5.8017664, -16.491762, -0.98972225; -5.9171767, -16.958223, 0.19497776; -0.71465415, 2.3235981, -0.5907413; -1.8326006, 4.5520725, -0.943473; -3.084754, 6.7675076, -1.0721253; -4.1667123, 7.922396, -0.88963574; -4.475274, 9.466771, -1.0819147; -4.921211, 11.034195, -1.1829088; -0.0954833, 9.767855, -1.3055646; 2.9583929, 5.8618603, -1.1629763; 2.5200822, 4.113777, 1.6587284; 2.2895124, 3.234189, 3.0643153; 1.5032363, 2.6153626, 3.65688; 0.9276633, 2.1477327, 4.2305017; 1.9747167, 2.4698858, 4.124705; -6.9087005, 5.3799105, -1.8189592; -6.670485, 0.69569445, -3.355911; -7.1424847, -1.8859723, -1.49233; -7.378483, -3.1768043, -0.56054085; -7.3779874, -4.364689, -0.1385422; -7.4747357, -5.2881355, 0.27477348; -8.10709, -4.3244543, -0.035702676\",\n  \"-0.0, 0.0, 0.0; 1.4909189, -1.6670967, 1.2113415; 2.081499, -8.71953, 2.9380865; 2.2533696, -16.13592, 1.0995429; 2.3145194, -17.318975, 3.4189086; 2.3216202, -16.988491, 4.6439667; -1.4673058, -1.6783407, 1.1592318; -3.3086174, -8.535431, 2.460206; -5.131465, -14.360216, -2.3267784; -5.728829, -16.52236, -0.9720968; -5.839393, -17.003016, 0.20737958; -0.6864758, 2.3350577, -0.5788525; -1.774926, 4.5783987, -0.92959577; -3.002568, 6.8072023, -1.0634724; -4.0750346, 7.973468, -0.8981093; -4.3737297, 9.518023, -1.104034; -4.8125525, 11.086572, -1.217904; 0.019854784, 9.775282, -1.2820524; 3.0437272, 5.8464684, -1.1274354; 2.5876126, 4.089531, 1.6859357; 2.3481145, 3.205631, 3.0873187; 1.5536872, 2.5981321, 3.6807323; 0.9718712, 2.1391096, 4.2550077; 2.0229852, 2.4477522, 4.149201; -6.837674, 5.460985, -1.8285975; -6.6048565, 0.8086009, -3.4601498; -7.13042, -1.8032782, -1.6538852; -7.393201, -3.109216, -0.7507539; -7.40581, -4.3056493, -0.35383925; -7.5142694, -5.2370386, 0.03819877; -8.1364565, -4.263933, -0.26329434\",\n  \"-0.0, 0.0, 0.0; 1.4826946, -1.6829746, 1.1994212; 2.0998516, -8.730555, 2.9366555; 2.331954, -16.157135, 1.1465033; 2.3798673, -17.324884, 3.4739232; 2.3733866, -16.959675, 4.689085; -1.4755559, -1.6789471, 1.1478251; -3.3145204, -8.540181, 2.4301367; -5.0936027, -14.392359, -2.3398733; -5.660887, -16.549112, -0.96383584; -5.766476, -17.042715, 0.21073925; -0.65911007, 2.3456607, -0.56768316; -1.7177902, 4.603547, -0.91620624; -2.919932, 6.845964, -1.0540929; -3.9812608, 8.024643, -0.90576726; -4.2695723, 9.569265, -1.12552; -4.70154, 11.13871, -1.2525055; 0.13629484, 9.780368, -1.2567416; 3.1256223, 5.825739, -1.0890696; 2.6508121, 4.0665603, 1.7198043; 2.4019308, 3.1816597, 3.118919; 1.6004181, 2.585025, 3.713825; 1.0133312, 2.1341822, 4.289215; 2.0681295, 2.4295607, 4.182218; -6.7662377, 5.543022, -1.8376927; -6.5356617, 0.9226427, -3.5580935; -7.1154456, -1.7156894, -1.8077296; -7.405337, -3.034854, -0.9325484; -7.425053, -4.2382193, -0.5574802; -7.540344, -5.176402, -0.18403074; -8.157008, -4.197418, -0.47773814\",\n  \"-0.0, 0.0, 0.0; 1.475622, -1.6956456, 1.1902622; 2.1219692, -8.736808, 2.942836; 2.4116483, -16.172174, 1.1981281; 2.446043, -17.325449, 3.5329928; 2.4258413, -16.921946, 4.7358294; -1.4825912, -1.6787192, 1.13906; -3.3160882, -8.545972, 2.396745; -5.057076, -14.422905, -2.356857; -5.593897, -16.57309, -0.95849967; -5.69365, -17.080011, 0.21090174; -0.6310061, 2.3559842, -0.5567614; -1.6579766, 4.629043, -0.9015181; -2.832701, 6.885786, -1.0419586; -3.8822117, 8.077048, -0.91109115; -4.1611876, 9.621429, -1.1441904; -4.5878086, 11.191308, -1.2833127; 0.25912666, 9.783651, -1.2298194; 3.2097113, 5.80053, -1.0507222; 2.7166052, 4.0450993, 1.7573439; 2.4585278, 3.1621885, 3.1560493; 1.6509033, 2.5748587, 3.751948; 1.0593207, 2.130881, 4.328071; 2.1172838, 2.4142876, 4.2199464; -6.691186, 5.629605, -1.8418658; -6.459842, 1.0422425, -3.648363; -7.0916195, -1.621501, -1.9554226; -7.4075074, -2.9533713, -1.1089535; -7.434208, -4.1625724, -0.7536051; -7.556178, -5.106479, -0.39708504; -8.167262, -4.1221366, -0.6844776\",\n  \"-0.0, 0.0, 0.0; 1.4703071, -1.7061667, 1.1817741; 2.147078, -8.739917, 2.9525356; 2.4928198, -16.182562, 1.2495694; 2.5134418, -17.320988, 3.5918713; 2.479583, -16.883078, 4.782303; -1.4878399, -1.679567, 1.1309369; -3.3114386, -8.554691, 2.359675; -5.023329, -14.452879, -2.3781447; -5.5265656, -16.594763, -0.9547832; -5.6156654, -17.106722, 0.21328294; -0.6035146, 2.3657548, -0.5457004; -1.598427, 4.6536975, -0.8859796; -2.7454333, 6.9245415, -1.028232; -3.7814674, 8.129127, -0.9128532; -4.0511246, 9.673153, -1.1589063; -4.4732556, 11.243091, -1.310492; 0.3816507, 9.785258, -1.2013351; 3.2931013, 5.7739315, -1.0116032; 2.7820506, 4.0239134, 1.7966329; 2.5149572, 3.143817, 3.1954193; 1.7025146, 2.564866, 3.7929661; 1.1074446, 2.1271775, 4.3703084; 2.1679263, 2.4003637, 4.2605615; -6.6157174, 5.7156725, -1.8438838; -6.3814707, 1.1617131, -3.732648; -7.064041, -1.5259948, -2.0983145; -7.4053264, -2.869847, -1.2811491; -7.4373083, -4.084271, -0.9445416; -7.56477, -5.033495, -0.60443723; -8.171492, -4.0452437, -0.8876295\",\n  \"-0.0, 0.0, 0.0; 1.4673542, -1.7137693, 1.1744211; 2.1729891, -8.738384, 2.9700031; 2.5740871, -16.18754, 1.3081362; 2.5790298, -17.310022, 3.658206; 2.5306184, -16.8348, 4.833731; -1.4907447, -1.6817137, 1.1238997; -3.3029535, -8.566069, 2.3172965; -4.988825, -14.483725, -2.4055533; -5.4565625, -16.61372, -0.95255196; -5.530352, -17.116491, 0.22056174; -0.57535034, 2.3749795, -0.53596485; -1.536918, 4.6777964, -0.8717382; -2.6563587, 6.962329, -1.0144142; -3.6774547, 8.181056, -0.91556066; -3.9369977, 9.724636, -1.174928; -4.354625, 11.294507, -1.3391526; 0.5050738, 9.786036, -1.1704441; 3.3743534, 5.7449923, -0.96923304; 2.8443522, 4.002194, 1.8399804; 2.5677392, 3.125812, 3.2392488; 1.7502865, 2.55437, 3.8371902; 1.1514423, 2.1222572, 4.41483; 2.2142825, 2.386007, 4.3048186; -6.5375175, 5.8008585, -1.8470871; -6.2951746, 1.2801118, -3.8130388; -7.027809, -1.4302199, -2.2388506; -7.394127, -2.7853837, -1.4517574; -7.432574, -4.0044293, -1.1330063; -7.566539, -4.9583225, -0.80883914; -8.167706, -3.965986, -1.0895814\",\n  \"-0.0, 0.0, 0.0; 1.4649134, -1.7201396, 1.1681384; 2.2005816, -8.734571, 2.991264; 2.65761, -16.189243, 1.3690423; 2.6469476, -17.295671, 3.726694; 2.5838764, -16.783028, 4.885684; -1.493139, -1.6835959, 1.1178877; -3.284266, -8.580457, 2.2701979; -4.954893, -14.514683, -2.4372516; -5.386991, -16.631008, -0.9535638; -5.4441442, -17.12245, 0.22526538; -0.5469434, 2.3836937, -0.5269456; -1.4747963, 4.701027, -0.85766757; -2.5668223, 6.9988546, -0.99930024; -3.5733373, 8.230724, -0.9148669; -3.8221426, 9.773964, -1.1864945; -4.2339177, 11.344044, -1.3630447; 0.62807894, 9.785562, -1.1378157; 3.4543707, 5.715023, -0.9231588; 2.905992, 3.9792628, 1.8868842; 2.6201515, 3.106493, 3.2865558; 1.799301, 2.5404663, 3.8849933; 1.1979262, 2.1123831, 4.4630046; 2.2623687, 2.3694072, 4.352564; -6.4583297, 5.88486, -1.8483818; -6.2040215, 1.3967323, -3.886243; -6.9837885, -1.3347104, -2.3723395; -7.3736725, -2.7004297, -1.6153885; -7.4181943, -3.9237869, -1.3144436; -7.558302, -4.8820605, -1.0061824; -8.15401, -3.8857062, -1.2843176\",\n  \"-0.0, 0.0, 0.0; 1.4623922, -1.726099, 1.1624929; 2.2302072, -8.728921, 3.0167289; 2.741086, -16.188627, 1.4342031; 2.7155015, -17.278954, 3.79923; 2.638266, -16.728504, 4.9398785; -1.4956033, -1.6849859, 1.1124856; -3.2558432, -8.597487, 2.2177072; -4.9212856, -14.54691, -2.4723659; -5.3202667, -16.647112, -0.9568329; -5.359583, -17.119522, 0.23047578; -0.5195491, 2.3918014, -0.51785105; -1.4139585, 4.7230363, -0.84296215; -2.4777226, 7.034174, -0.98309714; -3.4674208, 8.280413, -0.9117509; -3.705308, 9.8232355, -1.1952696; -4.1121206, 11.393164, -1.384235; 0.7509811, 9.782467, -1.104244; 3.5356085, 5.6839666, -0.8774704; 2.9694188, 3.9559722, 1.9338268; 2.6746404, 3.0871658, 3.3341103; 1.8515838, 2.5243087, 3.932507; 1.2485812, 2.0984716, 4.5104814; 2.3140712, 2.3510282, 4.3998356; -6.3794003, 5.9690843, -1.8481106; -6.1121454, 1.513794, -3.9551964; -6.9352107, -1.2362444, -2.498978; -7.3467436, -2.6112623, -1.7708702; -7.3988314, -3.8385348, -1.4876003; -7.5462713, -4.8006935, -1.1952729; -8.135045, -3.7996745, -1.4714158\",\n  \"-0.0, 0.0, 0.0; 1.4613221, -1.7304636, 1.1573385; 2.261237, -8.720804, 3.0448008; 2.8248377, -16.184813, 1.5009257; 2.7846487, -17.257929, 3.873609; 2.6935592, -16.669611, 4.994155; -1.4966488, -1.6873059, 1.1075529; -3.215527, -8.618474, 2.1596985; -4.8887053, -14.580383, -2.5117273; -5.25655, -16.663885, -0.96557486; -5.2789927, -17.121168, 0.2280786; -0.49340656, 2.3990657, -0.5097533; -1.3545544, 4.743513, -0.82962173; -2.389625, 7.067762, -0.96777695; -3.361727, 8.328329, -0.90700436; -3.5879557, 9.870863, -1.2014275; -3.9888732, 11.440785, -1.402641; 0.872715, 9.776676, -1.0737755; 3.6133862, 5.649463, -0.8326982; 3.0315862, 3.9239945, 1.9769622; 2.7289646, 3.0565484, 3.3764155; 1.9031076, 2.4991012, 3.976017; 1.2981774, 2.0772133, 4.5548725; 2.3651488, 2.3227098, 4.4426236; -6.301509, 6.0522413, -1.8462033; -6.0158544, 1.6272087, -4.013768; -6.8804264, -1.1397245, -2.614727; -7.3127127, -2.5231895, -1.9152079; -7.374386, -3.7539067, -1.6493427; -7.5306816, -4.7193127, -1.3727438; -8.1106415, -3.7126172, -1.6468968\",\n  \"-0.0, 0.0, 0.0; 1.4602534, -1.734258, 1.1529996; 2.293099, -8.710852, 3.0767355; 2.9090066, -16.17839, 1.5703708; 2.8541756, -17.235126, 3.9501023; 2.7494686, -16.613506, 5.051312; -1.4976902, -1.6891013, 1.1034003; -3.1639538, -8.641832, 2.096249; -4.8558607, -14.613404, -2.5560513; -5.1967764, -16.679276, -0.98035336; -5.2052126, -17.127916, 0.21675587; -0.4674357, 2.4061513, -0.50075364; -1.2949363, 4.7634716, -0.8147688; -2.3004584, 7.1007185, -0.9518552; -3.2550764, 8.375052, -0.9020306; -3.469935, 9.917184, -1.2068925; -3.8649495, 11.487079, -1.4196647; 0.9958019, 9.768757, -1.0443422; 3.6953568, 5.615427, -0.78833544; 3.0972548, 3.8897014, 2.0177422; 2.7864485, 3.0222402, 3.4153912; 1.9578129, 2.4709632, 4.016861; 1.3511915, 2.0533729, 4.5970616; 2.4198592, 2.2898598, 4.481651; -6.2222986, 6.1356907, -1.8427219; -5.9171753, 1.7413683, -4.0693054; -6.817329, -1.0409529, -2.7242658; -7.267405, -2.4321117, -2.0517464; -7.342909, -3.6659298, -1.8044726; -7.511436, -4.6339483, -1.5446988; -8.078761, -3.6194744, -1.816606\",\n  \"-0.0, 0.0, 0.0; 1.4599019, -1.7368405, 1.1495519; 2.326512, -8.698254, 3.1129584; 2.9958515, -16.168644, 1.6439906; 2.9252665, -17.208765, 4.0306168; 2.8066618, -16.559427, 5.1142826; -1.4980319, -1.6909491, 1.1001016; -3.101757, -8.667242, 2.0285683; -4.8211946, -14.645525, -2.60498; -5.136197, -16.691835, -0.99866056; -5.1292524, -17.126211, 0.20370781; -0.44152588, 2.4127152, -0.4926197; -1.2352364, 4.7823606, -0.8010479; -2.2114835, 7.132057, -0.9369079; -3.1477633, 8.420204, -0.8949414; -3.3499591, 9.962255, -1.2087436; -3.7376316, 11.532414, -1.4327627; 1.1176789, 9.759345, -1.0166185; 3.784304, 5.5857587, -0.74536586; 3.166296, 3.857576, 2.0548801; 2.8455143, 2.9890072, 3.4495842; 2.015417, 2.443087, 4.0539174; 1.4084598, 2.0288315, 4.636153; 2.4785929, 2.2556512, 4.5150595; -6.142622, 6.2169356, -1.8393792; -5.817874, 1.8505058, -4.117466; -6.7485194, -0.9465461, -2.8247476; -7.2138414, -2.34507, -2.178388; -7.304854, -3.581467, -1.9499333; -7.486861, -4.5514555, -1.7071586; -8.039884, -3.528388, -1.97632\",\n  \"-0.0, 0.0, 0.0; 1.4597478, -1.7391111, 1.1463109; 2.3608966, -8.683791, 3.1529522; 3.0828161, -16.156347, 1.7203554; 2.9972682, -17.180784, 4.113268; 2.8652399, -16.504385, 5.1786747; -1.4981846, -1.6928284, 1.096999; -3.0356889, -8.692451, 1.9595578; -4.7844462, -14.676495, -2.655546; -5.0712585, -16.701242, -1.0169472; -5.046211, -17.113665, 0.19288766; -0.41572624, 2.4189405, -0.48447254; -1.175695, 4.8003197, -0.7874619; -2.1228828, 7.1619215, -0.9226037; -3.043606, 8.461352, -0.8844802; -3.2338336, 10.003446, -1.2054751; -3.6129422, 11.574127, -1.4402391; 1.2382522, 9.748508, -0.9908255; 3.8712149, 5.5546985, -0.70316815; 3.2344291, 3.8254418, 2.0922031; 2.9042377, 2.9564524, 3.484447; 2.0734234, 2.4151506, 4.091941; 1.4667122, 2.0037065, 4.6764226; 2.5379348, 2.2219489, 4.5493455; -6.062681, 6.295974, -1.8357711; -5.721566, 1.9558396, -4.161223; -6.67608, -0.8550358, -2.9167943; -7.153336, -2.2604723, -2.294581; -7.257529, -3.4984279, -2.0806606; -7.4509916, -4.469456, -1.8512695; -7.991558, -3.4395273, -2.1195667\",\n  \"-0.0, 0.0, 0.0; 1.4602524, -1.7402165, 1.1439881; 2.3965049, -8.6669035, 3.196227; 3.1725583, -16.140663, 1.7986338; 3.069503, -17.148926, 4.197718; 2.9231641, -16.448647, 5.2456837; -1.4976928, -1.6947014, 1.0947764; -2.9687977, -8.716645, 1.8890071; -4.743802, -14.70566, -2.7095995; -5.0000196, -16.706398, -1.0367947; -4.955953, -17.094196, 0.18061638; -0.3882863, 2.4249845, -0.476968; -1.1139365, 4.8176823, -0.774879; -2.0342164, 7.1899147, -0.9097503; -2.9401782, 8.4997225, -0.87312746; -3.117365, 10.041967, -1.2007879; -3.4861526, 11.613357, -1.4469761; 1.3557868, 9.738943, -0.9611977; 3.9456863, 5.5193186, -0.6604034; 3.2965949, 3.790638, 2.132493; 2.9602106, 2.9220438, 3.5235004; 2.1281087, 2.3845074, 4.132574; 1.5209253, 1.9753273, 4.718154; 2.5931282, 2.1864567, 4.5873823; -5.97996, 6.3694153, -1.8390732; -5.6234255, 2.0516047, -4.203442; -6.5980244, -0.77277446, -3.0060458; -7.085323, -2.1849623, -2.4073477; -7.196399, -3.4235606, -2.2007344; -7.3961043, -4.395019, -1.9786301; -7.9296274, -3.3621035, -2.2495308\",\n  \"-0.0, 0.0, 0.0; 1.4608707, -1.74052, 1.1427358; 2.4310493, -8.648595, 3.241426; 3.2628262, -16.123081, 1.8802502; 3.143331, -17.114586, 4.2855477; 2.9830859, -16.394255, 5.317771; -1.4970888, -1.696008, 1.0935783; -2.903376, -8.738414, 1.8212588; -4.696198, -14.734732, -2.7608888; -4.9237785, -16.709574, -1.0535282; -4.8610697, -17.065119, 0.17287874; -0.35989523, 2.4308705, -0.46920946; -1.0514302, 4.8343143, -0.76171696; -1.947026, 7.215957, -0.89690864; -2.837141, 8.536646, -0.86254036; -3.0009387, 10.078969, -1.1967347; -3.3597977, 11.650914, -1.4538064; 1.4688518, 9.730505, -0.9307319; 4.003798, 5.477976, -0.62523544; 3.3531623, 3.7521996, 2.1690974; 3.0159419, 2.8851552, 3.5608692; 2.182969, 2.3515296, 4.172187; 1.5755264, 1.9450667, 4.759388; 2.648416, 2.1505253, 4.6252584; -5.8970327, 6.4368815, -1.8436077; -5.5276833, 2.1403518, -4.244495; -6.5174284, -0.69560814, -3.087578; -7.0122995, -2.1135864, -2.5091195; -7.1311727, -3.3528838, -2.3112214; -7.33781, -4.324775, -2.0975115; -7.8634048, -3.2881575, -2.369766\",\n  \"-0.0, 0.0, 0.0; 1.4628954, -1.7395625, 1.1416035; 2.4665594, -8.628393, 3.287276; 3.3533626, -16.103653, 1.9656554; 3.2172985, -17.078289, 4.37696; 3.0432744, -16.337866, 5.392601; -1.4951146, -1.6984464, 1.0924946; -2.8363929, -8.760115, 1.7531447; -4.6450877, -14.765547, -2.8107934; -4.845787, -16.713734, -1.0697708; -4.7662935, -17.03907, 0.16402686; -0.33160508, 2.4362786, -0.46195063; -0.98843354, 4.850074, -0.7491659; -1.8591368, 7.24094, -0.8841592; -2.7340586, 8.571758, -0.85038644; -2.883986, 10.114182, -1.1905684; -3.2316496, 11.686815, -1.4585875; 1.5823553, 9.720487, -0.9014155; 4.0498676, 5.4284687, -0.5960512; 3.4079156, 3.7100801, 2.2048352; 3.074942, 2.8468194, 3.5999775; 2.241901, 2.3158357, 4.2134986; 1.6347432, 1.9112656, 4.8022995; 2.7079341, 2.1131775, 4.665226; -5.813303, 6.5036583, -1.8468289; -5.4312325, 2.2247362, -4.276992; -6.4357777, -0.62041545, -3.1559563; -6.93805, -2.0429893, -2.595438; -7.0643244, -3.2831278, -2.407651; -7.277513, -4.255625, -2.2033374; -7.795482, -3.2150657, -2.4751713\",\n  \"-0.0, 0.0, 0.0; 1.467085, -1.737027, 1.1400869; 2.5000157, -8.607095, 3.3315427; 3.4433546, -16.083044, 2.0536993; 3.2870822, -17.03995, 4.470873; 3.0980134, -16.281893, 5.4706936; -1.4910171, -1.7029753, 1.0910429; -2.772745, -8.781605, 1.6850275; -4.5868616, -14.799288, -2.8605852; -4.7627006, -16.719444, -1.086056; -4.669077, -17.015726, 0.15405333; -0.30399433, 2.4409723, -0.45613152; -0.92563987, 4.86455, -0.73924136; -1.7710963, 7.2644863, -0.8737814; -2.6298134, 8.6057625, -0.8378803; -2.7646375, 10.148503, -1.1829149; -3.0998049, 11.721961, -1.4617919; 1.6959339, 9.708256, -0.87685317; 4.088114, 5.3735685, -0.57478654; 3.4561749, 3.6679015, 2.236135; 3.1281023, 2.8110933, 3.6364064; 2.296737, 2.2816586, 4.2535286; 1.6913592, 1.8782569, 4.844958; 2.764304, 2.0783615, 4.7033815; -5.729616, 6.5694804, -1.849916; -5.3315463, 2.3057332, -4.304065; -6.352226, -0.5457928, -3.2142336; -6.862565, -1.9715532, -2.6693165; -6.994793, -3.2127776, -2.4931607; -7.2133408, -4.1862383, -2.2993703; -7.724864, -3.141942, -2.5690696\",\n  \"-0.0, 0.0, 0.0; 1.4723526, -1.7337409, 1.138297; 2.536287, -8.584824, 3.3739095; 3.5321672, -16.06188, 2.1432848; 3.3595665, -16.999685, 4.566826; 3.1573937, -16.220594, 5.5477347; -1.4858403, -1.7085873, 1.08933; -2.7109127, -8.802308, 1.619394; -4.5265527, -14.83691, -2.9031215; -4.6783795, -16.725967, -1.0933472; -4.571571, -16.991096, 0.15273392; -0.27794197, 2.445185, -0.45014718; -0.86522114, 4.8778877, -0.728329; -1.6855997, 7.286627, -0.8607928; -2.5269341, 8.638821, -0.82292503; -2.6464646, 10.181869, -1.172198; -2.9693694, 11.756198, -1.460464; 1.8063644, 9.6946125, -0.85024107; 4.116359, 5.3151445, -0.55448145; 3.4989908, 3.622316, 2.2674177; 3.1780877, 2.7720106, 3.6733034; 2.348415, 2.2466311, 4.2961426; 1.7447728, 1.8468971, 4.891821; 2.8174124, 2.045052, 4.7452765; -5.648427, 6.634101, -1.8487005; -5.234017, 2.3827076, -4.321505; -6.273183, -0.47255707, -3.2592826; -6.7927656, -1.9001877, -2.7281723; -6.928728, -3.1426616, -2.5640817; -7.150866, -4.117409, -2.3811455; -7.6577353, -3.0701647, -2.648187\",\n  \"-0.0, 0.0, 0.0; 1.4776418, -1.7293471, 1.1381265; 2.5714235, -8.56166, 3.4163694; 3.6212587, -16.039402, 2.2357707; 3.4304268, -16.957682, 4.665414; 3.2144835, -16.1594, 5.6277833; -1.480614, -1.7132219, 1.089167; -2.6504712, -8.820587, 1.5576056; -4.460596, -14.874828, -2.9408088; -4.5886183, -16.728785, -1.0932894; -4.4682584, -16.954006, 0.15939105; -0.25327718, 2.4488902, -0.44452408; -0.8069602, 4.890037, -0.71758056; -1.6017872, 7.307425, -0.84825766; -2.424628, 8.6708555, -0.8070901; -2.5287983, 10.214475, -1.1587493; -2.8396769, 11.78985, -1.454427; 1.9152411, 9.678596, -0.8289003; 4.1400995, 5.2547016, -0.5417557; 3.5383105, 3.577067, 2.2925553; 3.2250807, 2.7344556, 3.7047896; 2.3978043, 2.2130337, 4.3341084; 1.796603, 1.8168001, 4.9345746; 2.868775, 2.0127244, 4.781744; -5.5696187, 6.69781, -1.843464; -5.1363745, 2.4562783, -4.3299384; -6.1960096, -0.3995111, -3.2895737; -6.725828, -1.8274037, -2.769392; -6.8652306, -3.0711823, -2.6186144; -7.090733, -4.0473146, -2.4475658; -7.5930524, -2.996993, -2.7110972\",\n  \"-0.0, 0.0, 0.0; 1.4824207, -1.7250481, 1.1384358; 2.6067507, -8.538079, 3.459155; 3.7114415, -16.015846, 2.329881; 3.5035691, -16.914576, 4.7654285; 3.2742834, -16.100904, 5.711688; -1.4758666, -1.717125, 1.089464; -2.5915554, -8.836745, 1.5004205; -4.391159, -14.91338, -2.9719458; -4.497522, -16.73003, -1.0863837; -4.3658175, -16.916218, 0.17155397; -0.23071082, 2.4522288, -0.43836197; -0.75217456, 4.9011774, -0.7049156; -1.5206463, 7.3272486, -0.8322706; -2.3230023, 8.70269, -0.7865582; -2.4124644, 10.246695, -1.1405677; -2.7129428, 11.822693, -1.4435859; 2.0218794, 9.660096, -0.8068017; 4.163933, 5.1949196, -0.52915597; 3.5772135, 3.5297875, 2.3156676; 3.2714033, 2.6935384, 3.7332995; 2.4473803, 2.1775744, 4.371325; 1.8495908, 1.7859579, 4.9781923; 2.9211574, 1.9778264, 4.8162413; -5.494178, 6.762287, -1.8310804; -5.037898, 2.529513, -4.328335; -6.1211495, -0.32407212, -3.3064055; -6.662775, -1.7508622, -2.7954404; -6.804055, -2.995882, -2.657172; -7.0316334, -3.9734244, -2.4972885; -7.5307493, -2.9207315, -2.7574227\",\n  \"-0.0, 0.0, 0.0; 1.4860888, -1.72066, 1.1402931; 2.641708, -8.513422, 3.5046504; 3.7962961, -15.991732, 2.4302125; 3.571787, -16.869043, 4.8720846; 3.330129, -16.035757, 5.797975; -1.4722087, -1.7191358, 1.0912399; -2.5364342, -8.849421, 1.4505463; -4.3162937, -14.949682, -2.9974904; -4.403263, -16.72634, -1.0732249; -4.2620835, -16.870466, 0.18919957; -0.21044493, 2.4553812, -0.4308479; -0.7016066, 4.9114666, -0.68916607; -1.4432969, 7.3460326, -0.8131605; -2.2242377, 8.733607, -0.7634237; -2.2997866, 10.2779255, -1.1192988; -2.591285, 11.854374, -1.4286807; 2.124659, 9.639737, -0.7827222; 4.185115, 5.1356626, -0.5160345; 3.610855, 3.4788616, 2.3361864; 3.3111677, 2.6469014, 3.757644; 2.4899778, 2.138311, 4.4051714; 1.8953382, 1.7528282, 5.0190206; 2.9664326, 1.9387493, 4.847304; -5.4223785, 6.826315, -1.814436; -4.9443693, 2.5996938, -4.31804; -6.0503645, -0.25083184, -3.3120582; -6.6033616, -1.6760927, -2.8090677; -6.7461195, -2.9223073, -2.6836796; -6.9755225, -3.9012585, -2.5354483; -7.471453, -2.8463802, -2.7928066\",\n  \"-0.0, 0.0, 0.0; 1.4893091, -1.7169724, 1.1416497; 2.6745768, -8.489503, 3.5489757; 3.8814147, -15.967506, 2.5313306; 3.640563, -16.822958, 4.9793935; 3.3864388, -15.972661, 5.8862863; -1.4689847, -1.7210683, 1.0925379; -2.4837089, -8.860641, 1.4079466; -4.235931, -14.985571, -3.0171022; -4.3079267, -16.719402, -1.0535538; -4.15904, -16.813995, 0.21266282; -0.19296138, 2.4579422, -0.4243824; -0.655722, 4.9204273, -0.67407227; -1.3696327, 7.363596, -0.79175717; -2.1270702, 8.763922, -0.7362568; -2.1896179, 10.308359, -1.0941341; -2.4740515, 11.884774, -1.4101877; 2.2244337, 9.616175, -0.7619219; 4.2079954, 5.077112, -0.50564617; 3.6449566, 3.4264145, 2.3523443; 3.3507862, 2.5976343, 3.7768087; 2.5322778, 2.0967498, 4.433671; 1.9407326, 1.7174923, 5.0543494; 3.0113664, 1.8963759, 4.8725786; -5.35592, 6.891672, -1.7880282; -4.8584037, 2.6696262, -4.2955475; -5.984893, -0.17759776, -3.3030465; -6.548136, -1.6012083, -2.8067966; -6.684693, -2.8483396, -2.6836357; -6.909628, -3.8287342, -2.5381222; -7.409532, -2.776516, -2.7986631\",\n  \"-0.0, 0.0, 0.0; 1.4900246, -1.7163337, 1.141676; 2.7060852, -8.468164, 3.5914173; 3.962107, -15.946489, 2.6376524; 3.7075694, -16.777763, 5.09265; 3.4423583, -15.906923, 5.9765835; -1.4682662, -1.7216651, 1.0925635; -2.4360228, -8.869046, 1.3772167; -4.152007, -15.020244, -3.0255413; -4.2121706, -16.710655, -1.0241015; -4.0576587, -16.753248, 0.24425638; -0.178269, 2.4603796, -0.41661376; -0.61522436, 4.9285483, -0.6564796; -1.3002574, 7.3803234, -0.7665731; -2.034051, 8.793032, -0.7073448; -2.0842712, 10.337717, -1.0660943; -2.362335, 11.914516, -1.3858802; 2.320384, 9.589949, -0.73784024; 4.233261, 5.019919, -0.49490705; 3.6756945, 3.3747683, 2.3673518; 3.384173, 2.5489042, 3.794053; 2.5696888, 2.05639, 4.4621506; 1.982604, 1.6837268, 5.0910044; 3.052335, 1.8542099, 4.8963065; -5.2937336, 6.9583707, -1.7564493; -4.7753067, 2.7391038, -4.2644105; -5.9220076, -0.1038394, -3.2828445; -6.4953556, -1.5253097, -2.7920613; -6.625564, -2.773444, -2.6722317; -6.845945, -3.755413, -2.5304132; -7.34974, -2.705752, -2.793758\",\n  \"-0.0, 0.0, 0.0; 1.4902687, -1.7161763, 1.1415938; 2.7393355, -8.446901, 3.632463; 4.0421414, -15.92601, 2.7502935; 3.774354, -16.732582, 5.2121115; 3.4985662, -15.84111, 6.071913; -1.4680214, -1.7219236, 1.0924853; -2.3892891, -8.876136, 1.3592265; -4.057683, -15.055681, -3.0220745; -4.111584, -16.701757, -0.98383975; -3.9549365, -16.690485, 0.28492105; -0.1633895, 2.462672, -0.40910342; -0.57476324, 4.9362736, -0.6379892; -1.2312154, 7.3963056, -0.73750806; -1.9448147, 8.819191, -0.6752257; -1.9818492, 10.364084, -1.0346799; -2.2503436, 11.94196, -1.3573201; 2.4152908, 9.563038, -0.7134397; 4.247523, 4.95896, -0.49280125; 3.7040184, 3.318224, 2.3746915; 3.4194221, 2.4947338, 3.8041604; 2.6105843, 2.011355, 4.4856553; 2.029563, 1.6457506, 5.1242094; 3.097759, 1.8064526, 4.9134297; -5.2326417, 7.024787, -1.7154202; -4.695057, 2.806561, -4.221098; -5.8611827, -0.031167269, -3.2473583; -6.4442453, -1.45003, -2.7604904; -6.566783, -2.698989, -2.6411657; -6.781516, -3.682406, -2.5007217; -7.290382, -2.6363697, -2.7687004\",\n  \"-0.0, 0.0, 0.0; 1.4892969, -1.7168076, 1.1419132; 2.7645059, -8.4292345, 3.6686542; 4.1220174, -15.907034, 2.8610137; 3.8415244, -16.683609, 5.331049; 3.5545883, -15.768984, 6.1624136; -1.4689957, -1.7208984, 1.0927907; -2.3459034, -8.880852, 1.3549744; -3.9572515, -15.090444, -3.0051455; -4.007982, -16.691483, -0.931267; -3.852112, -16.628317, 0.33606648; -0.15080428, 2.4649458, -0.40014437; -0.53849846, 4.9435687, -0.61565197; -1.1656156, 7.411725, -0.7023624; -1.8601191, 8.843879, -0.6367526; -1.883756, 10.388891, -0.99682796; -2.1415663, 11.968028, -1.322004; 2.506838, 9.534242, -0.6844026; 4.260909, 4.898737, -0.48790848; 3.7294931, 3.2611878, 2.383669; 3.4508402, 2.4394789, 3.815332; 2.6491857, 1.9653006, 4.5116177; 2.0757442, 1.6065154, 5.1608033; 3.1416655, 1.7560365, 4.931127; -5.1751766, 7.092519, -1.6653166; -4.6323376, 2.8701115, -4.1628046; -5.8063846, 0.033399582, -3.1956444; -6.393409, -1.3849546, -2.7120657; -6.5082717, -2.634346, -2.5896726; -6.7171936, -3.618753, -2.447411; -7.231611, -2.5769072, -2.7210555\",\n  \"-0.0, 0.0, 0.0; 1.4877039, -1.7184727, 1.1414846; 2.7842455, -8.415155, 3.6989584; 4.198771, -15.890439, 2.9696765; 3.9081204, -16.633715, 5.4487658; 3.6107109, -15.694685, 6.2486463; -1.4705924, -1.7197948, 1.0923809; -2.305871, -8.884535, 1.3596687; -3.8547394, -15.123917, -2.9805183; -3.9052114, -16.681187, -0.873569; -3.7542024, -16.5801, 0.39189422; -0.13869755, 2.4671984, -0.39052483; -0.50419545, 4.9503465, -0.5922903; -1.1037261, 7.4257727, -0.66590095; -1.7820207, 8.865448, -0.5954954; -1.791962, 10.410593, -0.95563567; -2.0371284, 11.991266, -1.2831167; 2.5925472, 9.506582, -0.6552901; 4.275776, 4.843871, -0.48454913; 3.7518954, 3.206981, 2.3887885; 3.4769232, 2.3857946, 3.8214626; 2.6838565, 1.9214466, 4.5340176; 2.119343, 1.5697949, 5.1948276; 3.182138, 1.7067511, 4.9438176; -5.1208124, 7.1559486, -1.6124558; -4.574266, 2.9281554, -4.100004; -5.754123, 0.09198117, -3.1383529; -6.3440504, -1.3261046, -2.657528; -6.454448, -2.5756261, -2.532384; -6.6600842, -3.5604982, -2.3885627; -7.177332, -2.5214949, -2.6676254\",\n  \"-0.0, 0.0, 0.0; 1.4832618, -1.7231604, 1.140198; 2.8017697, -8.404741, 3.7257862; 4.275773, -15.876155, 3.0793436; 3.9779491, -16.582668, 5.5683107; 3.6706975, -15.621302, 6.3373423; -1.4750285, -1.7167743, 1.0911499; -2.2704449, -8.885484, 1.3732141; -3.7521093, -15.15564, -2.9460373; -3.803662, -16.669456, -0.80767965; -3.659066, -16.533937, 0.4553113; -0.12846412, 2.4693167, -0.38050753; -0.47462386, 4.956408, -0.5672529; -1.0470622, 7.4386578, -0.62506473; -1.7123376, 8.884071, -0.5482937; -1.7097441, 10.429313, -0.9081497; -1.9418625, 12.011588, -1.2373952; 2.6720722, 9.478353, -0.6254781; 4.2866945, 4.7904005, -0.48625332; 3.7730837, 3.152966, 2.3886275; 3.503159, 2.331708, 3.8222203; 2.7194307, 1.8771058, 4.551203; 2.1645038, 1.5323753, 5.2236767; 3.2234504, 1.6562293, 4.9505677; -5.072253, 7.2180877, -1.5496905; -4.5237393, 2.9809728, -4.020891; -5.70678, 0.14555812, -3.0609136; -6.2983, -1.2721477, -2.5809252; -6.409245, -2.5212512, -2.4521468; -6.6154733, -3.5056393, -2.305881; -7.1316433, -2.4675019, -2.590113\",\n  \"-0.0, 0.0, 0.0; 1.4778926, -1.7295443, 1.1375014; 2.8179088, -8.396129, 3.7505956; 4.355626, -15.861698, 3.1908672; 4.0511956, -16.53238, 5.688932; 3.7332597, -15.558445, 6.4375353; -1.4803641, -1.713818, 1.0885686; -2.2373211, -8.885723, 1.3942415; -3.647241, -15.187895, -2.9023705; -3.7014492, -16.660921, -0.73577666; -3.5651631, -16.497902, 0.52488613; -0.11922554, 2.4716659, -0.36805812; -0.44748816, 4.9623027, -0.53921556; -0.99338186, 7.4508133, -0.5828937; -1.6469505, 8.90116, -0.49894962; -1.6323899, 10.4466, -0.8576677; -1.8513769, 12.030579, -1.187719; 2.7475328, 9.450225, -0.5980763; 4.295469, 4.738867, -0.49666813; 3.7965076, 3.0980802, 2.378881; 3.5338228, 2.2753527, 3.8129761; 2.7603889, 1.8310847, 4.559123; 2.215901, 1.4936343, 5.2437134; 3.2701147, 1.603389, 4.947262; -5.026426, 7.27769, -1.4830813; -4.4784083, 3.0295916, -3.935465; -5.662054, 0.19485927, -2.9742184; -6.253877, -1.2225052, -2.4935963; -6.3685203, -2.4707842, -2.3601456; -6.577798, -3.454029, -2.2105603; -7.090348, -2.4156885, -2.5005448\",\n  \"-0.0, 0.0, 0.0; 1.472367, -1.73542, 1.1357166; 2.8348212, -8.388061, 3.7726364; 4.4349647, -15.846577, 3.3007436; 4.1270595, -16.478712, 5.8084154; 3.7995715, -15.492787, 6.5369363; -1.4858261, -1.7101716, 1.0868604; -2.2067747, -8.884384, 1.4238365; -3.5448241, -15.218508, -2.8487055; -3.6020675, -16.658274, -0.65994525; -3.4745615, -16.474371, 0.5987611; -0.11193069, 2.474033, -0.35418347; -0.42476717, 4.967747, -0.50860566; -0.94581366, 7.461779, -0.5387285; -1.5853282, 8.917824, -0.44567633; -1.559163, 10.46348, -0.80279815; -1.7665573, 12.048934, -1.1332557; 2.814877, 9.423434, -0.57659453; 4.296319, 4.689978, -0.52170897; 3.817518, 3.0448437, 2.3547835; 3.5648246, 2.2201455, 3.789542; 2.8021562, 1.7852558, 4.5521145; 2.2683978, 1.454276, 5.2482166; 3.3172326, 1.5506748, 4.9289227; -4.9874697, 7.3327007, -1.4071226; -4.441782, 3.072834, -3.8395307; -5.622155, 0.23858523, -2.8728492; -6.2123413, -1.1785374, -2.3895092; -6.3344836, -2.4255352, -2.2508345; -6.549837, -3.4069042, -2.0975974; -7.055445, -2.3670535, -2.394279\",\n  \"-0.0, 0.0, 0.0; 1.4668492, -1.7409782, 1.1343485; 2.8531027, -8.381327, 3.789782; 4.5166907, -15.830961, 3.4050436; 4.210701, -16.423103, 5.9226923; 3.8749158, -15.426044, 6.632031; -1.4912484, -1.7062788, 1.0855514; -2.1786866, -8.881773, 1.4628417; -3.4440625, -15.248814, -2.78283; -3.503297, -16.657595, -0.57405186; -3.3853009, -16.461515, 0.6837435; -0.10416968, 2.476527, -0.33878607; -0.40248913, 4.9730673, -0.47522527; -0.9012234, 7.4717827, -0.49189806; -1.5244685, 8.934257, -0.38971716; -1.486994, 10.480124, -0.7449099; -1.6843734, 12.06702, -1.0745772; 2.8765388, 9.399607, -0.55765206; 4.293347, 4.6460886, -0.55578524; 3.840523, 2.993668, 2.3207378; 3.6007352, 2.165533, 3.7557313; 2.849708, 1.7407453, 4.5353613; 2.3274353, 1.4167249, 5.243348; 3.369944, 1.498774, 4.9002166; -4.9516916, 7.382195, -1.3234192; -4.413562, 3.1071386, -3.7307324; -5.5881667, 0.2743492, -2.7528129; -6.175469, -1.1420438, -2.263854; -6.30652, -2.3875928, -2.120377; -6.5290756, -3.3668396, -1.9638903; -7.0264378, -2.324945, -2.267263\",\n  \"-0.0, 0.0, 0.0; 1.4616019, -1.7460558, 1.1333175; 2.8711357, -8.375583, 3.8034937; 4.597679, -15.814851, 3.5052829; 4.296658, -16.366154, 6.0327854; 3.9533894, -15.359487, 6.724758; -1.4963789, -1.7024103, 1.084565; -2.15381, -8.878118, 1.5084282; -3.342456, -15.277885, -2.7101274; -3.4029293, -16.656734, -0.48257375; -3.2948859, -16.451893, 0.7747195; -0.09725033, 2.478788, -0.3239855; -0.38182402, 4.9779277, -0.44078338; -0.8586563, 7.4809704, -0.4398156; -1.4634688, 8.950574, -0.32948658; -1.4166123, 10.496187, -0.6846769; -1.6076314, 12.08378, -1.0147364; 2.935121, 9.375929, -0.53308284; 4.2899323, 4.604671, -0.5866503; 3.8659115, 2.9422195, 2.288482; 3.640442, 2.1092765, 3.7230139; 2.9010913, 1.6943647, 4.5189524; 2.3902922, 1.3769001, 5.238191; 3.4258142, 1.4439119, 4.871449; -4.91774, 7.4311824, -1.2317203; -4.385852, 3.1381626, -3.6082563; -5.554323, 0.30917454, -2.6121535; -6.138557, -1.1053181, -2.114102; -6.27868, -2.3496218, -1.9684079; -6.508572, -3.3269851, -1.8107555; -6.997445, -2.2824786, -2.1189084\",\n  \"-0.0, 0.0, 0.0; 1.4563562, -1.7506714, 1.1329496; 2.8898, -8.369347, 3.8172808; 4.675295, -15.797632, 3.6047559; 4.383228, -16.30819, 6.1418505; 4.0339875, -15.293239, 6.818567; -1.5014799, -1.6981379, 1.0842127; -2.1304889, -8.873211, 1.5588923; -3.240536, -15.305498, -2.631524; -3.3037736, -16.65612, -0.3868208; -3.2070887, -16.449766, 0.87114954; -0.09019873, 2.4811785, -0.3072985; -0.3621977, 4.982597, -0.40345955; -0.8198453, 7.4891596, -0.3863754; -1.4056911, 8.965874, -0.26888406; -1.3487105, 10.511164, -0.62399936; -1.5329669, 12.099533, -0.95416594; 2.9873075, 9.35564, -0.50533694; 4.281398, 4.5685935, -0.6184682; 3.8865485, 2.8951182, 2.2544227; 3.6755905, 2.0568795, 3.688077; 2.947455, 1.6509863, 4.4988656; 2.4476655, 1.3391191, 5.228217; 3.4757376, 1.3907436, 4.838732; -4.8862185, 7.4740195, -1.1414465; -4.3660665, 3.1620035, -3.485973; -5.5257063, 0.33867908, -2.4638216; -6.105525, -1.0729815, -1.9527457; -6.2541304, -2.3161006, -1.8053544; -6.4907603, -3.2916732, -1.6465845; -6.972166, -2.2444468, -1.9572518\",\n  \"-0.0, 0.0, 0.0; 1.45128, -1.755446, 1.1320754; 2.9072027, -8.363582, 3.8302383; 4.7476907, -15.780289, 3.6973226; 4.468238, -16.246918, 6.244278; 4.1147614, -15.220781, 6.9016495; -1.5063902, -1.6943187, 1.0833763; -2.108704, -8.867889, 1.612277; -3.1362114, -15.333105, -2.5484118; -3.202159, -16.6566, -0.28768563; -3.1175678, -16.453913, 0.9717512; -0.08396386, 2.4833484, -0.29110998; -0.34413603, 4.9867435, -0.36625445; -0.78296983, 7.49648, -0.33103055; -1.3503411, 8.979887, -0.2073457; -1.283337, 10.524607, -0.5631933; -1.4607437, 12.113636, -0.893937; 3.0367289, 9.335448, -0.4739073; 4.267538, 4.5335927, -0.6487727; 3.9028294, 2.847662, 2.220818; 3.7068768, 2.0034132, 3.6530747; 2.988469, 1.605451, 4.476376; 2.4982631, 1.2981465, 5.21412; 3.5190482, 1.3347704, 4.804299; -4.8559613, 7.515628, -1.0494492; -4.3489275, 3.1827335, -3.358084; -5.498127, 0.3672037, -2.3031652; -6.0727253, -1.0405595, -1.7757062; -6.22915, -2.2824683, -1.6262186; -6.471809, -3.2562423, -1.4655176; -6.9470577, -2.2063038, -1.7765101\",\n  \"-0.0, 0.0, 0.0; 1.4445488, -1.7602547, 1.133217; 2.921459, -8.3563595, 3.8493533; 4.811985, -15.7614155, 3.788843; 4.5500236, -16.179907, 6.346001; 4.19435, -15.135523, 6.972736; -1.5128673, -1.6878363, 1.0844688; -2.0894418, -8.859336, 1.6673892; -3.0331686, -15.356836, -2.4627426; -3.102133, -16.655775, -0.18790698; -3.029912, -16.460907, 1.0735326; -0.079065986, 2.4853983, -0.27451506; -0.3293269, 4.9903755, -0.32723808; -0.7499502, 7.5028934, -0.27321255; -1.2991002, 8.992723, -0.14458819; -1.2221359, 10.536577, -0.502172; -1.3927523, 12.126048, -0.83436084; 3.081375, 9.315632, -0.43827593; 4.2507386, 4.501022, -0.6736592; 3.9140656, 2.8022828, 2.1918015; 3.732074, 1.9518435, 3.6222367; 3.021042, 1.5603262, 4.4549775; 2.5382562, 1.2561364, 5.1988792; 3.552363, 1.2781255, 4.771796; -4.82876, 7.5551786, -0.95609456; -4.3388796, 3.1983685, -3.223047; -5.472811, 0.39039302, -2.1320872; -6.039776, -1.0135937, -1.586609; -6.198927, -2.2542362, -1.4296726; -6.4433484, -3.2264113, -1.26211; -6.9178452, -2.1764603, -1.574206\",\n  \"-0.0, 0.0, 0.0; 1.4338667, -1.7672974, 1.1358188; 2.9296207, -8.349769, 3.8746228; 4.8654294, -15.7433605, 3.880598; 4.6181874, -16.112495, 6.446807; 4.2602067, -15.047509, 7.036463; -1.5230552, -1.6770375, 1.0869584; -2.0709846, -8.84623, 1.7234285; -2.9263985, -15.375143, -2.3762891; -3.0037534, -16.651663, -0.08906627; -2.9460788, -16.466295, 1.1745522; -0.07477046, 2.4873536, -0.2574812; -0.31674355, 4.993519, -0.28761622; -0.71857953, 7.5086794, -0.21629466; -1.2507894, 9.004229, -0.082920834; -1.1642963, 10.5472355, -0.44197845; -1.3280424, 12.137109, -0.77569646; 3.124374, 9.294503, -0.40299895; 4.230545, 4.4682193, -0.6973629; 3.9191809, 2.755477, 2.1626182; 3.7497966, 1.8982499, 3.5905478; 3.0443609, 1.5118444, 4.430405; 2.567322, 1.2096046, 5.178796; 3.575313, 1.2178984, 4.737003; -4.802371, 7.594312, -0.8651899; -4.336256, 3.2125173, -3.0885797; -5.4481087, 0.40993977, -1.9616084; -6.004033, -0.99134815, -1.3981245; -6.1609974, -2.2299557, -1.2238657; -6.4030166, -3.1999574, -1.0409257; -6.8820076, -2.1536741, -1.3584285\",\n  \"-0.0, 0.0, 0.0; 1.4226593, -1.7743008, 1.1389891; 2.933012, -8.340914, 3.9076858; 4.901448, -15.725577, 3.9755487; 4.6695647, -16.048702, 6.549386; 4.310943, -14.965792, 7.1050243; -1.5336334, -1.665388, 1.089992; -2.0622609, -8.830994, 1.7808523; -2.8170052, -15.39102, -2.288858; -2.9056065, -16.646982, 0.009311914; -2.864327, -16.470743, 1.2748772; -0.07244518, 2.4890606, -0.24112855; -0.3079003, 4.996012, -0.24989727; -0.69120395, 7.5135803, -0.163173; -1.2060859, 9.0145855, -0.023233607; -1.1098219, 10.556823, -0.3831119; -1.266741, 12.14688, -0.7192253; 3.1631184, 9.272861, -0.3667633; 4.2065787, 4.436575, -0.72005165; 3.9129882, 2.7095146, 2.1331906; 3.7524557, 1.8453444, 3.5579543; 3.050109, 1.4635817, 4.4025106; 2.576528, 1.1628207, 5.1536884; 3.5793228, 1.1575732, 4.700178; -4.7785363, 7.631661, -0.78407836; -4.3362594, 3.2242436, -2.9612114; -5.4233327, 0.42702675, -1.7973517; -5.966868, -0.97158027, -1.2154224; -6.12078, -2.2078238, -1.0226381; -6.3596854, -3.1753802, -0.8233834; -6.84378, -2.1333818, -1.1471752\",\n  \"-0.0, 0.0, 0.0; 1.4136039, -1.7802402, 1.1409944; 2.9302244, -8.330239, 3.9453874; 4.924164, -15.707273, 4.0726023; 4.705204, -15.994316, 6.651843; 4.34629, -14.909712, 7.2039785; -1.5420941, -1.6562929, 1.0919116; -2.060056, -8.8170395, 1.8389546; -2.7041488, -15.407817, -2.1999698; -2.8077111, -16.644064, 0.10824275; -2.7850718, -16.479588, 1.3758605; -0.070761435, 2.4905767, -0.22546516; -0.29899088, 4.998189, -0.21472387; -0.6630241, 7.518111, -0.114406906; -1.1606755, 9.024337, 0.03164985; -1.0550164, 10.566013, -0.32799506; -1.2057006, 12.156344, -0.6656628; 3.2031424, 9.249609, -0.3311726; 4.1864915, 4.404957, -0.73817354; 3.9047408, 2.6635437, 2.1075294; 3.7501047, 1.7923962, 3.5286918; 3.0497963, 1.4136701, 4.3763027; 2.5786345, 1.1131586, 5.1291; 3.5768025, 1.0962, 4.665776; -4.7526956, 7.669432, -0.712272; -4.332902, 3.2365842, -2.8417044; -5.396684, 0.44548202, -1.6421894; -5.9285736, -0.9500675, -1.0424321; -6.0790987, -2.1834903, -0.82991457; -6.314708, -3.148202, -0.6136668; -6.8037252, -2.1111994, -0.945987\",\n  \"-0.0, 0.0, 0.0; 1.4047451, -1.7870766, 1.1412483; 2.9269335, -8.317719, 3.9874554; 4.9403315, -15.688275, 4.1711307; 4.734379, -15.94504, 6.754631; 4.376328, -14.865382, 7.316928; -1.5503027, -1.6484514, 1.0921541; -2.0628073, -8.803387, 1.8964459; -2.5896392, -15.42333, -2.111658; -2.7131944, -16.642508, 0.20463514; -2.7110949, -16.487844, 1.4736876; -0.068982586, 2.4918356, -0.21168616; -0.29089156, 4.9998746, -0.18305254; -0.6377661, 7.5215864, -0.06799337; -1.1153073, 9.033628, 0.084935665; -1.0002505, 10.574686, -0.27447847; -1.1463528, 12.165029, -0.6140982; 3.238416, 9.228801, -0.29809123; 4.164013, 4.3773017, -0.755818; 3.8912568, 2.6220875, 2.082272; 3.7410998, 1.7442318, 3.499782; 3.0428934, 1.368143, 4.350296; 2.5741253, 1.0676616, 5.104598; 3.5676007, 1.0398897, 4.631807; -4.729677, 7.7027144, -0.6417631; -4.32469, 3.2456903, -2.7230544; -5.3693213, 0.46367288, -1.4861857; -5.8916373, -0.9273335, -0.86775124; -6.037434, -2.1580925, -0.63725626; -6.2686844, -3.1202347, -0.40541703; -6.763625, -2.0883393, -0.74478966\",\n  \"-0.0, 0.0, 0.0; 1.3955941, -1.7935599, 1.142304; 2.9203353, -8.303844, 4.033429; 4.9468822, -15.669327, 4.268777; 4.7613683, -15.896674, 6.8565784; 4.407449, -14.824806, 7.436129; -1.5587047, -1.6398357, 1.0931648; -2.0670307, -8.788365, 1.9550034; -2.4733517, -15.435098, -2.0226808; -2.6171827, -16.640846, 0.29946423; -2.6354325, -16.493954, 1.5693104; -0.06716448, 2.4929793, -0.1983869; -0.28214067, 5.001355, -0.15192327; -0.61050946, 7.524826, -0.022075191; -1.0685074, 9.042374, 0.13601044; -0.94572777, 10.582973, -0.22281304; -1.0891944, 12.173367, -0.56331474; 3.2763863, 9.205795, -0.26436308; 4.1494956, 4.349141, -0.7682265; 3.8814397, 2.5799794, 2.0616388; 3.7336218, 1.6953297, 3.4751654; 3.0362039, 1.3213894, 4.3272724; 2.568606, 1.0205785, 5.082169; 3.558032, 0.9826773, 4.601653; -4.704054, 7.7377996, -0.5727926; -4.312067, 3.2566395, -2.6041453; -5.3404274, 0.48664188, -1.3273104; -5.854607, -0.898355, -0.6888928; -5.9966927, -2.1260092, -0.44023782; -6.2243075, -3.085069, -0.19256997; -6.7243443, -2.0578184, -0.5385018\",\n  \"-0.0, 0.0, 0.0; 1.386489, -1.7992396, 1.1444579; 2.9125543, -8.287552, 4.0838766; 4.9421616, -15.650651, 4.363281; 4.7886214, -15.852356, 6.9552994; 4.444503, -14.795356, 7.567159; -1.5669912, -1.6305368, 1.0952257; -2.070766, -8.772228, 2.0145195; -2.3585975, -15.443176, -1.9328485; -2.5264149, -16.640839, 0.39186954; -2.5658472, -16.50105, 1.6620364; -0.065282926, 2.4939916, -0.18589698; -0.27308887, 5.002575, -0.12148949; -0.58264846, 7.527576, 0.023886047; -1.0203311, 9.050377, 0.18885866; -0.8909072, 10.590394, -0.17012659; -1.0335478, 12.180253, -0.51346135; 3.3149035, 9.182012, -0.22958371; 4.140603, 4.321841, -0.7775289; 3.872152, 2.5399723, 2.0443153; 3.724134, 1.6491346, 3.4539292; 3.0268066, 1.2760265, 4.3064747; 2.5596843, 0.9739175, 5.061147; 3.5456185, 0.92752993, 4.5742407; -4.677369, 7.772854, -0.5041803; -4.299267, 3.2690458, -2.4875102; -5.3115587, 0.51251745, -1.1693541; -5.817704, -0.86574495, -0.5102765; -5.9575067, -2.0897198, -0.24289358; -6.182592, -3.0450444, 0.020991534; -6.6863723, -2.0220723, -0.33211294\",\n  \"-0.0, 0.0, 0.0; 1.3786987, -1.8030006, 1.1479449; 2.9026787, -8.269503, 4.136102; 4.923509, -15.633685, 4.448601; 4.819028, -15.813435, 7.044673; 4.4922857, -14.772652, 7.692785; -1.5740192, -1.6214974, 1.0985632; -2.0743551, -8.755964, 2.0741074; -2.24694, -15.448496, -1.8433361; -2.437136, -16.640491, 0.48257184; -2.4966345, -16.508339, 1.7527748; -0.061617453, 2.4949195, -0.1743376; -0.2613847, 5.003651, -0.092596084; -0.5543445, 7.5297422, 0.06750023; -0.9733008, 9.056943, 0.24023443; -0.83845776, 10.596542, -0.11855063; -0.9815136, 12.18568, -0.46503899; 3.3526335, 9.160814, -0.19220006; 4.13266, 4.297733, -0.7798054; 3.8613303, 2.50349, 2.0339108; 3.7118707, 1.606614, 3.4395378; 3.0142014, 1.232714, 4.2914567; 2.5470808, 0.92823505, 5.045177; 3.5302734, 0.8757969, 4.5533657; -4.649423, 7.803767, -0.44337898; -4.28877, 3.275372, -2.3732529; -5.287044, 0.5345733, -1.012301; -5.78618, -0.8358251, -0.33182675; -5.923965, -2.0558834, -0.046125233; -6.1466513, -3.0072095, 0.23375484; -6.65396, -1.9881272, -0.12549126\",\n  \"-0.0, 0.0, 0.0; 1.3718253, -1.8065952, 1.150525; 2.8926406, -8.250261, 4.189199; 4.8903503, -15.619762, 4.5241785; 4.853931, -15.783704, 7.1231427; 4.55274, -14.7563925, 7.8042846; -1.5801767, -1.6138159, 1.1010317; -2.0732648, -8.740933, 2.132388; -2.1364684, -15.452951, -1.7548907; -2.3530662, -16.641413, 0.5705166; -2.4332163, -16.51133, 1.8397975; -0.05703382, 2.495786, -0.16313574; -0.247732, 5.00465, -0.06537147; -0.52424634, 7.5317206, 0.10796429; -0.9284786, 9.061882, 0.28936708; -0.78827816, 10.601058, -0.0691807; -0.9300304, 12.189411, -0.41977614; 3.392416, 9.139231, -0.15276544; 4.126775, 4.2736287, -0.77720386; 3.8522787, 2.4659796, 2.0276103; 3.701234, 1.5625453, 3.4288611; 3.002317, 1.188216, 4.2795677; 2.5343757, 0.8816892, 5.031948; 3.5152636, 0.82309014, 4.5362453; -4.6186666, 7.8342843, -0.39196265; -4.2769556, 3.282713, -2.2700686; -5.2593174, 0.5589354, -0.86410975; -5.750498, -0.8029517, -0.16113108; -5.8868456, -2.0190642, 0.14157706; -6.107399, -2.96627, 0.43670586; -6.6179094, -1.9499878, 0.07407841\",\n  \"-0.0, 0.0, 0.0; 1.3667076, -1.8093319, 1.1523138; 2.877854, -8.229982, 4.244066; 4.838621, -15.60899, 4.587942; 4.8854833, -15.764917, 7.187232; 4.6154857, -14.742924, 7.8891354; -1.5847332, -1.6081691, 1.1027437; -2.0669415, -8.728213, 2.1867552; -2.0285485, -15.458752, -1.6686938; -2.272201, -16.642452, 0.6564648; -2.3723793, -16.511148, 1.9241964; -0.050365727, 2.4966922, -0.15101768; -0.23191032, 5.005598, -0.038074672; -0.4965969, 7.533187, 0.14584829; -0.8891471, 9.065386, 0.33552152; -0.7413677, 10.60414, -0.021787822; -0.87814796, 12.192066, -0.3762733; 3.427311, 9.123591, -0.11082269; 4.120042, 4.2563124, -0.7688536; 3.8362834, 2.4352489, 2.0263448; 3.68061, 1.5252326, 3.4228218; 2.9783452, 1.1482471, 4.2695894; 2.507659, 0.8380054, 5.018728; 3.487966, 0.77578276, 4.5223184; -4.5898876, 7.856777, -0.3501476; -4.265252, 3.282814, -2.1761608; -5.2323055, 0.5764761, -0.7265873; -5.715831, -0.7766911, -0.0018008351; -5.8501844, -1.9889995, 0.31664863; -6.0680065, -2.932211, 0.6262442; -6.5821977, -1.9181409, 0.26262605\",\n  \"-0.0, 0.0, 0.0; 1.3633888, -1.8115535, 1.1527547; 2.8636527, -8.207392, 4.300723; 4.77127, -15.600832, 4.633336; 4.9135675, -15.760391, 7.2289305; 4.685012, -14.75561, 7.969347; -1.5876781, -1.6049722, 1.1031656; -2.0532517, -8.71845, 2.2364452; -1.9239849, -15.467203, -1.5850394; -2.194077, -16.647425, 0.73896646; -2.3132372, -16.517729, 2.0052204; -0.04361571, 2.497471, -0.13982524; -0.2150901, 5.006423, -0.013011083; -0.46759132, 7.534482, 0.18128678; -0.8526129, 9.067627, 0.37858945; -0.6967629, 10.605876, 0.022535414; -0.82594395, 12.193536, -0.33596876; 3.4640758, 9.106894, -0.06737526; 4.1177588, 4.2383914, -0.7556098; 3.8224747, 2.4004002, 2.0272884; 3.6610446, 1.4820441, 3.4176388; 2.9541783, 1.1031387, 4.2597075; 2.4796417, 0.7897192, 5.0050845; 3.4598465, 0.7230802, 4.509046; -4.559076, 7.8799653, -0.31484514; -4.2504025, 3.2848225, -2.0897334; -5.2035685, 0.59616184, -0.59866047; -5.680151, -0.7481661, 0.14687622; -5.811917, -1.9569805, 0.47937906; -6.0265465, -2.896546, 0.8020165; -6.5446124, -1.8844515, 0.43839383\",\n  \"-0.0, 0.0, 0.0; 1.3598233, -1.8142525, 1.1527218; 2.8471208, -8.186392, 4.354446; 4.683888, -15.599613, 4.642591; 4.932807, -15.77567, 7.229068; 4.757523, -14.801173, 8.022586; -1.5908313, -1.601868, 1.1031344; -2.0330062, -8.710082, 2.2780485; -1.8239135, -15.476913, -1.507765; -2.121887, -16.65507, 0.8138797; -2.2594357, -16.521824, 2.0778992; -0.036774244, 2.4980364, -0.1314383; -0.19947168, 5.006975, 0.0066859573; -0.4423893, 7.5351887, 0.21094063; -0.8212397, 9.069021, 0.41473776; -0.65614974, 10.606752, 0.060617; -0.7757824, 12.194529, -0.300675; 3.4953842, 9.093512, -0.0296496; 4.1138296, 4.2246222, -0.7470969; 3.8028054, 2.3668246, 2.020895; 3.6335156, 1.4386888, 3.4037967; 2.9215648, 1.0567971, 4.2402143; 2.4427376, 0.7392348, 4.9810805; 3.4230435, 0.6688023, 4.4857664; -4.5322866, 7.898309, -0.2856854; -4.242001, 3.2840433, -2.013439; -5.182703, 0.61335874, -0.4826733; -5.653053, -0.72198176, 0.28270924; -5.7843537, -1.9265741, 0.63037276; -5.9974456, -2.861643, 0.9667973; -6.5173283, -1.850975, 0.6018026\",\n  \"-0.0, 0.0, 0.0; 1.3565104, -1.8174915, 1.1515219; 2.832415, -8.164162, 4.4086275; 4.5801783, -15.6015, 4.618232; 4.931191, -15.812016, 7.190253; 4.8115053, -14.869087, 8.0308485; -1.5937555, -1.5997504, 1.1019864; -2.008174, -8.703461, 2.31368; -1.7270336, -15.48878, -1.4341879; -2.0524068, -16.66623, 0.88413453; -2.207597, -16.530416, 2.1458359; -0.029973067, 2.4985046, -0.1240575; -0.18364573, 5.007457, 0.023819402; -0.41656953, 7.5358467, 0.23731329; -0.792168, 9.069446, 0.44874507; -0.61801326, 10.6066, 0.09646249; -0.7268195, 12.194296, -0.2685853; 3.527559, 9.079269, 0.0049119145; 4.118389, 4.210639, -0.7371393; 3.7891135, 2.3328538, 2.0152102; 3.6107097, 1.3948264, 3.3902698; 2.8922198, 1.0090694, 4.2192893; 2.4077685, 0.68678606, 4.954438; 3.3894072, 0.613911, 4.4621267; -4.5046697, 7.9171853, -0.26045293; -4.235043, 3.2839642, -1.9401586; -5.165944, 0.63217115, -0.37103868; -5.631393, -0.69372356, 0.4135213; -5.7641177, -1.8934587, 0.7770764; -5.9772077, -2.8233206, 1.1276379; -6.4969997, -1.8137084, 0.75960493\",\n  \"-0.0, 0.0, 0.0; 1.3525697, -1.8219956, 1.1490371; 2.8163612, -8.140355, 4.466099; 4.4607472, -15.603537, 4.563618; 4.9081, -15.8654, 7.115896; 4.840682, -14.9460745, 7.9878674; -1.5972235, -1.5979267, 1.0996084; -1.9779081, -8.697699, 2.3449826; -1.6338959, -15.503523, -1.3602214; -1.9845333, -16.680647, 0.9545808; -2.1559782, -16.546202, 2.214323; -0.02269099, 2.4989629, -0.1161194; -0.16711488, 5.0079165, 0.04077567; -0.3898967, 7.5365515, 0.26205555; -0.76462483, 9.069341, 0.48078012; -0.5810834, 10.606017, 0.13118914; -0.67746437, 12.193843, -0.23677388; 3.5607314, 9.064544, 0.03823951; 4.127787, 4.1966114, -0.72659373; 3.7801452, 2.298141, 2.0092573; 3.5925636, 1.3498455, 3.3760278; 2.8658562, 0.9591632, 4.1955233; 2.3742206, 0.63166845, 4.9235654; 3.3590705, 0.55867255, 4.4377275; -4.475928, 7.9361944, -0.23833254; -4.227334, 3.2867274, -1.8758621; -5.1501193, 0.6575806, -0.26441085; -5.611511, -0.6569911, 0.5413139; -5.7476892, -1.8518151, 0.9194722; -5.9625382, -2.776362, 1.2827859; -6.4801726, -1.7671108, 0.9107434\",\n  \"-0.0, 0.0, 0.0; 1.3483822, -1.8261044, 1.1474351; 2.802177, -8.113271, 4.527564; 4.3315954, -15.601349, 4.4809856; 4.8805966, -15.925731, 7.006098; 4.8673983, -15.02787, 7.902597; -1.6008929, -1.5953069, 1.0980749; -1.9448179, -8.69151, 2.3741055; -1.5451713, -15.518024, -1.2871912; -1.9228812, -16.694616, 1.0236185; -2.1105118, -16.555573, 2.2805517; -0.014990497, 2.4993467, -0.10888106; -0.1503678, 5.008273, 0.05630146; -0.3638991, 7.5371065, 0.2843278; -0.7382891, 9.068841, 0.51088077; -0.54618484, 10.60516, 0.16433477; -0.6310175, 12.19299, -0.20644298; 3.5925603, 9.050972, 0.06763473; 4.1406, 4.1838956, -0.7162683; 3.7725425, 2.2641978, 2.0020437; 3.5747619, 1.3053368, 3.3599763; 2.8383877, 0.9091065, 4.1681; 2.3382158, 0.57618725, 4.88782; 3.3278184, 0.5047207, 4.411505; -4.4480352, 7.953333, -0.21800917; -4.2194276, 3.2896566, -1.8176041; -5.1378174, 0.6845927, -0.16505384; -5.597012, -0.6179379, 0.66121984; -5.7380924, -1.8077822, 1.0530355; -5.9561, -2.726974, 1.4278724; -6.470021, -1.7180437, 1.0498594\",\n  \"-0.0, 0.0, 0.0; 1.3447975, -1.8302602, 1.1450182; 2.7895179, -8.088172, 4.582832; 4.1906524, -15.598091, 4.3580403; 4.8314795, -15.998357, 6.850418; 4.8716264, -15.127724, 7.772603; -1.604026, -1.5937498, 1.095762; -1.9085627, -8.686776, 2.3991697; -1.4585944, -15.533815, -1.2176926; -1.8683707, -16.709843, 1.087935; -2.073547, -16.559927, 2.3408704; -0.0057193073, 2.4995465, -0.105112076; -0.13199559, 5.008541, 0.06612876; -0.339091, 7.5371456, 0.3024822; -0.71179396, 9.067937, 0.53801453; -0.5116697, 10.603767, 0.19384918; -0.58663243, 12.191107, -0.18113169; 3.6214392, 9.041412, 0.09344517; 4.156829, 4.17601, -0.7093619; 3.7651746, 2.2377362, 1.9924206; 3.5556026, 1.269623, 3.3419943; 2.8101914, 0.86494195, 4.137547; 2.3019745, 0.52436596, 4.847989; 3.2966533, 0.4574347, 4.381695; -4.421795, 7.9656954, -0.20112956; -4.212518, 3.288959, -1.76484; -5.1307893, 0.7091384, -0.07308793; -5.589925, -0.58076966, 0.7727877; -5.736467, -1.7647852, 1.1799551; -5.958239, -2.677863, 1.567318; -6.467788, -1.6701697, 1.1801965\",\n  \"-0.0, 0.0, 0.0; 1.3422046, -1.8327302, 1.1441094; 2.7770138, -8.068255, 4.6264644; 4.036938, -15.593834, 4.1895995; 4.7476735, -16.086147, 6.646285; 4.8407845, -15.263027, 7.6074524; -1.6062855, -1.5920708, 1.0948925; -1.873996, -8.68191, 2.4234848; -1.3794695, -15.548489, -1.1502607; -1.8201815, -16.7225, 1.1506834; -2.0417056, -16.55687, 2.398847; 0.0034076048, 2.499605, -0.103814155; -0.1138313, 5.008774, 0.07125488; -0.3150082, 7.5372334, 0.31417695; -0.68758345, 9.06648, 0.5597339; -0.48058048, 10.602002, 0.21827522; -0.5462796, 12.18876, -0.16088533; 3.6489105, 9.032891, 0.107600585; 4.179967, 4.1692634, -0.7087264; 3.761337, 2.214571, 1.9771354; 3.538289, 1.2382712, 3.3186274; 2.784792, 0.8218031, 4.10036; 2.2693293, 0.47080624, 4.8004336; 3.268969, 0.41119593, 4.343856; -4.396888, 7.976493, -0.18688306; -4.2045493, 3.2895226, -1.7218634; -5.1243424, 0.73586226, 0.008315802; -5.584239, -0.5409658, 0.8734051; -5.735146, -1.7186474, 1.2970155; -5.9599686, -2.6252916, 1.6975085; -6.465961, -1.6202253, 1.2990587\",\n  \"-0.0, 0.0, 0.0; 1.3406783, -1.8349046, 1.1424121; 2.7602034, -8.055459, 4.657651; 3.8731394, -15.586695, 3.9835138; 4.635647, -16.183321, 6.401248; 4.777431, -15.4183, 7.4035845; -1.6076144, -1.5918452, 1.0932683; -1.8412163, -8.678357, 2.4458325; -1.3037084, -15.564292, -1.0841963; -1.7749264, -16.734829, 1.2124691; -2.0123446, -16.551517, 2.4552279; 0.013924922, 2.499535, -0.104618646; -0.09358524, 5.009035, 0.0719384; -0.29042095, 7.537283, 0.32055083; -0.66339827, 9.064998, 0.5748724; -0.45033583, 10.600378, 0.23651317; -0.50777847, 12.186702, -0.1457878; 3.675964, 9.026695, 0.11621061; 4.2040925, 4.1646247, -0.7112162; 3.7583818, 2.1935356, 1.958255; 3.5218053, 1.2090604, 3.291429; 2.7591653, 0.78223425, 4.058573; 2.2354991, 0.42196184, 4.7477617; 3.2404923, 0.36843708, 4.3023186; -4.3716884, 7.9845576, -0.17840153; -4.193443, 3.2890162, -1.68869; -5.1172595, 0.76447415, 0.081612706; -5.5791683, -0.49779415, 0.9667638; -5.735023, -1.668856, 1.4066231; -5.963349, -2.5687943, 1.820051; -6.4652543, -1.5662358, 1.4102746\",\n  \"-0.0, 0.0, 0.0; 1.340804, -1.836185, 1.140205; 2.736271, -8.04977, 4.6773324; 3.7016866, -15.574381, 3.7495315; 4.49291, -16.285706, 6.1266727; 4.675907, -15.589411, 7.171529; -1.6075137, -1.5933955, 1.0911562; -1.8111392, -8.6764965, 2.4662402; -1.2309852, -15.579944, -1.0225916; -1.7330432, -16.745426, 1.2701058; -1.9860317, -16.539062, 2.5061603; 0.023631003, 2.4993834, -0.10647822; -0.07380016, 5.0092916, 0.07013669; -0.265481, 7.5374603, 0.32354096; -0.63965285, 9.06349, 0.58609605; -0.4202387, 10.598672, 0.25091308; -0.46855378, 12.184534, -0.13455316; 3.7038321, 9.019279, 0.120848715; 4.2334757, 4.158886, -0.715422; 3.7583694, 2.1736507, 1.9384508; 3.5071108, 1.1821163, 3.2636833; 2.7342257, 0.74732804, 4.015958; 2.201334, 0.37992182, 4.6942225; 3.2123027, 0.3311039, 4.261955; -4.3459826, 7.9938736, -0.1733976; -4.1805, 3.2914371, -1.6635506; -5.1099644, 0.79762006, 0.14688945; -5.574695, -0.44928718, 1.0521085; -5.735106, -1.6129327, 1.5096565; -5.9666786, -2.505498, 1.9370261; -6.4647827, -1.5064719, 1.5141922\",\n  \"-0.0, 0.0, 0.0; 1.339886, -1.8380369, 1.1382991; 2.7071433, -8.0511675, 4.687224; 3.5276651, -15.555788, 3.4955745; 4.3254075, -16.388775, 5.8306456; 4.5374875, -15.758959, 6.911567; -1.6083168, -1.5938332, 1.0893322; -1.7828916, -8.673531, 2.4857745; -1.1623793, -15.592838, -0.9644792; -1.6942976, -16.753061, 1.3241494; -1.9624484, -16.53008, 2.5541062; 0.033819474, 2.4991815, -0.1084533; -0.05431713, 5.009465, 0.067700386; -0.24253145, 7.5375247, 0.3247622; -0.61873186, 9.0617485, 0.5947998; -0.39332518, 10.596928, 0.2636008; -0.4327986, 12.182544, -0.12387869; 3.7288985, 9.0140915, 0.12524818; 4.261513, 4.1549487, -0.7163772; 3.7582493, 2.1567388, 1.9225259; 3.4929304, 1.1587243, 3.2401319; 2.7088673, 0.7184267, 3.9774868; 2.1658885, 0.3459706, 4.644911; 3.183105, 0.3000467, 4.227229; -4.322264, 8.000364, -0.17253867; -4.1665077, 3.2929077, -1.6478132; -5.1033645, 0.83164907, 0.20292282; -5.571793, -0.39897907, 1.1282893; -5.735978, -1.5548507, 1.6038489; -5.970147, -2.4397845, 2.045438; -6.465116, -1.4448123, 1.609565\",\n  \"-0.0, 0.0, 0.0; 1.3399497, -1.8387426, 1.1370834; 2.6775272, -8.05835, 4.6859746; 3.3526447, -15.529679, 3.22445; 4.140427, -16.486795, 5.5148964; 4.3726277, -15.920917, 6.626608; -1.6082648, -1.5946801, 1.0881687; -1.7563283, -8.6706705, 2.5062928; -1.0936601, -15.603876, -0.9080379; -1.6580896, -16.756796, 1.3764901; -1.9418657, -16.509092, 2.5981832; 0.04387639, 2.4989865, -0.10934114; -0.034447942, 5.0096664, 0.065797396; -0.2186075, 7.5379996, 0.32310748; -0.59598196, 9.060759, 0.59969354; -0.36479253, 10.5960245, 0.27291262; -0.3960334, 12.181496, -0.11591053; 3.7551754, 9.008227, 0.12361337; 4.2927504, 4.1500993, -0.7207126; 3.7588873, 2.140518, 1.9035017; 3.4782887, 1.136821, 3.2136045; 2.6831203, 0.690858, 3.9355001; 2.1300523, 0.31336695, 4.591717; 3.153686, 0.27097583, 4.18963; -4.29761, 8.007418, -0.17402467; -4.1505203, 3.296711, -1.6397856; -5.096572, 0.8693211, 0.25058067; -5.569597, -0.34437275, 1.1957624; -5.7361574, -1.4918545, 1.6904296; -5.972063, -2.3688202, 2.146745; -6.465012, -1.3799131, 1.6950672\",\n  \"-0.0, 0.0, 0.0; 1.3378688, -1.8411645, 1.1356144; 2.642706, -8.074396, 4.6727705; 3.1771898, -15.497979, 2.935721; 3.944799, -16.573286, 5.1801167; 4.1885514, -16.06077, 6.314996; -1.6100729, -1.5938141, 1.0867627; -1.729042, -8.666227, 2.5253224; -1.030417, -15.61117, -0.85784316; -1.626656, -16.757263, 1.4220347; -1.9251912, -16.48914, 2.6358743; 0.052431863, 2.4987063, -0.111949034; -0.017690811, 5.0098333, 0.06023752; -0.19714953, 7.5385885, 0.31671783; -0.57676595, 9.059768, 0.5988699; -0.33995616, 10.595178, 0.27682674; -0.36259437, 12.180608, -0.11275861; 3.7794566, 9.00125, 0.11786921; 4.324933, 4.144432, -0.728922; 3.7606857, 2.1257684, 1.88193; 3.4649153, 1.1175218, 3.185184; 2.65869, 0.6673852, 3.8920696; 2.095517, 0.28628027, 4.537514; 3.125566, 0.24683923, 4.1518464; -4.2751217, 8.015551, -0.18168584; -4.133643, 3.3045712, -1.6471204; -5.0831804, 0.9069357, 0.27913034; -5.5579476, -0.29188097, 1.2422545; -5.727669, -1.4301158, 1.7568114; -5.965745, -2.2982383, 2.2286444; -6.456042, -1.3150928, 1.7617583\",\n  \"-0.0, 0.0, 0.0; 1.3365939, -1.8429159, 1.1342738; 2.6055846, -8.096075, 4.64923; 3.00378, -15.458242, 2.6361396; 3.7470295, -16.644365, 4.832389; 3.9979014, -16.177103, 5.985111; -1.6111811, -1.5935684, 1.0854799; -1.7014328, -8.662026, 2.545413; -0.96781623, -15.616812, -0.8100128; -1.5987501, -16.756042, 1.4639592; -1.9129188, -16.469542, 2.6696272; 0.06142135, 2.498397, -0.11425193; -5.3822994E-4, 5.0099688, 0.054543406; -0.17677636, 7.539191, 0.3086451; -0.5587017, 9.05917, 0.59413195; -0.31620193, 10.594686, 0.2768612; -0.33043662, 12.180147, -0.11299154; 3.8021624, 8.996068, 0.11404744; 4.360013, 4.140538, -0.73207235; 3.7621193, 2.1155994, 1.8664024; 3.4495528, 1.1041975, 3.1632757; 2.6323247, 0.64982426, 3.8546455; 2.0590134, 0.26521847, 4.4889927; 3.0956004, 0.22934511, 4.1208935; -4.2533793, 8.021488, -0.19578359; -4.1164007, 3.3134255, -1.6709877; -5.062703, 0.9420073, 0.28901422; -5.5358534, -0.24370134, 1.2690132; -5.708565, -1.3721501, 1.8037345; -5.9485626, -2.2309341, 2.2914176; -6.436364, -1.2536032, 1.8099381\",\n  \"-0.0, 0.0, 0.0; 1.3329655, -1.846506, 1.1327034; 2.5658622, -8.126461, 4.612557; 2.8324387, -15.413427, 2.3230925; 3.556396, -16.70079, 4.46818; 3.8143685, -16.271378, 5.6339817; -1.6143191, -1.591414, 1.0839773; -1.6739731, -8.655397, 2.5669518; -0.9080302, -15.61767, -0.7656443; -1.5732882, -16.749958, 1.5020039; -1.9023106, -16.444736, 2.6990852; 0.070116505, 2.498033, -0.117170796; 0.015002541, 5.0100756, 0.046920836; -0.1585395, 7.5398765, 0.29708403; -0.5421991, 9.059027, 0.58464456; -0.29339457, 10.594534, 0.27225405; -0.29871452, 12.180144, -0.11722013; 3.8224611, 8.9916315, 0.106408596; 4.390795, 4.1366534, -0.7358888; 3.7604814, 2.1084144, 1.8523302; 3.4317334, 1.0953484, 3.1438928; 2.6040688, 0.6372998, 3.8202596; 2.0210848, 0.2497119, 4.4438853; 3.063766, 0.21711937, 4.0931005; -4.233783, 8.026398, -0.21422857; -4.10169, 3.321824, -1.7009652; -5.0450726, 0.9770324, 0.29219854; -5.5167637, -0.19536221, 1.2887788; -5.689767, -1.3142651, 1.843106; -5.9295807, -2.1641433, 2.3462362; -6.4172096, -1.1936499, 1.850949\",\n  \"-0.0, 0.0, 0.0; 1.3290223, -1.8508836, 1.1301893; 2.526998, -8.163164, 4.5634418; 2.6661985, -15.362003, 2.000253; 3.3754318, -16.744026, 4.090665; 3.6449385, -16.36751, 5.272037; -1.6177208, -1.5895957, 1.0815716; -1.6484877, -8.6484585, 2.5895982; -0.8506267, -15.6152725, -0.7259774; -1.5510406, -16.741322, 1.534179; -1.8955231, -16.424799, 2.7239542; 0.07945269, 2.4975471, -0.12149239; 0.031364307, 5.0101414, 0.036245428; -0.14000224, 7.5405245, 0.28198367; -0.52588934, 9.0588255, 0.5710479; -0.2710121, 10.594394, 0.26389682; -0.2675986, 12.180205, -0.12477791; 3.8430324, 8.987624, 0.098538846; 4.425239, 4.1335454, -0.73946023; 3.760219, 2.1054778, 1.840194; 3.414152, 1.092484, 3.1272812; 2.5781028, 0.6297736, 3.7900257; 1.9872804, 0.23834193, 4.4037957; 3.034948, 0.20973535, 4.0678344; -4.2134748, 8.030685, -0.23985279; -4.0848746, 3.329373, -1.7371742; -5.028141, 1.0150828, 0.2913798; -5.4997745, -0.14206076, 1.305655; -5.671827, -1.2514129, 1.879143; -5.910558, -2.0925298, 2.397287; -6.399069, -1.1296735, 1.8881562\",\n  \"-0.0, 0.0, 0.0; 1.3265631, -1.8551756, 1.1260338; 2.4864354, -8.206858, 4.4991736; 2.5024433, -15.30464, 1.6647716; 3.198995, -16.775543, 3.698014; 3.4807234, -16.456179, 4.8932858; -1.6198477, -1.5901303, 1.0775948; -1.6252775, -8.642531, 2.6158586; -0.7942638, -15.61106, -0.6879492; -1.5302029, -16.730564, 1.564156; -1.8906081, -16.40788, 2.7475424; 0.088792816, 2.4970016, -0.12614562; 0.048031095, 5.0101957, 0.023912609; -0.121752456, 7.541207, 0.26421896; -0.50871533, 9.058995, 0.5545324; -0.24721476, 10.594484, 0.25259668; -0.2350801, 12.180292, -0.1359207; 3.8632543, 8.984182, 0.09142442; 4.4597106, 4.1303344, -0.7378444; 3.7588425, 2.103291, 1.8331099; 3.3948894, 1.090801, 3.1156518; 2.5497324, 0.6264633, 3.765582; 1.9504105, 0.23374084, 4.370219; 3.002938, 0.20668627, 4.049673; -4.1929755, 8.034218, -0.27228096; -4.0660057, 3.336186, -1.7800014; -5.0100546, 1.0560946, 0.28655982; -5.4820776, -0.08394885, 1.3198404; -5.653116, -1.1832973, 1.9125726; -5.8907228, -2.0152862, 2.4457526; -6.380156, -1.0604386, 1.9226182\",\n  \"-0.0, 0.0, 0.0; 1.3243363, -1.8597256, 1.1211394; 2.4463491, -8.25944, 4.4153743; 2.3424177, -15.242224, 1.3101323; 3.0286903, -16.797014, 3.2835748; 3.323432, -16.53999, 4.4906807; -1.6217744, -1.5913333, 1.0729105; -1.6084929, -8.636263, 2.6449912; -0.7412066, -15.603835, -0.6515019; -1.5133882, -16.718203, 1.5909953; -1.8908374, -16.396004, 2.7691884; 0.097905315, 2.4963255, -0.13261755; 0.06497954, 5.0102196, 0.0072879046; -0.1019381, 7.542079, 0.2405599; -0.49024394, 9.059303, 0.5320307; -0.22256848, 10.594896, 0.23609331; -0.20194945, 12.180903, -0.15124932; 3.8855948, 8.979006, 0.075823426; 4.4975667, 4.125295, -0.74287355; 3.7598858, 2.1001213, 1.8192393; 3.3775713, 1.0885559, 3.0971608; 2.524149, 0.62464213, 3.7365067; 1.9170878, 0.2324712, 4.3337355; 2.9738462, 0.20575081, 4.0273957; -4.1708593, 8.039419, -0.30924365; -4.045805, 3.343597, -1.8239923; -4.9905457, 1.0995932, 0.2813897; -5.4629164, -0.022406936, 1.3340794; -5.632519, -1.1111197, 1.946527; -5.8686185, -1.9334441, 2.4951463; -6.3593326, -0.9870544, 1.9580288\",\n  \"-0.0, 0.0, 0.0; 1.3227893, -1.8645856, 1.1148756; 2.4036036, -8.3207445, 4.311296; 2.1847181, -15.1764145, 0.9401717; 2.8632908, -16.808191, 2.8531961; 3.1696062, -16.60446, 4.0675697; -1.6231245, -1.5939851, 1.0669159; -1.5968758, -8.630478, 2.6761765; -0.68964607, -15.5948105, -0.61640906; -1.498499, -16.70347, 1.6159675; -1.8932207, -16.380823, 2.7883637; 0.10803896, 2.495475, -0.14051948; 0.0826905, 5.0100985, -0.012659222; -0.08415153, 7.5426526, 0.2130063; -0.4734226, 9.059872, 0.5032088; -0.19930187, 10.595488, 0.21335286; -0.17043859, 12.181889, -0.17184457; 3.9045095, 8.977665, 0.059255585; 4.532055, 4.1238413, -0.74688727; 3.7574644, 2.102549, 1.8073862; 3.3567448, 1.0929213, 3.0811946; 2.4956403, 0.63087714, 3.7115307; 1.8813999, 0.24041137, 4.3025036; 2.941729, 0.21264815, 4.0088587; -4.150798, 8.039957, -0.35341328; -4.0278096, 3.3477306, -1.8794317; -4.9723268, 1.1415341, 0.26563334; -5.4445853, 0.0384382, 1.3381653; -5.6133904, -1.0383532, 1.9715511; -5.8483853, -1.8498013, 2.536594; -6.339805, -0.91216135, 1.984972\",\n  \"-0.0, 0.0, 0.0; 1.3225772, -1.8690052, 1.107704; 2.3593543, -8.390334, 4.184165; 2.03143, -15.108713, 0.55532837; 2.7058911, -16.812178, 2.4063096; 3.0249681, -16.667185, 3.62582; -1.6233356, -1.598343, 1.0600531; -1.5930382, -8.62659, 2.7048855; -0.6443287, -15.586538, -0.5852783; -1.4905853, -16.689047, 1.6362526; -1.9029927, -16.36703, 2.8027194; 0.11529879, 2.4945025, -0.1515823; 0.097422145, 5.0099096, -0.038756087; -0.06584091, 7.5433917, 0.17897037; -0.45499906, 9.060795, 0.46836242; -0.1748412, 10.596459, 0.18459857; -0.1383261, 12.183203, -0.19853514; 3.9256124, 8.971349, 0.03215961; 4.5691757, 4.1170278, -0.7582037; 3.7600484, 2.104774, 1.7924972; 3.3421073, 1.099655, 3.0643358; 2.4750853, 0.6381951, 3.6869404; 1.855237, 0.24850726, 4.2725472; 2.9185717, 0.22126195, 3.989929; -4.130055, 8.045746, -0.40030077; -4.008286, 3.3564339, -1.9353501; -4.9506583, 1.1895154, 0.25031197; -5.4218426, 0.10605836, 1.3431432; -5.5907187, -0.9581506, 1.997431; -5.825124, -1.7580217, 2.5789843; -6.31646, -0.82847714, 2.0137548\",\n  \"-0.0, 0.0, 0.0; 1.3223593, -1.8733041, 1.1006799; 2.31201, -8.467179, 4.03473; 1.8820772, -15.040016, 0.15844631; 2.5570087, -16.81192, 1.9438435; 2.8906476, -16.734118, 3.1655924; -1.6235504, -1.602563, 1.0533314; -1.5931237, -8.623776, 2.727929; -0.60370374, -15.579214, -0.559782; -1.4816058, -16.674084, 1.6532304; -1.9094052, -16.353117, 2.8144312; 0.12308325, 2.4931884, -0.16636312; 0.11237533, 5.0093784, -0.07152399; -0.048810355, 7.5436764, 0.13810211; -0.43742144, 9.061431, 0.42638603; -0.15158945, 10.597149, 0.14863396; -0.10824759, 12.184256, -0.23227608; 3.9445539, 8.96698, -0.001780048; 4.6031413, 4.1116548, -0.77337664; 3.7603323, 2.1107242, 1.7753243; 3.3255992, 1.1112552, 3.045986; 2.4535656, 0.6502855, 3.661919; 1.8289262, 0.2613637, 4.242926; 2.8948689, 0.23494075, 3.970228; -4.110845, 8.048556, -0.4541149; -3.9928148, 3.361858, -1.9974147; -4.9316564, 1.2363789, 0.23005831; -5.4010773, 0.17364001, 1.3437927; -5.569298, -0.8771385, 2.0196025; -5.8023753, -1.6646588, 2.6182928; -6.294192, -0.7433821, 2.0400934\",\n]\n\n","import { Color, LineCurve3, TubeGeometry, Mesh, MeshBasicMaterial, Scene, Vector3 } from \"three\";\nimport { getBoneColor, getJointColor } from \"../PaintUtils\";\nimport { SkeletonPainter } from \"../SkeletonPainter\";\nimport { THRESHOLD_DEFINITIONS } from \"../ThresholdDefinitions\";\nimport { ALL_PARTS, BodyParts } from \"./BodyParts\";\nimport { Pose } from \"./Pose\";\nimport { Skeleton } from \"./Skeleton\";\n\nexport class PaintedSkeleton {\n\n  static thresholdZones : Mesh[][] = THRESHOLD_DEFINITIONS.map(thresholdSetting => {\n    const zones = SkeletonPainter.createThresholdZones(new Vector3(0,0,0), thresholdSetting);\n    return zones;\n  });\n\n  skeleton : Skeleton;\n  private leftLeg : Mesh[];\n  private rightLeg : Mesh[];\n  private torso : Mesh[];\n  private leftArm : Mesh[];\n  private rightArm : Mesh[];\n  private head : Mesh[];\n  private leftThumb : Mesh[];\n  private rightThumb : Mesh[];\n  private allBones : Mesh[];\n  private joints : Mesh[];\n  currentFrame : number;\n  translationOffset : Vector3;\n  maxFrame: number;\n  thresholdSphereIndex : number | undefined;\n\n  constructor(skeleton: Skeleton) {\n    const pose = skeleton.getPoses()[0];\n    this.leftLeg = SkeletonPainter.createBones(pose.getLeftLeg());\n    this.rightLeg = SkeletonPainter.createBones(pose.getRightLeg());\n    this.torso = SkeletonPainter.createBones(pose.getTorso());\n    this.leftArm = SkeletonPainter.createBones(pose.getLeftArm());\n    this.rightArm = SkeletonPainter.createBones(pose.getRightArm());\n    this.head = SkeletonPainter.createBones(pose.getHead());\n    this.leftThumb = SkeletonPainter.createBones(pose.getLeftThumb());\n    this.rightThumb = SkeletonPainter.createBones(pose.getRightThumb());\n    this.allBones = [ ...this.leftLeg, ...this.rightLeg, ...this.torso, ...this.leftArm, ...this.rightArm, ...this.head, ...this.leftThumb, ...this.rightThumb];\n    this.joints = SkeletonPainter.createJoints(pose.getCoordinates());\n    this.currentFrame = 0;\n    this.maxFrame = skeleton.getPoses().length - 1;\n    this.translationOffset = new Vector3(0,0,0);\n    this.skeleton = skeleton;\n  }\n\n  \n  /**\n   * Update skeleton to next frame\n   * \n   * @returns true if animation ended\n   * \n   */\n  nextFrame() : boolean {\n\n    if (this.currentFrame === this.maxFrame - 1) {\n      return true;\n    }\n\n    this.currentFrame += 1;\n\n    this.updatePose(this.skeleton.getPose(this.currentFrame));\n\n    return this.currentFrame === this.maxFrame - 1;\n  }\n\n  updatePose(newPose : Pose ) : void {\n    ALL_PARTS.map(bodyPart => {\n      this.updateLimb(bodyPart, newPose);\n    });\n    this.allBones = [ ...this.leftLeg, ...this.rightLeg, ...this.torso, ...this.leftArm, ...this.rightArm, ...this.head, ...this.leftThumb, ...this.rightThumb];\n\n    this.updateThresholdZonesPosition(newPose);\n  }\n\n  private updateLimb(bodyPart: BodyParts, newPose : Pose) : void {\n\n    const nextPose = newPose.getBodyPart(bodyPart);\n    const bones = this.getBodyPart(bodyPart);\n    const jointsIndices = newPose.getJointsIndices(bodyPart);\n    const jointsConnectedIndices = newPose.getJointsConnectedIndices(bodyPart);\n\n    // bone update\n    for (let i = 0; i < nextPose.length - 1; i++) { \n\n      const path = new LineCurve3(nextPose[i], nextPose[i + 1]);\n      // const path = new LineCurve3(nextPose[i].add(this.translationOffset), nextPose[i + 1].add(this.translationOffset));\n      //@ts-ignore\n      const geometry = new TubeGeometry(path, SkeletonPainter.BONE_TUBULAR_SEGMENTS, SkeletonPainter.BONE_RADIUS, SkeletonPainter.BONE_RADIAL_SEGMENTS, false);\n      const position = geometry.getAttribute('position');\n      const bone = bones[i];\n      bone.geometry.setAttribute(\"position\", position);     \n      geometry.dispose();\n\n      if (this.skeleton.isPupil) {\n        const jointIndex = jointsConnectedIndices[i];\n        const jointIndex2 = jointsConnectedIndices[i + 1];\n        const delta1 = this.skeleton.getFrameJointDelta(jointIndex, this.currentFrame);\n        const delta2 = this.skeleton.getFrameJointDelta(jointIndex2, this.currentFrame);\n        const color = getBoneColor(delta1, jointIndex, delta2, jointIndex2);\n        //@ts-ignore\n        bone.material.color = color\n      }\n    }\n\n    // joint update\n    for (let i = 0; i < jointsIndices.length; i++) {\n      const jointIndex = jointsIndices[i];    \n      const joint = this.joints[jointIndex];\n      const nextJointFrame = this.skeleton.getPose(this.currentFrame).getCoordinates()[jointIndex];\n      //@ts-ignore\n      joint.position.set(\n        nextJointFrame.x, \n        nextJointFrame.y, \n        nextJointFrame.z \n      );\n     \n      if (this.skeleton.isPupil) {\n        const delta = this.skeleton.getFrameJointDelta(jointIndex, this.currentFrame);\n        const color = getJointColor(delta, jointIndex);\n        const material = joint.material as MeshBasicMaterial;\n        //@ts-ignore\n        material.color = color;     \n      }\n\n    }\n  }\n\n  getBodyPart(bodyPart: BodyParts) : Array<Mesh>{\n    return this[bodyPart.toString()];\n  }\n\n  getAllBones(): Array<Mesh> {\n    return this.allBones;\n  }\n\n  setFrame(frame: number) : void {\n    this.currentFrame = frame;\n  }\n\n  /**\n   * Updates skeleton to given frame.\n   * \n   * @param frame to update skeleton position to\n   * \n   */\n  setToFrame(frame : number) : void {\n    this.currentFrame = frame;\n    this.updatePose(this.skeleton.getPose(frame));\n\n  }\n\n  getFrame() : number {\n    if (this.currentFrame === this.maxFrame - 1) {\n      this.currentFrame = 0;\n    }\n    return this.currentFrame;\n  }\n  \n  getJoints() : Array<Mesh> {\n    return this.joints;\n  }\n\n  translate(v : Vector3) {\n    // this.allBones.map(bone => {\n    //   bone.translateX(v.x),\n    //   bone.translateY(v.y),\n    //   bone.translateZ(v.z)\n    // })\n    this.skeleton.translateSkeleton(v.x, v.y, v.z);\n    this.translationOffset = v;\n  }\n\n  addToScene(scene  : Scene ) {\n    this.getAllBones().map(line => scene.add(line))\n    this.getJoints().map(joint => scene.add(joint))\n  }\n\n  removeFromScene(scene: Scene) {\n    this.getAllBones().map(line => scene.remove(line));\n    this.getJoints().map(joint => scene.remove(joint));\n  }\n  \n  setTranslationOffset(vec: Vector3) {\n    const oldOffset = this.translationOffset;\n    this.translate(new Vector3(-oldOffset.x, -oldOffset.y, -oldOffset.z));\n    this.translate(vec);\n  }\n\n  getShowedThresholdZones() {\n    if (this.thresholdSphereIndex) {\n      return PaintedSkeleton.thresholdZones[this.thresholdSphereIndex];\n    }\n\n    return [];\n  }\n\n  updateThresholdZonesPosition(pose: Pose) {  \n    if (this.thresholdSphereIndex) {\n\n      const trackedJoint = pose.getJointByIndex(this.thresholdSphereIndex);\n      const spheres = PaintedSkeleton.thresholdZones[this.thresholdSphereIndex];\n      spheres.map(sphere => {\n        //@ts-ignore\n        sphere.position.set(\n          trackedJoint.x, \n          trackedJoint.y, \n          trackedJoint.z \n        );\n      });\n      \n    }\n  }\n}","/**\n * @license\n * Copyright 2010-2023 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '150';\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst CullFaceFrontBack = 3;\nconst BasicShadowMap = 0;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst TwoPassDoubleSide = 2; // r149\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedInt248Type = 1020;\nconst AlphaFormat = 1021;\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst RED_RGTC1_Format = 36283;\nconst SIGNED_RED_RGTC1_Format = 36284;\nconst RED_GREEN_RGTC2_Format = 36285;\nconst SIGNED_RED_GREEN_RGTC2_Format = 36286;\nconst LoopOnce = 2200;\nconst LoopRepeat = 2201;\nconst LoopPingPong = 2202;\nconst InterpolateDiscrete = 2300;\nconst InterpolateLinear = 2301;\nconst InterpolateSmooth = 2302;\nconst ZeroCurvatureEnding = 2400;\nconst ZeroSlopeEnding = 2401;\nconst WrapAroundEnding = 2402;\nconst NormalAnimationBlendMode = 2500;\nconst AdditiveAnimationBlendMode = 2501;\nconst TrianglesDrawMode = 0;\nconst TriangleStripDrawMode = 1;\nconst TriangleFanDrawMode = 2;\nconst LinearEncoding = 3000;\nconst sRGBEncoding = 3001;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\nconst NoColorSpace = '';\nconst SRGBColorSpace = 'srgb';\nconst LinearSRGBColorSpace = 'srgb-linear';\nconst DisplayP3ColorSpace = 'display-p3';\n\nconst ZeroStencilOp = 0;\nconst KeepStencilOp = 7680;\nconst ReplaceStencilOp = 7681;\nconst IncrementStencilOp = 7682;\nconst DecrementStencilOp = 7683;\nconst IncrementWrapStencilOp = 34055;\nconst DecrementWrapStencilOp = 34056;\nconst InvertStencilOp = 5386;\n\nconst NeverStencilFunc = 512;\nconst LessStencilFunc = 513;\nconst EqualStencilFunc = 514;\nconst LessEqualStencilFunc = 515;\nconst GreaterStencilFunc = 516;\nconst NotEqualStencilFunc = 517;\nconst GreaterEqualStencilFunc = 518;\nconst AlwaysStencilFunc = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst StreamDrawUsage = 35040;\nconst StaticReadUsage = 35045;\nconst DynamicReadUsage = 35049;\nconst StreamReadUsage = 35041;\nconst StaticCopyUsage = 35046;\nconst DynamicCopyUsage = 35050;\nconst StreamCopyUsage = 35042;\n\nconst GLSL1 = '100';\nconst GLSL3 = '300 es';\n\nconst _SRGBAFormat = 1035; // fallback for WebGL 1\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nclass EventDispatcher {\n\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\thasEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\tremoveEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidean modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nconst MathUtils = {\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\tnormalize: normalize,\n\tdenormalize: denormalize\n};\n\nclass Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tVector2.prototype.isVector2 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nclass Matrix3 {\n\n\tconstructor() {\n\n\t\tMatrix3.prototype.isMatrix3 = true;\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t}\n\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t//\n\n\tscale( sx, sy ) {\n\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\n\n\t\treturn this;\n\n\t}\n\n\trotate( theta ) {\n\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( tx, ty ) {\n\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\n\n\t\treturn this;\n\n\t}\n\n\t// for 2D Transforms\n\n\tmakeTranslation( x, y ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, x,\n\t\t\t0, 1, y,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotation( theta ) {\n\n\t\t// counterclockwise\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0,\n\t\t\ts, c, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0,\n\t\t\t0, y, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t//\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nconst _m3 = /*@__PURE__*/ new Matrix3();\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tVector3.prototype.isVector3 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$d.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$d );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector$d.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector$d = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\n\n/**\n * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping\n * or clipping. Based on W3C specifications for sRGB and Display P3,\n * and ICC specifications for the D50 connection space. Values in/out\n * are _linear_ sRGB and _linear_ Display P3.\n *\n * Note that both sRGB and Display P3 use the sRGB transfer functions.\n *\n * Reference:\n * - http://www.russellcottrell.com/photo/matrixCalculator.htm\n */\n\nconst LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = new Matrix3().fromArray( [\n\t0.8224621, 0.0331941, 0.0170827,\n\t0.1775380, 0.9668058, 0.0723974,\n\t- 0.0000001, 0.0000001, 0.9105199\n] );\n\nconst LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = new Matrix3().fromArray( [\n\t1.2249401, - 0.0420569, - 0.0196376,\n\t- 0.2249404, 1.0420571, - 0.0786361,\n\t0.0000001, 0.0000000, 1.0982735\n] );\n\nconst _vector$c = new Vector3();\n\nfunction DisplayP3ToLinearSRGB( color ) {\n\n\tcolor.convertSRGBToLinear();\n\n\t_vector$c.set( color.r, color.g, color.b ).applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB );\n\n\treturn color.setRGB( _vector$c.x, _vector$c.y, _vector$c.z );\n\n}\n\nfunction LinearSRGBToDisplayP3( color ) {\n\n\t_vector$c.set( color.r, color.g, color.b ).applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 );\n\n\treturn color.setRGB( _vector$c.x, _vector$c.y, _vector$c.z ).convertLinearToSRGB();\n\n}\n\n// Conversions from <source> to Linear-sRGB reference space.\nconst TO_LINEAR = {\n\t[ LinearSRGBColorSpace ]: ( color ) => color,\n\t[ SRGBColorSpace ]: ( color ) => color.convertSRGBToLinear(),\n\t[ DisplayP3ColorSpace ]: DisplayP3ToLinearSRGB,\n};\n\n// Conversions to <target> from Linear-sRGB reference space.\nconst FROM_LINEAR = {\n\t[ LinearSRGBColorSpace ]: ( color ) => color,\n\t[ SRGBColorSpace ]: ( color ) => color.convertLinearToSRGB(),\n\t[ DisplayP3ColorSpace ]: LinearSRGBToDisplayP3,\n};\n\nconst ColorManagement = {\n\n\tenabled: false,\n\n\tget legacyMode() {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );\n\n\t\treturn ! this.enabled;\n\n\t},\n\n\tset legacyMode( legacyMode ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );\n\n\t\tthis.enabled = ! legacyMode;\n\n\t},\n\n\tget workingColorSpace() {\n\n\t\treturn LinearSRGBColorSpace;\n\n\t},\n\n\tset workingColorSpace( colorSpace ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );\n\n\t},\n\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tconst sourceToLinear = TO_LINEAR[ sourceColorSpace ];\n\t\tconst targetFromLinear = FROM_LINEAR[ targetColorSpace ];\n\n\t\tif ( sourceToLinear === undefined || targetFromLinear === undefined ) {\n\n\t\t\tthrow new Error( `Unsupported color space conversion, \"${ sourceColorSpace }\" to \"${ targetColorSpace }\".` );\n\n\t\t}\n\n\t\treturn targetFromLinear( sourceToLinear( color ) );\n\n\t},\n\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\n\n\t},\n\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\n\n\t},\n\n};\n\nlet _canvas;\n\nclass ImageUtils {\n\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n\tstatic sRGBToLinear( image ) {\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\tconst canvas = createElementNS( 'canvas' );\n\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\n\t\t\tconst data = imageData.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t} else if ( image.data ) {\n\n\t\t\tconst data = image.data.slice( 0 );\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\n\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assuming float\n\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\n\t\t\treturn image;\n\n\t\t}\n\n\t}\n\n}\n\nclass Source {\n\n\tconstructor( data = null ) {\n\n\t\tthis.isSource = true;\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.data = data;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.from( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nlet textureId = 0;\n\nclass Texture extends EventDispatcher {\n\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, encoding = LinearEncoding ) {\n\n\t\tsuper();\n\n\t\tthis.isTexture = true;\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.source = new Source( image );\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping;\n\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.anisotropy = anisotropy;\n\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t\tthis.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not\n\t\tthis.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)\n\n\t}\n\n\tget image() {\n\n\t\treturn this.source.data;\n\n\t}\n\n\tset image( value = null ) {\n\n\t\tthis.source.data = value;\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.source = source.source;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\timage: this.source.toJSON( meta ).uuid,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\tinternalFormat: this.internalFormat,\n\t\t\ttype: this.type,\n\t\t\tencoding: this.encoding,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tgenerateMipmaps: this.generateMipmaps,\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.source.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nTexture.DEFAULT_IMAGE = null;\nTexture.DEFAULT_MAPPING = UVMapping;\nTexture.DEFAULT_ANISOTROPY = 1;\n\nclass Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tVector4.prototype.isVector4 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass WebGLRenderTarget extends EventDispatcher {\n\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.isWebGLRenderTarget = true;\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: 1 };\n\n\t\tthis.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.flipY = false;\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t\tthis.samples = options.samples !== undefined ? options.samples : 0;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\t// ensure image object is not shared, see #20328\n\n\t\tconst image = Object.assign( {}, source.texture.image );\n\t\tthis.texture.source = new Source( image );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass DataArrayTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.isDataArrayTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.isWebGLArrayRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass Data3DTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.isData3DTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.isWebGL3DRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, count = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGLMultipleRenderTargets = true;\n\n\t\tconst texture = this.texture;\n\n\t\tthis.texture = [];\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.texture[ i ] = texture.clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.texture.length; i < il; i ++ ) {\n\n\t\t\t\tthis.texture[ i ].image.width = width;\n\t\t\t\tthis.texture[ i ].image.height = height;\n\t\t\t\tthis.texture[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.dispose();\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.set( 0, 0, this.width, this.height );\n\t\tthis.scissor.set( 0, 0, this.width, this.height );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.texture.length = 0;\n\n\t\tfor ( let i = 0, il = source.texture.length; i < il; i ++ ) {\n\n\t\t\tthis.texture[ i ] = source.texture[ i ].clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox3 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tfor ( let i = 0, l = position.count; i < l; i ++ ) {\n\n\t\t\t\t\t_vector$b.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector$b );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box$3.copy( geometry.boundingBox );\n\t\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box$3 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$4.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$4, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$4 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$b ).distanceTo( point );\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t} else {\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$3 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$4 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$2.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.center.copy( point );\n\n\t\t\tthis.radius = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t_v1$6.subVectors( point, this.center );\n\n\t\tconst lengthSq = _v1$6.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t// calculate the minimal sphere\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\n\n\t\t\tthis.center.addScaledVector( _v1$6, delta / length );\n\n\t\t\tthis.radius += delta;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\tif ( sphere.isEmpty() ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.copy( sphere );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\n\n\t\t} else {\n\n\t\t\t_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if t1 is behind the ray - if so, return null\n\t\tif ( t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass Matrix4 {\n\n\tconstructor() {\n\n\t\tMatrix4.prototype.isMatrix4 = true;\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t}\n\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractRotation( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromEuler( euler ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\tmakeTranslation( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tmakePerspective( left, right, top, bottom, near, far ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\t\tconst c = - ( far + near ) / ( far - near );\n\t\tconst d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\tmakeOrthographic( left, right, top, bottom, near, far ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\t\tconst z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\n\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$1.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$1, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n}\n\nEuler.DEFAULT_ORDER = 'XYZ';\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\tisEnabled( channel ) {\n\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isObject3D = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\tconst object = this.children[ i ];\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\tthis.children.length = 0;\n\n\t\treturn this;\n\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tthis.add( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetObjectsByProperty( name, value ) {\n\n\t\tlet result = [];\n\n\t\tif ( this[ name ] === value ) result.push( this );\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst childResult = this.children[ i ].getObjectsByProperty( name, value );\n\n\t\t\tif ( childResult.length > 0 ) {\n\n\t\t\t\tresult = result.concat( childResult );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast( /* raycaster, intersects */ ) {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tif ( child.matrixWorldAutoUpdate === true || force === true ) {\n\n\t\t\t\tchild.updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tif ( child.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$1 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3$1 );\n\n\t\treturn ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3$1 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3$1.x );\n\t\ttarget.addScaledVector( uv2, _v3$1.y );\n\t\ttarget.addScaledVector( uv3, _v3$1.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isMaterial = true;\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.forceSinglePass = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = this.forceSinglePass;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\tthis.forceSinglePass = source.forceSinglePass;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nclass Color {\n\n\tconstructor( r, g, b ) {\n\n\t\tthis.isColor = true;\n\n\t\tthis.r = 1;\n\t\tthis.g = 1;\n\t\tthis.b = 1;\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tset( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tconst h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tconst s = parseFloat( color[ 2 ] ) / 100;\n\t\t\t\t\t\tconst l = parseFloat( color[ 3 ] ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l, colorSpace );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\t\t\treturn this;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\n\n\t\t\t}\n\n\t\t} else if ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\treturn clamp( _color.r * 255, 0, 255 ) << 16 ^ clamp( _color.g * 255, 0, 255 ) << 8 ^ clamp( _color.b * 255, 0, 255 ) << 0;\n\n\t}\n\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\ttarget.r = _color.r;\n\t\ttarget.g = _color.g;\n\t\ttarget.b = _color.b;\n\n\t\treturn target;\n\n\t}\n\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\n\n\t\t}\n\n\t\treturn `rgb(${( r * 255 ) | 0},${( g * 255 ) | 0},${( b * 255 ) | 0})`;\n\n\t}\n\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t}\n\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.r;\n\t\tyield this.g;\n\t\tyield this.b;\n\n\t}\n\n}\n\nconst _color = new Color();\n\nColor.NAMES = _colorKeywords;\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshBasicMaterial = true;\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized = false ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.isBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.fromBufferAttribute( this, i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.array[ index * this.itemSize ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.from( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\t\tif ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n\n\t\treturn data;\n\n\t}\n\n\t// @deprecated\n\n\tcopyColorsArray() {\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyColorsArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector2sArray() {\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector2sArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector3sArray() {\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector3sArray() was removed in r144.' );\n\n\t}\n\n\tcopyVector4sArray() {\n\n\t\tconsole.error( 'THREE.BufferAttribute: copyVector4sArray() was removed in r144.' );\n\n\t}\n\n}\n\n//\n\nclass Int8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t\tthis.isFloat16BufferAttribute = true;\n\n\t}\n\n}\n\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float64BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id$1 = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBufferGeometry = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id$1 ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$1.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst indices = index.array;\n\t\tconst positions = attributes.position.array;\n\t\tconst normals = attributes.normal.array;\n\t\tconst uvs = attributes.uv.array;\n\n\t\tconst nVertices = positions.length / 3;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tconst tangents = this.getAttribute( 'tangent' ).array;\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t// @deprecated since r144\n\n\tmerge() {\n\n\t\tconsole.error( 'THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead.' );\n\t\treturn this;\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _morphA = /*@__PURE__*/ new Vector3();\n\nconst _uvA$1 = /*@__PURE__*/ new Vector2();\nconst _uvB$1 = /*@__PURE__*/ new Vector2();\nconst _uvC$1 = /*@__PURE__*/ new Vector2();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isMesh = true;\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\n\t\ttarget.fromBufferAttribute( position, index );\n\n\t\tconst morphInfluences = this.morphTargetInfluences;\n\n\t\tif ( morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttarget.add( _morphA );\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tthis.boneTransform( index, target );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\n\t\t_ray$2.copy( raycaster.ray ).recast( raycaster.near );\n\n\t\tif ( _sphere$3.containsPoint( _ray$2.origin ) === false ) {\n\n\t\t\tif ( _ray$2.intersectSphere( _sphere$3, _sphereHitAt ) === null ) return;\n\n\t\t\tif ( _ray$2.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\n\n\t\t}\n\n\t\t//\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uv2 = geometry.attributes.uv2;\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, uv, uv2, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = i;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, uv, uv2, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, uv, uv2, a, b, c ) {\n\n\tobject.getVertexPosition( a, _vA$1 );\n\tobject.getVertexPosition( b, _vB$1 );\n\tobject.getVertexPosition( c, _vC$1 );\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv2, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv2, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\nfunction cloneUniformsGroups( src ) {\n\n\tconst dst = [];\n\n\tfor ( let u = 0; u < src.length; u ++ ) {\n\n\t\tdst.push( src[ u ].clone() );\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction getUnlitUniformColorSpace( renderer ) {\n\n\tif ( renderer.getRenderTarget() === null ) {\n\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n\t\treturn renderer.outputEncoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n\n\t}\n\n\treturn LinearSRGBColorSpace;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.uniformsGroups = [];\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isPerspectiveCamera = true;\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst fov = - 90; // negative fov is not an error\nconst aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, 1, 0 );\n\t\tcameraPX.lookAt( 1, 0, 0 );\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, 1, 0 );\n\t\tcameraNX.lookAt( - 1, 0, 0 );\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, - 1 );\n\t\tcameraPY.lookAt( 0, 1, 0 );\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, 1 );\n\t\tcameraNY.lookAt( 0, - 1, 0 );\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, 1, 0 );\n\t\tcameraPZ.lookAt( 0, 0, 1 );\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, 1, 0 );\n\t\tcameraNZ.lookAt( 0, 0, - 1 );\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst renderTarget = this.renderTarget;\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst currentToneMapping = renderer.toneMapping;\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\trenderer.toneMapping = currentToneMapping;\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\tthis.isWebGLCubeRenderTarget = true;\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\tthis.isPlane = true;\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$2.center.set( 0, 0, 0 );\n\t\t_sphere$2.radius = 0.7071067811865476;\n\t\t_sphere$2.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$7 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = 5126;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\ttype = 5131;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = 5122;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = 5125;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = 5124;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = 5120;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t}\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t\tattribute.onUploadCallback();\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\\n    float x2 = x * x;\\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\n#ifdef USE_IRIDESCENCE\\n\\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\\n\\t\\tfloat alpha = pow2( roughness );\\n\\t\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\t\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\t\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\t\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\t\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\t\\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t\\treturn F * ( V * D );\\n\\t}\\n#endif\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\";\n\nvar iridescence_fragment = \"#ifdef USE_IRIDESCENCE\\n\\tconst mat3 XYZ_TO_REC709 = mat3(\\n\\t\\t 3.2404542, -0.9692660,  0.0556434,\\n\\t\\t-1.5371385,  1.8760108, -0.2040259,\\n\\t\\t-0.4985314,  0.0415560,  1.0572252\\n\\t);\\n\\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\\n\\t\\tvec3 sqrtF0 = sqrt( fresnel0 );\\n\\t\\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\\n\\t}\\n\\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\\n\\t}\\n\\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\\n\\t}\\n\\tvec3 evalSensitivity( float OPD, vec3 shift ) {\\n\\t\\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\\n\\t\\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\\n\\t\\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\\n\\t\\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\\n\\t\\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\\n\\t\\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\\n\\t\\txyz /= 1.0685e-7;\\n\\t\\tvec3 rgb = XYZ_TO_REC709 * xyz;\\n\\t\\treturn rgb;\\n\\t}\\n\\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\\n\\t\\tvec3 I;\\n\\t\\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\\n\\t\\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\\n\\t\\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\\n\\t\\tif ( cosTheta2Sq < 0.0 ) {\\n\\t\\t\\t return vec3( 1.0 );\\n\\t\\t}\\n\\t\\tfloat cosTheta2 = sqrt( cosTheta2Sq );\\n\\t\\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\\n\\t\\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\\n\\t\\tfloat R21 = R12;\\n\\t\\tfloat T121 = 1.0 - R12;\\n\\t\\tfloat phi12 = 0.0;\\n\\t\\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\\n\\t\\tfloat phi21 = PI - phi12;\\n\\t\\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\\t\\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\\n\\t\\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\\n\\t\\tvec3 phi23 = vec3( 0.0 );\\n\\t\\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\\n\\t\\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\\n\\t\\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\\n\\t\\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\\n\\t\\tvec3 phi = vec3( phi21 ) + phi23;\\n\\t\\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\\n\\t\\tvec3 r123 = sqrt( R123 );\\n\\t\\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\\n\\t\\tvec3 C0 = R12 + Rs;\\n\\t\\tI = C0;\\n\\t\\tvec3 Cm = Rs - T121;\\n\\t\\tfor ( int m = 1; m <= 2; ++ m ) {\\n\\t\\t\\tCm *= r123;\\n\\t\\t\\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\\n\\t\\t\\tI += Cm * Sm;\\n\\t\\t}\\n\\t\\treturn max( I, vec3( 0.0 ) );\\n\\t}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = dFdx( surf_pos.xyz );\\n\\t\\tvec3 vSigmaY = dFdy( surf_pos.xyz );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nvec3 pow2( const in vec3 x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat luminance( const in vec3 rgb ) {\\n\\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\\n\\treturn dot( weights, rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\\nfloat w0( float a ) {\\n\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\\n}\\nfloat w1( float a ) {\\n\\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\\n}\\nfloat w2( float a ){\\n    return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\\n}\\nfloat w3( float a ) {\\n\\treturn ( 1.0 / 6.0 ) * ( a * a * a );\\n}\\nfloat g0( float a ) {\\n\\treturn w0( a ) + w1( a );\\n}\\nfloat g1( float a ) {\\n\\treturn w2( a ) + w3( a );\\n}\\nfloat h0( float a ) {\\n\\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\\n}\\nfloat h1( float a ) {\\n    return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\\n}\\nvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, vec2 fullSize, float lod ) {\\n\\tuv = uv * texelSize.zw + 0.5;\\n\\tvec2 iuv = floor( uv );\\n    vec2 fuv = fract( uv );\\n    float g0x = g0( fuv.x );\\n    float g1x = g1( fuv.x );\\n    float h0x = h0( fuv.x );\\n    float h1x = h1( fuv.x );\\n    float h0y = h0( fuv.y );\\n    float h1y = h1( fuv.y );\\n    vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n    vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n    vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n    vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n    \\n    vec2 lodFudge = pow( 1.95, lod ) / fullSize;\\n\\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\\n\\t\\t   g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\\n}\\nvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\\n\\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\\n\\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\\n\\tvec2 fLodSizeInv = 1.0 / fLodSize;\\n\\tvec2 cLodSizeInv = 1.0 / cLodSize;\\n\\tvec2 fullSize = vec2( textureSize( sampler, 0 ) );\\n\\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), fullSize, floor( lod ) );\\n\\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), fullSize, ceil( lod ) );\\n\\treturn mix( fSample, cSample, fract( lod ) );\\n}\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\\n\\t\\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\\n\\t\\tuv.x *= CUBEUV_TEXEL_WIDTH;\\n\\t\\tuv.y *= CUBEUV_TEXEL_HEIGHT;\\n\\t\\t#ifdef texture2DGradEXT\\n\\t\\t\\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( envMap, uv ).rgb;\\n\\t\\t#endif\\n\\t}\\n\\t#define cubeUV_r0 1.0\\n\\t#define cubeUV_v0 0.339\\n\\t#define cubeUV_m0 - 2.0\\n\\t#define cubeUV_r1 0.8\\n\\t#define cubeUV_v1 0.276\\n\\t#define cubeUV_m1 - 1.0\\n\\t#define cubeUV_r4 0.4\\n\\t#define cubeUV_v4 0.046\\n\\t#define cubeUV_m4 2.0\\n\\t#define cubeUV_r5 0.305\\n\\t#define cubeUV_v5 0.016\\n\\t#define cubeUV_m5 3.0\\n\\t#define cubeUV_r6 0.21\\n\\t#define cubeUV_v6 0.0038\\n\\t#define cubeUV_m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= cubeUV_r1 ) {\\n\\t\\t\\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\\n\\t\\t} else if ( roughness >= cubeUV_r4 ) {\\n\\t\\t\\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\\n\\t\\t} else if ( roughness >= cubeUV_r5 ) {\\n\\t\\t\\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\\n\\t\\t} else if ( roughness >= cubeUV_r6 ) {\\n\\t\\t\\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar encodings_pars_fragment = \"vec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn vec3( texture2D( gradientMap, coord ).r );\\n\\t#else\\n\\t\\tvec2 fw = fwidth( coord ) * 0.5;\\n\\t\\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\\n\\t#endif\\n}\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_fragment = \"LambertMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_lambert_pars_fragment = \"varying vec3 vViewPosition;\\nstruct LambertMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Lambert\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Lambert\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( LEGACY_LIGHTS )\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#else\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec = reflect( - viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\tmaterial.ior = ior;\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\t\\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tmaterial.iridescence = iridescence;\\n\\tmaterial.iridescenceIOR = iridescenceIOR;\\n\\t#ifdef USE_IRIDESCENCEMAP\\n\\t\\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\t\\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\\n\\t#else\\n\\t\\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\\n\\t#endif\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\\n\\t#endif\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tfloat iridescence;\\n\\t\\tfloat iridescenceIOR;\\n\\t\\tfloat iridescenceThickness;\\n\\t\\tvec3 iridescenceFresnel;\\n\\t\\tvec3 iridescenceF0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n\\t#ifdef IOR\\n\\t\\tfloat ior;\\n\\t#endif\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat transmission;\\n\\t\\tfloat transmissionAlpha;\\n\\t\\tfloat thickness;\\n\\t\\tfloat attenuationDistance;\\n\\t\\tvec3 attenuationColor;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec3 sheenSpecular = vec3( 0.0 );\\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat r2 = roughness * roughness;\\n\\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\\n\\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\\n\\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\\n\\treturn saturate( DG * RECIPROCAL_PI );\\n}\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\n#ifdef USE_IRIDESCENCE\\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#else\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#endif\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\\n\\t#else\\n\\t\\tvec3 Fr = specularColor;\\n\\t#endif\\n\\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\\n\\t#else\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\\n\\t#else\\n\\t\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\t#endif\\n\\tvec3 totalScattering = singleScattering + multiScattering;\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\\n\\tif ( material.iridescenceThickness == 0.0 ) {\\n\\t\\tmaterial.iridescence = 0.0;\\n\\t} else {\\n\\t\\tmaterial.iridescence = saturate( material.iridescence );\\n\\t}\\n\\tif ( material.iridescence > 0.0 ) {\\n\\t\\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\\n\\t\\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\\n\\t}\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tvec4 spotColor;\\n\\tvec3 spotLightCoord;\\n\\tbool inSpotLightMap;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\\n\\t\\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\\n\\t\\t#else\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#endif\\n\\t\\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\\n\\t\\t\\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\\n\\t\\t\\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\\n\\t\\t\\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\\n\\t\\t\\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\\n\\t\\t#endif\\n\\t\\t#undef SPOT_LIGHT_MAP_INDEX\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 sampledDiffuseColor = texture2D( map, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\\n\\t#endif\\n\\tdiffuseColor *= sampledDiffuseColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tdiffuseColor *= texture2D( map, uv );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphcolor_vertex = \"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\\n\\tvColor *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t#if defined( USE_COLOR_ALPHA )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t#elif defined( USE_COLOR )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform ivec2 morphTargetsTextureSize;\\n\\t\\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\\n\\t\\t\\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\\n\\t\\t\\tint y = texelIndex / morphTargetsTextureSize.x;\\n\\t\\t\\tint x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\\n\\t\\t\\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = dFdx( vViewPosition );\\n\\tvec3 fdy = dFdy( vViewPosition );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\nvar iridescence_pars_fragment = \"#ifdef USE_IRIDESCENCEMAP\\n\\tuniform sampler2D iridescenceMap;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform sampler2D iridescenceThicknessMap;\\n#endif\";\n\nvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec2 packDepthToRG( in highp float v ) {\\n\\treturn packDepthToRGBA( v ).yx;\\n}\\nfloat unpackRGToDepth( const in highp vec2 v ) {\\n\\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#if NUM_SPOT_LIGHT_MAPS > 0\\n\\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\\n\\t\\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\\n\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\tvec4 shadowWorldPosition;\\n#endif\\n#if defined( USE_SHADOWMAP )\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if NUM_SPOT_LIGHT_COORDS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition;\\n\\t\\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t\\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\\n\\t\\t#endif\\n\\t\\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\tuniform highp sampler2D boneTexture;\\n\\tuniform int boneTextureSize;\\n\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\tfloat j = i * 4.0;\\n\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\ty = dy * ( y + 0.5 );\\n\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\treturn bone;\\n\\t}\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tmaterial.transmission = transmission;\\n\\tmaterial.transmissionAlpha = 1.0;\\n\\tmaterial.thickness = thickness;\\n\\tmaterial.attenuationDistance = attenuationDistance;\\n\\tmaterial.attenuationColor = attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tmaterial.transmission *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tmaterial.thickness *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\\n\\t\\tmaterial.attenuationColor, material.attenuationDistance );\\n\\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\\n\\t\\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\\n\\t}\\n\\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tif ( isinf( attenuationDistance ) ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\\n\\t\\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\\n\\t\\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\\n\\t\\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\nvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$h = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$h = \"uniform sampler2D t2D;\\nuniform float backgroundIntensity;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$g = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$g = \"#ifdef ENVMAP_TYPE_CUBE\\n\\tuniform samplerCube envMap;\\n#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\tuniform sampler2D envMap;\\n#endif\\nuniform float flipEnvMap;\\nuniform float backgroundBlurriness;\\nuniform float backgroundIntensity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\\n\\t#else\\n\\t\\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = texColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"#define LAMBERT\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_lambert_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_lambert_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n\\t#ifdef OPAQUE\\n\\t\\tgl_FragColor.a = 1.0;\\n\\t#endif\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tuniform float iridescence;\\n\\tuniform float iridescenceIOR;\\n\\tuniform float iridescenceThicknessMinimum;\\n\\tuniform float iridescenceThicknessMaximum;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <iridescence_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <iridescence_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_SHEEN\\n\\t\\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\\n\\t\\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <logdepthbuf_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tiridescence_fragment: iridescence_fragment,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_fragment: lights_lambert_fragment,\n\tlights_lambert_pars_fragment: lights_lambert_pars_fragment,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphcolor_vertex: morphcolor_vertex,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\tiridescence_pars_fragment: iridescence_pars_fragment,\n\toutput_fragment: output_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$h,\n\tbackground_frag: fragment$h,\n\tbackgroundCube_vert: vertex$g,\n\tbackgroundCube_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tuv2Transform: { value: /*@__PURE__*/ new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // physical\n\t\trefractionRatio: { value: 0.98 }, // basic, lambert, phong\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotLightMap: { value: [] },\n\t\tspotShadowMap: { value: [] },\n\t\tspotLightMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: /*@__PURE__*/ new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t\tbackgroundIntensity: { value: 1 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\n\tbackgroundCube: {\n\n\t\tuniforms: {\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\tbackgroundBlurriness: { value: 0 },\n\t\t\tbackgroundIntensity: { value: 1 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.backgroundCube_vert,\n\t\tfragmentShader: ShaderChunk.backgroundCube_frag\n\n\t},\n\n\tcube: {\n\n\t\tuniforms: {\n\t\t\ttCube: { value: null },\n\t\t\ttFlip: { value: - 1 },\n\t\t\topacity: { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: /*@__PURE__*/ new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: /*@__PURE__*/ new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tiridescence: { value: 0 },\n\t\t\tiridescenceMap: { value: null },\n\t\t\tiridescenceIOR: { value: 1.3 },\n\t\t\tiridescenceThicknessMinimum: { value: 100 },\n\t\t\tiridescenceThicknessMaximum: { value: 400 },\n\t\t\tiridescenceThicknessMap: { value: null },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tsheenColorMap: { value: null },\n\t\t\tsheenRoughness: { value: 1 },\n\t\t\tsheenRoughnessMap: { value: null },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tspecularIntensity: { value: 1 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },\n\t\t\tspecularColorMap: { value: null },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nconst _rgb = { r: 0, b: 0, g: 0 };\n\nfunction WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = alpha === true ? 0 : 1;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene ) {\n\n\t\tlet forceClear = false;\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tconst usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background\n\t\t\tbackground = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );\n\n\t\t}\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tconst xr = renderer.xr;\n\t\tconst session = xr.getSession && xr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.backgroundCube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.backgroundCube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// add \"envMap\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n\t\t\tboxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;\n\t\t\tboxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n\t\t\tboxMesh.material.toneMapped = ( background.encoding === sRGBEncoding ) ? false : true;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tboxMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// add \"map\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\t\t\tplaneMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n\t\t\tplaneMesh.material.toneMapped = ( background.encoding === sRGBEncoding ) ? false : true;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tplaneMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tcolor.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );\n\n\t\tstate.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\tconst maxVertexAttributes = gl.getParameter( 34921 );\n\n\tconst extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\tlet forceUpdate = false;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tif ( vaoAvailable ) {\n\n\t\t\tconst state = getBindingState( geometry, program, material );\n\n\t\t\tif ( currentState !== state ) {\n\n\t\t\t\tcurrentState = state;\n\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = needsUpdate( object, geometry, program, index );\n\n\t\t\tif ( updateBuffers ) saveCache( object, geometry, program, index );\n\n\t\t} else {\n\n\t\t\tconst wireframe = ( material.wireframe === true );\n\n\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\tcurrentState.program = program.id;\n\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, 34963 );\n\n\t\t}\n\n\t\tif ( updateBuffers || forceUpdate ) {\n\n\t\t\tforceUpdate = false;\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.createVertexArray();\n\n\t\treturn extension.createVertexArrayOES();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n\n\t\treturn extension.bindVertexArrayOES( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n\n\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( object, geometry, program, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tconst cachedAttribute = cachedAttributes[ name ];\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\t\tif ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( object, geometry, program, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet attribute = attributes[ name ];\n\n\t\t\t\tif ( attribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif ( attribute && attribute.data ) {\n\n\t\t\t\t\tdata.data = attribute.data;\n\n\t\t\t\t}\n\n\t\t\t\tcache[ name ] = data;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\t\tforceUpdate = true;\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatibility\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tconst maxTextures = gl.getParameter( 34930 );\n\tconst maxVertexTextures = gl.getParameter( 35660 );\n\tconst maxTextureSize = gl.getParameter( 3379 );\n\tconst maxCubemapSize = gl.getParameter( 34076 );\n\n\tconst maxAttributes = gl.getParameter( 34921 );\n\tconst maxVertexUniforms = gl.getParameter( 36347 );\n\tconst maxVaryings = gl.getParameter( 36348 );\n\tconst maxFragmentUniforms = gl.getParameter( 36349 );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tconst maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tdrawBuffers: drawBuffers,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\n\t};\n\n\tthis.setGlobalState = function ( planes, camera ) {\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._lodMax = 0;\n\t\tthis._cubeSize = 0;\n\t\tthis._lodPlanes = [];\n\t\tthis._sizeLods = [];\n\t\tthis._sigmas = [];\n\n\t\tthis._blurMaterial = null;\n\t\tthis._cubemapMaterial = null;\n\t\tthis._equirectMaterial = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\tthis._setSize( 256 );\n\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\t\tcubeUVRenderTarget.depthBuffer = true;\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap, renderTarget = null ) {\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\t\t\tthis._compileMaterial( this._cubemapMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\t\t\tthis._compileMaterial( this._equirectMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._dispose();\n\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\n\n\t}\n\n\t// private interface\n\n\t_setSize( cubeSize ) {\n\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\n\n\t}\n\n\t_dispose() {\n\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\n\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\n\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tthis._lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture, renderTarget ) {\n\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\n\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\n\n\t\t} else { // Equirectangular\n\n\t\t\tthis._setSize( texture.image.width / 4 );\n\n\t\t}\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets() {\n\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\n\t\tconst height = 4 * this._cubeSize;\n\n\t\tconst params = {\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: HalfFloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tencoding: LinearEncoding,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\n\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\n\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\n\n\t\t\t\tthis._dispose();\n\n\t\t\t}\n\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\n\n\t\t\tconst { _lodMax } = this;\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );\n\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\n\n\t\t}\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\n\t\t\tif ( col === 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col === 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\tconst size = this._cubeSize;\n\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\n\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\n\t\t\t}\n\n\t\t\tthis._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t} else {\n\n\t\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n\t\tconst mesh = new Mesh( this._lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tconst size = this._cubeSize;\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( let i = 1; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tconst { _lodMax } = this;\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = _lodMax - lodIn;\n\n\t\tconst outputSize = this._sizeLods[ lodOut ];\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\n\n\nfunction _createPlanes( lodMax ) {\n\n\tconst lodPlanes = [];\n\tconst sizeLods = [];\n\tconst sigmas = [];\n\n\tlet lod = lodMax;\n\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\tfor ( let i = 0; i < totalLods; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\tsizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > lodMax - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\n\n\t\t} else if ( i === 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\tsigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\n\t\tconst min = - texelSize;\n\t\tconst max = 1 + texelSize;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\tlodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { lodPlanes, sizeLods, sigmas };\n\n}\n\nfunction _createRenderTarget( width, height, params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( lodMax, width, height ) {\n\n\tconst weights = new Float32Array( MAX_SAMPLES );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new ShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: {\n\t\t\t'n': MAX_SAMPLES,\n\t\t\t'CUBEUV_TEXEL_WIDTH': 1.0 / width,\n\t\t\t'CUBEUV_TEXEL_HEIGHT': 1.0 / height,\n\t\t\t'CUBEUV_MAX_MIP': `${lodMax}.0`,\n\t\t},\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCubemapMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'flipEnvMap': { value: - 1 }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\tif ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {\n\n\t\t\t\t\ttexture.needsPMREMUpdate = false;\n\n\t\t\t\t\tlet renderTarget = cubeUVmaps.get( texture );\n\n\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );\n\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cubeUVmaps.has( texture ) ) {\n\n\t\t\t\t\t\treturn cubeUVmaps.get( texture ).texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function ( capabilities ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\n\t\t\t} else {\n\n\t\t\t\tgetExtension( 'WEBGL_depth_texture' );\n\t\t\t\tgetExtension( 'OES_texture_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float_linear' );\n\t\t\t\tgetExtension( 'OES_standard_derivatives' );\n\t\t\t\tgetExtension( 'OES_element_index_uint' );\n\t\t\t\tgetExtension( 'OES_vertex_array_object' );\n\t\t\t\tgetExtension( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\t\t\tgetExtension( 'WEBGL_multisampled_render_to_texture' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 4:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nfunction numericalSort( a, b ) {\n\n\treturn a[ 0 ] - b[ 0 ];\n\n}\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst influencesList = {};\n\tconst morphInfluences = new Float32Array( 8 );\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector4();\n\n\tconst workInfluences = [];\n\n\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t}\n\n\tfunction update( object, geometry, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tif ( capabilities.isWebGL2 === true ) {\n\n\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t\tlet entry = morphTextures.get( geometry );\n\n\t\t\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\n\n\t\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\t\t\t\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position || [];\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\t\t\tconst morphColors = geometry.morphAttributes.color || [];\n\n\t\t\t\tlet vertexDataCount = 0;\n\n\t\t\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\n\t\t\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\n\t\t\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\n\n\t\t\t\tlet width = geometry.attributes.position.count * vertexDataCount;\n\t\t\t\tlet height = 1;\n\n\t\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t\t}\n\n\t\t\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\n\n\t\t\t\tconst texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\n\t\t\t\ttexture.type = FloatType;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t// fill buffer\n\n\t\t\t\tconst vertexDataStride = vertexDataCount * 4;\n\n\t\t\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\n\n\t\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\t\tconst morphNormal = morphNormals[ i ];\n\t\t\t\t\tconst morphColor = morphColors[ i ];\n\n\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphColors === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphColor, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 8 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 9 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 10 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentry = {\n\t\t\t\t\tcount: morphTargetsCount,\n\t\t\t\t\ttexture: texture,\n\t\t\t\t\tsize: new Vector2( width, height )\n\t\t\t\t};\n\n\t\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\t\tfunction disposeTexture() {\n\n\t\t\t\t\ttexture.dispose();\n\n\t\t\t\t\tmorphTextures.delete( geometry );\n\n\t\t\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addEventListener( 'dispose', disposeTexture );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\n\t\t} else {\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tlet influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined || influences.length !== length ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tif ( i < length && influences[ i ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst influence = workInfluences[ i ];\n\t\t\t\tconst index = influence[ 0 ];\n\t\t\t\tconst value = influence[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\tattributes.update( object.instanceColor, 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nconst emptyTexture = /*@__PURE__*/ new Texture();\nconst emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();\nconst empty3dTexture = /*@__PURE__*/ new Data3DTexture();\nconst emptyCubeTexture = /*@__PURE__*/ new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array or THREE.VectorN)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2i( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3i( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4i( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array or THREE.VectorN)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2ui( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3ui( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || empty3dTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyArrayTexture, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / 3D / Cube / 2DArray)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT3DArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT2DArrayArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );\n\n\t}\n\n}\n\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3DArray;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArrayArray;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nclass SingleUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass PureArrayUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass StructuredUniform {\n\n\tconstructor( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tsetValue( gl, value, textures ) {\n\n\t\tconst seq = this.seq;\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t}\n\n}\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nclass WebGLUniforms {\n\n\tconstructor( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tconst n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tsetValue( gl, name, value, textures ) {\n\n\t\tconst u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n\t}\n\n\tsetOptional( gl, object, name ) {\n\n\t\tconst v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t}\n\n\tstatic upload( gl, seq, values, textures ) {\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic seqWithValue( seq, values ) {\n\n\t\tconst r = [];\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n}\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\nlet programIdCount = 0;\n\nfunction handleSource( string, errorLine ) {\n\n\tconst lines = string.split( '\\n' );\n\tconst lines2 = [];\n\n\tconst from = Math.max( errorLine - 6, 0 );\n\tconst to = Math.min( errorLine + 6, lines.length );\n\n\tfor ( let i = from; i < to; i ++ ) {\n\n\t\tconst line = i + 1;\n\t\tlines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );\n\n\t}\n\n\treturn lines2.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\treturn [ 'Linear', '( value )' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, 35713 );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\tconst errorMatches = /ERROR: 0:(\\d+)/.exec( errors );\n\tif ( errorMatches ) {\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst errorLine = parseInt( errorMatches[ 1 ] );\n\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + handleSource( gl.getShaderSource( shader ), errorLine );\n\n\t} else {\n\n\t\treturn errors;\n\n\t}\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( parameters ) {\n\n\tconst chunks = [\n\t\t( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, 35721 );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === 35674 ) locationSize = 2;\n\t\tif ( info.type === 35675 ) locationSize = 3;\n\t\tif ( info.type === 35676 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\tconst numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nfunction includeReplacer( match, include ) {\n\n\tconst string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string.replace( unrollLoopPattern, loopReplacer );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction generateCubeUVSize( parameters ) {\n\n\tconst imageHeight = parameters.envMapCubeUVHeight;\n\n\tif ( imageHeight === null ) return null;\n\n\tconst maxMip = Math.log2( imageHeight ) - 2;\n\n\tconst texelHeight = 1.0 / imageHeight;\n\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\n\n\treturn { texelWidth, texelHeight, maxMip };\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\tconst envMapCubeUVSize = generateCubeUVSize( parameters );\n\n\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescence ? '#define USE_IRIDESCENCE' : '',\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.opaque ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\tparameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\t// check for link errors\n\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tlet runnable = true;\n\t\tlet haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\tconsole.error(\n\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\\n\\n' +\n\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\tfragmentErrors\n\t\t\t);\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// Clean up\n\n\t// Crashes in iOS9 and iOS10. #18402\n\t// gl.detachShader( program, glVertexShader );\n\t// gl.detachShader( program, glFragmentShader );\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nlet _id = 0;\n\nclass WebGLShaderCache {\n\n\tconstructor() {\n\n\t\tthis.shaderCache = new Map();\n\t\tthis.materialCache = new Map();\n\n\t}\n\n\tupdate( material ) {\n\n\t\tconst vertexShader = material.vertexShader;\n\t\tconst fragmentShader = material.fragmentShader;\n\n\t\tconst vertexShaderStage = this._getShaderStage( vertexShader );\n\t\tconst fragmentShaderStage = this._getShaderStage( fragmentShader );\n\n\t\tconst materialShaders = this._getShaderCacheForMaterial( material );\n\n\t\tif ( materialShaders.has( vertexShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( vertexShaderStage );\n\t\t\tvertexShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\tif ( materialShaders.has( fragmentShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( fragmentShaderStage );\n\t\t\tfragmentShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( material ) {\n\n\t\tconst materialShaders = this.materialCache.get( material );\n\n\t\tfor ( const shaderStage of materialShaders ) {\n\n\t\t\tshaderStage.usedTimes --;\n\n\t\t\tif ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );\n\n\t\t}\n\n\t\tthis.materialCache.delete( material );\n\n\t\treturn this;\n\n\t}\n\n\tgetVertexShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.vertexShader ).id;\n\n\t}\n\n\tgetFragmentShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.fragmentShader ).id;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shaderCache.clear();\n\t\tthis.materialCache.clear();\n\n\t}\n\n\t_getShaderCacheForMaterial( material ) {\n\n\t\tconst cache = this.materialCache;\n\t\tlet set = cache.get( material );\n\n\t\tif ( set === undefined ) {\n\n\t\t\tset = new Set();\n\t\t\tcache.set( material, set );\n\n\t\t}\n\n\t\treturn set;\n\n\t}\n\n\t_getShaderStage( code ) {\n\n\t\tconst cache = this.shaderCache;\n\t\tlet stage = cache.get( code );\n\n\t\tif ( stage === undefined ) {\n\n\t\t\tstage = new WebGLShaderStage( code );\n\t\t\tcache.set( code, stage );\n\n\t\t}\n\n\t\treturn stage;\n\n\t}\n\n}\n\nclass WebGLShaderStage {\n\n\tconstructor( code ) {\n\n\t\tthis.id = _id ++;\n\n\t\tthis.code = code;\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst _programLayers = new Layers();\n\tconst _customShaders = new WebGLShaderCache();\n\tconst programs = [];\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst vertexTextures = capabilities.vertexTextures;\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst geometry = object.geometry;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tlet morphTextureStride = 0;\n\n\t\tif ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;\n\t\tif ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;\n\t\tif ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;\n\n\t\t//\n\n\t\tlet vertexShader, fragmentShader;\n\t\tlet customVertexShaderID, customFragmentShaderID;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t\t_customShaders.update( material );\n\n\t\t\tcustomVertexShaderID = _customShaders.getVertexShaderID( material );\n\t\t\tcustomFragmentShaderID = _customShaders.getFragmentShaderID( material );\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst useAlphaTest = material.alphaTest > 0;\n\t\tconst useClearcoat = material.clearcoat > 0;\n\t\tconst useIridescence = material.iridescence > 0;\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderName: material.type,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tcustomVertexShaderID: customVertexShaderID,\n\t\t\tcustomFragmentShaderID: customFragmentShaderID,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\toutputEncoding: ( currentRenderTarget === null ) ? renderer.outputEncoding : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding ),\n\t\t\tmap: !! material.map,\n\t\t\tmatcap: !! material.matcap,\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapCubeUVHeight: envMapCubeUVHeight,\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tdecodeVideoTexture: !! material.map && ( material.map.isVideoTexture === true ) && ( material.map.encoding === sRGBEncoding ),\n\n\t\t\tclearcoat: useClearcoat,\n\t\t\tclearcoatMap: useClearcoat && !! material.clearcoatMap,\n\t\t\tclearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,\n\t\t\tclearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,\n\n\t\t\tiridescence: useIridescence,\n\t\t\tiridescenceMap: useIridescence && !! material.iridescenceMap,\n\t\t\tiridescenceThicknessMap: useIridescence && !! material.iridescenceThicknessMap,\n\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\tspecularIntensityMap: !! material.specularIntensityMap,\n\t\t\tspecularColorMap: !! material.specularColorMap,\n\n\t\t\topaque: material.transparent === false && material.blending === NormalBlending,\n\n\t\t\talphaMap: !! material.alphaMap,\n\t\t\talphaTest: useAlphaTest,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: material.sheen > 0,\n\t\t\tsheenColorMap: !! material.sheenColorMap,\n\t\t\tsheenRoughnessMap: !! material.sheenRoughnessMap,\n\n\t\t\ttransmission: material.transmission > 0,\n\t\t\ttransmissionMap: !! material.transmissionMap,\n\t\t\tthicknessMap: !! material.thicknessMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( !! material.normalMap && !! geometry.attributes.tangent ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || !! material.sheenRoughnessMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog === true,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: !! material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true,\n\n\t\t\tmorphTargets: geometry.morphAttributes.position !== undefined,\n\t\t\tmorphNormals: geometry.morphAttributes.normal !== undefined,\n\t\t\tmorphColors: geometry.morphAttributes.color !== undefined,\n\t\t\tmorphTargetsCount: morphTargetsCount,\n\t\t\tmorphTextureStride: morphTextureStride,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumSpotLightMaps: lights.spotLightMap.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\tnumSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tuseLegacyLights: renderer.useLegacyLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tuseDepthPacking: !! material.depthPacking,\n\t\t\tdepthPacking: material.depthPacking || 0,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.customVertexShaderID );\n\t\t\tarray.push( parameters.customFragmentShaderID );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tgetProgramCacheKeyParameters( array, parameters );\n\t\t\tgetProgramCacheKeyBooleans( array, parameters );\n\t\t\tarray.push( renderer.outputEncoding );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getProgramCacheKeyParameters( array, parameters ) {\n\n\t\tarray.push( parameters.precision );\n\t\tarray.push( parameters.outputEncoding );\n\t\tarray.push( parameters.envMapMode );\n\t\tarray.push( parameters.envMapCubeUVHeight );\n\t\tarray.push( parameters.combine );\n\t\tarray.push( parameters.vertexUvs );\n\t\tarray.push( parameters.fogExp2 );\n\t\tarray.push( parameters.sizeAttenuation );\n\t\tarray.push( parameters.morphTargetsCount );\n\t\tarray.push( parameters.morphAttributeCount );\n\t\tarray.push( parameters.numDirLights );\n\t\tarray.push( parameters.numPointLights );\n\t\tarray.push( parameters.numSpotLights );\n\t\tarray.push( parameters.numSpotLightMaps );\n\t\tarray.push( parameters.numHemiLights );\n\t\tarray.push( parameters.numRectAreaLights );\n\t\tarray.push( parameters.numDirLightShadows );\n\t\tarray.push( parameters.numPointLightShadows );\n\t\tarray.push( parameters.numSpotLightShadows );\n\t\tarray.push( parameters.numSpotLightShadowsWithMaps );\n\t\tarray.push( parameters.shadowMapType );\n\t\tarray.push( parameters.toneMapping );\n\t\tarray.push( parameters.numClippingPlanes );\n\t\tarray.push( parameters.numClipIntersection );\n\t\tarray.push( parameters.depthPacking );\n\n\t}\n\n\tfunction getProgramCacheKeyBooleans( array, parameters ) {\n\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.isWebGL2 )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.supportsVertexTextures )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.instancing )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.instancingColor )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.map )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.matcap )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.envMap )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.lightMap )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.aoMap )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.emissiveMap )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.bumpMap )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.normalMap )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.objectSpaceNormalMap )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.tangentSpaceNormalMap )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.clearcoat )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.clearcoatMap )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.clearcoatRoughnessMap )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.clearcoatNormalMap )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.iridescence )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.iridescenceMap )\n\t\t\t_programLayers.enable( 19 );\n\t\tif ( parameters.iridescenceThicknessMap )\n\t\t\t_programLayers.enable( 20 );\n\t\tif ( parameters.displacementMap )\n\t\t\t_programLayers.enable( 21 );\n\t\tif ( parameters.specularMap )\n\t\t\t_programLayers.enable( 22 );\n\t\tif ( parameters.roughnessMap )\n\t\t\t_programLayers.enable( 23 );\n\t\tif ( parameters.metalnessMap )\n\t\t\t_programLayers.enable( 24 );\n\t\tif ( parameters.gradientMap )\n\t\t\t_programLayers.enable( 25 );\n\t\tif ( parameters.alphaMap )\n\t\t\t_programLayers.enable( 26 );\n\t\tif ( parameters.alphaTest )\n\t\t\t_programLayers.enable( 27 );\n\t\tif ( parameters.vertexColors )\n\t\t\t_programLayers.enable( 28 );\n\t\tif ( parameters.vertexAlphas )\n\t\t\t_programLayers.enable( 29 );\n\t\tif ( parameters.vertexUvs )\n\t\t\t_programLayers.enable( 30 );\n\t\tif ( parameters.vertexTangents )\n\t\t\t_programLayers.enable( 31 );\n\t\tif ( parameters.uvsVertexOnly )\n\t\t\t_programLayers.enable( 32 );\n\n\t\tarray.push( _programLayers.mask );\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.fog )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.useFog )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.flatShading )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.logarithmicDepthBuffer )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.skinning )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.morphTargets )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.morphNormals )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.morphColors )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.premultipliedAlpha )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.shadowMapEnabled )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.useLegacyLights )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.doubleSided )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.flipSided )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.useDepthPacking )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.dithering )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.specularIntensityMap )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.specularColorMap )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.transmission )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.transmissionMap )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.thicknessMap )\n\t\t\t_programLayers.enable( 19 );\n\t\tif ( parameters.sheen )\n\t\t\t_programLayers.enable( 20 );\n\t\tif ( parameters.sheenColorMap )\n\t\t\t_programLayers.enable( 21 );\n\t\tif ( parameters.sheenRoughnessMap )\n\t\t\t_programLayers.enable( 22 );\n\t\tif ( parameters.decodeVideoTexture )\n\t\t\t_programLayers.enable( 23 );\n\t\tif ( parameters.opaque )\n\t\t\t_programLayers.enable( 24 );\n\n\t\tarray.push( _programLayers.mask );\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\tfunction releaseShaderCache( material ) {\n\n\t\t_customShaders.remove( material );\n\n\t}\n\n\tfunction dispose() {\n\n\t\t_customShaders.dispose();\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\treleaseShaderCache: releaseShaderCache,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList() {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tconst listArray = lists.get( scene );\n\t\tlet list;\n\n\t\tif ( listArray === undefined ) {\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= listArray.length ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlistArray.push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = listArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingAndTexturingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions, capabilities ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1,\n\t\t\tnumSpotMaps: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotLightMap: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotLightMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\t\tnumSpotLightShadowsWithMaps: 0\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights, useLegacyLights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\t\tlet numSpotMaps = 0;\n\t\tlet numSpotShadowsWithMaps = 0;\n\n\t\t// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]\n\t\tlights.sort( shadowCastingAndTexturingLightsFirst );\n\n\t\t// artist-friendly light intensity scaling factor\n\t\tconst scaleFactor = ( useLegacyLights === true ) ? Math.PI : 1;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\tb += color.b * intensity * scaleFactor;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif ( light.map ) {\n\n\t\t\t\t\tstate.spotLightMap[ numSpotMaps ] = light.map;\n\t\t\t\t\tnumSpotMaps ++;\n\n\t\t\t\t\t// make sure the lightMatrix is up to date\n\t\t\t\t\t// TODO : do it if required only\n\t\t\t\t\tshadow.updateMatrices( light );\n\n\t\t\t\t\tif ( light.castShadow ) numSpotShadowsWithMaps ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spotLightMatrix[ spotLength ] = shadow.matrix;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\t// WebGL 1\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t\t} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ||\n\t\t\thash.numSpotMaps !== numSpotMaps ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;\n\t\t\tstate.spotLightMap.length = numSpotMaps;\n\t\t\tstate.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\thash.numSpotMaps = numSpotMaps;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions, capabilities ) {\n\n\tconst lights = new WebGLLights( extensions, capabilities );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( useLegacyLights ) {\n\n\t\tlights.setup( lightsArray, useLegacyLights );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions, capabilities ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tconst renderStateArray = renderStates.get( scene );\n\t\tlet renderState;\n\n\t\tif ( renderStateArray === undefined ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStateArray.length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\t\trenderStateArray.push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStateArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDepthMaterial = true;\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDistanceMaterial = true;\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( _renderer, _objects, _capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\tconst shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\t\tdefines: {\n\t\t\tVSM_SAMPLES: 8\n\t\t},\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tconst _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tconst pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = _objects.update( fullScreenMesh );\n\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\n\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( shadow.mapPass === null ) {\n\n\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );\n\n\t\t}\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t\tif ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||\n\t\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t\t( material.alphaMap && material.alphaTest > 0 ) ||\n\t\t\t\t( material.map && material.alphaTest > 0 ) ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\t\tresult.map = material.map;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = _objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tconst uboBindings = new WeakMap();\n\tconst uboProgramMap = new WeakMap();\n\n\tlet enabledCapabilities = {};\n\n\tlet currentBoundFramebuffers = {};\n\tlet currentDrawbuffers = new WeakMap();\n\tlet defaultDrawbuffers = [];\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( 35661 );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( 7938 );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( 3088 );\n\tconst viewportParam = gl.getParameter( 2978 );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, 10241, 9728 );\n\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( 2929 );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( 2884 );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t// 36009 is equivalent to 36160\n\n\t\t\t\tif ( target === 36009 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36160 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t\tif ( target === 36160 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36009 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction drawBuffers( renderTarget, framebuffer ) {\n\n\t\tlet drawBuffers = defaultDrawbuffers;\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tdrawBuffers = currentDrawbuffers.get( framebuffer );\n\n\t\t\tif ( drawBuffers === undefined ) {\n\n\t\t\t\tdrawBuffers = [];\n\t\t\t\tcurrentDrawbuffers.set( framebuffer, drawBuffers );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tdrawBuffers[ i ] = 36064 + i;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdrawBuffers.length = textures.length;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( drawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\tdrawBuffers[ 0 ] = 36064;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( drawBuffers[ 0 ] !== 1029 ) {\n\n\t\t\t\tdrawBuffers[ 0 ] = 1029;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t\t} else {\n\n\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );\n\n\t\t\t}\n\n\t\t}\n\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: 32774,\n\t\t[ SubtractEquation ]: 32778,\n\t\t[ ReverseSubtractEquation ]: 32779\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = 32775;\n\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t} else {\n\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: 0,\n\t\t[ OneFactor ]: 1,\n\t\t[ SrcColorFactor ]: 768,\n\t\t[ SrcAlphaFactor ]: 770,\n\t\t[ SrcAlphaSaturateFactor ]: 776,\n\t\t[ DstColorFactor ]: 774,\n\t\t[ DstAlphaFactor ]: 772,\n\t\t[ OneMinusSrcColorFactor ]: 769,\n\t\t[ OneMinusSrcAlphaFactor ]: 771,\n\t\t[ OneMinusDstColorFactor ]: 775,\n\t\t[ OneMinusDstAlphaFactor ]: 773\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( 3042 );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 769, 0, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 769, 0, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = false;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( 2884 )\n\t\t\t: enable( 2884 );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( 32926 )\n\t\t\t: disable( 32926 );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( 2884 );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 2884 );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( 32823 );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 32823 );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( 3089 );\n\n\t\t} else {\n\n\t\t\tdisable( 3089 );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture, webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\twebglSlot = 33984 + maxTextures - 1;\n\n\t\t\t} else {\n\n\t\t\t\twebglSlot = currentTextureSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ webglSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ webglSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\tfunction updateUBOMapping( uniformsGroup, program ) {\n\n\t\tlet mapping = uboProgramMap.get( program );\n\n\t\tif ( mapping === undefined ) {\n\n\t\t\tmapping = new WeakMap();\n\n\t\t\tuboProgramMap.set( program, mapping );\n\n\t\t}\n\n\t\tlet blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( blockIndex === undefined ) {\n\n\t\t\tblockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );\n\n\t\t\tmapping.set( uniformsGroup, blockIndex );\n\n\t\t}\n\n\t}\n\n\tfunction uniformBlockBinding( uniformsGroup, program ) {\n\n\t\tconst mapping = uboProgramMap.get( program );\n\t\tconst blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( uboBindings.get( program ) !== blockIndex ) {\n\n\t\t\t// bind shader specific block index to global block point\n\t\t\tgl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );\n\n\t\t\tuboBindings.set( program, blockIndex );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( 3042 );\n\t\tgl.disable( 2884 );\n\t\tgl.disable( 2929 );\n\t\tgl.disable( 32823 );\n\t\tgl.disable( 3089 );\n\t\tgl.disable( 2960 );\n\t\tgl.disable( 32926 );\n\n\t\tgl.blendEquation( 32774 );\n\t\tgl.blendFunc( 1, 0 );\n\t\tgl.blendFuncSeparate( 1, 0, 1, 0 );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( 513 );\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( 519, 0, 0xffffffff );\n\t\tgl.stencilOp( 7680, 7680, 7680 );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( 1029 );\n\t\tgl.frontFace( 2305 );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( 33984 );\n\n\t\tgl.bindFramebuffer( 36160, null );\n\n\t\tif ( isWebGL2 === true ) {\n\n\t\t\tgl.bindFramebuffer( 36009, null );\n\t\t\tgl.bindFramebuffer( 36008, null );\n\n\t\t}\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBoundFramebuffers = {};\n\t\tcurrentDrawbuffers = new WeakMap();\n\t\tdefaultDrawbuffers = [];\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\t\tdrawBuffers: drawBuffers,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\tcompressedTexImage3D: compressedTexImage3D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tupdateUBOMapping: updateUBOMapping,\n\t\tuniformBlockBinding: uniformBlockBinding,\n\n\t\ttexStorage2D: texStorage2D,\n\t\ttexStorage3D: texStorage3D,\n\t\ttexSubImage2D: texSubImage2D,\n\t\ttexSubImage3D: texSubImage3D,\n\t\tcompressedTexSubImage2D: compressedTexSubImage2D,\n\t\tcompressedTexSubImage3D: compressedTexSubImage3D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\n\tconst supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo$1( image ) {\n\n\t\treturn isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === 6403 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33326;\n\t\t\tif ( glType === 5131 ) internalFormat = 33325;\n\t\t\tif ( glType === 5121 ) internalFormat = 33321;\n\n\t\t}\n\n\t\tif ( glFormat === 33319 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33328;\n\t\t\tif ( glType === 5131 ) internalFormat = 33327;\n\t\t\tif ( glType === 5121 ) internalFormat = 33323;\n\n\t\t}\n\n\t\tif ( glFormat === 6408 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34836;\n\t\t\tif ( glType === 5131 ) internalFormat = 34842;\n\t\t\tif ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding && forceLinearEncoding === false ) ? 35907 : 32856;\n\t\t\tif ( glType === 32819 ) internalFormat = 32854;\n\t\t\tif ( glType === 32820 ) internalFormat = 32855;\n\n\t\t}\n\n\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\tinternalFormat === 33327 || internalFormat === 33328 ||\n\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image, supportsMips ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\n\n\t\t\treturn image.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn 9728;\n\n\t\t}\n\n\t\treturn 9729;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t// check if it's necessary to remove the WebGLTexture object\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures ) {\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\t\t\twebglTexture.usedTimes --;\n\n\t\t\t// the WebGLTexture object is not used anymore, remove it\n\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\tdeleteTexture( texture );\n\n\t\t\t}\n\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\n\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\n\n\t\t\t\t_sources.delete( source );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deleteTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) {\n\n\t\t\t\tfor ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction getTextureCacheKey( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.wrapR || 0 );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\t\tarray.push( texture.internalFormat );\n\t\tarray.push( texture.format );\n\t\tarray.push( texture.type );\n\t\tarray.push( texture.generateMipmaps );\n\t\tarray.push( texture.premultiplyAlpha );\n\t\tarray.push( texture.flipY );\n\t\tarray.push( texture.unpackAlignment );\n\t\tarray.push( texture.encoding );\n\n\t\treturn array.join();\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindTexture( 3553, textureProperties.__webglTexture, 33984 + slot );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( 35866, textureProperties.__webglTexture, 33984 + slot );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( 32879, textureProperties.__webglTexture, 33984 + slot );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture, 33984 + slot );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: 10497,\n\t\t[ ClampToEdgeWrapping ]: 33071,\n\t\t[ MirroredRepeatWrapping ]: 33648\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: 9728,\n\t\t[ NearestMipmapNearestFilter ]: 9984,\n\t\t[ NearestMipmapLinearFilter ]: 9986,\n\n\t\t[ LinearFilter ]: 9729,\n\t\t[ LinearMipmapNearestFilter ]: 9985,\n\t\t[ LinearMipmapLinearFilter ]: 9987\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tlet forceUpload = false;\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t}\n\n\t\t// create Source <-> WebGLTextures mapping if necessary\n\n\t\tconst source = texture.source;\n\t\tlet webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures === undefined ) {\n\n\t\t\twebglTextures = {};\n\t\t\t_sources.set( source, webglTextures );\n\n\t\t}\n\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\n\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\n\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\n\n\t\t\t// if not, create a new instance of WebGLTexture\n\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\n\n\t\t\t\t// create new entry\n\n\t\t\t\twebglTextures[ textureCacheKey ] = {\n\t\t\t\t\ttexture: _gl.createTexture(),\n\t\t\t\t\tusedTimes: 0\n\t\t\t\t};\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\n\t\t\t\t// even if the image contents are identical\n\n\t\t\t\tforceUpload = true;\n\n\t\t\t}\n\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\n\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\n\t\t\tif ( webglTexture !== undefined ) {\n\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\n\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// store references to cache key and WebGLTexture object\n\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\n\n\t\t}\n\n\t\treturn forceUpload;\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = 3553;\n\n\t\tif ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = 35866;\n\t\tif ( texture.isData3DTexture ) textureType = 32879;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture, 33984 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n\t\t\tlet image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\t\t\timage = verifyColorSpace( texture, image );\n\n\t\t\tconst supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding );\n\n\t\t\tlet glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedIntType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, 1, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( 3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( 35866, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( 35866, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage3D( 35866, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage3D( 35866, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage3D( 35866, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( 35866, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( 35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( 32879, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( 32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isFramebufferTexture ) {\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet width = image.width, height = image.height;\n\n\t\t\t\t\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t\t\t\t\twidth >>= 1;\n\t\t\t\t\t\t\theight >>= 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( 3553, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture, 33984 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\n\n\t\t\t}\n\n\t\t\tconst image = cubeImage[ 0 ],\n\t\t\t\tsupportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tlet levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tlet mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( 34067, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\n\n\t\t\t\t\tstate.texStorage2D( 34067, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( 34069 + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( 34067 );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tif ( textureTarget === 32879 || textureTarget === 35866 ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else if ( textureTarget === 3553 || ( textureTarget >= 34069 && textureTarget <= 34074 ) ) { // see #24753\n\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = 33189;\n\n\t\t\tif ( isMultisample || useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t} else {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 36096, 3553, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 33306, 3553, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553 );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tconst textures = isMultipleRenderTargets ? texture : [ texture ];\n\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = [];\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( 36160, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 34067 );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( 3553, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = 3553;\n\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? 32879 : 35866;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];\n\t\t\tconst width = renderTarget.width;\n\t\t\tconst height = renderTarget.height;\n\t\t\tlet mask = 16384;\n\t\t\tconst invalidationArray = [];\n\t\t\tconst depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\n\t\t\t// If MRT we need to remove FBO attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, null );\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( 36009, 36064 + i, 3553, null, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tinvalidationArray.push( 36064 + i );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t}\n\n\t\t\t\tconst ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;\n\n\t\t\t\tif ( ignoreDepthValues === false ) {\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= 256;\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= 1024;\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36008, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ignoreDepthValues === true ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( 36008, [ depthStyle ] );\n\t\t\t\t\t_gl.invalidateFramebuffer( 36009, [ depthStyle ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\t\t\t\t\t_gl.framebufferTexture2D( 36009, 36064, 3553, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\tif ( supportsInvalidateFramebuffer ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( 36008, invalidationArray );\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( 36008, null );\n\t\t\tstate.bindFramebuffer( 36009, null );\n\n\t\t\t// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( 36009, 36064 + i, 3553, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn Math.min( maxSamples, renderTarget.samples );\n\n\t}\n\n\tfunction useMultisampledRTT( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\treturn isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tfunction verifyColorSpace( texture, image ) {\n\n\t\tconst encoding = texture.encoding;\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;\n\n\t\tif ( encoding !== LinearEncoding ) {\n\n\t\t\t// sRGB\n\n\t\t\tif ( encoding === sRGBEncoding ) {\n\n\t\t\t\tif ( isWebGL2 === false ) {\n\n\t\t\t\t\t// in WebGL 1, try to use EXT_sRGB extension and unsized formats\n\n\t\t\t\t\tif ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {\n\n\t\t\t\t\t\ttexture.format = _SRGBAFormat;\n\n\t\t\t\t\t\t// it's not possible to generate mips in WebGL 1 with this extension\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// slow fallback (CPU decode)\n\n\t\t\t\t\t\timage = ImageUtils.sRGBToLinear( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n\t\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture encoding:', encoding );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\tthis.useMultisampledRTT = useMultisampledRTT;\n\n}\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction convert( p, encoding = null ) {\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return 5121;\n\t\tif ( p === UnsignedShort4444Type ) return 32819;\n\t\tif ( p === UnsignedShort5551Type ) return 32820;\n\n\t\tif ( p === ByteType ) return 5120;\n\t\tif ( p === ShortType ) return 5122;\n\t\tif ( p === UnsignedShortType ) return 5123;\n\t\tif ( p === IntType ) return 5124;\n\t\tif ( p === UnsignedIntType ) return 5125;\n\t\tif ( p === FloatType ) return 5126;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( isWebGL2 ) return 5131;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return 6406;\n\t\tif ( p === RGBAFormat ) return 6408;\n\t\tif ( p === LuminanceFormat ) return 6409;\n\t\tif ( p === LuminanceAlphaFormat ) return 6410;\n\t\tif ( p === DepthFormat ) return 6402;\n\t\tif ( p === DepthStencilFormat ) return 34041;\n\n\t\t// WebGL 1 sRGB fallback\n\n\t\tif ( p === _SRGBAFormat ) {\n\n\t\t\textension = extensions.get( 'EXT_sRGB' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.SRGB_ALPHA_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedFormat ) return 6403;\n\t\tif ( p === RedIntegerFormat ) return 36244;\n\t\tif ( p === RGFormat ) return 33319;\n\t\tif ( p === RGIntegerFormat ) return 33320;\n\t\tif ( p === RGBAIntegerFormat ) return 36249;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( encoding === sRGBEncoding ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC1\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC2\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// RGTC\n\n\t\tif ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_rgtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n\t\t\t\tif ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( isWebGL2 ) return 34042;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nclass ArrayCamera extends PerspectiveCamera {\n\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\tthis.isArrayCamera = true;\n\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isGroup = true;\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tconnect( inputSource ) {\n\n\t\tif ( inputSource && inputSource.hand ) {\n\n\t\t\tconst hand = this._hand;\n\n\t\t\tif ( hand ) {\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Initialize hand with joints when connected\n\t\t\t\t\tthis._getHandJoint( hand, inputjoint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\tconst joint = this._getHandJoint( hand, inputjoint );\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\n\n\t\t\t\t\tinputPose = gripPose;\n\n\t\t\t\t}\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// private method\n\n\t_getHandJoint( hand, inputjoint ) {\n\n\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\tconst joint = new Group();\n\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\tjoint.visible = false;\n\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\n\t\t\thand.add( joint );\n\n\t\t}\n\n\t\treturn hand.joints[ inputjoint.jointName ];\n\n\t}\n\n}\n\nclass DepthTexture extends Texture {\n\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedIntType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isDepthTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\n}\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\n\t\tlet session = null;\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\t\t// Set default foveation to maximum.\n\t\tlet foveation = 1.0;\n\t\tlet customReferenceSpace = null;\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet xrFrame = null;\n\t\tconst attributes = gl.getContextAttributes();\n\t\tlet initialRenderTarget = null;\n\t\tlet newRenderTarget = null;\n\n\t\tconst controllers = [];\n\t\tconst controllerInputSources = [];\n\n\t\tconst planes = new Set();\n\t\tconst planesLastChangedTimes = new Map();\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true;\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controllerIndex = controllerInputSources.indexOf( event.inputSource );\n\n\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\tif ( controller !== undefined ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tsession.removeEventListener( 'select', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'end', onSessionEnd );\n\t\t\tsession.removeEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\n\t\t\t\tif ( inputSource === null ) continue;\n\n\t\t\t\tcontrollerInputSources[ i ] = null;\n\n\t\t\t\tcontrollers[ i ].disconnect( inputSource );\n\n\t\t\t}\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\n\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\t\t\tnewRenderTarget = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn customReferenceSpace || referenceSpace;\n\n\t\t};\n\n\t\tthis.setReferenceSpace = function ( space ) {\n\n\t\t\tcustomReferenceSpace = space;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tencoding: renderer.outputEncoding,\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet depthFormat = null;\n\t\t\t\t\tlet depthType = null;\n\t\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? 35056 : 33190;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: 32856,\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tencoding: renderer.outputEncoding,\n\t\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0\n\t\t\t\t\t\t} );\n\n\t\t\t\t\tconst renderTargetProperties = renderer.properties.get( newRenderTarget );\n\t\t\t\t\trenderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;\n\n\t\t\t\t}\n\n\t\t\t\tnewRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\n\n\t\t\t\tthis.setFoveation( foveation );\n\n\t\t\t\tcustomReferenceSpace = null;\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst index = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( index >= 0 ) {\n\n\t\t\t\t\tcontrollerInputSources[ index ] = null;\n\t\t\t\t\tcontrollers[ index ].disconnect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\n\t\t\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\t\t// Assign input source a controller that currently has no input source\n\n\t\t\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\t\t\tif ( i >= controllerInputSources.length ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources.push( inputSource );\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// If all controllers do currently receive input we ignore new ones\n\n\t\t\t\t\tif ( controllerIndex === - 1 ) break;\n\n\t\t\t\t}\n\n\t\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.connect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\tcameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );\n\n\t\t\t// update user camera and its children\n\n\t\t\tcamera.matrix.copy( cameraVR.matrix );\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\n\t\t\tconst children = camera.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer === null && glBaseLayer === null ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn foveation;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( value ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tfoveation = value;\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getPlanes = function () {\n\n\t\t\treturn planes;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( customReferenceSpace || referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\n\t\t\t\t\t\t\t\tnewRenderTarget,\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t\t\tglProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet camera = cameras[ i ];\n\n\t\t\t\t\tif ( camera === undefined ) {\n\n\t\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\t\tcamera.layers.enable( i );\n\t\t\t\t\t\tcamera.viewport = new Vector4();\n\t\t\t\t\t\tcameras[ i ] = camera;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\t\t\t\tconst controller = controllers[ i ];\n\n\t\t\t\tif ( inputSource !== null && controller !== undefined ) {\n\n\t\t\t\t\tcontroller.update( inputSource, frame, customReferenceSpace || referenceSpace );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\tif ( frame.detectedPlanes ) {\n\n\t\t\t\tscope.dispatchEvent( { type: 'planesdetected', data: frame.detectedPlanes } );\n\n\t\t\t\tlet planesToRemove = null;\n\n\t\t\t\tfor ( const plane of planes ) {\n\n\t\t\t\t\tif ( ! frame.detectedPlanes.has( plane ) ) {\n\n\t\t\t\t\t\tif ( planesToRemove === null ) {\n\n\t\t\t\t\t\t\tplanesToRemove = [];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tplanesToRemove.push( plane );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( planesToRemove !== null ) {\n\n\t\t\t\t\tfor ( const plane of planesToRemove ) {\n\n\t\t\t\t\t\tplanes.delete( plane );\n\t\t\t\t\t\tplanesLastChangedTimes.delete( plane );\n\t\t\t\t\t\tscope.dispatchEvent( { type: 'planeremoved', data: plane } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( const plane of frame.detectedPlanes ) {\n\n\t\t\t\t\tif ( ! planes.has( plane ) ) {\n\n\t\t\t\t\t\tplanes.add( plane );\n\t\t\t\t\t\tplanesLastChangedTimes.set( plane, frame.lastChangedTime );\n\t\t\t\t\t\tscope.dispatchEvent( { type: 'planeadded', data: plane } );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst lastKnownTime = planesLastChangedTimes.get( plane );\n\n\t\t\t\t\t\tif ( plane.lastChangedTime > lastKnownTime ) {\n\n\t\t\t\t\t\t\tplanesLastChangedTimes.set( plane, plane.lastChangedTime );\n\t\t\t\t\t\t\tscope.dispatchEvent( { type: 'planechanged', data: plane } );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nfunction WebGLMaterials( renderer, properties ) {\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tfog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\n\t\t\t// artist-friendly light intensity scaling factor\n\t\t\tconst scaleFactor = ( renderer.useLegacyLights === true ) ? Math.PI : 1;\n\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. displacementMap map\n\t\t// 4. normal map\n\t\t// 5. bump map\n\t\t// 6. roughnessMap map\n\t\t// 7. metalnessMap map\n\t\t// 8. alphaMap map\n\t\t// 9. emissiveMap map\n\t\t// 10. clearcoat map\n\t\t// 11. clearcoat normal map\n\t\t// 12. clearcoat roughnessMap map\n\t\t// 13. iridescence map\n\t\t// 14. iridescence thickness map\n\t\t// 15. specular intensity map\n\t\t// 16. specular tint map\n\t\t// 17. transmission map\n\t\t// 18. thickness map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t} else if ( material.iridescenceMap ) {\n\n\t\t\tuvScaleMap = material.iridescenceMap;\n\n\t\t} else if ( material.iridescenceThicknessMap ) {\n\n\t\t\tuvScaleMap = material.iridescenceThicknessMap;\n\n\t\t} else if ( material.specularIntensityMap ) {\n\n\t\t\tuvScaleMap = material.specularIntensityMap;\n\n\t\t} else if ( material.specularColorMap ) {\n\n\t\t\tuvScaleMap = material.specularColorMap;\n\n\t\t} else if ( material.transmissionMap ) {\n\n\t\t\tuvScaleMap = material.transmissionMap;\n\n\t\t} else if ( material.thicknessMap ) {\n\n\t\t\tuvScaleMap = material.thicknessMap;\n\n\t\t} else if ( material.sheenColorMap ) {\n\n\t\t\tuvScaleMap = material.sheenColorMap;\n\n\t\t} else if ( material.sheenRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.sheenRoughnessMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tlet uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.iridescence > 0 ) {\n\n\t\t\tuniforms.iridescence.value = material.iridescence;\n\t\t\tuniforms.iridescenceIOR.value = material.iridescenceIOR;\n\t\t\tuniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];\n\t\t\tuniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];\n\n\t\t\tif ( material.iridescenceMap ) {\n\n\t\t\t\tuniforms.iridescenceMap.value = material.iridescenceMap;\n\n\t\t\t}\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tuniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t}\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction WebGLUniformsGroups( gl, info, capabilities, state ) {\n\n\tlet buffers = {};\n\tlet updateList = {};\n\tlet allocatedBindingPoints = [];\n\n\tconst maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( 35375 ) : 0; // binding points are global whereas block indices are per shader program\n\n\tfunction bind( uniformsGroup, program ) {\n\n\t\tconst webglProgram = program.program;\n\t\tstate.uniformBlockBinding( uniformsGroup, webglProgram );\n\n\t}\n\n\tfunction update( uniformsGroup, program ) {\n\n\t\tlet buffer = buffers[ uniformsGroup.id ];\n\n\t\tif ( buffer === undefined ) {\n\n\t\t\tprepareUniformsGroup( uniformsGroup );\n\n\t\t\tbuffer = createBuffer( uniformsGroup );\n\t\t\tbuffers[ uniformsGroup.id ] = buffer;\n\n\t\t\tuniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\t}\n\n\t\t// ensure to update the binding points/block indices mapping for this program\n\n\t\tconst webglProgram = program.program;\n\t\tstate.updateUBOMapping( uniformsGroup, webglProgram );\n\n\t\t// update UBO once per frame\n\n\t\tconst frame = info.render.frame;\n\n\t\tif ( updateList[ uniformsGroup.id ] !== frame ) {\n\n\t\t\tupdateBufferData( uniformsGroup );\n\n\t\t\tupdateList[ uniformsGroup.id ] = frame;\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( uniformsGroup ) {\n\n\t\t// the setup of an UBO is independent of a particular shader program but global\n\n\t\tconst bindingPointIndex = allocateBindingPointIndex();\n\t\tuniformsGroup.__bindingPointIndex = bindingPointIndex;\n\n\t\tconst buffer = gl.createBuffer();\n\t\tconst size = uniformsGroup.__size;\n\t\tconst usage = uniformsGroup.usage;\n\n\t\tgl.bindBuffer( 35345, buffer );\n\t\tgl.bufferData( 35345, size, usage );\n\t\tgl.bindBuffer( 35345, null );\n\t\tgl.bindBufferBase( 35345, bindingPointIndex, buffer );\n\n\t\treturn buffer;\n\n\t}\n\n\tfunction allocateBindingPointIndex() {\n\n\t\tfor ( let i = 0; i < maxBindingPoints; i ++ ) {\n\n\t\t\tif ( allocatedBindingPoints.indexOf( i ) === - 1 ) {\n\n\t\t\t\tallocatedBindingPoints.push( i );\n\t\t\t\treturn i;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconsole.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );\n\n\t\treturn 0;\n\n\t}\n\n\tfunction updateBufferData( uniformsGroup ) {\n\n\t\tconst buffer = buffers[ uniformsGroup.id ];\n\t\tconst uniforms = uniformsGroup.uniforms;\n\t\tconst cache = uniformsGroup.__cache;\n\n\t\tgl.bindBuffer( 35345, buffer );\n\n\t\tfor ( let i = 0, il = uniforms.length; i < il; i ++ ) {\n\n\t\t\tconst uniform = uniforms[ i ];\n\n\t\t\t// partly update the buffer if necessary\n\n\t\t\tif ( hasUniformChanged( uniform, i, cache ) === true ) {\n\n\t\t\t\tconst offset = uniform.__offset;\n\n\t\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\n\n\t\t\t\tlet arrayOffset = 0;\n\n\t\t\t\tfor ( let i = 0; i < values.length; i ++ ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tconst info = getUniformSize( value );\n\n\t\t\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\t\t\tuniform.__data[ 0 ] = value;\n\t\t\t\t\t\tgl.bufferSubData( 35345, offset + arrayOffset, uniform.__data );\n\n\t\t\t\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t\t\t\t// manually converting 3x3 to 3x4\n\n\t\t\t\t\t\tuniform.__data[ 0 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 1 ] = value.elements[ 1 ];\n\t\t\t\t\t\tuniform.__data[ 2 ] = value.elements[ 2 ];\n\t\t\t\t\t\tuniform.__data[ 3 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 4 ] = value.elements[ 3 ];\n\t\t\t\t\t\tuniform.__data[ 5 ] = value.elements[ 4 ];\n\t\t\t\t\t\tuniform.__data[ 6 ] = value.elements[ 5 ];\n\t\t\t\t\t\tuniform.__data[ 7 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 8 ] = value.elements[ 6 ];\n\t\t\t\t\t\tuniform.__data[ 9 ] = value.elements[ 7 ];\n\t\t\t\t\t\tuniform.__data[ 10 ] = value.elements[ 8 ];\n\t\t\t\t\t\tuniform.__data[ 11 ] = value.elements[ 0 ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvalue.toArray( uniform.__data, arrayOffset );\n\n\t\t\t\t\t\tarrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgl.bufferSubData( 35345, offset, uniform.__data );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindBuffer( 35345, null );\n\n\t}\n\n\tfunction hasUniformChanged( uniform, index, cache ) {\n\n\t\tconst value = uniform.value;\n\n\t\tif ( cache[ index ] === undefined ) {\n\n\t\t\t// cache entry does not exist so far\n\n\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\tcache[ index ] = value;\n\n\t\t\t} else {\n\n\t\t\t\tconst values = Array.isArray( value ) ? value : [ value ];\n\n\t\t\t\tconst tempValues = [];\n\n\t\t\t\tfor ( let i = 0; i < values.length; i ++ ) {\n\n\t\t\t\t\ttempValues.push( values[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tcache[ index ] = tempValues;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// compare current value with cached entry\n\n\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\tif ( cache[ index ] !== value ) {\n\n\t\t\t\t\tcache[ index ] = value;\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst cachedObjects = Array.isArray( cache[ index ] ) ? cache[ index ] : [ cache[ index ] ];\n\t\t\t\tconst values = Array.isArray( value ) ? value : [ value ];\n\n\t\t\t\tfor ( let i = 0; i < cachedObjects.length; i ++ ) {\n\n\t\t\t\t\tconst cachedObject = cachedObjects[ i ];\n\n\t\t\t\t\tif ( cachedObject.equals( values[ i ] ) === false ) {\n\n\t\t\t\t\t\tcachedObject.copy( values[ i ] );\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction prepareUniformsGroup( uniformsGroup ) {\n\n\t\t// determine total buffer size according to the STD140 layout\n\t\t// Hint: STD140 is the only supported layout in WebGL 2\n\n\t\tconst uniforms = uniformsGroup.uniforms;\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\t\tconst chunkSize = 16; // size of a chunk in bytes\n\t\tlet chunkOffset = 0; // offset within a single chunk in bytes\n\n\t\tfor ( let i = 0, l = uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniform = uniforms[ i ];\n\n\t\t\tconst infos = {\n\t\t\t\tboundary: 0, // bytes\n\t\t\t\tstorage: 0 // bytes\n\t\t\t};\n\n\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\n\n\t\t\tfor ( let j = 0, jl = values.length; j < jl; j ++ ) {\n\n\t\t\t\tconst value = values[ j ];\n\n\t\t\t\tconst info = getUniformSize( value );\n\n\t\t\t\tinfos.boundary += info.boundary;\n\t\t\t\tinfos.storage += info.storage;\n\n\t\t\t}\n\n\t\t\t// the following two properties will be used for partial buffer updates\n\n\t\t\tuniform.__data = new Float32Array( infos.storage / Float32Array.BYTES_PER_ELEMENT );\n\t\t\tuniform.__offset = offset;\n\n\t\t\t//\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\tchunkOffset = offset % chunkSize;\n\n\t\t\t\tconst remainingSizeInChunk = chunkSize - chunkOffset;\n\n\t\t\t\t// check for chunk overflow\n\n\t\t\t\tif ( chunkOffset !== 0 && ( remainingSizeInChunk - infos.boundary ) < 0 ) {\n\n\t\t\t\t\t// add padding and adjust offset\n\n\t\t\t\t\toffset += ( chunkSize - chunkOffset );\n\t\t\t\t\tuniform.__offset = offset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset += infos.storage;\n\n\t\t}\n\n\t\t// ensure correct final padding\n\n\t\tchunkOffset = offset % chunkSize;\n\n\t\tif ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );\n\n\t\t//\n\n\t\tuniformsGroup.__size = offset;\n\t\tuniformsGroup.__cache = {};\n\n\t\treturn this;\n\n\t}\n\n\tfunction getUniformSize( value ) {\n\n\t\tconst info = {\n\t\t\tboundary: 0, // bytes\n\t\t\tstorage: 0 // bytes\n\t\t};\n\n\t\t// determine sizes according to STD140\n\n\t\tif ( typeof value === 'number' ) {\n\n\t\t\t// float/int\n\n\t\t\tinfo.boundary = 4;\n\t\t\tinfo.storage = 4;\n\n\t\t} else if ( value.isVector2 ) {\n\n\t\t\t// vec2\n\n\t\t\tinfo.boundary = 8;\n\t\t\tinfo.storage = 8;\n\n\t\t} else if ( value.isVector3 || value.isColor ) {\n\n\t\t\t// vec3\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes\n\n\t\t} else if ( value.isVector4 ) {\n\n\t\t\t// vec4\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 16;\n\n\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t// mat3 (in STD140 a 3x3 matrix is represented as 3x4)\n\n\t\t\tinfo.boundary = 48;\n\t\t\tinfo.storage = 48;\n\n\t\t} else if ( value.isMatrix4 ) {\n\n\t\t\t// mat4\n\n\t\t\tinfo.boundary = 64;\n\t\t\tinfo.storage = 64;\n\n\t\t} else if ( value.isTexture ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );\n\n\t\t}\n\n\t\treturn info;\n\n\t}\n\n\tfunction onUniformsGroupsDispose( event ) {\n\n\t\tconst uniformsGroup = event.target;\n\n\t\tuniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\tconst index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );\n\t\tallocatedBindingPoints.splice( index, 1 );\n\n\t\tgl.deleteBuffer( buffers[ uniformsGroup.id ] );\n\n\t\tdelete buffers[ uniformsGroup.id ];\n\t\tdelete updateList[ uniformsGroup.id ];\n\n\t}\n\n\tfunction dispose() {\n\n\t\tfor ( const id in buffers ) {\n\n\t\t\tgl.deleteBuffer( buffers[ id ] );\n\n\t\t}\n\n\t\tallocatedBindingPoints = [];\n\t\tbuffers = {};\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tbind: bind,\n\t\tupdate: update,\n\n\t\tdispose: dispose\n\n\t};\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nfunction WebGLRenderer( parameters = {} ) {\n\n\tthis.isWebGLRenderer = true;\n\n\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tlet _alpha;\n\n\tif ( _context !== null ) {\n\n\t\t_alpha = _context.getContextAttributes().alpha;\n\n\t} else {\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false;\n\n\t}\n\n\tlet currentRenderList = null;\n\tlet currentRenderState = null;\n\n\t// render() can be called from within a callback triggered by another render.\n\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\tconst renderListStack = [];\n\tconst renderStateStack = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.outputEncoding = LinearEncoding;\n\n\t// physical lights\n\n\tthis.useLegacyLights = true;\n\n\t// tone mapping\n\n\tthis.toneMapping = NoToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\n\t// internal properties\n\n\tconst _this = this;\n\n\tlet _isContextLost = false;\n\n\t// internal state cache\n\n\tlet _currentActiveCubeFace = 0;\n\tlet _currentActiveMipmapLevel = 0;\n\tlet _currentRenderTarget = null;\n\tlet _currentMaterialId = - 1;\n\n\tlet _currentCamera = null;\n\n\tconst _currentViewport = new Vector4();\n\tconst _currentScissor = new Vector4();\n\tlet _currentScissorTest = null;\n\n\t//\n\n\tlet _width = _canvas.width;\n\tlet _height = _canvas.height;\n\n\tlet _pixelRatio = 1;\n\tlet _opaqueSort = null;\n\tlet _transparentSort = null;\n\n\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\tlet _scissorTest = false;\n\n\t// frustum\n\n\tconst _frustum = new Frustum();\n\n\t// clipping\n\n\tlet _clippingEnabled = false;\n\tlet _localClippingEnabled = false;\n\n\t// transmission\n\n\tlet _transmissionRenderTarget = null;\n\n\t// camera matrices cache\n\n\tconst _projScreenMatrix = new Matrix4();\n\n\tconst _vector3 = new Vector3();\n\n\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tlet _gl = _context;\n\n\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\tconst contextName = contextNames[ i ];\n\t\t\tconst context = _canvas.getContext( contextName, contextAttributes );\n\t\t\tif ( context !== null ) return context;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\ttry {\n\n\t\tconst contextAttributes = {\n\t\t\talpha: true,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t};\n\n\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\tif ( 'setAttribute' in _canvas ) _canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t_canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\tcontextNames.shift();\n\n\t\t\t}\n\n\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tlet extensions, capabilities, state, info;\n\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tlet utils, bindingStates, uniformsGroups;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\textensions.init( capabilities );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\n\t\tinfo = new WebGLInfo();\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\tclipping = new WebGLClipping( properties );\n\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\tmaterials = new WebGLMaterials( _this, properties );\n\t\trenderLists = new WebGLRenderLists();\n\t\trenderStates = new WebGLRenderStates( extensions, capabilities );\n\t\tbackground = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, _premultipliedAlpha );\n\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\t\tuniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.shadowMap = shadowMap;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// xr\n\n\tconst xr = new WebXRManager( _this, _gl );\n\n\tthis.xr = xr;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle = true ) {\n\n\t\tif ( xr.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle === true ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\tthis.setOpaqueSort = function ( method ) {\n\n\t\t_opaqueSort = method;\n\n\t};\n\n\tthis.setTransparentSort = function ( method ) {\n\n\t\t_transparentSort = method;\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function ( target ) {\n\n\t\treturn target.copy( background.getClearColor() );\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color = true, depth = true, stencil = true ) {\n\n\t\tlet bits = 0;\n\n\t\tif ( color ) bits |= 16384;\n\t\tif ( depth ) bits |= 256;\n\t\tif ( stencil ) bits |= 1024;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t_canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tcubemaps.dispose();\n\t\tcubeuvmaps.dispose();\n\t\tobjects.dispose();\n\t\tbindingStates.dispose();\n\t\tuniformsGroups.dispose();\n\t\tprogramCache.dispose();\n\n\t\txr.dispose();\n\n\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\tif ( _transmissionRenderTarget ) {\n\n\t\t\t_transmissionRenderTarget.dispose();\n\t\t\t_transmissionRenderTarget = null;\n\n\t\t}\n\n\t\tanimation.stop();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tconst infoAutoReset = info.autoReset;\n\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\tconst shadowMapType = shadowMap.type;\n\n\t\tinitGLContext();\n\n\t\tinfo.autoReset = infoAutoReset;\n\t\tshadowMap.enabled = shadowMapEnabled;\n\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\tshadowMap.type = shadowMapType;\n\n\t}\n\n\tfunction onContextCreationError( event ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tconst material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReferences( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\tconst programs = properties.get( material ).programs;\n\n\t\tif ( programs !== undefined ) {\n\n\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t} );\n\n\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\tprogramCache.releaseShaderCache( material );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tconst program = setProgram( camera, scene, geometry, material, object );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t//\n\n\t\tlet index = geometry.index;\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\t//\n\n\t\tconst drawRange = geometry.drawRange;\n\t\tconst position = geometry.attributes.position;\n\n\t\tlet drawStart = drawRange.start * rangeFactor;\n\t\tlet drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;\n\n\t\tif ( group !== null ) {\n\n\t\t\tdrawStart = Math.max( drawStart, group.start * rangeFactor );\n\t\t\tdrawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tdrawStart = Math.max( drawStart, 0 );\n\t\t\tdrawEnd = Math.min( drawEnd, index.count );\n\n\t\t} else if ( position !== undefined && position !== null ) {\n\n\t\t\tdrawStart = Math.max( drawStart, 0 );\n\t\t\tdrawEnd = Math.min( drawEnd, position.count );\n\n\t\t}\n\n\t\tconst drawCount = drawEnd - drawStart;\n\n\t\tif ( drawCount < 0 || drawCount === Infinity ) return;\n\n\t\t//\n\n\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\tlet attribute;\n\t\tlet renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( 0 );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( 4 );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\tconst maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;\n\t\t\tconst instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tfunction prepare( material, scene, object ) {\n\n\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t} else {\n\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentRenderState = renderStates.get( scene );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( _this.useLegacyLights );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst material = object.material;\n\n\t\t\tif ( material ) {\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\tprepare( material2, scene, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tprepare( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\trenderStateStack.pop();\n\t\tcurrentRenderState = null;\n\n\t};\n\n\t// Animation Loop\n\n\tlet onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tfunction onXRSessionStart() {\n\n\t\tanimation.stop();\n\n\t}\n\n\tfunction onXRSessionEnd() {\n\n\t\tanimation.start();\n\n\t}\n\n\tconst animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof self !== 'undefined' ) animation.setContext( self );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\txr.setAnimationLoop( callback );\n\n\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t};\n\n\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost === true ) return;\n\n\t\t// update scene graph\n\n\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\n\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t}\n\n\t\t//\n\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );\n\n\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\tcurrentRenderList.init();\n\n\t\trenderListStack.push( currentRenderList );\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tcurrentRenderList.finish();\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene );\n\n\t\t// render scene\n\n\t\tcurrentRenderState.setupLights( _this.useLegacyLights );\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tconst cameras = camera.cameras;\n\n\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t// _gl.finish();\n\n\t\tbindingStates.resetDefaultState();\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\trenderStateStack.pop();\n\n\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderState = null;\n\n\t\t}\n\n\t\trenderListStack.pop();\n\n\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderList = null;\n\n\t\t}\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );\n\n\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );\n\n\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t}\n\n\tfunction renderTransmissionPass( opaqueObjects, scene, camera ) {\n\n\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\tif ( _transmissionRenderTarget === null ) {\n\n\t\t\t_transmissionRenderTarget = new WebGLRenderTarget( 1024, 1024, {\n\t\t\t\tgenerateMipmaps: true,\n\t\t\t\ttype: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,\n\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\tsamples: ( isWebGL2 && _antialias === true ) ? 4 : 0\n\t\t\t} );\n\n\t\t}\n\n\t\t//\n\n\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t_this.setRenderTarget( _transmissionRenderTarget );\n\t\t_this.clear();\n\n\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\tconst currentToneMapping = _this.toneMapping;\n\t\t_this.toneMapping = NoToneMapping;\n\n\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t_this.toneMapping = currentToneMapping;\n\n\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\tconst object = renderItem.object;\n\t\t\tconst geometry = renderItem.geometry;\n\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\tconst group = renderItem.group;\n\n\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\tmaterial.side = BackSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = FrontSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = DoubleSide;\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t}\n\n\tfunction getProgram( material, scene, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst lights = currentRenderState.state.lights;\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tconst lightsStateVersion = lights.state.version;\n\n\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\tlet programs = materialProperties.programs;\n\n\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tmaterialProperties.fog = scene.fog;\n\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\n\t\tif ( programs === undefined ) {\n\n\t\t\t// new material\n\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tprograms = new Map();\n\t\t\tmaterialProperties.programs = programs;\n\n\t\t}\n\n\t\tlet program = programs.get( programCacheKey );\n\n\t\tif ( program !== undefined ) {\n\n\t\t\t// early out if program and light state is identical\n\n\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\treturn program;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\tmaterial.onBuild( object, parameters, _this );\n\n\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t}\n\n\t\tconst uniforms = materialProperties.uniforms;\n\n\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t}\n\n\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotLightMatrix.value = lights.state.spotLightMatrix;\n\t\t\tuniforms.spotLightMap.value = lights.state.spotLightMap;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tconst progUniforms = program.getUniforms();\n\t\tconst uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.currentProgram = program;\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\treturn program;\n\n\t}\n\n\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\tmaterialProperties.instancing = parameters.instancing;\n\t\tmaterialProperties.skinning = parameters.skinning;\n\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\tmaterialProperties.morphColors = parameters.morphColors;\n\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\t\tmaterialProperties.toneMapping = parameters.toneMapping;\n\n\t}\n\n\tfunction setProgram( camera, scene, geometry, material, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\ttextures.resetTextureUnits();\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tconst encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding );\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\tconst vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;\n\t\tconst morphTargets = !! geometry.morphAttributes.position;\n\t\tconst morphNormals = !! geometry.morphAttributes.normal;\n\t\tconst morphColors = !! geometry.morphAttributes.color;\n\t\tconst toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tconst materialProperties = properties.get( material );\n\t\tconst lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled === true ) {\n\n\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\tconst useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet needsProgramChange = false;\n\n\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( material.fog === true && materialProperties.fog !== fog ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphColors !== morphColors ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.toneMapping !== toneMapping ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tneedsProgramChange = true;\n\t\t\tmaterialProperties.__version = material.version;\n\n\t\t}\n\n\t\t//\n\n\t\tlet program = materialProperties.currentProgram;\n\n\t\tif ( needsProgramChange === true ) {\n\n\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t}\n\n\t\tlet refreshProgram = false;\n\t\tlet refreshMaterial = false;\n\t\tlet refreshLights = false;\n\n\t\tconst p_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\tobject.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning and morph target uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tif ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {\n\n\t\t\tmorphtargets.update( object, geometry, program );\n\n\t\t}\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\t// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512\n\n\t\tif ( material.isMeshGouraudMaterial && material.envMap !== null ) {\n\n\t\t\tm_uniforms.envMap.value = envMap;\n\n\t\t\tm_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog === true ) {\n\n\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t// UBOs\n\n\t\tif ( material.isShaderMaterial || material.isRawShaderMaterial ) {\n\n\t\t\tconst groups = material.uniformsGroups;\n\n\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\t\tuniformsGroups.update( group, program );\n\t\t\t\t\tuniformsGroups.bind( group, program );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\n\n\t\tproperties.get( renderTarget.texture ).__webglTexture = colorTexture;\n\t\tproperties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\trenderTargetProperties.__hasExternalTextures = true;\n\n\t\tif ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\trenderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\n\n\t\t\tif ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\n\t\t\t\t// are midframe flushes and an external depth buffer. Disable use of the extension.\n\t\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );\n\t\t\t\t\trenderTargetProperties.__useRenderToTexture = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\trenderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n\t\trenderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\tlet useDefaultFramebuffer = true;\n\t\tlet framebuffer = null;\n\t\tlet isCube = false;\n\t\tlet isRenderTarget3D = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\n\n\t\t\t\t// We need to make sure to rebind the framebuffer.\n\t\t\t\tstate.bindFramebuffer( 36160, null );\n\t\t\t\tuseDefaultFramebuffer = false;\n\n\t\t\t} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t} else if ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\t// Color and depth texture must be rebound in order for the swapchain to update.\n\t\t\t\ttextures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\n\n\t\t\t}\n\n\t\t\tconst texture = renderTarget.texture;\n\n\t\t\tif ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t}\n\n\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tconst framebufferBound = state.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {\n\n\t\t\tstate.drawBuffers( renderTarget, framebuffer );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\tconst layer = activeCubeFace || 0;\n\t\t\t_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n\n\t\t}\n\n\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\ttry {\n\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! halfFloatSupportedByExt ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n\n\t\tconst levelScale = Math.pow( 2, - level );\n\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexSubImage2D( 3553, level, 0, 0, position.x, position.y, width, height );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tconst width = srcTexture.image.width;\n\t\tconst height = srcTexture.image.height;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t// As another texture upload may have changed pixelStorei\n\t\t// parameters, make sure they are correct for the dstTexture\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tif ( _this.isWebGL1Renderer ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\t\tlet glTarget;\n\n\t\tif ( dstTexture.isData3DTexture ) {\n\n\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\tglTarget = 32879;\n\n\t\t} else if ( dstTexture.isDataArrayTexture ) {\n\n\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\tglTarget = 35866;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tconst unpackRowLen = _gl.getParameter( 3314 );\n\t\tconst unpackImageHeight = _gl.getParameter( 32878 );\n\t\tconst unpackSkipPixels = _gl.getParameter( 3316 );\n\t\tconst unpackSkipRows = _gl.getParameter( 3315 );\n\t\tconst unpackSkipImages = _gl.getParameter( 32877 );\n\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n\n\t\t_gl.pixelStorei( 3314, image.width );\n\t\t_gl.pixelStorei( 32878, image.height );\n\t\t_gl.pixelStorei( 3316, sourceBox.min.x );\n\t\t_gl.pixelStorei( 3315, sourceBox.min.y );\n\t\t_gl.pixelStorei( 32877, sourceBox.min.z );\n\n\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\n\n\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedArrayTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.pixelStorei( 3314, unpackRowLen );\n\t\t_gl.pixelStorei( 32878, unpackImageHeight );\n\t\t_gl.pixelStorei( 3316, unpackSkipPixels );\n\t\t_gl.pixelStorei( 3315, unpackSkipRows );\n\t\t_gl.pixelStorei( 32877, unpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.initTexture = function ( texture ) {\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\ttextures.setTextureCube( texture, 0 );\n\n\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\ttextures.setTexture3D( texture, 0 );\n\n\t\t} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\ttextures.setTexture2DArray( texture, 0 );\n\n\t\t} else {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t}\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.resetState = function () {\n\n\t\t_currentActiveCubeFace = 0;\n\t\t_currentActiveMipmapLevel = 0;\n\t\t_currentRenderTarget = null;\n\n\t\tstate.reset();\n\t\tbindingStates.reset();\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t}\n\n}\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\t// @deprecated since r150\n\n\tphysicallyCorrectLights: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );\n\t\t\treturn ! this.useLegacyLights;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );\n\t\t\tthis.useLegacyLights = ! value;\n\n\t\t}\n\n\t}\n\n} );\n\nclass WebGL1Renderer extends WebGLRenderer {}\n\nWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\nclass FogExp2 {\n\n\tconstructor( color, density = 0.00025 ) {\n\n\t\tthis.isFogExp2 = true;\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = density;\n\n\t}\n\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\nclass Fog {\n\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\tthis.isFog = true;\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isScene = true;\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.backgroundBlurriness = 0;\n\t\tthis.backgroundIntensity = 1;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tthis.backgroundBlurriness = source.backgroundBlurriness;\n\t\tthis.backgroundIntensity = source.backgroundIntensity;\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\t\tif ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;\n\t\tif ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;\n\n\t\treturn data;\n\n\t}\n\n\t// @deprecated\n\n\tget autoUpdate() {\n\n\t\tconsole.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );\n\t\treturn this.matrixWorldAutoUpdate;\n\n\t}\n\n\tset autoUpdate( value ) {\n\n\t\tconsole.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );\n\t\tthis.matrixWorldAutoUpdate = value;\n\n\t}\n\n}\n\nclass InterleavedBuffer {\n\n\tconstructor( array, stride ) {\n\n\t\tthis.isInterleavedBuffer = true;\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\nclass InterleavedBufferAttribute {\n\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\tthis.isInterleavedBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized;\n\n\t}\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.fromBufferAttribute( this, i );\n\n\t\t\t_vector$6.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interleaved attribute\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteMaterial = true;\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nclass Sprite extends Object3D {\n\n\tconstructor( material ) {\n\n\t\tsuper();\n\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\nclass LOD extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tisLOD: {\n\t\t\t\tvalue: true,\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\n\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance < levelDistance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance >= levelDistance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance,\n\t\t\t\thysteresis: level.hysteresis\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector$5 = /*@__PURE__*/ new Vector3();\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\nclass SkinnedMesh extends Mesh {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkinnedMesh = true;\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\treturn this;\n\n\t}\n\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\tboneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\nclass Bone extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBone = true;\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.isDataTexture = true;\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\nclass Skeleton {\n\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\n\t\tthis.frame = - 1;\n\n\t\tthis.init();\n\n\t}\n\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = ceilPowerOfTwo( size );\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\tboneTexture.needsUpdate = true;\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\t\tthis.boneTextureSize = size;\n\n\t\treturn this;\n\n\t}\n\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.isInstancedBufferAttribute = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _identity = /*@__PURE__*/ new Matrix4();\nconst _mesh = /*@__PURE__*/ new Mesh();\n\nclass InstancedMesh extends Mesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isInstancedMesh = true;\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.setMatrixAt( i, _identity );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh.geometry = this.geometry;\n\t\t_mesh.material = this.material;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _start$1 = /*@__PURE__*/ new Vector3();\nconst _end$1 = /*@__PURE__*/ new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nclass Line extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isLine = true;\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i ] += _start$1.distanceTo( _end$1 );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst vStart = new Vector3();\n\t\tconst vEnd = new Vector3();\n\t\tconst interSegment = new Vector3();\n\t\tconst interRay = new Vector3();\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst a = index.getX( i );\n\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\tvStart.fromBufferAttribute( positionAttribute, a );\n\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, b );\n\n\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tvStart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\nclass LineSegments extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineLoop extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineLoop = true;\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\nclass PointsMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isPointsMaterial = true;\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\nclass Points extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isPoints = true;\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\nclass VideoTexture extends Texture {\n\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isVideoTexture = true;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass FramebufferTexture extends Texture {\n\n\tconstructor( width, height, format ) {\n\n\t\tsuper( { width, height } );\n\n\t\tthis.isFramebufferTexture = true;\n\n\t\tthis.format = format;\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nclass CompressedTexture extends Texture {\n\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.isCompressedTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\nclass CompressedArrayTexture extends CompressedTexture {\n\n\tconstructor( mipmaps, width, height, depth, format, type ) {\n\n\t\tsuper( mipmaps, width, height, format, type );\n\n\t\tthis.isCompressedArrayTexture = true;\n\t\tthis.image.depth = depth;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t}\n\n}\n\nclass CanvasTexture extends Texture {\n\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isCanvasTexture = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * Extensible curve object.\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\nclass Curve {\n\n\tconstructor() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t}\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get total curve arc length\n\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping( u, distance ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\tcomputeFrenetFrames( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass EllipseCurve extends Curve {\n\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.isEllipseCurve = true;\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst point = optionalTarget || new Vector2();\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass ArcCurve extends EllipseCurve {\n\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.isArcCurve = true;\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Bezier Curves formulas obtained from\n * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nclass CubicBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isCubicBezierCurve = true;\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass CubicBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isCubicBezierCurve3 = true;\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineCurve extends Curve {\n\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isLineCurve = true;\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector2() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineCurve3 extends Curve {\n\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isQuadraticBezierCurve = true;\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isQuadraticBezierCurve3 = true;\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass SplineCurve extends Curve {\n\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\tthis.isSplineCurve = true;\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nclass CurvePath extends Curve {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t}\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength() {\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths() {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Path extends CurvePath {\n\n\tconstructor( points ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts /*Array of Vector*/ ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LatheGeometry extends BufferGeometry {\n\n\tconstructor( points = [ new Vector2( 0, - 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\t\tconst initNormals = [];\n\t\tconst normals = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tconst normal = new Vector3();\n\t\tconst curNormal = new Vector3();\n\t\tconst prevNormal = new Vector3();\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\n\t\t// pre-compute normals for initial \"meridian\"\n\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\tswitch ( j ) {\n\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tprevNormal.copy( normal );\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\n\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tcurNormal.copy( normal );\n\n\t\t\t\t\tnormal.x += prevNormal.x;\n\t\t\t\t\tnormal.y += prevNormal.y;\n\t\t\t\t\tnormal.z += prevNormal.z;\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tprevNormal.copy( curNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices, uvs and normals\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// normal\n\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( c, d, b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\nclass CapsuleGeometry extends LatheGeometry {\n\n\tconstructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {\n\n\t\tconst path = new Path();\n\t\tpath.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );\n\t\tpath.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );\n\n\t\tsuper( path.getPoints( capSegments ), radialSegments );\n\n\t\tthis.type = 'CapsuleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: length,\n\t\t\tcapSegments: capSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );\n\n\t}\n\n}\n\nclass CircleGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass CylinderGeometry extends BufferGeometry {\n\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ConeGeometry extends CylinderGeometry {\n\n\tconstructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass PolyhedronGeometry extends BufferGeometry {\n\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivision with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1$1 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\nconst _triangle = /*@__PURE__*/ new Triangle();\n\nclass EdgesGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Shape extends Path {\n\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Port from https://github.com/mapbox/earcut (v2.2.4)\n */\n\nconst Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\n\n\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\tconst triangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 32767 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize, 0 );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tlet i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tlet p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tlet stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim | 0 );\n\t\t\ttriangles.push( ear.i / dim | 0 );\n\t\t\ttriangles.push( next.i / dim | 0 );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\n\n\tlet p = c.next;\n\twhile ( p !== a ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\n\n\t// z-order range for the current triangle bbox;\n\tconst minZ = zOrder( x0, y0, minX, minY, invSize ),\n\t\tmaxZ = zOrder( x1, y1, minX, minY, invSize );\n\n\tlet p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tconst a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim | 0 );\n\t\t\ttriangles.push( p.i / dim | 0 );\n\t\t\ttriangles.push( b.i / dim | 0 );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn filterPoints( p );\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tlet a = start;\n\tdo {\n\n\t\tlet b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tlet c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize, 0 );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize, 0 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tconst queue = [];\n\tlet i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\touterNode = eliminateHole( queue[ i ], outerNode );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\tconst bridge = findHoleBridge( hole, outerNode );\n\tif ( ! bridge ) {\n\n\t\treturn outerNode;\n\n\t}\n\n\tconst bridgeReverse = splitPolygon( bridge, hole );\n\n\t// filter collinear points around the cuts\n\tfilterPoints( bridgeReverse, bridgeReverse.next );\n\treturn filterPoints( bridge, bridge.next );\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tlet p = outerNode,\n\t\tqx = - Infinity,\n\t\tm;\n\n\tconst hx = hole.x, hy = hole.y;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\tif ( x === hx ) return m; // hole touches outer segment; pick leftmost endpoint\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tconst stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y;\n\tlet tanMin = Infinity, tan;\n\n\tp = m;\n\n\tdo {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== stop );\n\n\treturn m;\n\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector( m, p ) {\n\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tif ( p.z === 0 ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = ( x - minX ) * invSize | 0;\n\ty = ( y - minY ) * invSize | 0;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tlet p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) >= ( ax - px ) * ( cy - py ) &&\n           ( ax - px ) * ( by - py ) >= ( bx - px ) * ( ay - py ) &&\n           ( bx - px ) * ( cy - py ) >= ( cx - px ) * ( by - py );\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n           ( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n            ( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n            equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tconst o1 = sign( area( p1, q1, p2 ) );\n\tconst o2 = sign( area( p1, q1, q2 ) );\n\tconst o3 = sign( area( p2, q2, p1 ) );\n\tconst o4 = sign( area( p2, q2, q1 ) );\n\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\n\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\treturn false;\n\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment( p, q, r ) {\n\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n}\n\nfunction sign( num ) {\n\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tlet p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tlet p = a,\n\t\tinside = false;\n\tconst px = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tconst a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tconst p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = 0;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tlet sum = 0;\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\nclass ShapeUtils {\n\n\t// calculate area of the contour polygon\n\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\nclass ExtrudeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tconst depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn pt.clone().addScaledVector( vec, size );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tdata.options = Object.assign( {}, options );\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass RingGeometry extends BufferGeometry {\n\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ShapeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\nclass SphereGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass TorusGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\nclass TorusKnotGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\nclass TubeGeometry extends BufferGeometry {\n\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\nclass WireframeGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1 );\n\t\tedges.add( hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tCapsuleGeometry: CapsuleGeometry,\n\tCircleGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isRawShaderMaterial = true;\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardMaterial = true;\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.iridescenceMap = null;\n\t\tthis.iridescenceIOR = 1.3;\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = Infinity;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._sheen = 0.0;\n\t\tthis._clearcoat = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhongMaterial = true;\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshToonMaterial = true;\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshNormalMaterial = true;\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshLambertMaterial = true;\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshMatcapMaterial = true;\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineDashedMaterial = true;\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// same as Array.prototype.slice, but also works on typed arrays\nfunction arraySlice( array, from, to ) {\n\n\tif ( isTypedArray( array ) ) {\n\n\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t}\n\n\treturn array.slice( from, to );\n\n}\n\n// converts an array to a specific type\nfunction convertArray( array, type, forceClone ) {\n\n\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t! forceClone && array.constructor === type ) return array;\n\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\treturn new type( array ); // create typed array\n\n\t}\n\n\treturn Array.prototype.slice.call( array ); // create Array\n\n}\n\nfunction isTypedArray( object ) {\n\n\treturn ArrayBuffer.isView( object ) &&\n\t\t! ( object instanceof DataView );\n\n}\n\n// returns an array by which times and values can be sorted\nfunction getKeyframeOrder( times ) {\n\n\tfunction compareTime( i, j ) {\n\n\t\treturn times[ i ] - times[ j ];\n\n\t}\n\n\tconst n = times.length;\n\tconst result = new Array( n );\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\tresult.sort( compareTime );\n\n\treturn result;\n\n}\n\n// uses the array previously returned by 'getKeyframeOrder' to sort data\nfunction sortedArray( values, stride, order ) {\n\n\tconst nValues = values.length;\n\tconst result = new values.constructor( nValues );\n\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\tconst srcOffset = order[ i ] * stride;\n\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n// function for parsing AOS keyframe formats\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\tlet i = 1, key = jsonKeys[ 0 ];\n\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\tkey = jsonKeys[ i ++ ];\n\n\t}\n\n\tif ( key === undefined ) return; // no data\n\n\tlet value = key[ valuePropertyName ];\n\tif ( value === undefined ) return; // no data\n\n\tif ( Array.isArray( value ) ) {\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else if ( value.toArray !== undefined ) {\n\n\t\t// ...assume THREE.Math-ish\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else {\n\n\t\t// otherwise push as-is\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( value );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t}\n\n}\n\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\tconst clip = sourceClip.clone();\n\n\tclip.name = name;\n\n\tconst tracks = [];\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tconst track = clip.tracks[ i ];\n\t\tconst valueSize = track.getValueSize();\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( times.length === 0 ) continue;\n\n\t\ttrack.times = convertArray( times, track.times.constructor );\n\t\ttrack.values = convertArray( values, track.values.constructor );\n\n\t\ttracks.push( track );\n\n\t}\n\n\tclip.tracks = tracks;\n\n\t// find minimum .times value across all tracks in the trimmed clip\n\n\tlet minStartTime = Infinity;\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t}\n\n\t}\n\n\t// shift all tracks such that clip begins at t=0\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t}\n\n\tclip.resetDuration();\n\n\treturn clip;\n\n}\n\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\tif ( fps <= 0 ) fps = 30;\n\n\tconst numTracks = referenceClip.tracks.length;\n\tconst referenceTime = referenceFrame / fps;\n\n\t// Make each track's values relative to the values at the reference frame\n\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t// Skip this track if it's non-numeric\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t} );\n\n\t\tif ( targetTrack === undefined ) continue;\n\n\t\tlet referenceOffset = 0;\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t}\n\n\t\tlet targetOffset = 0;\n\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t}\n\n\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\tlet referenceValue;\n\n\t\t// Find the value to subtract out of the track\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\treferenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\treferenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t} else {\n\n\t\t\t// Interpolate to the reference value\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\treferenceValue = arraySlice( interpolant.resultBuffer, startIndex, endIndex );\n\n\t\t}\n\n\t\t// Conjugate the quaternion\n\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t}\n\n\t\t// Subtract the reference value from all of the track values\n\n\t\tconst numTimes = targetTrack.times.length;\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart,\n\t\t\t\t\treferenceValue,\n\t\t\t\t\t0,\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\treturn targetClip;\n\n}\n\nconst AnimationUtils = {\n\tarraySlice: arraySlice,\n\tconvertArray: convertArray,\n\tisTypedArray: isTypedArray,\n\tgetKeyframeOrder: getKeyframeOrder,\n\tsortedArray: sortedArray,\n\tflattenJSON: flattenJSON,\n\tsubclip: subclip,\n\tmakeClipAdditive: makeClipAdditive\n};\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n */\n\nclass Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t\tthis.settings = null;\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t// Template methods for derived classes:\n\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n */\n\nclass CubicInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nclass LinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n */\n\nclass DiscreteInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\nclass KeyframeTrack {\n\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = convertArray( times, this.TimeBufferType );\n\t\tthis.values = convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': convertArray( track.times, Array ),\n\t\t\t\t'values': convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t// move all keyframes either forwards or backwards in time\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = arraySlice( times, from, to );\n\t\t\tthis.values = arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize() {\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = arraySlice( this.times ),\n\t\t\tvalues = arraySlice( this.values ),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = arraySlice( values, 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst times = arraySlice( this.times, 0 );\n\t\tconst values = arraySlice( this.values, 0 );\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A Track of Boolean keyframe values.\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {}\n\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of keyframe values that represent color.\n */\nclass ColorKeyframeTrack extends KeyframeTrack {}\n\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A Track of numeric keyframe values.\n */\nclass NumberKeyframeTrack extends KeyframeTrack {}\n\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n */\n\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A Track of quaternion keyframe values.\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\nQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track that interpolates Strings\n */\nclass StringKeyframeTrack extends KeyframeTrack {}\n\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\nStringKeyframeTrack.prototype.ValueBufferType = Array;\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of vectored keyframe values.\n */\nclass VectorKeyframeTrack extends KeyframeTrack {}\n\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\nclass AnimationClip {\n\n\tconstructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = getKeyframeOrder( times );\n\t\t\ttimes = sortedArray( times, 1, order );\n\t\t\tvalues = sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, - 1, tracks );\n\n\t}\n\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t// parse the animation.hierarchy format\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tflattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || - 1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * fps;\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tflattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\n\nclass Loader {\n\n\tconstructor( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\tparse( /* data */ ) {}\n\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\nconst loading = {};\n\nclass HttpError extends Error {\n\n\tconstructor( message, response ) {\n\n\t\tsuper( message );\n\t\tthis.response = response;\n\n\t}\n\n}\n\nclass FileLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// record states ( avoid data race )\n\t\tconst mimeType = this.mimeType;\n\t\tconst responseType = this.responseType;\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\n\n\t\t\t\t\t\treturn response;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\t// Nginx needs X-File-Size check\n\t\t\t\t\t// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n\t\t\t\t\tconst contentLength = response.headers.get( 'Content-Length' ) || response.headers.get( 'X-File-Size' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\tconst stream = new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn new Response( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( response => {\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( mimeType === undefined ) {\n\n\t\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// sniff encoding\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\n\t\t\t\tif ( callbacks === undefined ) {\n\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\n\t\t\t\t\tthis.manager.itemError( url );\n\t\t\t\t\tthrow err;\n\n\t\t\t\t}\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t} )\n\t\t\t.finally( () => {\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass CompressedTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.encoding !== undefined ) {\n\n\t\t\t\ttexture.encoding = texData.encoding;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.isLight = true;\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass HemisphereLight extends Light {\n\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\tthis.isHemisphereLight = true;\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( _projScreenMatrix$1 );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nclass SpotLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\tthis.isSpotLightShadow = true;\n\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass SpotLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isSpotLight = true;\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.distance = distance;\n\t\tthis.angle = angle;\n\t\tthis.penumbra = penumbra;\n\t\tthis.decay = decay;\n\n\t\tthis.map = null;\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass PointLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay;\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass DirectionalLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t\tthis.isDirectionalLightShadow = true;\n\n\t}\n\n}\n\nclass DirectionalLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AmbientLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isAmbientLight = true;\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\nclass RectAreaLight extends Light {\n\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nclass LightProbe extends Light {\n\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isLightProbe = true;\n\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = MaterialLoader.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isInstancedBufferGeometry = true;\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass BufferGeometryLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tif ( attribute.updateRange !== undefined ) {\n\n\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nclass ObjectLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( new Error( 'THREE.ObjectLoader: Can\\'t load ' + url ) );\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ].data instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\treturn object;\n\n\t}\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tconst source = images[ data.image ];\n\t\t\t\tconst image = source.data;\n\n\t\t\t\tlet texture;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture();\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.source = source;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.internalFormat !== undefined ) texture.internalFormat = data.internalFormat;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.encoding !== undefined ) texture.encoding = data.encoding;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.generateMipmaps !== undefined ) texture.generateMipmaps = data.generateMipmaps;\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.backgroundBlurriness !== undefined ) object.backgroundBlurriness = data.backgroundBlurriness;\n\t\t\t\tif ( data.backgroundIntensity !== undefined ) object.backgroundIntensity = data.backgroundIntensity;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance, level.hysteresis );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\nclass ImageBitmapLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.isImageBitmapLoader = true;\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tfetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nlet _context;\n\nclass AudioContext {\n\n\tstatic getContext() {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t}\n\n\tstatic setContext( value ) {\n\n\t\t_context = value;\n\n\t}\n\n}\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n}\n\nclass HemisphereLightProbe extends LightProbe {\n\n\tconstructor( skyColor, groundColor, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isHemisphereLightProbe = true;\n\n\t\tconst color1 = new Color().set( skyColor );\n\t\tconst color2 = new Color().set( groundColor );\n\n\t\tconst sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tconst ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tconst c0 = Math.sqrt( Math.PI );\n\t\tconst c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n}\n\nclass AmbientLightProbe extends LightProbe {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isAmbientLightProbe = true;\n\n\t\tconst color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n}\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\nclass StereoCamera {\n\n\tconstructor() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\nclass Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\nclass AudioListener extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass Audio extends Object3D {\n\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.source = null;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tif ( this.source !== null ) {\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t}\n\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\n\t}\n\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\nclass PositionalAudio extends Audio {\n\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass AudioAnalyser {\n\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nclass PropertyMixer {\n\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'add'\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\nclass PropertyBinding {\n\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName );\n\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( matches === null ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName );\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map':\n\n\t\t\t\t\tif ( 'map' in targetObject ) {\n\n\t\t\t\t\t\ttargetObject = targetObject.map;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.map ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.map;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n */\n\nclass AnimationObjectGroup {\n\n\tconstructor() {\n\n\t\tthis.isAnimationObjectGroup = true;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// remove & forget\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _controlInterpolantsResultBuffer = new Float32Array( 1 );\n\n\nclass AnimationMixer extends EventDispatcher {\n\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, _controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t// get an existing action\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// advance the time and update apply the animation\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t// return this mixer's root target object\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t// free all resources specific to a particular clip\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remove a targeted clip from the cache\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\nclass Uniform {\n\n\tconstructor( value ) {\n\n\t\tthis.value = value;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nlet id = 0;\n\nclass UniformsGroup extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isUniformsGroup = true;\n\n\t\tObject.defineProperty( this, 'id', { value: id ++ } );\n\n\t\tthis.name = '';\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.uniforms = [];\n\n\t}\n\n\tadd( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\tremove( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== - 1 ) this.uniforms.splice( index, 1 );\n\n\t\treturn this;\n\n\t}\n\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.usage = source.usage;\n\n\t\tconst uniformsSource = source.uniforms;\n\n\t\tthis.uniforms.length = 0;\n\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\n\n\t\t\tthis.uniforms.push( uniformsSource[ i ].clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\tthis.isInstancedInterleavedBuffer = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\nclass GLBufferAttribute {\n\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.isGLBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be between EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = y; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\nclass Box2 {\n\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox2 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$4 ).distanceTo( point );\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\nclass Line3 {\n\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\tthis.start = start;\n\t\tthis.end = end;\n\n\t}\n\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\nclass SpotLightHelper extends Object3D {\n\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'SpotLightHelper';\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n\nclass SkeletonHelper extends LineSegments {\n\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nclass PointLightHelper extends Mesh {\n\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.light = light;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\nclass HemisphereLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'HemisphereLightHelper';\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\nclass GridHelper extends LineSegments {\n\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass PolarGridHelper extends LineSegments {\n\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the sectors\n\n\t\tif ( sectors > 1 ) {\n\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\n\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\n\n\t\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create the rings\n\n\t\tfor ( let i = 0; i < rings; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / rings * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nclass DirectionalLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'DirectionalLightHelper';\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttps://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html\n */\n\nclass CameraHelper extends LineSegments {\n\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2' );\n\t\taddLine( 'n2', 'n4' );\n\t\taddLine( 'n4', 'n3' );\n\t\taddLine( 'n3', 'n1' );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2' );\n\t\taddLine( 'f2', 'f4' );\n\t\taddLine( 'f4', 'f3' );\n\t\taddLine( 'f3', 'f1' );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1' );\n\t\taddLine( 'n2', 'f2' );\n\t\taddLine( 'n3', 'f3' );\n\t\taddLine( 'n4', 'f4' );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1' );\n\t\taddLine( 'p', 'n2' );\n\t\taddLine( 'p', 'n3' );\n\t\taddLine( 'p', 'n4' );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2' );\n\t\taddLine( 'u2', 'u3' );\n\t\taddLine( 'u3', 'u1' );\n\n\t\t// target\n\n\t\taddLine( 'c', 't' );\n\t\taddLine( 'p', 'c' );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2' );\n\t\taddLine( 'cn3', 'cn4' );\n\n\t\taddLine( 'cf1', 'cf2' );\n\t\taddLine( 'cf3', 'cf4' );\n\n\t\tfunction addLine( a, b ) {\n\n\t\t\taddPoint( a );\n\t\t\taddPoint( b );\n\n\t\t}\n\n\t\tfunction addPoint( id ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( 0, 0, 0 );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\tthis.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );\n\n\t}\n\n\tsetColors( frustum, cone, up, target, cross ) {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\n\n\t\t// near\n\n\t\tcolorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2\n\t\tcolorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4\n\t\tcolorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3\n\t\tcolorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1\n\n\t\t// far\n\n\t\tcolorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2\n\t\tcolorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4\n\t\tcolorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3\n\t\tcolorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1\n\n\t\t// sides\n\n\t\tcolorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1\n\t\tcolorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2\n\t\tcolorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3\n\t\tcolorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4\n\n\t\t// cone\n\n\t\tcolorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1\n\t\tcolorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2\n\t\tcolorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3\n\t\tcolorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4\n\n\t\t// up\n\n\t\tcolorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2\n\t\tcolorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3\n\t\tcolorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1\n\n\t\t// target\n\n\t\tcolorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t\n\t\tcolorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c\n\n\t\t// cross\n\n\t\tcolorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2\n\t\tcolorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4\n\n\t\tcolorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2\n\t\tcolorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4\n\n\t\tcolorAttribute.needsUpdate = true;\n\n\t}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\nclass BoxHelper extends LineSegments {\n\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass Box3Helper extends LineSegments {\n\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass PlaneHelper extends Line {\n\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, - 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tthis.position.set( 0, 0, 0 );\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tthis.translateZ( - this.plane.constant );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\nclass ArrowHelper extends Object3D {\n\n\t// dir is assumed to be normalized\n\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.line.geometry.dispose();\n\t\tthis.line.material.dispose();\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n}\n\nclass AxesHelper extends LineSegments {\n\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass ShapePath {\n\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\ttoShapes( isCCW ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tlet toChange = 0;\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\n\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\n\n\t\t\t\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < - 27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < - 14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n// float32 to float16\n\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, - 65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n// float16 to float32\n\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\nconst DataUtils = {\n\ttoHalfFloat: toHalfFloat,\n\tfromHalfFloat: fromHalfFloat,\n};\n\n// r144\n\nclass BoxBufferGeometry extends BoxGeometry {\n\n\tconstructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tconsole.warn( 'THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.' );\n\t\tsuper( width, height, depth, widthSegments, heightSegments, depthSegments );\n\n\n\t}\n\n}\n\n// r144\n\nclass CapsuleBufferGeometry extends CapsuleGeometry {\n\n\tconstructor( radius, length, capSegments, radialSegments ) {\n\n\t\tconsole.warn( 'THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.' );\n\t\tsuper( radius, length, capSegments, radialSegments );\n\n\t}\n\n}\n\n// r144\n\nclass CircleBufferGeometry extends CircleGeometry {\n\n\tconstructor( radius, segments, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.' );\n\t\tsuper( radius, segments, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass ConeBufferGeometry extends ConeGeometry {\n\n\tconstructor( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.' );\n\t\tsuper( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass CylinderBufferGeometry extends CylinderGeometry {\n\n\tconstructor( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.' );\n\t\tsuper( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass DodecahedronBufferGeometry extends DodecahedronGeometry {\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass ExtrudeBufferGeometry extends ExtrudeGeometry {\n\n\tconstructor( shapes, options ) {\n\n\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.' );\n\t\tsuper( shapes, options );\n\n\t}\n\n}\n\n// r144\n\nclass IcosahedronBufferGeometry extends IcosahedronGeometry {\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass LatheBufferGeometry extends LatheGeometry {\n\n\tconstructor( points, segments, phiStart, phiLength ) {\n\n\t\tconsole.warn( 'THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.' );\n\t\tsuper( points, segments, phiStart, phiLength );\n\n\t}\n\n}\n\n// r144\n\nclass OctahedronBufferGeometry extends OctahedronGeometry {\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass PlaneBufferGeometry extends PlaneGeometry {\n\n\tconstructor( width, height, widthSegments, heightSegments ) {\n\n\t\tconsole.warn( 'THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.' );\n\t\tsuper( width, height, widthSegments, heightSegments );\n\n\t}\n\n}\n\n// r144\n\nclass PolyhedronBufferGeometry extends PolyhedronGeometry {\n\n\tconstructor( vertices, indices, radius, detail ) {\n\n\t\tconsole.warn( 'THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.' );\n\t\tsuper( vertices, indices, radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass RingBufferGeometry extends RingGeometry {\n\n\tconstructor( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.' );\n\t\tsuper( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass ShapeBufferGeometry extends ShapeGeometry {\n\n\tconstructor( shapes, curveSegments ) {\n\n\t\tconsole.warn( 'THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.' );\n\t\tsuper( shapes, curveSegments );\n\n\t}\n\n}\n\n// r144\n\nclass SphereBufferGeometry extends SphereGeometry {\n\n\tconstructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tconsole.warn( 'THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.' );\n\t\tsuper( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );\n\n\t}\n\n}\n\n// r144\n\nclass TetrahedronBufferGeometry extends TetrahedronGeometry {\n\n\tconstructor( radius, detail ) {\n\n\t\tconsole.warn( 'THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.' );\n\t\tsuper( radius, detail );\n\n\t}\n\n}\n\n// r144\n\nclass TorusBufferGeometry extends TorusGeometry {\n\n\tconstructor( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tconsole.warn( 'THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.' );\n\t\tsuper( radius, tube, radialSegments, tubularSegments, arc );\n\n\t}\n\n}\n\n// r144\n\nclass TorusKnotBufferGeometry extends TorusKnotGeometry {\n\n\tconstructor( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tconsole.warn( 'THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.' );\n\t\tsuper( radius, tube, tubularSegments, radialSegments, p, q );\n\n\t}\n\n}\n\n// r144\n\nclass TubeBufferGeometry extends TubeGeometry {\n\n\tconstructor( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tconsole.warn( 'THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.' );\n\t\tsuper( path, tubularSegments, radius, radialSegments, closed );\n\n\t}\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightProbe, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxBufferGeometry, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleBufferGeometry, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleBufferGeometry, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedArrayTexture, CompressedTexture, CompressedTextureLoader, ConeBufferGeometry, ConeGeometry, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderBufferGeometry, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DisplayP3ColorSpace, DodecahedronBufferGeometry, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeBufferGeometry, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, Float64BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronBufferGeometry, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheBufferGeometry, LatheGeometry, Layers, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronBufferGeometry, OctahedronGeometry, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, Path, PerspectiveCamera, Plane, PlaneBufferGeometry, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronBufferGeometry, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingBufferGeometry, RingGeometry, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, Scene, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeBufferGeometry, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereBufferGeometry, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronBufferGeometry, TetrahedronGeometry, Texture, TextureLoader, TorusBufferGeometry, TorusGeometry, TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeBufferGeometry, TubeGeometry, TwoPassDoubleSide, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoTexture, WebGL1Renderer, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCubeRenderTarget, WebGLMultipleRenderTargets, WebGLRenderTarget, WebGLRenderer, WebGLUtils, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, _SRGBAFormat, sRGBEncoding };\n","import { Color } from \"three\";\nimport { THRESHOLD_DEFINITIONS } from \"./ThresholdDefinitions\";\n\nconst BONE_COLORS = [ \n  new Color(0x3dab1b),\n  new Color(0x7dab1b),\n  new Color(0x85ab1b),\n  new Color(0xa1ab1b),\n  new Color(0xab981b),\n  new Color(0xab791b),\n  new Color(0xb00505),\n  new Color(0x660000),\n  new Color(0x000000)\n];\n\nexport const JOINT_COLORS = [ \n  new Color(0x3dab1b),\n  new Color(0x85ab1b),\n  new Color(0xab981b),\n  new Color(0xb00505),\n  new Color(0x000000)\n]\n\nexport const getJointColor = (delta: number, jointIndex: number) => {\n  const severity = THRESHOLD_DEFINITIONS[jointIndex].getSeverity(delta);\n  return JOINT_COLORS[severity];\n}\n\nexport const getBoneColor = (delta1: number, jointIndex1: number, delta2: number, jointIndex2: number) => {\n  \n  const jointDiffLevel1 = THRESHOLD_DEFINITIONS[jointIndex1].getSeverity(delta1);\n  const jointDiffLevel2 = THRESHOLD_DEFINITIONS[jointIndex2].getSeverity(delta2);\n  \n  const diffLevel = jointDiffLevel1 + jointDiffLevel2;\n\n  return BONE_COLORS[diffLevel];\n}\n\n\n","import { ITresholds, JointThresholdSettings } from \"./Entities/JointThresholdSettings\";\n\n\nexport const THRESHOLD_DEFINITIONS : JointThresholdSettings[] = [\n\n    new JointThresholdSettings(0, { none: 1, minor: 1, medium: 1, major: 1}),\n    new JointThresholdSettings(1, { none: 1, minor: 1.5, medium: 2, major: 2.5}),\n    new JointThresholdSettings(2, { none: 1.5, minor: 3, medium: 4.5, major: 6}),\n    new JointThresholdSettings(3, { none: 2, minor: 4, medium: 6, major: 8}),\n    new JointThresholdSettings(4, { none: 2, minor: 4, medium: 6, major: 8}),\n    new JointThresholdSettings(5, { none: 2, minor: 4, medium: 6, major: 8}),\n    new JointThresholdSettings(6, { none: 1, minor: 1.5, medium: 2, major: 2.5}),\n    new JointThresholdSettings(7, { none: 1.5, minor: 3, medium: 4.5, major: 6}),\n    new JointThresholdSettings(8, { none: 2, minor: 4, medium: 6, major: 8}),\n    new JointThresholdSettings(9, { none: 2, minor: 4, medium: 6, major: 8}),\n    new JointThresholdSettings(10, { none: 2, minor: 4, medium: 6, major: 8}),\n    new JointThresholdSettings(11, { none: 1, minor: 1.5, medium: 2, major: 2.5}),\n    new JointThresholdSettings(12, { none: 1, minor: 1.5, medium: 2, major: 2.5}),\n    new JointThresholdSettings(13, { none: 1, minor: 1.5, medium: 2, major: 2.5}),\n    new JointThresholdSettings(14, { none: 1, minor: 1.5, medium: 2.5, major: 3}),\n    new JointThresholdSettings(15, { none: 1, minor: 1.5, medium: 2, major: 3}),\n    new JointThresholdSettings(16, { none: 1, minor: 1.5, medium: 2, major: 3}),\n    new JointThresholdSettings(17, { none: 1, minor: 1.5, medium: 2, major: 3}),\n    new JointThresholdSettings(18, { none: 1, minor: 2, medium: 3, major: 4}),\n    new JointThresholdSettings(19, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(20, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(21, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(22, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(23, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(24, { none: 1, minor: 1.5, medium: 2, major: 3}),\n    new JointThresholdSettings(25, { none: 1, minor: 2, medium: 3, major: 4}),\n    new JointThresholdSettings(26, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(27, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(28, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(29, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5}),\n    new JointThresholdSettings(30, { none: 1.5, minor: 2.5, medium: 3.5, major: 4.5})\n];","export class JointThresholdSettings {\n\n    jointIndex : number;\n    tresholds : ITresholds;\n    modifier : number;\n\n    constructor(jointIndex: number, tresholds: ITresholds ) {\n        this.jointIndex = jointIndex;\n        this.tresholds = tresholds;\n        this.modifier = 1;\n    }\n\n    getSeverity(distance: number) {\n\n        if (distance < this.tresholds.none * this.modifier) {\n          return Severity.NONE;\n        }\n        \n        if (distance < this.tresholds.minor * this.modifier) {\n          return Severity.MINOR;;\n        }\n    \n        if (distance < this.tresholds.medium * this.modifier) {\n          return Severity.MEDIUM;\n        }\n    \n        if (distance < this.tresholds.major * this.modifier) {\n          return Severity.MAJOR;\n        }\n    \n        return Severity.ABSOLUTE;\n    }\n\n\n    updateThreshold(modifier: number) {\n      this.modifier += modifier;\n      this.modifier = Math.max(0, this.modifier);\n    }\n\n}\n\n\nexport interface ITresholds {\n    none : number;\n    minor : number;\n    medium : number;\n    major : number;\n}\n\nexport enum Severity {\n    NONE = 0,\n    MINOR = 1,\n    MEDIUM = 2,\n    MAJOR = 3,\n    ABSOLUTE = 4\n  }","import { Vector3 } from 'three';\nimport { DoubleSide, LineCurve3, Mesh, MeshBasicMaterial, SphereGeometry, TubeGeometry } from 'three';\nimport { ITresholds, JointThresholdSettings } from './Entities/JointThresholdSettings';\n\nexport class SkeletonPainter {\n\n  static BONE_RADIUS = 0.25;\n  static BONE_TUBULAR_SEGMENTS = 1;\n  static BONE_RADIAL_SEGMENTS = 4;\n  static JOINT_RADIUS = 0.4;\n  static JOINT_HEIGHT_SEGMENTS = 10;\n  static JOINT_WIDTH_SEGMENTS = 10;\n  static JOINT_MENTOR_MATERIAL = { color: 0x7952b3 }\n  static JOINT_THRESHOLD_MATERIALS = [\n    { severity: 'none', color: 0x3dab1b, transparent: true },\n    { severity: 'minor', color: 0x85ab1b, transparent: true },\n    { severity: 'medium', color: 0xab981b, transparent: true },\n    { severity: 'major', color: 0xb00505, transparent: true }\n  ]\n  static JOINT_THRESHOLD_LOW_MATERIAL = { color: 0x3dab1b, transparent: true } \n\n  static createBones = (coordinates: Array<Vector3>) : Mesh[] => {\n    const lines : Mesh[] = [];\n    for (let i = 0; i < coordinates.length - 1; i++) {\n      lines.push(this.makeBone(coordinates[i], coordinates[i + 1]));\n    }\n  \n    return lines;\n  }\n  \n  static createJoints = (coordinates : Vector3[] ) : Array<Mesh> => {\n    const joints : Array<Mesh> = [];\n    \n    for (let i = 0; i < coordinates.length; i++) {\n      joints.push(this.makeJoint(coordinates[i]));  \n    }\n  \n    return joints;\n  }\n  \n  \n  private static makeBone = (pointA: Vector3, pointB: Vector3) : Mesh => {\n  \n    const path = new LineCurve3( pointA, pointB );\n    //@ts-ignore\n    const geometry = new TubeGeometry( path, this.BONE_TUBULAR_SEGMENTS, this.BONE_RADIUS, this.BONE_RADIAL_SEGMENTS, false );\n    const material = new MeshBasicMaterial( { color: 0x7952b3, side: DoubleSide } );\n    return new Mesh( geometry, material );\n  }\n  \n  private static makeJoint = (center : Vector3) : Mesh => {\n    const geometry = new SphereGeometry( this.JOINT_RADIUS, this.JOINT_HEIGHT_SEGMENTS, this.JOINT_WIDTH_SEGMENTS );\n    const material = new MeshBasicMaterial( this.JOINT_MENTOR_MATERIAL );\n    const mesh = new Mesh( geometry, material );\n    //@ts-ignore\n    mesh.position.set(center.x, center.y, center.z);\n  \n    return mesh\n  }\n\n  static createThresholdZones(center: Vector3, thresholdSettings : JointThresholdSettings) {\n\n    const meshes = this.JOINT_THRESHOLD_MATERIALS.map(sphereMaterial => {\n      const geometry = new SphereGeometry( thresholdSettings.tresholds[sphereMaterial.severity] * thresholdSettings.modifier, this.JOINT_HEIGHT_SEGMENTS + 10, this.JOINT_WIDTH_SEGMENTS + 10);\n      const materialProperties = {color: sphereMaterial.color, transparent: sphereMaterial.transparent}\n      const material = new MeshBasicMaterial( materialProperties );\n  \n      material.opacity = 0.2;\n      const mesh = new Mesh( geometry, material );\n      //@ts-ignore\n      mesh.position.set(center.x, center.y, center.z);\n      return mesh;\n    })\n   \n    return meshes;\n\n  }\n\n}\n\n\n\n","export enum BodyParts {\n  LeftLeg = \"leftLeg\", \n  LeftArm = \"leftArm\", \n  RightLeg = \"rightLeg\", \n  RightArm = \"rightArm\" , \n  Head = \"head\" ,\n  Torso = \"torso\",\n  RightThumb = \"rightThumb\",\n  LeftThumb = \"leftThumb\"\n}\n\nexport const ALL_PARTS = [\n  BodyParts.Head,\n  BodyParts.LeftLeg,\n  BodyParts.LeftArm,\n  BodyParts.Torso,\n  BodyParts.RightLeg,\n  BodyParts.RightArm,\n  BodyParts.RightThumb,\n  BodyParts.LeftThumb\n]",null,"/**\n * --------------------------------------------------------------------------\n * Bootstrap util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst MAX_UID = 1_000_000\nconst MILLISECONDS_MULTIPLIER = 1000\nconst TRANSITION_END = 'transitionend'\n\n/**\n * Properly escape IDs selectors to handle weird IDs\n * @param {string} selector\n * @returns {string}\n */\nconst parseSelector = selector => {\n  if (selector && window.CSS && window.CSS.escape) {\n    // document.querySelector needs escaping to handle IDs (html5+) containing for instance /\n    selector = selector.replace(/#([^\\s\"#']+)/g, (match, id) => `#${CSS.escape(id)}`)\n  }\n\n  return selector\n}\n\n// Shout-out Angus Croll (https://goo.gl/pxwQGp)\nconst toType = object => {\n  if (object === null || object === undefined) {\n    return `${object}`\n  }\n\n  return Object.prototype.toString.call(object).match(/\\s([a-z]+)/i)[1].toLowerCase()\n}\n\n/**\n * Public Util API\n */\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID)\n  } while (document.getElementById(prefix))\n\n  return prefix\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n}\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END))\n}\n\nconst isElement = object => {\n  if (!object || typeof object !== 'object') {\n    return false\n  }\n\n  if (typeof object.jquery !== 'undefined') {\n    object = object[0]\n  }\n\n  return typeof object.nodeType !== 'undefined'\n}\n\nconst getElement = object => {\n  // it's a jQuery object or a node element\n  if (isElement(object)) {\n    return object.jquery ? object[0] : object\n  }\n\n  if (typeof object === 'string' && object.length > 0) {\n    return document.querySelector(parseSelector(object))\n  }\n\n  return null\n}\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false\n  }\n\n  const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n  // Handle `details` element as its content may falsie appear visible when it is closed\n  const closedDetails = element.closest('details:not([open])')\n\n  if (!closedDetails) {\n    return elementIsVisible\n  }\n\n  if (closedDetails !== element) {\n    const summary = element.closest('summary')\n    if (summary && summary.parentNode !== closedDetails) {\n      return false\n    }\n\n    if (summary === null) {\n      return false\n    }\n  }\n\n  return elementIsVisible\n}\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode()\n    return root instanceof ShadowRoot ? root : null\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element\n  }\n\n  // when we don't find a shadow root\n  if (!element.parentNode) {\n    return null\n  }\n\n  return findShadowRoot(element.parentNode)\n}\n\nconst noop = () => {}\n\n/**\n * Trick to restart an element's animation\n *\n * @param {HTMLElement} element\n * @return void\n *\n * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n */\nconst reflow = element => {\n  element.offsetHeight // eslint-disable-line no-unused-expressions\n}\n\nconst getjQuery = () => {\n  if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return window.jQuery\n  }\n\n  return null\n}\n\nconst DOMContentLoadedCallbacks = []\n\nconst onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        for (const callback of DOMContentLoadedCallbacks) {\n          callback()\n        }\n      })\n    }\n\n    DOMContentLoadedCallbacks.push(callback)\n  } else {\n    callback()\n  }\n}\n\nconst isRTL = () => document.documentElement.dir === 'rtl'\n\nconst defineJQueryPlugin = plugin => {\n  onDOMContentLoaded(() => {\n    const $ = getjQuery()\n    /* istanbul ignore if */\n    if ($) {\n      const name = plugin.NAME\n      const JQUERY_NO_CONFLICT = $.fn[name]\n      $.fn[name] = plugin.jQueryInterface\n      $.fn[name].Constructor = plugin\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT\n        return plugin.jQueryInterface\n      }\n    }\n  })\n}\n\nconst execute = (possibleCallback, args = [], defaultValue = possibleCallback) => {\n  return typeof possibleCallback === 'function' ? possibleCallback(...args) : defaultValue\n}\n\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    execute(callback)\n    return\n  }\n\n  const durationPadding = 5\n  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding\n\n  let called = false\n\n  const handler = ({ target }) => {\n    if (target !== transitionElement) {\n      return\n    }\n\n    called = true\n    transitionElement.removeEventListener(TRANSITION_END, handler)\n    execute(callback)\n  }\n\n  transitionElement.addEventListener(TRANSITION_END, handler)\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(transitionElement)\n    }\n  }, emulatedDuration)\n}\n\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\nconst getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  const listLength = list.length\n  let index = list.indexOf(activeElement)\n\n  // if the element does not exist in the list return an element\n  // depending on the direction and if cycle is allowed\n  if (index === -1) {\n    return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0]\n  }\n\n  index += shouldGetNext ? 1 : -1\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))]\n}\n\nexport {\n  defineJQueryPlugin,\n  execute,\n  executeAfterTransition,\n  findShadowRoot,\n  getElement,\n  getjQuery,\n  getNextActiveElement,\n  getTransitionDurationFromElement,\n  getUID,\n  isDisabled,\n  isElement,\n  isRTL,\n  isVisible,\n  noop,\n  onDOMContentLoaded,\n  parseSelector,\n  reflow,\n  triggerTransitionEnd,\n  toType\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { getjQuery } from '../util/index.js'\n\n/**\n * Constants\n */\n\nconst namespaceRegex = /[^.]*(?=\\..*)\\.|.*/\nconst stripNameRegex = /\\..*/\nconst stripUidRegex = /::\\d+$/\nconst eventRegistry = {} // Events storage\nlet uidEvent = 1\nconst customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n}\n\nconst nativeEvents = new Set([\n  'click',\n  'dblclick',\n  'mouseup',\n  'mousedown',\n  'contextmenu',\n  'mousewheel',\n  'DOMMouseScroll',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'selectstart',\n  'selectend',\n  'keydown',\n  'keypress',\n  'keyup',\n  'orientationchange',\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'touchcancel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel',\n  'gesturestart',\n  'gesturechange',\n  'gestureend',\n  'focus',\n  'blur',\n  'change',\n  'reset',\n  'select',\n  'submit',\n  'focusin',\n  'focusout',\n  'load',\n  'unload',\n  'beforeunload',\n  'resize',\n  'move',\n  'DOMContentLoaded',\n  'readystatechange',\n  'error',\n  'abort',\n  'scroll'\n])\n\n/**\n * Private methods\n */\n\nfunction makeEventUid(element, uid) {\n  return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++\n}\n\nfunction getElementEvents(element) {\n  const uid = makeEventUid(element)\n\n  element.uidEvent = uid\n  eventRegistry[uid] = eventRegistry[uid] || {}\n\n  return eventRegistry[uid]\n}\n\nfunction bootstrapHandler(element, fn) {\n  return function handler(event) {\n    hydrateObj(event, { delegateTarget: element })\n\n    if (handler.oneOff) {\n      EventHandler.off(element, event.type, fn)\n    }\n\n    return fn.apply(element, [event])\n  }\n}\n\nfunction bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector)\n\n    for (let { target } = event; target && target !== this; target = target.parentNode) {\n      for (const domElement of domElements) {\n        if (domElement !== target) {\n          continue\n        }\n\n        hydrateObj(event, { delegateTarget: target })\n\n        if (handler.oneOff) {\n          EventHandler.off(element, event.type, selector, fn)\n        }\n\n        return fn.apply(target, [event])\n      }\n    }\n  }\n}\n\nfunction findHandler(events, callable, delegationSelector = null) {\n  return Object.values(events)\n    .find(event => event.callable === callable && event.delegationSelector === delegationSelector)\n}\n\nfunction normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n  const isDelegated = typeof handler === 'string'\n  // todo: tooltip passes `false` instead of selector, so we need to check\n  const callable = isDelegated ? delegationFunction : (handler || delegationFunction)\n  let typeEvent = getTypeEvent(originalTypeEvent)\n\n  if (!nativeEvents.has(typeEvent)) {\n    typeEvent = originalTypeEvent\n  }\n\n  return [isDelegated, callable, typeEvent]\n}\n\nfunction addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return\n  }\n\n  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction)\n\n  // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n  // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n  if (originalTypeEvent in customEvents) {\n    const wrapFunction = fn => {\n      return function (event) {\n        if (!event.relatedTarget || (event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget))) {\n          return fn.call(this, event)\n        }\n      }\n    }\n\n    callable = wrapFunction(callable)\n  }\n\n  const events = getElementEvents(element)\n  const handlers = events[typeEvent] || (events[typeEvent] = {})\n  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null)\n\n  if (previousFunction) {\n    previousFunction.oneOff = previousFunction.oneOff && oneOff\n\n    return\n  }\n\n  const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''))\n  const fn = isDelegated ?\n    bootstrapDelegationHandler(element, handler, callable) :\n    bootstrapHandler(element, callable)\n\n  fn.delegationSelector = isDelegated ? handler : null\n  fn.callable = callable\n  fn.oneOff = oneOff\n  fn.uidEvent = uid\n  handlers[uid] = fn\n\n  element.addEventListener(typeEvent, fn, isDelegated)\n}\n\nfunction removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = findHandler(events[typeEvent], handler, delegationSelector)\n\n  if (!fn) {\n    return\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector))\n  delete events[typeEvent][fn.uidEvent]\n}\n\nfunction removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {}\n\n  for (const [handlerKey, event] of Object.entries(storeElementEvent)) {\n    if (handlerKey.includes(namespace)) {\n      removeHandler(element, events, typeEvent, event.callable, event.delegationSelector)\n    }\n  }\n}\n\nfunction getTypeEvent(event) {\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  event = event.replace(stripNameRegex, '')\n  return customEvents[event] || event\n}\n\nconst EventHandler = {\n  on(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, false)\n  },\n\n  one(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, true)\n  },\n\n  off(element, originalTypeEvent, handler, delegationFunction) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return\n    }\n\n    const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction)\n    const inNamespace = typeEvent !== originalTypeEvent\n    const events = getElementEvents(element)\n    const storeElementEvent = events[typeEvent] || {}\n    const isNamespace = originalTypeEvent.startsWith('.')\n\n    if (typeof callable !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!Object.keys(storeElementEvent).length) {\n        return\n      }\n\n      removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null)\n      return\n    }\n\n    if (isNamespace) {\n      for (const elementEvent of Object.keys(events)) {\n        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1))\n      }\n    }\n\n    for (const [keyHandlers, event] of Object.entries(storeElementEvent)) {\n      const handlerKey = keyHandlers.replace(stripUidRegex, '')\n\n      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector)\n      }\n    }\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null\n    }\n\n    const $ = getjQuery()\n    const typeEvent = getTypeEvent(event)\n    const inNamespace = event !== typeEvent\n\n    let jQueryEvent = null\n    let bubbles = true\n    let nativeDispatch = true\n    let defaultPrevented = false\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args)\n\n      $(element).trigger(jQueryEvent)\n      bubbles = !jQueryEvent.isPropagationStopped()\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped()\n      defaultPrevented = jQueryEvent.isDefaultPrevented()\n    }\n\n    let evt = new Event(event, { bubbles, cancelable: true })\n    evt = hydrateObj(evt, args)\n\n    if (defaultPrevented) {\n      evt.preventDefault()\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt)\n    }\n\n    if (evt.defaultPrevented && jQueryEvent) {\n      jQueryEvent.preventDefault()\n    }\n\n    return evt\n  }\n}\n\nfunction hydrateObj(obj, meta = {}) {\n  for (const [key, value] of Object.entries(meta)) {\n    try {\n      obj[key] = value\n    } catch {\n      Object.defineProperty(obj, key, {\n        configurable: true,\n        get() {\n          return value\n        }\n      })\n    }\n  }\n\n  return obj\n}\n\nexport default EventHandler\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * Constants\n */\n\nconst elementMap = new Map()\n\nexport default {\n  set(element, key, instance) {\n    if (!elementMap.has(element)) {\n      elementMap.set(element, new Map())\n    }\n\n    const instanceMap = elementMap.get(element)\n\n    // make it clear we only want one instance per element\n    // can be removed later when multiple key/instances are fine to be used\n    if (!instanceMap.has(key) && instanceMap.size !== 0) {\n      // eslint-disable-next-line no-console\n      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`)\n      return\n    }\n\n    instanceMap.set(key, instance)\n  },\n\n  get(element, key) {\n    if (elementMap.has(element)) {\n      return elementMap.get(element).get(key) || null\n    }\n\n    return null\n  },\n\n  remove(element, key) {\n    if (!elementMap.has(element)) {\n      return\n    }\n\n    const instanceMap = elementMap.get(element)\n\n    instanceMap.delete(key)\n\n    // free up element references if there are no instances left for an element\n    if (instanceMap.size === 0) {\n      elementMap.delete(element)\n    }\n  }\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value)\n  }\n\n  if (value === '' || value === 'null') {\n    return null\n  }\n\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value))\n  } catch {\n    return value\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'))\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '')\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n      attributes[pureKey] = normalizeData(element.dataset[key])\n    }\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  }\n}\n\nexport default Manipulator\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isElement, toType } from './index.js'\nimport Manipulator from '../dom/manipulator.js'\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {}\n  }\n\n  static get DefaultType() {\n    return {}\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    return config\n  }\n\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {} // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    }\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const [property, expectedTypes] of Object.entries(configTypes)) {\n      const value = config[property]\n      const valueType = isElement(value) ? 'element' : toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n        )\n      }\n    }\n  }\n}\n\nexport default Config\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Data from './dom/data.js'\nimport { executeAfterTransition, getElement } from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport Config from './util/config.js'\n\n/**\n * Constants\n */\n\nconst VERSION = '5.3.0-alpha2'\n\n/**\n * Class definition\n */\n\nclass BaseComponent extends Config {\n  constructor(element, config) {\n    super()\n\n    element = getElement(element)\n    if (!element) {\n      return\n    }\n\n    this._element = element\n    this._config = this._getConfig(config)\n\n    Data.set(this._element, this.constructor.DATA_KEY, this)\n  }\n\n  // Public\n  dispose() {\n    Data.remove(this._element, this.constructor.DATA_KEY)\n    EventHandler.off(this._element, this.constructor.EVENT_KEY)\n\n    for (const propertyName of Object.getOwnPropertyNames(this)) {\n      this[propertyName] = null\n    }\n  }\n\n  _queueCallback(callback, element, isAnimated = true) {\n    executeAfterTransition(callback, element, isAnimated)\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config, this._element)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  // Static\n  static getInstance(element) {\n    return Data.get(getElement(element), this.DATA_KEY)\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null)\n  }\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`\n  }\n\n  static eventName(name) {\n    return `${name}${this.EVENT_KEY}`\n  }\n}\n\nexport default BaseComponent\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isDisabled, isVisible, parseSelector } from '../util/index.js'\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target')\n\n  if (!selector || selector === '#') {\n    let hrefAttribute = element.getAttribute('href')\n\n    // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n    if (!hrefAttribute || (!hrefAttribute.includes('#') && !hrefAttribute.startsWith('.'))) {\n      return null\n    }\n\n    // Just in case some CMS puts out a full URL with the anchor appended\n    if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {\n      hrefAttribute = `#${hrefAttribute.split('#')[1]}`\n    }\n\n    selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null\n  }\n\n  return parseSelector(selector)\n}\n\nconst SelectorEngine = {\n  find(selector, element = document.documentElement) {\n    return [].concat(...Element.prototype.querySelectorAll.call(element, selector))\n  },\n\n  findOne(selector, element = document.documentElement) {\n    return Element.prototype.querySelector.call(element, selector)\n  },\n\n  children(element, selector) {\n    return [].concat(...element.children).filter(child => child.matches(selector))\n  },\n\n  parents(element, selector) {\n    const parents = []\n    let ancestor = element.parentNode.closest(selector)\n\n    while (ancestor) {\n      parents.push(ancestor)\n      ancestor = ancestor.parentNode.closest(selector)\n    }\n\n    return parents\n  },\n\n  prev(element, selector) {\n    let previous = element.previousElementSibling\n\n    while (previous) {\n      if (previous.matches(selector)) {\n        return [previous]\n      }\n\n      previous = previous.previousElementSibling\n    }\n\n    return []\n  },\n  // TODO: this is now unused; remove later along with prev()\n  next(element, selector) {\n    let next = element.nextElementSibling\n\n    while (next) {\n      if (next.matches(selector)) {\n        return [next]\n      }\n\n      next = next.nextElementSibling\n    }\n\n    return []\n  },\n\n  focusableChildren(element) {\n    const focusables = [\n      'a',\n      'button',\n      'input',\n      'textarea',\n      'select',\n      'details',\n      '[tabindex]',\n      '[contenteditable=\"true\"]'\n    ].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(',')\n\n    return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el))\n  },\n\n  getSelectorFromElement(element) {\n    const selector = getSelector(element)\n\n    if (selector) {\n      return SelectorEngine.findOne(selector) ? selector : null\n    }\n\n    return null\n  },\n\n  getElementFromSelector(element) {\n    const selector = getSelector(element)\n\n    return selector ? SelectorEngine.findOne(selector) : null\n  },\n\n  getMultipleElementsFromSelector(element) {\n    const selector = getSelector(element)\n\n    return selector ? SelectorEngine.find(selector) : []\n  }\n}\n\nexport default SelectorEngine\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/component-functions.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport { isDisabled } from './index.js'\nimport SelectorEngine from '../dom/selector-engine.js'\n\nconst enableDismissTrigger = (component, method = 'hide') => {\n  const clickEvent = `click.dismiss${component.EVENT_KEY}`\n  const name = component.NAME\n\n  EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault()\n    }\n\n    if (isDisabled(this)) {\n      return\n    }\n\n    const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name}`)\n    const instance = component.getOrCreateInstance(target)\n\n    // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n    instance[method]()\n  })\n}\n\nexport {\n  enableDismissTrigger\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap alert.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { defineJQueryPlugin } from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport BaseComponent from './base-component.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'alert'\nconst DATA_KEY = 'bs.alert'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_CLOSE = `close${EVENT_KEY}`\nconst EVENT_CLOSED = `closed${EVENT_KEY}`\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\n\n/**\n * Class definition\n */\n\nclass Alert extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  close() {\n    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE)\n\n    if (closeEvent.defaultPrevented) {\n      return\n    }\n\n    this._element.classList.remove(CLASS_NAME_SHOW)\n\n    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE)\n    this._queueCallback(() => this._destroyElement(), this._element, isAnimated)\n  }\n\n  // Private\n  _destroyElement() {\n    this._element.remove()\n    EventHandler.trigger(this._element, EVENT_CLOSED)\n    this.dispose()\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Alert.getOrCreateInstance(this)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](this)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nenableDismissTrigger(Alert, 'close')\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Alert)\n\nexport default Alert\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { defineJQueryPlugin } from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport BaseComponent from './base-component.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'button'\nconst DATA_KEY = 'bs.button'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"button\"]'\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\n/**\n * Class definition\n */\n\nclass Button extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n    this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE))\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Button.getOrCreateInstance(this)\n\n      if (config === 'toggle') {\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, event => {\n  event.preventDefault()\n\n  const button = event.target.closest(SELECTOR_DATA_TOGGLE)\n  const data = Button.getOrCreateInstance(button)\n\n  data.toggle()\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Button)\n\nexport default Button\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/swipe.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Config from './config.js'\nimport EventHandler from '../dom/event-handler.js'\nimport { execute } from './index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'swipe'\nconst EVENT_KEY = '.bs.swipe'\nconst EVENT_TOUCHSTART = `touchstart${EVENT_KEY}`\nconst EVENT_TOUCHMOVE = `touchmove${EVENT_KEY}`\nconst EVENT_TOUCHEND = `touchend${EVENT_KEY}`\nconst EVENT_POINTERDOWN = `pointerdown${EVENT_KEY}`\nconst EVENT_POINTERUP = `pointerup${EVENT_KEY}`\nconst POINTER_TYPE_TOUCH = 'touch'\nconst POINTER_TYPE_PEN = 'pen'\nconst CLASS_NAME_POINTER_EVENT = 'pointer-event'\nconst SWIPE_THRESHOLD = 40\n\nconst Default = {\n  endCallback: null,\n  leftCallback: null,\n  rightCallback: null\n}\n\nconst DefaultType = {\n  endCallback: '(function|null)',\n  leftCallback: '(function|null)',\n  rightCallback: '(function|null)'\n}\n\n/**\n * Class definition\n */\n\nclass Swipe extends Config {\n  constructor(element, config) {\n    super()\n    this._element = element\n\n    if (!element || !Swipe.isSupported()) {\n      return\n    }\n\n    this._config = this._getConfig(config)\n    this._deltaX = 0\n    this._supportPointerEvents = Boolean(window.PointerEvent)\n    this._initEvents()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  dispose() {\n    EventHandler.off(this._element, EVENT_KEY)\n  }\n\n  // Private\n  _start(event) {\n    if (!this._supportPointerEvents) {\n      this._deltaX = event.touches[0].clientX\n\n      return\n    }\n\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX\n    }\n  }\n\n  _end(event) {\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX - this._deltaX\n    }\n\n    this._handleSwipe()\n    execute(this._config.endCallback)\n  }\n\n  _move(event) {\n    this._deltaX = event.touches && event.touches.length > 1 ?\n      0 :\n      event.touches[0].clientX - this._deltaX\n  }\n\n  _handleSwipe() {\n    const absDeltaX = Math.abs(this._deltaX)\n\n    if (absDeltaX <= SWIPE_THRESHOLD) {\n      return\n    }\n\n    const direction = absDeltaX / this._deltaX\n\n    this._deltaX = 0\n\n    if (!direction) {\n      return\n    }\n\n    execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback)\n  }\n\n  _initEvents() {\n    if (this._supportPointerEvents) {\n      EventHandler.on(this._element, EVENT_POINTERDOWN, event => this._start(event))\n      EventHandler.on(this._element, EVENT_POINTERUP, event => this._end(event))\n\n      this._element.classList.add(CLASS_NAME_POINTER_EVENT)\n    } else {\n      EventHandler.on(this._element, EVENT_TOUCHSTART, event => this._start(event))\n      EventHandler.on(this._element, EVENT_TOUCHMOVE, event => this._move(event))\n      EventHandler.on(this._element, EVENT_TOUCHEND, event => this._end(event))\n    }\n  }\n\n  _eventIsPointerPenTouch(event) {\n    return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH)\n  }\n\n  // Static\n  static isSupported() {\n    return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0\n  }\n}\n\nexport default Swipe\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap carousel.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport {\n  defineJQueryPlugin,\n  getNextActiveElement,\n  isRTL,\n  isVisible,\n  reflow,\n  triggerTransitionEnd\n} from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport Swipe from './util/swipe.js'\nimport BaseComponent from './base-component.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'carousel'\nconst DATA_KEY = 'bs.carousel'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst ARROW_LEFT_KEY = 'ArrowLeft'\nconst ARROW_RIGHT_KEY = 'ArrowRight'\nconst TOUCHEVENT_COMPAT_WAIT = 500 // Time for mouse compat events to fire after touch\n\nconst ORDER_NEXT = 'next'\nconst ORDER_PREV = 'prev'\nconst DIRECTION_LEFT = 'left'\nconst DIRECTION_RIGHT = 'right'\n\nconst EVENT_SLIDE = `slide${EVENT_KEY}`\nconst EVENT_SLID = `slid${EVENT_KEY}`\nconst EVENT_KEYDOWN = `keydown${EVENT_KEY}`\nconst EVENT_MOUSEENTER = `mouseenter${EVENT_KEY}`\nconst EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY}`\nconst EVENT_DRAG_START = `dragstart${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_CAROUSEL = 'carousel'\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_SLIDE = 'slide'\nconst CLASS_NAME_END = 'carousel-item-end'\nconst CLASS_NAME_START = 'carousel-item-start'\nconst CLASS_NAME_NEXT = 'carousel-item-next'\nconst CLASS_NAME_PREV = 'carousel-item-prev'\n\nconst SELECTOR_ACTIVE = '.active'\nconst SELECTOR_ITEM = '.carousel-item'\nconst SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM\nconst SELECTOR_ITEM_IMG = '.carousel-item img'\nconst SELECTOR_INDICATORS = '.carousel-indicators'\nconst SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]'\nconst SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]'\n\nconst KEY_TO_DIRECTION = {\n  [ARROW_LEFT_KEY]: DIRECTION_RIGHT,\n  [ARROW_RIGHT_KEY]: DIRECTION_LEFT\n}\n\nconst Default = {\n  interval: 5000,\n  keyboard: true,\n  pause: 'hover',\n  ride: false,\n  touch: true,\n  wrap: true\n}\n\nconst DefaultType = {\n  interval: '(number|boolean)', // TODO:v6 remove boolean support\n  keyboard: 'boolean',\n  pause: '(string|boolean)',\n  ride: '(boolean|string)',\n  touch: 'boolean',\n  wrap: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Carousel extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._interval = null\n    this._activeElement = null\n    this._isSliding = false\n    this.touchTimeout = null\n    this._swipeHelper = null\n\n    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element)\n    this._addEventListeners()\n\n    if (this._config.ride === CLASS_NAME_CAROUSEL) {\n      this.cycle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  next() {\n    this._slide(ORDER_NEXT)\n  }\n\n  nextWhenVisible() {\n    // FIXME TODO use `document.visibilityState`\n    // Don't call next when the page isn't visible\n    // or the carousel or its parent isn't visible\n    if (!document.hidden && isVisible(this._element)) {\n      this.next()\n    }\n  }\n\n  prev() {\n    this._slide(ORDER_PREV)\n  }\n\n  pause() {\n    if (this._isSliding) {\n      triggerTransitionEnd(this._element)\n    }\n\n    this._clearInterval()\n  }\n\n  cycle() {\n    this._clearInterval()\n    this._updateInterval()\n\n    this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval)\n  }\n\n  _maybeEnableCycle() {\n    if (!this._config.ride) {\n      return\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.cycle())\n      return\n    }\n\n    this.cycle()\n  }\n\n  to(index) {\n    const items = this._getItems()\n    if (index > items.length - 1 || index < 0) {\n      return\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.to(index))\n      return\n    }\n\n    const activeIndex = this._getItemIndex(this._getActive())\n    if (activeIndex === index) {\n      return\n    }\n\n    const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV\n\n    this._slide(order, items[index])\n  }\n\n  dispose() {\n    if (this._swipeHelper) {\n      this._swipeHelper.dispose()\n    }\n\n    super.dispose()\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    config.defaultInterval = config.interval\n    return config\n  }\n\n  _addEventListeners() {\n    if (this._config.keyboard) {\n      EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event))\n    }\n\n    if (this._config.pause === 'hover') {\n      EventHandler.on(this._element, EVENT_MOUSEENTER, () => this.pause())\n      EventHandler.on(this._element, EVENT_MOUSELEAVE, () => this._maybeEnableCycle())\n    }\n\n    if (this._config.touch && Swipe.isSupported()) {\n      this._addTouchEventListeners()\n    }\n  }\n\n  _addTouchEventListeners() {\n    for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {\n      EventHandler.on(img, EVENT_DRAG_START, event => event.preventDefault())\n    }\n\n    const endCallBack = () => {\n      if (this._config.pause !== 'hover') {\n        return\n      }\n\n      // If it's a touch-enabled device, mouseenter/leave are fired as\n      // part of the mouse compatibility events on first tap - the carousel\n      // would stop cycling until user tapped out of it;\n      // here, we listen for touchend, explicitly pause the carousel\n      // (as if it's the second time we tap on it, mouseenter compat event\n      // is NOT fired) and after a timeout (to allow for mouse compatibility\n      // events to fire) we explicitly restart cycling\n\n      this.pause()\n      if (this.touchTimeout) {\n        clearTimeout(this.touchTimeout)\n      }\n\n      this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval)\n    }\n\n    const swipeConfig = {\n      leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),\n      rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),\n      endCallback: endCallBack\n    }\n\n    this._swipeHelper = new Swipe(this._element, swipeConfig)\n  }\n\n  _keydown(event) {\n    if (/input|textarea/i.test(event.target.tagName)) {\n      return\n    }\n\n    const direction = KEY_TO_DIRECTION[event.key]\n    if (direction) {\n      event.preventDefault()\n      this._slide(this._directionToOrder(direction))\n    }\n  }\n\n  _getItemIndex(element) {\n    return this._getItems().indexOf(element)\n  }\n\n  _setActiveIndicatorElement(index) {\n    if (!this._indicatorsElement) {\n      return\n    }\n\n    const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement)\n\n    activeIndicator.classList.remove(CLASS_NAME_ACTIVE)\n    activeIndicator.removeAttribute('aria-current')\n\n    const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to=\"${index}\"]`, this._indicatorsElement)\n\n    if (newActiveIndicator) {\n      newActiveIndicator.classList.add(CLASS_NAME_ACTIVE)\n      newActiveIndicator.setAttribute('aria-current', 'true')\n    }\n  }\n\n  _updateInterval() {\n    const element = this._activeElement || this._getActive()\n\n    if (!element) {\n      return\n    }\n\n    const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10)\n\n    this._config.interval = elementInterval || this._config.defaultInterval\n  }\n\n  _slide(order, element = null) {\n    if (this._isSliding) {\n      return\n    }\n\n    const activeElement = this._getActive()\n    const isNext = order === ORDER_NEXT\n    const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap)\n\n    if (nextElement === activeElement) {\n      return\n    }\n\n    const nextElementIndex = this._getItemIndex(nextElement)\n\n    const triggerEvent = eventName => {\n      return EventHandler.trigger(this._element, eventName, {\n        relatedTarget: nextElement,\n        direction: this._orderToDirection(order),\n        from: this._getItemIndex(activeElement),\n        to: nextElementIndex\n      })\n    }\n\n    const slideEvent = triggerEvent(EVENT_SLIDE)\n\n    if (slideEvent.defaultPrevented) {\n      return\n    }\n\n    if (!activeElement || !nextElement) {\n      // Some weirdness is happening, so we bail\n      // todo: change tests that use empty divs to avoid this check\n      return\n    }\n\n    const isCycling = Boolean(this._interval)\n    this.pause()\n\n    this._isSliding = true\n\n    this._setActiveIndicatorElement(nextElementIndex)\n    this._activeElement = nextElement\n\n    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END\n    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV\n\n    nextElement.classList.add(orderClassName)\n\n    reflow(nextElement)\n\n    activeElement.classList.add(directionalClassName)\n    nextElement.classList.add(directionalClassName)\n\n    const completeCallBack = () => {\n      nextElement.classList.remove(directionalClassName, orderClassName)\n      nextElement.classList.add(CLASS_NAME_ACTIVE)\n\n      activeElement.classList.remove(CLASS_NAME_ACTIVE, orderClassName, directionalClassName)\n\n      this._isSliding = false\n\n      triggerEvent(EVENT_SLID)\n    }\n\n    this._queueCallback(completeCallBack, activeElement, this._isAnimated())\n\n    if (isCycling) {\n      this.cycle()\n    }\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_SLIDE)\n  }\n\n  _getActive() {\n    return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element)\n  }\n\n  _getItems() {\n    return SelectorEngine.find(SELECTOR_ITEM, this._element)\n  }\n\n  _clearInterval() {\n    if (this._interval) {\n      clearInterval(this._interval)\n      this._interval = null\n    }\n  }\n\n  _directionToOrder(direction) {\n    if (isRTL()) {\n      return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT\n    }\n\n    return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV\n  }\n\n  _orderToDirection(order) {\n    if (isRTL()) {\n      return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT\n    }\n\n    return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Carousel.getOrCreateInstance(this, config)\n\n      if (typeof config === 'number') {\n        data.to(config)\n        return\n      }\n\n      if (typeof config === 'string') {\n        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_SLIDE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n    return\n  }\n\n  event.preventDefault()\n\n  const carousel = Carousel.getOrCreateInstance(target)\n  const slideIndex = this.getAttribute('data-bs-slide-to')\n\n  if (slideIndex) {\n    carousel.to(slideIndex)\n    carousel._maybeEnableCycle()\n    return\n  }\n\n  if (Manipulator.getDataAttribute(this, 'slide') === 'next') {\n    carousel.next()\n    carousel._maybeEnableCycle()\n    return\n  }\n\n  carousel.prev()\n  carousel._maybeEnableCycle()\n})\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE)\n\n  for (const carousel of carousels) {\n    Carousel.getOrCreateInstance(carousel)\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Carousel)\n\nexport default Carousel\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport {\n  defineJQueryPlugin,\n  getElement,\n  reflow\n} from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport BaseComponent from './base-component.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'collapse'\nconst DATA_KEY = 'bs.collapse'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_COLLAPSE = 'collapse'\nconst CLASS_NAME_COLLAPSING = 'collapsing'\nconst CLASS_NAME_COLLAPSED = 'collapsed'\nconst CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`\nconst CLASS_NAME_HORIZONTAL = 'collapse-horizontal'\n\nconst WIDTH = 'width'\nconst HEIGHT = 'height'\n\nconst SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"collapse\"]'\n\nconst Default = {\n  parent: null,\n  toggle: true\n}\n\nconst DefaultType = {\n  parent: '(null|element)',\n  toggle: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Collapse extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._isTransitioning = false\n    this._triggerArray = []\n\n    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE)\n\n    for (const elem of toggleList) {\n      const selector = SelectorEngine.getSelectorFromElement(elem)\n      const filterElement = SelectorEngine.find(selector)\n        .filter(foundElement => foundElement === this._element)\n\n      if (selector !== null && filterElement.length) {\n        this._triggerArray.push(elem)\n      }\n    }\n\n    this._initializeChildren()\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown())\n    }\n\n    if (this._config.toggle) {\n      this.toggle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    if (this._isShown()) {\n      this.hide()\n    } else {\n      this.show()\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || this._isShown()) {\n      return\n    }\n\n    let activeChildren = []\n\n    // find active children\n    if (this._config.parent) {\n      activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES)\n        .filter(element => element !== this._element)\n        .map(element => Collapse.getOrCreateInstance(element, { toggle: false }))\n    }\n\n    if (activeChildren.length && activeChildren[0]._isTransitioning) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    for (const activeInstance of activeChildren) {\n      activeInstance.hide()\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE)\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n\n    this._element.style[dimension] = 0\n\n    this._addAriaAndCollapsedClass(this._triggerArray, true)\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n      this._element.style[dimension] = ''\n\n      EventHandler.trigger(this._element, EVENT_SHOWN)\n    }\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1)\n    const scrollSize = `scroll${capitalizedDimension}`\n\n    this._queueCallback(complete, this._element, true)\n    this._element.style[dimension] = `${this._element[scrollSize]}px`\n  }\n\n  hide() {\n    if (this._isTransitioning || !this._isShown()) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`\n\n    reflow(this._element)\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n    for (const trigger of this._triggerArray) {\n      const element = SelectorEngine.getElementFromSelector(trigger)\n\n      if (element && !this._isShown(element)) {\n        this._addAriaAndCollapsedClass([trigger], false)\n      }\n    }\n\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE)\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._element.style[dimension] = ''\n\n    this._queueCallback(complete, this._element, true)\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    config.toggle = Boolean(config.toggle) // Coerce string values\n    config.parent = getElement(config.parent)\n    return config\n  }\n\n  _getDimension() {\n    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT\n  }\n\n  _initializeChildren() {\n    if (!this._config.parent) {\n      return\n    }\n\n    const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE)\n\n    for (const element of children) {\n      const selected = SelectorEngine.getElementFromSelector(element)\n\n      if (selected) {\n        this._addAriaAndCollapsedClass([element], this._isShown(selected))\n      }\n    }\n  }\n\n  _getFirstLevelChildren(selector) {\n    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent)\n    // remove children if greater depth\n    return SelectorEngine.find(selector, this._config.parent).filter(element => !children.includes(element))\n  }\n\n  _addAriaAndCollapsedClass(triggerArray, isOpen) {\n    if (!triggerArray.length) {\n      return\n    }\n\n    for (const element of triggerArray) {\n      element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen)\n      element.setAttribute('aria-expanded', isOpen)\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    const _config = {}\n    if (typeof config === 'string' && /show|hide/.test(config)) {\n      _config.toggle = false\n    }\n\n    return this.each(function () {\n      const data = Collapse.getOrCreateInstance(this, _config)\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.target.tagName === 'A' || (event.delegateTarget && event.delegateTarget.tagName === 'A')) {\n    event.preventDefault()\n  }\n\n  for (const element of SelectorEngine.getMultipleElementsFromSelector(this)) {\n    Collapse.getOrCreateInstance(element, { toggle: false }).toggle()\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Collapse)\n\nexport default Collapse\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dropdown.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport * as Popper from '@popperjs/core'\nimport {\n  defineJQueryPlugin,\n  execute,\n  getElement,\n  getNextActiveElement,\n  isDisabled,\n  isElement,\n  isRTL,\n  isVisible,\n  noop\n} from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport BaseComponent from './base-component.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'dropdown'\nconst DATA_KEY = 'bs.dropdown'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst ESCAPE_KEY = 'Escape'\nconst TAB_KEY = 'Tab'\nconst ARROW_UP_KEY = 'ArrowUp'\nconst ARROW_DOWN_KEY = 'ArrowDown'\nconst RIGHT_MOUSE_BUTTON = 2 // MouseEvent.button value for the secondary button, usually the right button\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_DROPUP = 'dropup'\nconst CLASS_NAME_DROPEND = 'dropend'\nconst CLASS_NAME_DROPSTART = 'dropstart'\nconst CLASS_NAME_DROPUP_CENTER = 'dropup-center'\nconst CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center'\n\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)'\nconst SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE}.${CLASS_NAME_SHOW}`\nconst SELECTOR_MENU = '.dropdown-menu'\nconst SELECTOR_NAVBAR = '.navbar'\nconst SELECTOR_NAVBAR_NAV = '.navbar-nav'\nconst SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'\n\nconst PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start'\nconst PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end'\nconst PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start'\nconst PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end'\nconst PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start'\nconst PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start'\nconst PLACEMENT_TOPCENTER = 'top'\nconst PLACEMENT_BOTTOMCENTER = 'bottom'\n\nconst Default = {\n  autoClose: true,\n  boundary: 'clippingParents',\n  display: 'dynamic',\n  offset: [0, 2],\n  popperConfig: null,\n  reference: 'toggle'\n}\n\nconst DefaultType = {\n  autoClose: '(boolean|string)',\n  boundary: '(string|element)',\n  display: 'string',\n  offset: '(array|string|function)',\n  popperConfig: '(null|object|function)',\n  reference: '(string|element|object)'\n}\n\n/**\n * Class definition\n */\n\nclass Dropdown extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._popper = null\n    this._parent = this._element.parentNode // dropdown wrapper\n    // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n    this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] ||\n      SelectorEngine.prev(this._element, SELECTOR_MENU)[0] ||\n      SelectorEngine.findOne(SELECTOR_MENU, this._parent)\n    this._inNavbar = this._detectNavbar()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    return this._isShown() ? this.hide() : this.show()\n  }\n\n  show() {\n    if (isDisabled(this._element) || this._isShown()) {\n      return\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, relatedTarget)\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._createPopper()\n\n    // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n    if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.on(element, 'mouseover', noop)\n      }\n    }\n\n    this._element.focus()\n    this._element.setAttribute('aria-expanded', true)\n\n    this._menu.classList.add(CLASS_NAME_SHOW)\n    this._element.classList.add(CLASS_NAME_SHOW)\n    EventHandler.trigger(this._element, EVENT_SHOWN, relatedTarget)\n  }\n\n  hide() {\n    if (isDisabled(this._element) || !this._isShown()) {\n      return\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    }\n\n    this._completeHide(relatedTarget)\n  }\n\n  dispose() {\n    if (this._popper) {\n      this._popper.destroy()\n    }\n\n    super.dispose()\n  }\n\n  update() {\n    this._inNavbar = this._detectNavbar()\n    if (this._popper) {\n      this._popper.update()\n    }\n  }\n\n  // Private\n  _completeHide(relatedTarget) {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE, relatedTarget)\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.off(element, 'mouseover', noop)\n      }\n    }\n\n    if (this._popper) {\n      this._popper.destroy()\n    }\n\n    this._menu.classList.remove(CLASS_NAME_SHOW)\n    this._element.classList.remove(CLASS_NAME_SHOW)\n    this._element.setAttribute('aria-expanded', 'false')\n    Manipulator.removeDataAttribute(this._menu, 'popper')\n    EventHandler.trigger(this._element, EVENT_HIDDEN, relatedTarget)\n  }\n\n  _getConfig(config) {\n    config = super._getConfig(config)\n\n    if (typeof config.reference === 'object' && !isElement(config.reference) &&\n      typeof config.reference.getBoundingClientRect !== 'function'\n    ) {\n      // Popper virtual elements require a getBoundingClientRect method\n      throw new TypeError(`${NAME.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`)\n    }\n\n    return config\n  }\n\n  _createPopper() {\n    if (typeof Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)')\n    }\n\n    let referenceElement = this._element\n\n    if (this._config.reference === 'parent') {\n      referenceElement = this._parent\n    } else if (isElement(this._config.reference)) {\n      referenceElement = getElement(this._config.reference)\n    } else if (typeof this._config.reference === 'object') {\n      referenceElement = this._config.reference\n    }\n\n    const popperConfig = this._getPopperConfig()\n    this._popper = Popper.createPopper(referenceElement, this._menu, popperConfig)\n  }\n\n  _isShown() {\n    return this._menu.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  _getPlacement() {\n    const parentDropdown = this._parent\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n      return PLACEMENT_RIGHT\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n      return PLACEMENT_LEFT\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {\n      return PLACEMENT_TOPCENTER\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {\n      return PLACEMENT_BOTTOMCENTER\n    }\n\n    // We need to trim the value because custom properties can also include spaces\n    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end'\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP\n    }\n\n    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM\n  }\n\n  _detectNavbar() {\n    return this._element.closest(SELECTOR_NAVBAR) !== null\n  }\n\n  _getOffset() {\n    const { offset } = this._config\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(value => Number.parseInt(value, 10))\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element)\n    }\n\n    return offset\n  }\n\n  _getPopperConfig() {\n    const defaultBsPopperConfig = {\n      placement: this._getPlacement(),\n      modifiers: [{\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      },\n      {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }]\n    }\n\n    // Disable Popper if we have a static display or Dropdown is in Navbar\n    if (this._inNavbar || this._config.display === 'static') {\n      Manipulator.setDataAttribute(this._menu, 'popper', 'static') // todo:v6 remove\n      defaultBsPopperConfig.modifiers = [{\n        name: 'applyStyles',\n        enabled: false\n      }]\n    }\n\n    return {\n      ...defaultBsPopperConfig,\n      ...execute(this._config.popperConfig, [defaultBsPopperConfig])\n    }\n  }\n\n  _selectMenuItem({ key, target }) {\n    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(element => isVisible(element))\n\n    if (!items.length) {\n      return\n    }\n\n    // if target isn't included in items (e.g. when expanding the dropdown)\n    // allow cycling to get the last item in case key equals ARROW_UP_KEY\n    getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus()\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Dropdown.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n\n  static clearMenus(event) {\n    if (event.button === RIGHT_MOUSE_BUTTON || (event.type === 'keyup' && event.key !== TAB_KEY)) {\n      return\n    }\n\n    const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN)\n\n    for (const toggle of openToggles) {\n      const context = Dropdown.getInstance(toggle)\n      if (!context || context._config.autoClose === false) {\n        continue\n      }\n\n      const composedPath = event.composedPath()\n      const isMenuTarget = composedPath.includes(context._menu)\n      if (\n        composedPath.includes(context._element) ||\n        (context._config.autoClose === 'inside' && !isMenuTarget) ||\n        (context._config.autoClose === 'outside' && isMenuTarget)\n      ) {\n        continue\n      }\n\n      // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n      if (context._menu.contains(event.target) && ((event.type === 'keyup' && event.key === TAB_KEY) || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n        continue\n      }\n\n      const relatedTarget = { relatedTarget: context._element }\n\n      if (event.type === 'click') {\n        relatedTarget.clickEvent = event\n      }\n\n      context._completeHide(relatedTarget)\n    }\n  }\n\n  static dataApiKeydownHandler(event) {\n    // If not an UP | DOWN | ESCAPE key => not a dropdown command\n    // If input/textarea && if key is other than ESCAPE => not a dropdown command\n\n    const isInput = /input|textarea/i.test(event.target.tagName)\n    const isEscapeEvent = event.key === ESCAPE_KEY\n    const isUpOrDownEvent = [ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)\n\n    if (!isUpOrDownEvent && !isEscapeEvent) {\n      return\n    }\n\n    if (isInput && !isEscapeEvent) {\n      return\n    }\n\n    event.preventDefault()\n\n    // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE) ?\n      this :\n      (SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE)[0] ||\n        SelectorEngine.next(this, SELECTOR_DATA_TOGGLE)[0] ||\n        SelectorEngine.findOne(SELECTOR_DATA_TOGGLE, event.delegateTarget.parentNode))\n\n    const instance = Dropdown.getOrCreateInstance(getToggleButton)\n\n    if (isUpOrDownEvent) {\n      event.stopPropagation()\n      instance.show()\n      instance._selectMenuItem(event)\n      return\n    }\n\n    if (instance._isShown()) { // else is escape and we check if it is shown\n      event.stopPropagation()\n      instance.hide()\n      getToggleButton.focus()\n    }\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE, Dropdown.dataApiKeydownHandler)\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler)\nEventHandler.on(document, EVENT_CLICK_DATA_API, Dropdown.clearMenus)\nEventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus)\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  event.preventDefault()\n  Dropdown.getOrCreateInstance(this).toggle()\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Dropdown)\n\nexport default Dropdown\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/scrollBar.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Manipulator from '../dom/manipulator.js'\nimport { isElement } from './index.js'\n\n/**\n * Constants\n */\n\nconst SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top'\nconst SELECTOR_STICKY_CONTENT = '.sticky-top'\nconst PROPERTY_PADDING = 'padding-right'\nconst PROPERTY_MARGIN = 'margin-right'\n\n/**\n * Class definition\n */\n\nclass ScrollBarHelper {\n  constructor() {\n    this._element = document.body\n  }\n\n  // Public\n  getWidth() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n    const documentWidth = document.documentElement.clientWidth\n    return Math.abs(window.innerWidth - documentWidth)\n  }\n\n  hide() {\n    const width = this.getWidth()\n    this._disableOverFlow()\n    // give padding to element to balance the hidden scrollbar width\n    this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width)\n    // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n    this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width)\n    this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width)\n  }\n\n  reset() {\n    this._resetElementAttributes(this._element, 'overflow')\n    this._resetElementAttributes(this._element, PROPERTY_PADDING)\n    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING)\n    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN)\n  }\n\n  isOverflowing() {\n    return this.getWidth() > 0\n  }\n\n  // Private\n  _disableOverFlow() {\n    this._saveInitialAttribute(this._element, 'overflow')\n    this._element.style.overflow = 'hidden'\n  }\n\n  _setElementAttributes(selector, styleProperty, callback) {\n    const scrollbarWidth = this.getWidth()\n    const manipulationCallBack = element => {\n      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n        return\n      }\n\n      this._saveInitialAttribute(element, styleProperty)\n      const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty)\n      element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`)\n    }\n\n    this._applyManipulationCallback(selector, manipulationCallBack)\n  }\n\n  _saveInitialAttribute(element, styleProperty) {\n    const actualValue = element.style.getPropertyValue(styleProperty)\n    if (actualValue) {\n      Manipulator.setDataAttribute(element, styleProperty, actualValue)\n    }\n  }\n\n  _resetElementAttributes(selector, styleProperty) {\n    const manipulationCallBack = element => {\n      const value = Manipulator.getDataAttribute(element, styleProperty)\n      // We only want to remove the property if the value is `null`; the value can also be zero\n      if (value === null) {\n        element.style.removeProperty(styleProperty)\n        return\n      }\n\n      Manipulator.removeDataAttribute(element, styleProperty)\n      element.style.setProperty(styleProperty, value)\n    }\n\n    this._applyManipulationCallback(selector, manipulationCallBack)\n  }\n\n  _applyManipulationCallback(selector, callBack) {\n    if (isElement(selector)) {\n      callBack(selector)\n      return\n    }\n\n    for (const sel of SelectorEngine.find(selector, this._element)) {\n      callBack(sel)\n    }\n  }\n}\n\nexport default ScrollBarHelper\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/backdrop.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport { execute, executeAfterTransition, getElement, reflow } from './index.js'\nimport Config from './config.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'backdrop'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst EVENT_MOUSEDOWN = `mousedown.bs.${NAME}`\n\nconst Default = {\n  className: 'modal-backdrop',\n  clickCallback: null,\n  isAnimated: false,\n  isVisible: true, // if false, we use the backdrop helper without adding any element to the dom\n  rootElement: 'body' // give the choice to place backdrop under different elements\n}\n\nconst DefaultType = {\n  className: 'string',\n  clickCallback: '(function|null)',\n  isAnimated: 'boolean',\n  isVisible: 'boolean',\n  rootElement: '(element|string)'\n}\n\n/**\n * Class definition\n */\n\nclass Backdrop extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isAppended = false\n    this._element = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show(callback) {\n    if (!this._config.isVisible) {\n      execute(callback)\n      return\n    }\n\n    this._append()\n\n    const element = this._getElement()\n    if (this._config.isAnimated) {\n      reflow(element)\n    }\n\n    element.classList.add(CLASS_NAME_SHOW)\n\n    this._emulateAnimation(() => {\n      execute(callback)\n    })\n  }\n\n  hide(callback) {\n    if (!this._config.isVisible) {\n      execute(callback)\n      return\n    }\n\n    this._getElement().classList.remove(CLASS_NAME_SHOW)\n\n    this._emulateAnimation(() => {\n      this.dispose()\n      execute(callback)\n    })\n  }\n\n  dispose() {\n    if (!this._isAppended) {\n      return\n    }\n\n    EventHandler.off(this._element, EVENT_MOUSEDOWN)\n\n    this._element.remove()\n    this._isAppended = false\n  }\n\n  // Private\n  _getElement() {\n    if (!this._element) {\n      const backdrop = document.createElement('div')\n      backdrop.className = this._config.className\n      if (this._config.isAnimated) {\n        backdrop.classList.add(CLASS_NAME_FADE)\n      }\n\n      this._element = backdrop\n    }\n\n    return this._element\n  }\n\n  _configAfterMerge(config) {\n    // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n    config.rootElement = getElement(config.rootElement)\n    return config\n  }\n\n  _append() {\n    if (this._isAppended) {\n      return\n    }\n\n    const element = this._getElement()\n    this._config.rootElement.append(element)\n\n    EventHandler.on(element, EVENT_MOUSEDOWN, () => {\n      execute(this._config.clickCallback)\n    })\n\n    this._isAppended = true\n  }\n\n  _emulateAnimation(callback) {\n    executeAfterTransition(callback, this._getElement(), this._config.isAnimated)\n  }\n}\n\nexport default Backdrop\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Config from './config.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'focustrap'\nconst DATA_KEY = 'bs.focustrap'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`\n\nconst TAB_KEY = 'Tab'\nconst TAB_NAV_FORWARD = 'forward'\nconst TAB_NAV_BACKWARD = 'backward'\n\nconst Default = {\n  autofocus: true,\n  trapElement: null // The element to trap focus inside of\n}\n\nconst DefaultType = {\n  autofocus: 'boolean',\n  trapElement: 'element'\n}\n\n/**\n * Class definition\n */\n\nclass FocusTrap extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isActive = false\n    this._lastTabNavDirection = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  activate() {\n    if (this._isActive) {\n      return\n    }\n\n    if (this._config.autofocus) {\n      this._config.trapElement.focus()\n    }\n\n    EventHandler.off(document, EVENT_KEY) // guard against infinite focus loop\n    EventHandler.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event))\n    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event))\n\n    this._isActive = true\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return\n    }\n\n    this._isActive = false\n    EventHandler.off(document, EVENT_KEY)\n  }\n\n  // Private\n  _handleFocusin(event) {\n    const { trapElement } = this._config\n\n    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n      return\n    }\n\n    const elements = SelectorEngine.focusableChildren(trapElement)\n\n    if (elements.length === 0) {\n      trapElement.focus()\n    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus()\n    } else {\n      elements[0].focus()\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== TAB_KEY) {\n      return\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD\n  }\n}\n\nexport default FocusTrap\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { defineJQueryPlugin, isRTL, isVisible, reflow } from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport ScrollBarHelper from './util/scrollbar.js'\nimport BaseComponent from './base-component.js'\nimport Backdrop from './util/backdrop.js'\nimport FocusTrap from './util/focustrap.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'modal'\nconst DATA_KEY = 'bs.modal'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst ESCAPE_KEY = 'Escape'\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_RESIZE = `resize${EVENT_KEY}`\nconst EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY}`\nconst EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY}`\nconst EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_OPEN = 'modal-open'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_STATIC = 'modal-static'\n\nconst OPEN_SELECTOR = '.modal.show'\nconst SELECTOR_DIALOG = '.modal-dialog'\nconst SELECTOR_MODAL_BODY = '.modal-body'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"modal\"]'\n\nconst Default = {\n  backdrop: true,\n  focus: true,\n  keyboard: true\n}\n\nconst DefaultType = {\n  backdrop: '(boolean|string)',\n  focus: 'boolean',\n  keyboard: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Modal extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element)\n    this._backdrop = this._initializeBackDrop()\n    this._focustrap = this._initializeFocusTrap()\n    this._isShown = false\n    this._isTransitioning = false\n    this._scrollBar = new ScrollBarHelper()\n\n    this._addEventListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget)\n  }\n\n  show(relatedTarget) {\n    if (this._isShown || this._isTransitioning) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, {\n      relatedTarget\n    })\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = true\n    this._isTransitioning = true\n\n    this._scrollBar.hide()\n\n    document.body.classList.add(CLASS_NAME_OPEN)\n\n    this._adjustDialog()\n\n    this._backdrop.show(() => this._showElement(relatedTarget))\n  }\n\n  hide() {\n    if (!this._isShown || this._isTransitioning) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = false\n    this._isTransitioning = true\n    this._focustrap.deactivate()\n\n    this._element.classList.remove(CLASS_NAME_SHOW)\n\n    this._queueCallback(() => this._hideModal(), this._element, this._isAnimated())\n  }\n\n  dispose() {\n    for (const htmlElement of [window, this._dialog]) {\n      EventHandler.off(htmlElement, EVENT_KEY)\n    }\n\n    this._backdrop.dispose()\n    this._focustrap.deactivate()\n    super.dispose()\n  }\n\n  handleUpdate() {\n    this._adjustDialog()\n  }\n\n  // Private\n  _initializeBackDrop() {\n    return new Backdrop({\n      isVisible: Boolean(this._config.backdrop), // 'static' option will be translated to true, and booleans will keep their value,\n      isAnimated: this._isAnimated()\n    })\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    })\n  }\n\n  _showElement(relatedTarget) {\n    // try to append dynamic modal\n    if (!document.body.contains(this._element)) {\n      document.body.append(this._element)\n    }\n\n    this._element.style.display = 'block'\n    this._element.removeAttribute('aria-hidden')\n    this._element.setAttribute('aria-modal', true)\n    this._element.setAttribute('role', 'dialog')\n    this._element.scrollTop = 0\n\n    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog)\n    if (modalBody) {\n      modalBody.scrollTop = 0\n    }\n\n    reflow(this._element)\n\n    this._element.classList.add(CLASS_NAME_SHOW)\n\n    const transitionComplete = () => {\n      if (this._config.focus) {\n        this._focustrap.activate()\n      }\n\n      this._isTransitioning = false\n      EventHandler.trigger(this._element, EVENT_SHOWN, {\n        relatedTarget\n      })\n    }\n\n    this._queueCallback(transitionComplete, this._dialog, this._isAnimated())\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n      if (event.key !== ESCAPE_KEY) {\n        return\n      }\n\n      if (this._config.keyboard) {\n        this.hide()\n        return\n      }\n\n      this._triggerBackdropTransition()\n    })\n\n    EventHandler.on(window, EVENT_RESIZE, () => {\n      if (this._isShown && !this._isTransitioning) {\n        this._adjustDialog()\n      }\n    })\n\n    EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, event => {\n      // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks\n      EventHandler.one(this._element, EVENT_CLICK_DISMISS, event2 => {\n        if (this._element !== event.target || this._element !== event2.target) {\n          return\n        }\n\n        if (this._config.backdrop === 'static') {\n          this._triggerBackdropTransition()\n          return\n        }\n\n        if (this._config.backdrop) {\n          this.hide()\n        }\n      })\n    })\n  }\n\n  _hideModal() {\n    this._element.style.display = 'none'\n    this._element.setAttribute('aria-hidden', true)\n    this._element.removeAttribute('aria-modal')\n    this._element.removeAttribute('role')\n    this._isTransitioning = false\n\n    this._backdrop.hide(() => {\n      document.body.classList.remove(CLASS_NAME_OPEN)\n      this._resetAdjustments()\n      this._scrollBar.reset()\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    })\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_FADE)\n  }\n\n  _triggerBackdropTransition() {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight\n    const initialOverflowY = this._element.style.overflowY\n    // return if the following background transition hasn't yet completed\n    if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {\n      return\n    }\n\n    if (!isModalOverflowing) {\n      this._element.style.overflowY = 'hidden'\n    }\n\n    this._element.classList.add(CLASS_NAME_STATIC)\n    this._queueCallback(() => {\n      this._element.classList.remove(CLASS_NAME_STATIC)\n      this._queueCallback(() => {\n        this._element.style.overflowY = initialOverflowY\n      }, this._dialog)\n    }, this._dialog)\n\n    this._element.focus()\n  }\n\n  /**\n   * The following methods are used to handle overflowing modals\n   */\n\n  _adjustDialog() {\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight\n    const scrollbarWidth = this._scrollBar.getWidth()\n    const isBodyOverflowing = scrollbarWidth > 0\n\n    if (isBodyOverflowing && !isModalOverflowing) {\n      const property = isRTL() ? 'paddingLeft' : 'paddingRight'\n      this._element.style[property] = `${scrollbarWidth}px`\n    }\n\n    if (!isBodyOverflowing && isModalOverflowing) {\n      const property = isRTL() ? 'paddingRight' : 'paddingLeft'\n      this._element.style[property] = `${scrollbarWidth}px`\n    }\n  }\n\n  _resetAdjustments() {\n    this._element.style.paddingLeft = ''\n    this._element.style.paddingRight = ''\n  }\n\n  // Static\n  static jQueryInterface(config, relatedTarget) {\n    return this.each(function () {\n      const data = Modal.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](relatedTarget)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  EventHandler.one(target, EVENT_SHOW, showEvent => {\n    if (showEvent.defaultPrevented) {\n      // only register focus restorer if modal will actually get shown\n      return\n    }\n\n    EventHandler.one(target, EVENT_HIDDEN, () => {\n      if (isVisible(this)) {\n        this.focus()\n      }\n    })\n  })\n\n  // avoid conflict when clicking modal toggler while another one is open\n  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR)\n  if (alreadyOpen) {\n    Modal.getInstance(alreadyOpen).hide()\n  }\n\n  const data = Modal.getOrCreateInstance(target)\n\n  data.toggle(this)\n})\n\nenableDismissTrigger(Modal)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Modal)\n\nexport default Modal\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap offcanvas.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport {\n  defineJQueryPlugin,\n  isDisabled,\n  isVisible\n} from './util/index.js'\nimport ScrollBarHelper from './util/scrollbar.js'\nimport EventHandler from './dom/event-handler.js'\nimport BaseComponent from './base-component.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport Backdrop from './util/backdrop.js'\nimport FocusTrap from './util/focustrap.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'offcanvas'\nconst DATA_KEY = 'bs.offcanvas'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\nconst ESCAPE_KEY = 'Escape'\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_SHOWING = 'showing'\nconst CLASS_NAME_HIDING = 'hiding'\nconst CLASS_NAME_BACKDROP = 'offcanvas-backdrop'\nconst OPEN_SELECTOR = '.offcanvas.show'\n\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_RESIZE = `resize${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`\n\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"offcanvas\"]'\n\nconst Default = {\n  backdrop: true,\n  keyboard: true,\n  scroll: false\n}\n\nconst DefaultType = {\n  backdrop: '(boolean|string)',\n  keyboard: 'boolean',\n  scroll: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Offcanvas extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._isShown = false\n    this._backdrop = this._initializeBackDrop()\n    this._focustrap = this._initializeFocusTrap()\n    this._addEventListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget)\n  }\n\n  show(relatedTarget) {\n    if (this._isShown) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, { relatedTarget })\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = true\n    this._backdrop.show()\n\n    if (!this._config.scroll) {\n      new ScrollBarHelper().hide()\n    }\n\n    this._element.setAttribute('aria-modal', true)\n    this._element.setAttribute('role', 'dialog')\n    this._element.classList.add(CLASS_NAME_SHOWING)\n\n    const completeCallBack = () => {\n      if (!this._config.scroll || this._config.backdrop) {\n        this._focustrap.activate()\n      }\n\n      this._element.classList.add(CLASS_NAME_SHOW)\n      this._element.classList.remove(CLASS_NAME_SHOWING)\n      EventHandler.trigger(this._element, EVENT_SHOWN, { relatedTarget })\n    }\n\n    this._queueCallback(completeCallBack, this._element, true)\n  }\n\n  hide() {\n    if (!this._isShown) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    this._focustrap.deactivate()\n    this._element.blur()\n    this._isShown = false\n    this._element.classList.add(CLASS_NAME_HIDING)\n    this._backdrop.hide()\n\n    const completeCallback = () => {\n      this._element.classList.remove(CLASS_NAME_SHOW, CLASS_NAME_HIDING)\n      this._element.removeAttribute('aria-modal')\n      this._element.removeAttribute('role')\n\n      if (!this._config.scroll) {\n        new ScrollBarHelper().reset()\n      }\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._queueCallback(completeCallback, this._element, true)\n  }\n\n  dispose() {\n    this._backdrop.dispose()\n    this._focustrap.deactivate()\n    super.dispose()\n  }\n\n  // Private\n  _initializeBackDrop() {\n    const clickCallback = () => {\n      if (this._config.backdrop === 'static') {\n        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n        return\n      }\n\n      this.hide()\n    }\n\n    // 'static' option will be translated to true, and booleans will keep their value\n    const isVisible = Boolean(this._config.backdrop)\n\n    return new Backdrop({\n      className: CLASS_NAME_BACKDROP,\n      isVisible,\n      isAnimated: true,\n      rootElement: this._element.parentNode,\n      clickCallback: isVisible ? clickCallback : null\n    })\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    })\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n      if (event.key !== ESCAPE_KEY) {\n        return\n      }\n\n      if (this._config.keyboard) {\n        this.hide()\n        return\n      }\n\n      EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n    })\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Offcanvas.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](this)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  if (isDisabled(this)) {\n    return\n  }\n\n  EventHandler.one(target, EVENT_HIDDEN, () => {\n    // focus on trigger when it is closed\n    if (isVisible(this)) {\n      this.focus()\n    }\n  })\n\n  // avoid conflict when clicking a toggler of an offcanvas, while another is open\n  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR)\n  if (alreadyOpen && alreadyOpen !== target) {\n    Offcanvas.getInstance(alreadyOpen).hide()\n  }\n\n  const data = Offcanvas.getOrCreateInstance(target)\n  data.toggle(this)\n})\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {\n    Offcanvas.getOrCreateInstance(selector).show()\n  }\n})\n\nEventHandler.on(window, EVENT_RESIZE, () => {\n  for (const element of SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')) {\n    if (getComputedStyle(element).position !== 'fixed') {\n      Offcanvas.getOrCreateInstance(element).hide()\n    }\n  }\n})\n\nenableDismissTrigger(Offcanvas)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Offcanvas)\n\nexport default Offcanvas\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/sanitizer.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst uriAttributes = new Set([\n  'background',\n  'cite',\n  'href',\n  'itemtype',\n  'longdesc',\n  'poster',\n  'src',\n  'xlink:href'\n])\n\nconst ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i\n\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n *\n * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i\n\nconst allowedAttribute = (attribute, allowedAttributeList) => {\n  const attributeName = attribute.nodeName.toLowerCase()\n\n  if (allowedAttributeList.includes(attributeName)) {\n    if (uriAttributes.has(attributeName)) {\n      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue))\n    }\n\n    return true\n  }\n\n  // Check if a regular expression validates the attribute.\n  return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp)\n    .some(regex => regex.test(attributeName))\n}\n\nexport const DefaultAllowlist = {\n  // Global attributes allowed on any supplied element below.\n  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n  a: ['target', 'href', 'title', 'rel'],\n  area: [],\n  b: [],\n  br: [],\n  col: [],\n  code: [],\n  div: [],\n  em: [],\n  hr: [],\n  h1: [],\n  h2: [],\n  h3: [],\n  h4: [],\n  h5: [],\n  h6: [],\n  i: [],\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n  li: [],\n  ol: [],\n  p: [],\n  pre: [],\n  s: [],\n  small: [],\n  span: [],\n  sub: [],\n  sup: [],\n  strong: [],\n  u: [],\n  ul: []\n}\n\nexport function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n  if (!unsafeHtml.length) {\n    return unsafeHtml\n  }\n\n  if (sanitizeFunction && typeof sanitizeFunction === 'function') {\n    return sanitizeFunction(unsafeHtml)\n  }\n\n  const domParser = new window.DOMParser()\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html')\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'))\n\n  for (const element of elements) {\n    const elementName = element.nodeName.toLowerCase()\n\n    if (!Object.keys(allowList).includes(elementName)) {\n      element.remove()\n\n      continue\n    }\n\n    const attributeList = [].concat(...element.attributes)\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || [])\n\n    for (const attribute of attributeList) {\n      if (!allowedAttribute(attribute, allowedAttributes)) {\n        element.removeAttribute(attribute.nodeName)\n      }\n    }\n  }\n\n  return createdDocument.body.innerHTML\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/template-factory.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { DefaultAllowlist, sanitizeHtml } from './sanitizer.js'\nimport { execute, getElement, isElement } from './index.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Config from './config.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'TemplateFactory'\n\nconst Default = {\n  allowList: DefaultAllowlist,\n  content: {}, // { selector : text ,  selector2 : text2 , }\n  extraClass: '',\n  html: false,\n  sanitize: true,\n  sanitizeFn: null,\n  template: '<div></div>'\n}\n\nconst DefaultType = {\n  allowList: 'object',\n  content: 'object',\n  extraClass: '(string|function)',\n  html: 'boolean',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  template: 'string'\n}\n\nconst DefaultContentType = {\n  entry: '(string|element|function|null)',\n  selector: '(string|element)'\n}\n\n/**\n * Class definition\n */\n\nclass TemplateFactory extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  getContent() {\n    return Object.values(this._config.content)\n      .map(config => this._resolvePossibleFunction(config))\n      .filter(Boolean)\n  }\n\n  hasContent() {\n    return this.getContent().length > 0\n  }\n\n  changeContent(content) {\n    this._checkContent(content)\n    this._config.content = { ...this._config.content, ...content }\n    return this\n  }\n\n  toHtml() {\n    const templateWrapper = document.createElement('div')\n    templateWrapper.innerHTML = this._maybeSanitize(this._config.template)\n\n    for (const [selector, text] of Object.entries(this._config.content)) {\n      this._setContent(templateWrapper, text, selector)\n    }\n\n    const template = templateWrapper.children[0]\n    const extraClass = this._resolvePossibleFunction(this._config.extraClass)\n\n    if (extraClass) {\n      template.classList.add(...extraClass.split(' '))\n    }\n\n    return template\n  }\n\n  // Private\n  _typeCheckConfig(config) {\n    super._typeCheckConfig(config)\n    this._checkContent(config.content)\n  }\n\n  _checkContent(arg) {\n    for (const [selector, content] of Object.entries(arg)) {\n      super._typeCheckConfig({ selector, entry: content }, DefaultContentType)\n    }\n  }\n\n  _setContent(template, content, selector) {\n    const templateElement = SelectorEngine.findOne(selector, template)\n\n    if (!templateElement) {\n      return\n    }\n\n    content = this._resolvePossibleFunction(content)\n\n    if (!content) {\n      templateElement.remove()\n      return\n    }\n\n    if (isElement(content)) {\n      this._putElementInTemplate(getElement(content), templateElement)\n      return\n    }\n\n    if (this._config.html) {\n      templateElement.innerHTML = this._maybeSanitize(content)\n      return\n    }\n\n    templateElement.textContent = content\n  }\n\n  _maybeSanitize(arg) {\n    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg\n  }\n\n  _resolvePossibleFunction(arg) {\n    return execute(arg, [this])\n  }\n\n  _putElementInTemplate(element, templateElement) {\n    if (this._config.html) {\n      templateElement.innerHTML = ''\n      templateElement.append(element)\n      return\n    }\n\n    templateElement.textContent = element.textContent\n  }\n}\n\nexport default TemplateFactory\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport * as Popper from '@popperjs/core'\nimport { defineJQueryPlugin, execute, findShadowRoot, getElement, getUID, isRTL, noop } from './util/index.js'\nimport { DefaultAllowlist } from './util/sanitizer.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport BaseComponent from './base-component.js'\nimport TemplateFactory from './util/template-factory.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'tooltip'\nconst DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn'])\n\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_MODAL = 'modal'\nconst CLASS_NAME_SHOW = 'show'\n\nconst SELECTOR_TOOLTIP_INNER = '.tooltip-inner'\nconst SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`\n\nconst EVENT_MODAL_HIDE = 'hide.bs.modal'\n\nconst TRIGGER_HOVER = 'hover'\nconst TRIGGER_FOCUS = 'focus'\nconst TRIGGER_CLICK = 'click'\nconst TRIGGER_MANUAL = 'manual'\n\nconst EVENT_HIDE = 'hide'\nconst EVENT_HIDDEN = 'hidden'\nconst EVENT_SHOW = 'show'\nconst EVENT_SHOWN = 'shown'\nconst EVENT_INSERTED = 'inserted'\nconst EVENT_CLICK = 'click'\nconst EVENT_FOCUSIN = 'focusin'\nconst EVENT_FOCUSOUT = 'focusout'\nconst EVENT_MOUSEENTER = 'mouseenter'\nconst EVENT_MOUSELEAVE = 'mouseleave'\n\nconst AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: isRTL() ? 'left' : 'right',\n  BOTTOM: 'bottom',\n  LEFT: isRTL() ? 'right' : 'left'\n}\n\nconst Default = {\n  allowList: DefaultAllowlist,\n  animation: true,\n  boundary: 'clippingParents',\n  container: false,\n  customClass: '',\n  delay: 0,\n  fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n  html: false,\n  offset: [0, 0],\n  placement: 'top',\n  popperConfig: null,\n  sanitize: true,\n  sanitizeFn: null,\n  selector: false,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' +\n            '<div class=\"tooltip-arrow\"></div>' +\n            '<div class=\"tooltip-inner\"></div>' +\n            '</div>',\n  title: '',\n  trigger: 'hover focus'\n}\n\nconst DefaultType = {\n  allowList: 'object',\n  animation: 'boolean',\n  boundary: '(string|element)',\n  container: '(string|element|boolean)',\n  customClass: '(string|function)',\n  delay: '(number|object)',\n  fallbackPlacements: 'array',\n  html: 'boolean',\n  offset: '(array|string|function)',\n  placement: '(string|function)',\n  popperConfig: '(null|object|function)',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  selector: '(string|boolean)',\n  template: 'string',\n  title: '(string|element|function)',\n  trigger: 'string'\n}\n\n/**\n * Class definition\n */\n\nclass Tooltip extends BaseComponent {\n  constructor(element, config) {\n    if (typeof Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)')\n    }\n\n    super(element, config)\n\n    // Private\n    this._isEnabled = true\n    this._timeout = 0\n    this._isHovered = null\n    this._activeTrigger = {}\n    this._popper = null\n    this._templateFactory = null\n    this._newContent = null\n\n    // Protected\n    this.tip = null\n\n    this._setListeners()\n\n    if (!this._config.selector) {\n      this._fixTitle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  enable() {\n    this._isEnabled = true\n  }\n\n  disable() {\n    this._isEnabled = false\n  }\n\n  toggleEnabled() {\n    this._isEnabled = !this._isEnabled\n  }\n\n  toggle() {\n    if (!this._isEnabled) {\n      return\n    }\n\n    this._activeTrigger.click = !this._activeTrigger.click\n    if (this._isShown()) {\n      this._leave()\n      return\n    }\n\n    this._enter()\n  }\n\n  dispose() {\n    clearTimeout(this._timeout)\n\n    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler)\n\n    if (this._element.getAttribute('data-bs-original-title')) {\n      this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'))\n    }\n\n    this._disposePopper()\n    super.dispose()\n  }\n\n  show() {\n    if (this._element.style.display === 'none') {\n      throw new Error('Please use show on visible elements')\n    }\n\n    if (!(this._isWithContent() && this._isEnabled)) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW))\n    const shadowRoot = findShadowRoot(this._element)\n    const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element)\n\n    if (showEvent.defaultPrevented || !isInTheDom) {\n      return\n    }\n\n    // todo v6 remove this OR make it optional\n    this._disposePopper()\n\n    const tip = this._getTipElement()\n\n    this._element.setAttribute('aria-describedby', tip.getAttribute('id'))\n\n    const { container } = this._config\n\n    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n      container.append(tip)\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED))\n    }\n\n    this._popper = this._createPopper(tip)\n\n    tip.classList.add(CLASS_NAME_SHOW)\n\n    // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.on(element, 'mouseover', noop)\n      }\n    }\n\n    const complete = () => {\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN))\n\n      if (this._isHovered === false) {\n        this._leave()\n      }\n\n      this._isHovered = false\n    }\n\n    this._queueCallback(complete, this.tip, this._isAnimated())\n  }\n\n  hide() {\n    if (!this._isShown()) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE))\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const tip = this._getTipElement()\n    tip.classList.remove(CLASS_NAME_SHOW)\n\n    // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.off(element, 'mouseover', noop)\n      }\n    }\n\n    this._activeTrigger[TRIGGER_CLICK] = false\n    this._activeTrigger[TRIGGER_FOCUS] = false\n    this._activeTrigger[TRIGGER_HOVER] = false\n    this._isHovered = null // it is a trick to support manual triggering\n\n    const complete = () => {\n      if (this._isWithActiveTrigger()) {\n        return\n      }\n\n      if (!this._isHovered) {\n        this._disposePopper()\n      }\n\n      this._element.removeAttribute('aria-describedby')\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN))\n    }\n\n    this._queueCallback(complete, this.tip, this._isAnimated())\n  }\n\n  update() {\n    if (this._popper) {\n      this._popper.update()\n    }\n  }\n\n  // Protected\n  _isWithContent() {\n    return Boolean(this._getTitle())\n  }\n\n  _getTipElement() {\n    if (!this.tip) {\n      this.tip = this._createTipElement(this._newContent || this._getContentForTemplate())\n    }\n\n    return this.tip\n  }\n\n  _createTipElement(content) {\n    const tip = this._getTemplateFactory(content).toHtml()\n\n    // todo: remove this check on v6\n    if (!tip) {\n      return null\n    }\n\n    tip.classList.remove(CLASS_NAME_FADE, CLASS_NAME_SHOW)\n    // todo: on v6 the following can be achieved with CSS only\n    tip.classList.add(`bs-${this.constructor.NAME}-auto`)\n\n    const tipId = getUID(this.constructor.NAME).toString()\n\n    tip.setAttribute('id', tipId)\n\n    if (this._isAnimated()) {\n      tip.classList.add(CLASS_NAME_FADE)\n    }\n\n    return tip\n  }\n\n  setContent(content) {\n    this._newContent = content\n    if (this._isShown()) {\n      this._disposePopper()\n      this.show()\n    }\n  }\n\n  _getTemplateFactory(content) {\n    if (this._templateFactory) {\n      this._templateFactory.changeContent(content)\n    } else {\n      this._templateFactory = new TemplateFactory({\n        ...this._config,\n        // the `content` var has to be after `this._config`\n        // to override config.content in case of popover\n        content,\n        extraClass: this._resolvePossibleFunction(this._config.customClass)\n      })\n    }\n\n    return this._templateFactory\n  }\n\n  _getContentForTemplate() {\n    return {\n      [SELECTOR_TOOLTIP_INNER]: this._getTitle()\n    }\n  }\n\n  _getTitle() {\n    return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title')\n  }\n\n  // Private\n  _initializeOnDelegatedTarget(event) {\n    return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig())\n  }\n\n  _isAnimated() {\n    return this._config.animation || (this.tip && this.tip.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _isShown() {\n    return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  _createPopper(tip) {\n    const placement = execute(this._config.placement, [this, tip, this._element])\n    const attachment = AttachmentMap[placement.toUpperCase()]\n    return Popper.createPopper(this._element, tip, this._getPopperConfig(attachment))\n  }\n\n  _getOffset() {\n    const { offset } = this._config\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(value => Number.parseInt(value, 10))\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element)\n    }\n\n    return offset\n  }\n\n  _resolvePossibleFunction(arg) {\n    return execute(arg, [this._element])\n  }\n\n  _getPopperConfig(attachment) {\n    const defaultBsPopperConfig = {\n      placement: attachment,\n      modifiers: [\n        {\n          name: 'flip',\n          options: {\n            fallbackPlacements: this._config.fallbackPlacements\n          }\n        },\n        {\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        },\n        {\n          name: 'preventOverflow',\n          options: {\n            boundary: this._config.boundary\n          }\n        },\n        {\n          name: 'arrow',\n          options: {\n            element: `.${this.constructor.NAME}-arrow`\n          }\n        },\n        {\n          name: 'preSetPlacement',\n          enabled: true,\n          phase: 'beforeMain',\n          fn: data => {\n            // Pre-set Popper's placement attribute in order to read the arrow sizes properly.\n            // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement\n            this._getTipElement().setAttribute('data-popper-placement', data.state.placement)\n          }\n        }\n      ]\n    }\n\n    return {\n      ...defaultBsPopperConfig,\n      ...execute(this._config.popperConfig, [defaultBsPopperConfig])\n    }\n  }\n\n  _setListeners() {\n    const triggers = this._config.trigger.split(' ')\n\n    for (const trigger of triggers) {\n      if (trigger === 'click') {\n        EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK), this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context.toggle()\n        })\n      } else if (trigger !== TRIGGER_MANUAL) {\n        const eventIn = trigger === TRIGGER_HOVER ?\n          this.constructor.eventName(EVENT_MOUSEENTER) :\n          this.constructor.eventName(EVENT_FOCUSIN)\n        const eventOut = trigger === TRIGGER_HOVER ?\n          this.constructor.eventName(EVENT_MOUSELEAVE) :\n          this.constructor.eventName(EVENT_FOCUSOUT)\n\n        EventHandler.on(this._element, eventIn, this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true\n          context._enter()\n        })\n        EventHandler.on(this._element, eventOut, this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] =\n            context._element.contains(event.relatedTarget)\n\n          context._leave()\n        })\n      }\n    }\n\n    this._hideModalHandler = () => {\n      if (this._element) {\n        this.hide()\n      }\n    }\n\n    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler)\n  }\n\n  _fixTitle() {\n    const title = this._element.getAttribute('title')\n\n    if (!title) {\n      return\n    }\n\n    if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {\n      this._element.setAttribute('aria-label', title)\n    }\n\n    this._element.setAttribute('data-bs-original-title', title) // DO NOT USE IT. Is only for backwards compatibility\n    this._element.removeAttribute('title')\n  }\n\n  _enter() {\n    if (this._isShown() || this._isHovered) {\n      this._isHovered = true\n      return\n    }\n\n    this._isHovered = true\n\n    this._setTimeout(() => {\n      if (this._isHovered) {\n        this.show()\n      }\n    }, this._config.delay.show)\n  }\n\n  _leave() {\n    if (this._isWithActiveTrigger()) {\n      return\n    }\n\n    this._isHovered = false\n\n    this._setTimeout(() => {\n      if (!this._isHovered) {\n        this.hide()\n      }\n    }, this._config.delay.hide)\n  }\n\n  _setTimeout(handler, timeout) {\n    clearTimeout(this._timeout)\n    this._timeout = setTimeout(handler, timeout)\n  }\n\n  _isWithActiveTrigger() {\n    return Object.values(this._activeTrigger).includes(true)\n  }\n\n  _getConfig(config) {\n    const dataAttributes = Manipulator.getDataAttributes(this._element)\n\n    for (const dataAttribute of Object.keys(dataAttributes)) {\n      if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {\n        delete dataAttributes[dataAttribute]\n      }\n    }\n\n    config = {\n      ...dataAttributes,\n      ...(typeof config === 'object' && config ? config : {})\n    }\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    config.container = config.container === false ? document.body : getElement(config.container)\n\n    if (typeof config.delay === 'number') {\n      config.delay = {\n        show: config.delay,\n        hide: config.delay\n      }\n    }\n\n    if (typeof config.title === 'number') {\n      config.title = config.title.toString()\n    }\n\n    if (typeof config.content === 'number') {\n      config.content = config.content.toString()\n    }\n\n    return config\n  }\n\n  _getDelegateConfig() {\n    const config = {}\n\n    for (const [key, value] of Object.entries(this._config)) {\n      if (this.constructor.Default[key] !== value) {\n        config[key] = value\n      }\n    }\n\n    config.selector = false\n    config.trigger = 'manual'\n\n    // In the future can be replaced with:\n    // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n    // `Object.fromEntries(keysWithDifferentValues)`\n    return config\n  }\n\n  _disposePopper() {\n    if (this._popper) {\n      this._popper.destroy()\n      this._popper = null\n    }\n\n    if (this.tip) {\n      this.tip.remove()\n      this.tip = null\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tooltip.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Tooltip)\n\nexport default Tooltip\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { defineJQueryPlugin } from './util/index.js'\nimport Tooltip from './tooltip.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'popover'\n\nconst SELECTOR_TITLE = '.popover-header'\nconst SELECTOR_CONTENT = '.popover-body'\n\nconst Default = {\n  ...Tooltip.Default,\n  content: '',\n  offset: [0, 8],\n  placement: 'right',\n  template: '<div class=\"popover\" role=\"tooltip\">' +\n    '<div class=\"popover-arrow\"></div>' +\n    '<h3 class=\"popover-header\"></h3>' +\n    '<div class=\"popover-body\"></div>' +\n    '</div>',\n  trigger: 'click'\n}\n\nconst DefaultType = {\n  ...Tooltip.DefaultType,\n  content: '(null|string|element|function)'\n}\n\n/**\n * Class definition\n */\n\nclass Popover extends Tooltip {\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Overrides\n  _isWithContent() {\n    return this._getTitle() || this._getContent()\n  }\n\n  // Private\n  _getContentForTemplate() {\n    return {\n      [SELECTOR_TITLE]: this._getTitle(),\n      [SELECTOR_CONTENT]: this._getContent()\n    }\n  }\n\n  _getContent() {\n    return this._resolvePossibleFunction(this._config.content)\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Popover.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Popover)\n\nexport default Popover\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap scrollspy.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { defineJQueryPlugin, getElement, isDisabled, isVisible } from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport BaseComponent from './base-component.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'scrollspy'\nconst DATA_KEY = 'bs.scrollspy'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst EVENT_ACTIVATE = `activate${EVENT_KEY}`\nconst EVENT_CLICK = `click${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item'\nconst CLASS_NAME_ACTIVE = 'active'\n\nconst SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]'\nconst SELECTOR_TARGET_LINKS = '[href]'\nconst SELECTOR_NAV_LIST_GROUP = '.nav, .list-group'\nconst SELECTOR_NAV_LINKS = '.nav-link'\nconst SELECTOR_NAV_ITEMS = '.nav-item'\nconst SELECTOR_LIST_ITEMS = '.list-group-item'\nconst SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`\nconst SELECTOR_DROPDOWN = '.dropdown'\nconst SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle'\n\nconst Default = {\n  offset: null, // TODO: v6 @deprecated, keep it for backwards compatibility reasons\n  rootMargin: '0px 0px -25%',\n  smoothScroll: false,\n  target: null,\n  threshold: [0.1, 0.5, 1]\n}\n\nconst DefaultType = {\n  offset: '(number|null)', // TODO v6 @deprecated, keep it for backwards compatibility reasons\n  rootMargin: 'string',\n  smoothScroll: 'boolean',\n  target: 'element',\n  threshold: 'array'\n}\n\n/**\n * Class definition\n */\n\nclass ScrollSpy extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    // this._element is the observablesContainer and config.target the menu links wrapper\n    this._targetLinks = new Map()\n    this._observableSections = new Map()\n    this._rootElement = getComputedStyle(this._element).overflowY === 'visible' ? null : this._element\n    this._activeTarget = null\n    this._observer = null\n    this._previousScrollData = {\n      visibleEntryTop: 0,\n      parentScrollTop: 0\n    }\n    this.refresh() // initialize\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  refresh() {\n    this._initializeTargetsAndObservables()\n    this._maybeEnableSmoothScroll()\n\n    if (this._observer) {\n      this._observer.disconnect()\n    } else {\n      this._observer = this._getNewObserver()\n    }\n\n    for (const section of this._observableSections.values()) {\n      this._observer.observe(section)\n    }\n  }\n\n  dispose() {\n    this._observer.disconnect()\n    super.dispose()\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case\n    config.target = getElement(config.target) || document.body\n\n    // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only\n    config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin\n\n    if (typeof config.threshold === 'string') {\n      config.threshold = config.threshold.split(',').map(value => Number.parseFloat(value))\n    }\n\n    return config\n  }\n\n  _maybeEnableSmoothScroll() {\n    if (!this._config.smoothScroll) {\n      return\n    }\n\n    // unregister any previous listeners\n    EventHandler.off(this._config.target, EVENT_CLICK)\n\n    EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, event => {\n      const observableSection = this._observableSections.get(event.target.hash)\n      if (observableSection) {\n        event.preventDefault()\n        const root = this._rootElement || window\n        const height = observableSection.offsetTop - this._element.offsetTop\n        if (root.scrollTo) {\n          root.scrollTo({ top: height, behavior: 'smooth' })\n          return\n        }\n\n        // Chrome 60 doesn't support `scrollTo`\n        root.scrollTop = height\n      }\n    })\n  }\n\n  _getNewObserver() {\n    const options = {\n      root: this._rootElement,\n      threshold: this._config.threshold,\n      rootMargin: this._config.rootMargin\n    }\n\n    return new IntersectionObserver(entries => this._observerCallback(entries), options)\n  }\n\n  // The logic of selection\n  _observerCallback(entries) {\n    const targetElement = entry => this._targetLinks.get(`#${entry.target.id}`)\n    const activate = entry => {\n      this._previousScrollData.visibleEntryTop = entry.target.offsetTop\n      this._process(targetElement(entry))\n    }\n\n    const parentScrollTop = (this._rootElement || document.documentElement).scrollTop\n    const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop\n    this._previousScrollData.parentScrollTop = parentScrollTop\n\n    for (const entry of entries) {\n      if (!entry.isIntersecting) {\n        this._activeTarget = null\n        this._clearActiveClass(targetElement(entry))\n\n        continue\n      }\n\n      const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop\n      // if we are scrolling down, pick the bigger offsetTop\n      if (userScrollsDown && entryIsLowerThanPrevious) {\n        activate(entry)\n        // if parent isn't scrolled, let's keep the first visible item, breaking the iteration\n        if (!parentScrollTop) {\n          return\n        }\n\n        continue\n      }\n\n      // if we are scrolling up, pick the smallest offsetTop\n      if (!userScrollsDown && !entryIsLowerThanPrevious) {\n        activate(entry)\n      }\n    }\n  }\n\n  _initializeTargetsAndObservables() {\n    this._targetLinks = new Map()\n    this._observableSections = new Map()\n\n    const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target)\n\n    for (const anchor of targetLinks) {\n      // ensure that the anchor has an id and is not disabled\n      if (!anchor.hash || isDisabled(anchor)) {\n        continue\n      }\n\n      const observableSection = SelectorEngine.findOne(anchor.hash, this._element)\n\n      // ensure that the observableSection exists & is visible\n      if (isVisible(observableSection)) {\n        this._targetLinks.set(anchor.hash, anchor)\n        this._observableSections.set(anchor.hash, observableSection)\n      }\n    }\n  }\n\n  _process(target) {\n    if (this._activeTarget === target) {\n      return\n    }\n\n    this._clearActiveClass(this._config.target)\n    this._activeTarget = target\n    target.classList.add(CLASS_NAME_ACTIVE)\n    this._activateParents(target)\n\n    EventHandler.trigger(this._element, EVENT_ACTIVATE, { relatedTarget: target })\n  }\n\n  _activateParents(target) {\n    // Activate dropdown parents\n    if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE, target.closest(SELECTOR_DROPDOWN))\n        .classList.add(CLASS_NAME_ACTIVE)\n      return\n    }\n\n    for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {\n      // Set triggered links parents as active\n      // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n      for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {\n        item.classList.add(CLASS_NAME_ACTIVE)\n      }\n    }\n  }\n\n  _clearActiveClass(parent) {\n    parent.classList.remove(CLASS_NAME_ACTIVE)\n\n    const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE}`, parent)\n    for (const node of activeNodes) {\n      node.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = ScrollSpy.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {\n    ScrollSpy.getOrCreateInstance(spy)\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(ScrollSpy)\n\nexport default ScrollSpy\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap tab.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { defineJQueryPlugin, getNextActiveElement, isDisabled } from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport BaseComponent from './base-component.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'tab'\nconst DATA_KEY = 'bs.tab'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}`\nconst EVENT_KEYDOWN = `keydown${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}`\n\nconst ARROW_LEFT_KEY = 'ArrowLeft'\nconst ARROW_RIGHT_KEY = 'ArrowRight'\nconst ARROW_UP_KEY = 'ArrowUp'\nconst ARROW_DOWN_KEY = 'ArrowDown'\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_DROPDOWN = 'dropdown'\n\nconst SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle'\nconst SELECTOR_DROPDOWN_MENU = '.dropdown-menu'\nconst NOT_SELECTOR_DROPDOWN_TOGGLE = ':not(.dropdown-toggle)'\n\nconst SELECTOR_TAB_PANEL = '.list-group, .nav, [role=\"tablist\"]'\nconst SELECTOR_OUTER = '.nav-item, .list-group-item'\nconst SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role=\"tab\"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]' // todo:v6: could be only `tab`\nconst SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`\n\nconst SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle=\"tab\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"pill\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"list\"]`\n\n/**\n * Class definition\n */\n\nclass Tab extends BaseComponent {\n  constructor(element) {\n    super(element)\n    this._parent = this._element.closest(SELECTOR_TAB_PANEL)\n\n    if (!this._parent) {\n      return\n      // todo: should Throw exception on v6\n      // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)\n    }\n\n    // Set up initial aria attributes\n    this._setInitialAttributes(this._parent, this._getChildren())\n\n    EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event))\n  }\n\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show() { // Shows this elem and deactivate the active sibling if exists\n    const innerElem = this._element\n    if (this._elemIsActive(innerElem)) {\n      return\n    }\n\n    // Search for active tab on same parent to deactivate it\n    const active = this._getActiveElem()\n\n    const hideEvent = active ?\n      EventHandler.trigger(active, EVENT_HIDE, { relatedTarget: innerElem }) :\n      null\n\n    const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW, { relatedTarget: active })\n\n    if (showEvent.defaultPrevented || (hideEvent && hideEvent.defaultPrevented)) {\n      return\n    }\n\n    this._deactivate(active, innerElem)\n    this._activate(innerElem, active)\n  }\n\n  // Private\n  _activate(element, relatedElem) {\n    if (!element) {\n      return\n    }\n\n    element.classList.add(CLASS_NAME_ACTIVE)\n\n    this._activate(SelectorEngine.getElementFromSelector(element)) // Search and activate/show the proper section\n\n    const complete = () => {\n      if (element.getAttribute('role') !== 'tab') {\n        element.classList.add(CLASS_NAME_SHOW)\n        return\n      }\n\n      element.removeAttribute('tabindex')\n      element.setAttribute('aria-selected', true)\n      this._toggleDropDown(element, true)\n      EventHandler.trigger(element, EVENT_SHOWN, {\n        relatedTarget: relatedElem\n      })\n    }\n\n    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _deactivate(element, relatedElem) {\n    if (!element) {\n      return\n    }\n\n    element.classList.remove(CLASS_NAME_ACTIVE)\n    element.blur()\n\n    this._deactivate(SelectorEngine.getElementFromSelector(element)) // Search and deactivate the shown section too\n\n    const complete = () => {\n      if (element.getAttribute('role') !== 'tab') {\n        element.classList.remove(CLASS_NAME_SHOW)\n        return\n      }\n\n      element.setAttribute('aria-selected', false)\n      element.setAttribute('tabindex', '-1')\n      this._toggleDropDown(element, false)\n      EventHandler.trigger(element, EVENT_HIDDEN, { relatedTarget: relatedElem })\n    }\n\n    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _keydown(event) {\n    if (!([ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key))) {\n      return\n    }\n\n    event.stopPropagation()// stopPropagation/preventDefault both added to support up/down keys without scrolling the page\n    event.preventDefault()\n    const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key)\n    const nextActiveElement = getNextActiveElement(this._getChildren().filter(element => !isDisabled(element)), event.target, isNext, true)\n\n    if (nextActiveElement) {\n      nextActiveElement.focus({ preventScroll: true })\n      Tab.getOrCreateInstance(nextActiveElement).show()\n    }\n  }\n\n  _getChildren() { // collection of inner elements\n    return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent)\n  }\n\n  _getActiveElem() {\n    return this._getChildren().find(child => this._elemIsActive(child)) || null\n  }\n\n  _setInitialAttributes(parent, children) {\n    this._setAttributeIfNotExists(parent, 'role', 'tablist')\n\n    for (const child of children) {\n      this._setInitialAttributesOnChild(child)\n    }\n  }\n\n  _setInitialAttributesOnChild(child) {\n    child = this._getInnerElement(child)\n    const isActive = this._elemIsActive(child)\n    const outerElem = this._getOuterElement(child)\n    child.setAttribute('aria-selected', isActive)\n\n    if (outerElem !== child) {\n      this._setAttributeIfNotExists(outerElem, 'role', 'presentation')\n    }\n\n    if (!isActive) {\n      child.setAttribute('tabindex', '-1')\n    }\n\n    this._setAttributeIfNotExists(child, 'role', 'tab')\n\n    // set attributes to the related panel too\n    this._setInitialAttributesOnTargetPanel(child)\n  }\n\n  _setInitialAttributesOnTargetPanel(child) {\n    const target = SelectorEngine.getElementFromSelector(child)\n\n    if (!target) {\n      return\n    }\n\n    this._setAttributeIfNotExists(target, 'role', 'tabpanel')\n\n    if (child.id) {\n      this._setAttributeIfNotExists(target, 'aria-labelledby', `${child.id}`)\n    }\n  }\n\n  _toggleDropDown(element, open) {\n    const outerElem = this._getOuterElement(element)\n    if (!outerElem.classList.contains(CLASS_DROPDOWN)) {\n      return\n    }\n\n    const toggle = (selector, className) => {\n      const element = SelectorEngine.findOne(selector, outerElem)\n      if (element) {\n        element.classList.toggle(className, open)\n      }\n    }\n\n    toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE)\n    toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW)\n    outerElem.setAttribute('aria-expanded', open)\n  }\n\n  _setAttributeIfNotExists(element, attribute, value) {\n    if (!element.hasAttribute(attribute)) {\n      element.setAttribute(attribute, value)\n    }\n  }\n\n  _elemIsActive(elem) {\n    return elem.classList.contains(CLASS_NAME_ACTIVE)\n  }\n\n  // Try to get the inner element (usually the .nav-link)\n  _getInnerElement(elem) {\n    return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem)\n  }\n\n  // Try to get the outer element (usually the .nav-item)\n  _getOuterElement(elem) {\n    return elem.closest(SELECTOR_OUTER) || elem\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tab.getOrCreateInstance(this)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  if (isDisabled(this)) {\n    return\n  }\n\n  Tab.getOrCreateInstance(this).show()\n})\n\n/**\n * Initialize on focus\n */\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {\n    Tab.getOrCreateInstance(element)\n  }\n})\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Tab)\n\nexport default Tab\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap toast.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { defineJQueryPlugin, reflow } from './util/index.js'\nimport EventHandler from './dom/event-handler.js'\nimport BaseComponent from './base-component.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'toast'\nconst DATA_KEY = 'bs.toast'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`\nconst EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_FOCUSOUT = `focusout${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\n\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_HIDE = 'hide' // @deprecated - kept here only for backwards compatibility\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_SHOWING = 'showing'\n\nconst DefaultType = {\n  animation: 'boolean',\n  autohide: 'boolean',\n  delay: 'number'\n}\n\nconst Default = {\n  animation: true,\n  autohide: true,\n  delay: 5000\n}\n\n/**\n * Class definition\n */\n\nclass Toast extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._timeout = null\n    this._hasMouseInteraction = false\n    this._hasKeyboardInteraction = false\n    this._setListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show() {\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._clearTimeout()\n\n    if (this._config.animation) {\n      this._element.classList.add(CLASS_NAME_FADE)\n    }\n\n    const complete = () => {\n      this._element.classList.remove(CLASS_NAME_SHOWING)\n      EventHandler.trigger(this._element, EVENT_SHOWN)\n\n      this._maybeScheduleHide()\n    }\n\n    this._element.classList.remove(CLASS_NAME_HIDE) // @deprecated\n    reflow(this._element)\n    this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING)\n\n    this._queueCallback(complete, this._element, this._config.animation)\n  }\n\n  hide() {\n    if (!this.isShown()) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const complete = () => {\n      this._element.classList.add(CLASS_NAME_HIDE) // @deprecated\n      this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW)\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._element.classList.add(CLASS_NAME_SHOWING)\n    this._queueCallback(complete, this._element, this._config.animation)\n  }\n\n  dispose() {\n    this._clearTimeout()\n\n    if (this.isShown()) {\n      this._element.classList.remove(CLASS_NAME_SHOW)\n    }\n\n    super.dispose()\n  }\n\n  isShown() {\n    return this._element.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  // Private\n\n  _maybeScheduleHide() {\n    if (!this._config.autohide) {\n      return\n    }\n\n    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n      return\n    }\n\n    this._timeout = setTimeout(() => {\n      this.hide()\n    }, this._config.delay)\n  }\n\n  _onInteraction(event, isInteracting) {\n    switch (event.type) {\n      case 'mouseover':\n      case 'mouseout': {\n        this._hasMouseInteraction = isInteracting\n        break\n      }\n\n      case 'focusin':\n      case 'focusout': {\n        this._hasKeyboardInteraction = isInteracting\n        break\n      }\n\n      default: {\n        break\n      }\n    }\n\n    if (isInteracting) {\n      this._clearTimeout()\n      return\n    }\n\n    const nextElement = event.relatedTarget\n    if (this._element === nextElement || this._element.contains(nextElement)) {\n      return\n    }\n\n    this._maybeScheduleHide()\n  }\n\n  _setListeners() {\n    EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true))\n    EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false))\n    EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true))\n    EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false))\n  }\n\n  _clearTimeout() {\n    clearTimeout(this._timeout)\n    this._timeout = null\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Toast.getOrCreateInstance(this, config)\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config](this)\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nenableDismissTrigger(Toast)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Toast)\n\nexport default Toast\n","export * from \"./enums.js\";\nexport * from \"./modifiers/index.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport { popperGenerator, detectOverflow, createPopper as createPopperBase } from \"./createPopper.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper } from \"./popper.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper as createPopperLite } from \"./popper-lite.js\";","export var top = 'top';\nexport var bottom = 'bottom';\nexport var right = 'right';\nexport var left = 'left';\nexport var auto = 'auto';\nexport var basePlacements = [top, bottom, right, left];\nexport var start = 'start';\nexport var end = 'end';\nexport var clippingParents = 'clippingParents';\nexport var viewport = 'viewport';\nexport var popper = 'popper';\nexport var reference = 'reference';\nexport var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nexport var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nexport var beforeRead = 'beforeRead';\nexport var read = 'read';\nexport var afterRead = 'afterRead'; // pure-logic modifiers\n\nexport var beforeMain = 'beforeMain';\nexport var main = 'main';\nexport var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nexport var beforeWrite = 'beforeWrite';\nexport var write = 'write';\nexport var afterWrite = 'afterWrite';\nexport var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];","export { default as applyStyles } from \"./applyStyles.js\";\nexport { default as arrow } from \"./arrow.js\";\nexport { default as computeStyles } from \"./computeStyles.js\";\nexport { default as eventListeners } from \"./eventListeners.js\";\nexport { default as flip } from \"./flip.js\";\nexport { default as hide } from \"./hide.js\";\nexport { default as offset } from \"./offset.js\";\nexport { default as popperOffsets } from \"./popperOffsets.js\";\nexport { default as preventOverflow } from \"./preventOverflow.js\";","import getNodeName from \"../dom-utils/getNodeName.js\";\nimport { isHTMLElement } from \"../dom-utils/instanceOf.js\"; // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n};","export default function getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}","import getWindow from \"./getWindow.js\";\n\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\nexport { isElement, isHTMLElement, isShadowRoot };","export default function getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}","import getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport contains from \"../dom-utils/contains.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport { within } from \"../utils/within.js\";\nimport mergePaddingObject from \"../utils/mergePaddingObject.js\";\nimport expandToHashMap from \"../utils/expandToHashMap.js\";\nimport { left, right, basePlacements, top, bottom } from \"../enums.js\";\nimport { isHTMLElement } from \"../dom-utils/instanceOf.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === 'y' ? top : left;\n  var maxProp = axis === 'y' ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!isHTMLElement(arrowElement)) {\n      console.error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));\n    }\n  }\n\n  if (!contains(state.elements.popper, arrowElement)) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' '));\n    }\n\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n};","import { auto } from \"../enums.js\";\nexport default function getBasePlacement(placement) {\n  return placement.split('-')[0];\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\"; // Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\n\nexport default function getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}","import { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport { round } from \"../utils/math.js\";\nimport getWindow from \"./getWindow.js\";\nimport isLayoutViewport from \"./isLayoutViewport.js\";\nexport default function getBoundingClientRect(element, includeScale, isFixedStrategy) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n\n  var clientRect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n\n  if (includeScale && isHTMLElement(element)) {\n    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n\n  var _ref = isElement(element) ? getWindow(element) : window,\n      visualViewport = _ref.visualViewport;\n\n  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n  var width = clientRect.width / scaleX;\n  var height = clientRect.height / scaleY;\n  return {\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x,\n    x: x,\n    y: y\n  };\n}","export var max = Math.max;\nexport var min = Math.min;\nexport var round = Math.round;","import getUAString from \"../utils/userAgent.js\";\nexport default function isLayoutViewport() {\n  return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}","export default function getUAString() {\n  var uaData = navigator.userAgentData;\n\n  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(function (item) {\n      return item.brand + \"/\" + item.version;\n    }).join(' ');\n  }\n\n  return navigator.userAgent;\n}","import { isShadowRoot } from \"./instanceOf.js\";\nexport default function contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}","import getWindow from \"./getWindow.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isHTMLElement, isShadowRoot } from \"./instanceOf.js\";\nimport isTableElement from \"./isTableElement.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getUAString from \"../utils/userAgent.js\";\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = /firefox/i.test(getUAString());\n  var isIE = /Trident/i.test(getUAString());\n\n  if (isIE && isHTMLElement(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = getComputedStyle(element);\n\n    if (elementCss.position === 'fixed') {\n      return null;\n    }\n  }\n\n  var currentNode = getParentNode(element);\n\n  if (isShadowRoot(currentNode)) {\n    currentNode = currentNode.host;\n  }\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nexport default function getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}","import getWindow from \"./getWindow.js\";\nexport default function getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}","import getNodeName from \"./getNodeName.js\";\nexport default function isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n}","import getNodeName from \"./getNodeName.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport { isShadowRoot } from \"./instanceOf.js\";\nexport default function getParentNode(element) {\n  if (getNodeName(element) === 'html') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n\n  );\n}","import { isElement } from \"./instanceOf.js\";\nexport default function getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}","export default function getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}","import { max as mathMax, min as mathMin } from \"./math.js\";\nexport function within(min, value, max) {\n  return mathMax(min, mathMin(value, max));\n}\nexport function withinMaxClamp(min, value, max) {\n  var v = within(min, value, max);\n  return v > max ? max : v;\n}","import getFreshSideObject from \"./getFreshSideObject.js\";\nexport default function mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}","export default function getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}","export default function expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}","import { top, left, right, bottom, end } from \"../enums.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport getWindow from \"../dom-utils/getWindow.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getComputedStyle from \"../dom-utils/getComputedStyle.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport { round } from \"../utils/math.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref, win) {\n  var x = _ref.x,\n      y = _ref.y;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\n\nexport function mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n\n  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = left;\n  var sideY = top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper);\n    var heightProp = 'clientHeight';\n    var widthProp = 'clientWidth';\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n\n      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {\n        heightProp = 'scrollHeight';\n        widthProp = 'scrollWidth';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]\n      offsetParent[heightProp];\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left || (placement === top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]\n      offsetParent[widthProp];\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x: x,\n    y: y\n  }, getWindow(popper)) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref4.x;\n  y = _ref4.y;\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref5) {\n  var state = _ref5.state,\n      options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';\n\n    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {\n      return transitionProperty.indexOf(property) >= 0;\n    })) {\n      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".', '\\n\\n', 'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\\n\\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));\n    }\n  }\n\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration,\n    isFixed: state.options.strategy === 'fixed'\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n};","export default function getVariation(placement) {\n  return placement.split('-')[1];\n}","import getWindow from \"../dom-utils/getWindow.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n};","import getOppositePlacement from \"../utils/getOppositePlacement.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getOppositeVariationPlacement from \"../utils/getOppositeVariationPlacement.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport computeAutoPlacement from \"../utils/computeAutoPlacement.js\";\nimport { bottom, top, start, right, left, auto } from \"../enums.js\";\nimport getVariation from \"../utils/getVariation.js\"; // eslint-disable-next-line import/no-unused-modules\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = getBasePlacement(placement);\n\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n};","var hash = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nexport default function getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}","var hash = {\n  start: 'end',\n  end: 'start'\n};\nexport default function getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return hash[matched];\n  });\n}","import getClippingRect from \"../dom-utils/getClippingRect.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getBoundingClientRect from \"../dom-utils/getBoundingClientRect.js\";\nimport computeOffsets from \"./computeOffsets.js\";\nimport rectToClientRect from \"./rectToClientRect.js\";\nimport { clippingParents, reference, popper, bottom, top, right, basePlacements, viewport } from \"../enums.js\";\nimport { isElement } from \"../dom-utils/instanceOf.js\";\nimport mergePaddingObject from \"./mergePaddingObject.js\";\nimport expandToHashMap from \"./expandToHashMap.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport default function detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}","import { viewport } from \"../enums.js\";\nimport getViewportRect from \"./getViewportRect.js\";\nimport getDocumentRect from \"./getDocumentRect.js\";\nimport listScrollParents from \"./listScrollParents.js\";\nimport getOffsetParent from \"./getOffsetParent.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport contains from \"./contains.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport rectToClientRect from \"../utils/rectToClientRect.js\";\nimport { max, min } from \"../utils/math.js\";\n\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = getBoundingClientRect(element, false, strategy === 'fixed');\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nexport default function getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}","import getWindow from \"./getWindow.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport isLayoutViewport from \"./isLayoutViewport.js\";\nexport default function getViewportRect(element, strategy) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0;\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    var layoutViewport = isLayoutViewport();\n\n    if (layoutViewport || !layoutViewport && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getWindowScroll from \"./getWindowScroll.js\";\nexport default function getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}","import getWindow from \"./getWindow.js\";\nexport default function getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}","import getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getWindowScroll from \"./getWindowScroll.js\";\nimport { max } from \"../utils/math.js\"; // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nexport default function getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}","import getScrollParent from \"./getScrollParent.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getWindow from \"./getWindow.js\";\nimport isScrollParent from \"./isScrollParent.js\";\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/\n\nexport default function listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}","import getParentNode from \"./getParentNode.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nexport default function getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}","import getComputedStyle from \"./getComputedStyle.js\";\nexport default function isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = getComputedStyle(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}","export default function rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}","import getBasePlacement from \"./getBasePlacement.js\";\nimport getVariation from \"./getVariation.js\";\nimport getMainAxisFromPlacement from \"./getMainAxisFromPlacement.js\";\nimport { top, right, bottom, left, start, end } from \"../enums.js\";\nexport default function computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}","import getVariation from \"./getVariation.js\";\nimport { variationPlacements, basePlacements, placements as allPlacements } from \"../enums.js\";\nimport detectOverflow from \"./detectOverflow.js\";\nimport getBasePlacement from \"./getBasePlacement.js\";\nexport default function computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? allPlacements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' '));\n    }\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}","import { top, bottom, left, right } from \"../enums.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n};","import getBasePlacement from \"../utils/getBasePlacement.js\";\nimport { top, left, right, placements } from \"../enums.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport function distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};","import computeOffsets from \"../utils/computeOffsets.js\";\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n};","import { top, left, right, bottom, start } from \"../enums.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport getAltAxis from \"../utils/getAltAxis.js\";\nimport { within, withinMaxClamp } from \"../utils/within.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport getFreshSideObject from \"../utils/getFreshSideObject.js\";\nimport { min as mathMin, max as mathMax } from \"../utils/math.js\";\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === 'y' ? top : left;\n    var altSide = mainAxis === 'y' ? bottom : right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min = offset + overflow[mainSide];\n    var max = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? mathMin(min, tetherMin) : min, offset, tether ? mathMax(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === 'x' ? top : left;\n\n    var _altSide = mainAxis === 'x' ? bottom : right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === 'y' ? 'height' : 'width';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n};","export default function getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}","import getCompositeRect from \"./dom-utils/getCompositeRect.js\";\nimport getLayoutRect from \"./dom-utils/getLayoutRect.js\";\nimport listScrollParents from \"./dom-utils/listScrollParents.js\";\nimport getOffsetParent from \"./dom-utils/getOffsetParent.js\";\nimport getComputedStyle from \"./dom-utils/getComputedStyle.js\";\nimport orderModifiers from \"./utils/orderModifiers.js\";\nimport debounce from \"./utils/debounce.js\";\nimport validateModifiers from \"./utils/validateModifiers.js\";\nimport uniqueBy from \"./utils/uniqueBy.js\";\nimport getBasePlacement from \"./utils/getBasePlacement.js\";\nimport mergeByName from \"./utils/mergeByName.js\";\nimport detectOverflow from \"./utils/detectOverflow.js\";\nimport { isElement } from \"./dom-utils/instanceOf.js\";\nimport { auto } from \"./enums.js\";\nvar INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nvar INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nexport function popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        }); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (process.env.NODE_ENV !== \"production\") {\n          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {\n            var name = _ref.name;\n            return name;\n          });\n          validateModifiers(modifiers);\n\n          if (getBasePlacement(state.options.placement) === auto) {\n            var flipModifier = state.orderedModifiers.find(function (_ref2) {\n              var name = _ref2.name;\n              return name === 'flip';\n            });\n\n            if (!flipModifier) {\n              console.error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' '));\n            }\n          }\n\n          var _getComputedStyle = getComputedStyle(popper),\n              marginTop = _getComputedStyle.marginTop,\n              marginRight = _getComputedStyle.marginRight,\n              marginBottom = _getComputedStyle.marginBottom,\n              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can\n          // cause bugs with positioning, so we'll warn the consumer\n\n\n          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {\n            return parseFloat(margin);\n          })) {\n            console.warn(['Popper: CSS \"margin\" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));\n          }\n        }\n\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(INVALID_ELEMENT_ERROR);\n          }\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (process.env.NODE_ENV !== \"production\") {\n            __debug_loops__ += 1;\n\n            if (__debug_loops__ > 100) {\n              console.error(INFINITE_LOOP_ERROR);\n              break;\n            }\n          }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.error(INVALID_ELEMENT_ERROR);\n      }\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref3) {\n        var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nexport var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\nexport { detectOverflow };","import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getNodeScroll from \"./getNodeScroll.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport { round } from \"../utils/math.js\";\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}","import getWindowScroll from \"./getWindowScroll.js\";\nimport getWindow from \"./getWindow.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getHTMLElementScroll from \"./getHTMLElementScroll.js\";\nexport default function getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}","export default function getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}","import { modifierPhases } from \"../enums.js\"; // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}","export default function debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}","import format from \"./format.js\";\nimport { modifierPhases } from \"../enums.js\";\nvar INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nvar MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nvar VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\nexport default function validateModifiers(modifiers) {\n  modifiers.forEach(function (modifier) {\n    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`\n    .filter(function (value, index, self) {\n      return self.indexOf(value) === index;\n    }).forEach(function (key) {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', \"\\\"\" + String(modifier.name) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(', '), \"\\\"\" + String(modifier.phase) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'effect':\n          if (modifier.effect != null && typeof modifier.effect !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requires':\n          if (modifier.requires != null && !Array.isArray(modifier.requires)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'options':\n        case 'data':\n          break;\n\n        default:\n          console.error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s) {\n            return \"\\\"\" + s + \"\\\"\";\n          }).join(', ') + \"; but \\\"\" + key + \"\\\" was provided.\");\n      }\n\n      modifier.requires && modifier.requires.forEach(function (requirement) {\n        if (modifiers.find(function (mod) {\n          return mod.name === requirement;\n        }) == null) {\n          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}","export default function format(str) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return [].concat(args).reduce(function (p, c) {\n    return p.replace(/%s/, c);\n  }, str);\n}","export default function uniqueBy(arr, fn) {\n  var identifiers = new Set();\n  return arr.filter(function (item) {\n    var identifier = fn(item);\n\n    if (!identifiers.has(identifier)) {\n      identifiers.add(identifier);\n      return true;\n    }\n  });\n}","export default function mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}","import { popperGenerator, detectOverflow } from \"./createPopper.js\";\nimport eventListeners from \"./modifiers/eventListeners.js\";\nimport popperOffsets from \"./modifiers/popperOffsets.js\";\nimport computeStyles from \"./modifiers/computeStyles.js\";\nimport applyStyles from \"./modifiers/applyStyles.js\";\nimport offset from \"./modifiers/offset.js\";\nimport flip from \"./modifiers/flip.js\";\nimport preventOverflow from \"./modifiers/preventOverflow.js\";\nimport arrow from \"./modifiers/arrow.js\";\nimport hide from \"./modifiers/hide.js\";\nvar defaultModifiers = [eventListeners, popperOffsets, computeStyles, applyStyles, offset, flip, preventOverflow, arrow, hide];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper, popperGenerator, defaultModifiers, detectOverflow }; // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper as createPopperLite } from \"./popper-lite.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport * from \"./modifiers/index.js\";","import { popperGenerator, detectOverflow } from \"./createPopper.js\";\nimport eventListeners from \"./modifiers/eventListeners.js\";\nimport popperOffsets from \"./modifiers/popperOffsets.js\";\nimport computeStyles from \"./modifiers/computeStyles.js\";\nimport applyStyles from \"./modifiers/applyStyles.js\";\nvar defaultModifiers = [eventListeners, popperOffsets, computeStyles, applyStyles];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper, popperGenerator, defaultModifiers, detectOverflow };","import { GridHelper, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { AnimationSlider } from \"./AnimationSlider\";\nimport { initSettingsButtons } from \"./AnimationUtils\";\nimport { ApplicationState } from \"./Entities/ApplicationState\";\nimport { PaintedSkeleton } from \"./Entities/PaintedSkeleton\";\nimport { SkeletonAction } from \"./SkeletonAction\";\nimport { SkeletonPainter } from \"./SkeletonPainter\";\nimport { THRESHOLD_DEFINITIONS } from \"./ThresholdDefinitions\";\n\nexport class CanvasScene {\n\n    renderer : WebGLRenderer;\n    controls : OrbitControls;\n    camera : PerspectiveCamera;\n    scene : Scene;\n    gridHelper: GridHelper;\n    animationSlider : AnimationSlider;\n    skeletonAction : SkeletonAction;\n    mentor: PaintedSkeleton;\n    pupil: PaintedSkeleton;\n    mentorShown: boolean;\n    mentorCentered: boolean;\n    normalizedLimbs: boolean;\n    state: ApplicationState;\n    thresholdZones;\n\n    constructor() {\n        this.state = ApplicationState.Loading;\n        this.renderer = new WebGLRenderer();\n        const canvasContainer = document.getElementById(\"canvas-container\")!;\n        canvasContainer.appendChild(this.renderer.domElement);\n    \n        const width = canvasContainer.offsetWidth; // border\n        const height = canvasContainer.offsetHeight;\n        \n        this.renderer.setSize(width, height);\n        this.scene = new Scene();\n    \n        this.camera = new PerspectiveCamera(\n            75,\n            width / height,\n            0.1,\n            1000\n        );\n    \n        const orbit = new OrbitControls(this.camera, this.renderer.domElement)\n        //@ts-ignore\n        this.camera.position.set(0, 10, 35);\n        \n        orbit.update();\n        this.gridHelper = new GridHelper(60);\n        this.renderer.setClearColor(0xFFFFFF);\n        const canvasResizer = () => {\n            const canvasContainer = document.getElementById(\"canvas-container\")!;\n          \n            const width = canvasContainer.offsetWidth - 1; // border\n            const height = canvasContainer.offsetHeight;\n            this.renderer.setSize(width, height);\n            this.camera.aspect = width / height;\n        }\n\n        window.addEventListener(\"resize\", canvasResizer);\n        this.mentorShown = false;\n        this.mentorCentered = false;\n        this.normalizedLimbs = false;\n    }\n\n    addToScene(element : any) {\n        this.scene.add(element);\n    }\n\n    initGridHelper(lowestPoint : Vector3) {\n        this.gridHelper.translateY(lowestPoint.y)\n        this.scene.add(this.gridHelper); \n    }\n\n    initAnimationSlider(skeleton : PaintedSkeleton) {\n        this.animationSlider = new AnimationSlider(skeleton);\n    }\n\n    initSkeletonAnimation() {\n        this.skeletonAction = new SkeletonAction(this.camera, this.scene, this.renderer, this.animationSlider);\n    }\n\n    initAnimationButtons() {\n        initSettingsButtons(\n            {\n                ...this.skeletonAction.boundFunctions, \n                switchMentor: this.switchMentor.bind(this),\n                centerMentor: this.switchCenterMentor.bind(this),\n                switchNormalizedLimbs: this.switchNormalizedLimbs.bind(this),\n                selectThresholdHandler: this.setThresholdFromSelect.bind(this),\n                selectTrackingHandler: this.setJointTrackingFromSelect.bind(this),\n                manipulateThreshlodModifier: this.modifyThresholdModifier.bind(this),\n                selectSpecificThreshlodHandler: this.modifyThresholdForSpecificJoint.bind(this)\n            });\n    }\n\n    initAnimationControl() {\n        this.animationSlider.animationControl = this.skeletonAction;\n    }\n\n    initSkeletons(pupil: PaintedSkeleton, mentor: PaintedSkeleton) {\n        this.mentor = mentor;\n        this.pupil = pupil;\n        pupil.addToScene(this.scene);\n        // mentor.addToScene(this.scene);\n        // pupil.setTranslationOffset(new Vector3(-10, 0, 0));\n        // mentor.setTranslationOffset(new Vector3(10, 0, 0));\n        this.skeletonAction.skeletons = [pupil, mentor];\n    }\n\n    start() {\n        this.skeletonAction.start();\n    }\n\n    init(pupil: PaintedSkeleton, mentor : PaintedSkeleton ) {\n        this.initGridHelper(pupil.skeleton.getPose(0).getLowestPoint())\n        this.initAnimationSlider(pupil);\n        this.initSkeletonAnimation();\n        this.initAnimationControl();\n        this.initSkeletons(pupil, mentor);\n        this.initAnimationButtons();\n    }\n\n    switchMentor() {\n        if (this.mentorShown) {\n\n            this.mentor.removeFromScene(this.scene);\n            this.mentor.setTranslationOffset(new Vector3(0,0,0));\n            this.pupil.setTranslationOffset(new Vector3(0,0,0));\n            \n        } else {\n            \n            if (this.mentorCentered) {\n                this.mentor.setTranslationOffset(new Vector3(0,0,0));\n                this.pupil.setTranslationOffset(new Vector3(0,0,0));\n            } else {\n                this.mentor.setTranslationOffset(new Vector3(10,0,0));\n                this.pupil.setTranslationOffset(new Vector3(-10,0,0));\n            }\n            this.mentor.addToScene(this.scene)\n        }\n        this.mentorShown = !this.mentorShown;\n    }\n\n    switchCenterMentor() {\n\n        if (this.mentorCentered) {\n            if (this.mentorShown) {\n                this.mentor.setTranslationOffset(new Vector3(10,0,0));\n                this.pupil.setTranslationOffset(new Vector3(-10,0,0));\n            }\n            \n        } else {\n            this.mentor.setTranslationOffset(new Vector3(0,0,0));\n            this.pupil.setTranslationOffset(new Vector3(0,0,0));\n        }\n\n        this.mentorCentered = !this.mentorCentered;\n    }\n\n    setLoaded() {\n        this.state = ApplicationState.Loaded;\n        const loadingOverlay = document.getElementById('loading-overlay')!;\n        loadingOverlay.style.display = 'none';\n        \n    }\n\n    setFailed() {\n        this.state = ApplicationState.Failed;\n    }\n\n    switchNormalizedLimbs() {\n        if (! this.normalizedLimbs) {\n            this.pupil.skeleton.setDeltaListToNormalizedLimbs(this.mentor.skeleton);\n        } else {\n            this.pupil.skeleton.setDeltaListToDefault();\n        }\n\n        this.normalizedLimbs = ! this.normalizedLimbs;\n        \n    }\n\n    setThresholdZone(jointIndex : number) {\n        if (this.mentor.thresholdSphereIndex) {\n            const zones = PaintedSkeleton.thresholdZones[this.mentor.thresholdSphereIndex];\n            zones.map(zone => {\n                this.scene.remove(zone);\n            })\n        }\n\n        const zones = PaintedSkeleton.thresholdZones[jointIndex]\n        const currentPose = this.mentor.skeleton.getPose(this.mentor.currentFrame);\n        const observedJoint = currentPose.getJointByIndex(jointIndex);\n        zones.map(zone => {\n            //@ts-ignore\n            zone.position.set(observedJoint.x, observedJoint.y, observedJoint.z)\n            this.scene.add(zone);\n        })\n        \n        this.mentor.thresholdSphereIndex = jointIndex;\n    }\n\n    setThresholdFromSelect() {\n\n        //@ts-ignore\n        const selectedIndex = document.getElementById('joint-select-threshold')!.value\n        if (selectedIndex === -1) {\n            this.mentor.thresholdSphereIndex = undefined;\n        } else {\n            this.setThresholdZone(selectedIndex);\n        }\n    }\n\n    setJointTracking(jointIndex: number) {\n        const warpingPath = this.pupil.skeleton.warpingPaths[jointIndex];\n        this.skeletonAction.setJointTracking(warpingPath);\n\n    }\n\n    setJointTrackingFromSelect() {\n         //@ts-ignore\n         const selectedIndex = document.getElementById('joint-select-tracking')!.value\n         if (selectedIndex === -1) {\n             this.skeletonAction.setDefaultAnimation();\n         } else {\n             this.setJointTracking(selectedIndex);\n         }\n    }\n\n    setThresholdModifier(modifier: number) {\n        THRESHOLD_DEFINITIONS.map(threshold => {\n            threshold.updateThreshold(modifier)\n        })\n\n        console.log(THRESHOLD_DEFINITIONS)\n        PaintedSkeleton.thresholdZones = THRESHOLD_DEFINITIONS.map(thresholdSetting => {\n            const zone = SkeletonPainter.createThresholdZones(new Vector3(0,0,0), thresholdSetting);\n            return zone;\n        });\n\n    }\n\n    modifyThresholdModifier(modifier: number) {\n        const zones = this.mentor.getShowedThresholdZones();\n        zones.map(zone => this.scene.remove(zone));\n        this.setThresholdModifier(modifier);\n        const newZones = this.mentor.getShowedThresholdZones();\n        this.mentor.updateThresholdZonesPosition(this.mentor.skeleton.getPose(this.mentor.getFrame()));\n        newZones.map(zone => this.scene.add(zone));\n        \n    }\n\n    modifyThresholdForSpecificJoint(modifier: number) {\n        //@ts-ignore\n        const selectedIndex : number = document.getElementById('joint-select-specific-tracking')!.value;\n        if (selectedIndex === -1) {\n            return;\n        }\n\n        const oldZones = PaintedSkeleton.thresholdZones[selectedIndex];\n\n        const thresholdSettings = THRESHOLD_DEFINITIONS[selectedIndex]\n        thresholdSettings.updateThreshold(modifier);\n        const newZones = SkeletonPainter.createThresholdZones(new Vector3(0,0,0), thresholdSettings);\n        PaintedSkeleton.thresholdZones[selectedIndex] = newZones;\n        if (selectedIndex === this.mentor.thresholdSphereIndex) {\n            oldZones.map(zone => this.scene.remove(zone));\n            this.mentor.updateThresholdZonesPosition(this.mentor.skeleton.getPose(this.mentor.getFrame()));\n            newZones.map(zone => this.scene.add(zone));\n        }\n        \n\n    }\n\n\n}","import {\n\tEventDispatcher,\n\tMOUSE,\n\tQuaternion,\n\tSpherical,\n\tTOUCH,\n\tVector2,\n\tVector3\n} from 'three';\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\n\nclass OrbitControls extends EventDispatcher {\n\n\tconstructor( object, domElement ) {\n\n\t\tsuper();\n\n\t\tthis.object = object;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.05;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.panSpeed = 1.0;\n\t\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t\t// Touch fingers\n\t\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t// the target DOM element for key events\n\t\tthis._domElementKeyEvents = null;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.getDistance = function () {\n\n\t\t\treturn this.object.position.distanceTo( this.target );\n\n\t\t};\n\n\t\tthis.listenToKeyEvents = function ( domElement ) {\n\n\t\t\tdomElement.addEventListener( 'keydown', onKeyDown );\n\t\t\tthis._domElementKeyEvents = domElement;\n\n\t\t};\n\n\t\tthis.stopListenToKeyEvents = function () {\n\n\t\t\tthis._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\t\t\tthis._domElementKeyEvents = null;\n\n\t\t};\n\n\t\tthis.saveState = function () {\n\n\t\t\tscope.target0.copy( scope.target );\n\t\t\tscope.position0.copy( scope.object.position );\n\t\t\tscope.zoom0 = scope.object.zoom;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function () {\n\n\t\t\tconst offset = new Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tconst quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\t\tconst quatInverse = quat.clone().invert();\n\n\t\t\tconst lastPosition = new Vector3();\n\t\t\tconst lastQuaternion = new Quaternion();\n\n\t\t\tconst twoPI = 2 * Math.PI;\n\n\t\t\treturn function update() {\n\n\t\t\t\tconst position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t}\n\n\t\t\t\t// restrict theta to be between desired limits\n\n\t\t\t\tlet min = scope.minAzimuthAngle;\n\t\t\t\tlet max = scope.maxAzimuthAngle;\n\n\t\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\t}\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function () {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n\t\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\t\tscope.domElement.removeEventListener( 'pointercancel', onPointerCancel );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n\t\t\tscope.domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t\tscope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n\t\t\tif ( scope._domElementKeyEvents !== null ) {\n\n\t\t\t\tscope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\t\t\t\tscope._domElementKeyEvents = null;\n\n\t\t\t}\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tconst scope = this;\n\n\t\tconst STATE = {\n\t\t\tNONE: - 1,\n\t\t\tROTATE: 0,\n\t\t\tDOLLY: 1,\n\t\t\tPAN: 2,\n\t\t\tTOUCH_ROTATE: 3,\n\t\t\tTOUCH_PAN: 4,\n\t\t\tTOUCH_DOLLY_PAN: 5,\n\t\t\tTOUCH_DOLLY_ROTATE: 6\n\t\t};\n\n\t\tlet state = STATE.NONE;\n\n\t\tconst EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tconst spherical = new Spherical();\n\t\tconst sphericalDelta = new Spherical();\n\n\t\tlet scale = 1;\n\t\tconst panOffset = new Vector3();\n\t\tlet zoomChanged = false;\n\n\t\tconst rotateStart = new Vector2();\n\t\tconst rotateEnd = new Vector2();\n\t\tconst rotateDelta = new Vector2();\n\n\t\tconst panStart = new Vector2();\n\t\tconst panEnd = new Vector2();\n\t\tconst panDelta = new Vector2();\n\n\t\tconst dollyStart = new Vector2();\n\t\tconst dollyEnd = new Vector2();\n\t\tconst dollyDelta = new Vector2();\n\n\t\tconst pointers = [];\n\t\tconst pointerPositions = {};\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tconst panLeft = function () {\n\n\t\t\tconst v = new Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tconst panUp = function () {\n\n\t\t\tconst v = new Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t\t}\n\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tconst pan = function () {\n\n\t\t\tconst offset = new Vector3();\n\n\t\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\t\tconst element = scope.domElement;\n\n\t\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tconst position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tlet targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\t\tconst element = scope.domElement;\n\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\tlet needsUpdate = false;\n\n\t\t\tswitch ( event.code ) {\n\n\t\t\t\tcase scope.keys.UP:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\trotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\trotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\trotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\trotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tscope.update();\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate() {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\trotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n\t\t\t\tconst y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\n\t\t\t\trotateStart.set( x, y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartPan() {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\tpanStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n\t\t\t\tconst y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\n\t\t\t\tpanStart.set( x, y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly() {\n\n\t\t\tconst dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;\n\t\t\tconst dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;\n\n\t\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartDollyPan() {\n\n\t\t\tif ( scope.enableZoom ) handleTouchStartDolly();\n\n\t\t\tif ( scope.enablePan ) handleTouchStartPan();\n\n\t\t}\n\n\t\tfunction handleTouchStartDollyRotate() {\n\n\t\t\tif ( scope.enableZoom ) handleTouchStartDolly();\n\n\t\t\tif ( scope.enableRotate ) handleTouchStartRotate();\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\tif ( pointers.length == 1 ) {\n\n\t\t\t\trotateEnd.set( event.pageX, event.pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\t\trotateEnd.set( x, y );\n\n\t\t\t}\n\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\t\tconst element = scope.domElement;\n\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\tpanEnd.set( event.pageX, event.pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\t\tpanEnd.set( x, y );\n\n\t\t\t}\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\tconst dx = event.pageX - position.x;\n\t\t\tconst dy = event.pageY - position.y;\n\n\t\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\t\tdollyOut( dollyDelta.y );\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onPointerDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tif ( pointers.length === 0 ) {\n\n\t\t\t\tscope.domElement.setPointerCapture( event.pointerId );\n\n\t\t\t\tscope.domElement.addEventListener( 'pointermove', onPointerMove );\n\t\t\t\tscope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\taddPointer( event );\n\n\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\tonTouchStart( event );\n\n\t\t\t} else {\n\n\t\t\t\tonMouseDown( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onPointerMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\tonTouchMove( event );\n\n\t\t\t} else {\n\n\t\t\t\tonMouseMove( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onPointerUp( event ) {\n\n\t\t    removePointer( event );\n\n\t\t    if ( pointers.length === 0 ) {\n\n\t\t        scope.domElement.releasePointerCapture( event.pointerId );\n\n\t\t        scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t        scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\t\t    }\n\n\t\t    scope.dispatchEvent( _endEvent );\n\n\t\t    state = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onPointerCancel( event ) {\n\n\t\t\tremovePointer( event );\n\n\t\t}\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tlet mouseAction;\n\n\t\t\tswitch ( event.button ) {\n\n\t\t\t\tcase 0:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tmouseAction = - 1;\n\n\t\t\t}\n\n\t\t\tswitch ( mouseAction ) {\n\n\t\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MOUSE.PAN:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tswitch ( state ) {\n\n\t\t\t\tcase STATE.ROTATE:\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.DOLLY:\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.PAN:\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( _endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\ttrackPointer( event );\n\n\t\t\tswitch ( pointers.length ) {\n\n\t\t\t\tcase 1:\n\n\t\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartRotate();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartPan();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\n\t\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartDollyPan();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartDollyRotate();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\ttrackPointer( event );\n\n\t\t\tswitch ( state ) {\n\n\t\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\tfunction addPointer( event ) {\n\n\t\t\tpointers.push( event );\n\n\t\t}\n\n\t\tfunction removePointer( event ) {\n\n\t\t\tdelete pointerPositions[ event.pointerId ];\n\n\t\t\tfor ( let i = 0; i < pointers.length; i ++ ) {\n\n\t\t\t\tif ( pointers[ i ].pointerId == event.pointerId ) {\n\n\t\t\t\t\tpointers.splice( i, 1 );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction trackPointer( event ) {\n\n\t\t\tlet position = pointerPositions[ event.pointerId ];\n\n\t\t\tif ( position === undefined ) {\n\n\t\t\t\tposition = new Vector2();\n\t\t\t\tpointerPositions[ event.pointerId ] = position;\n\n\t\t\t}\n\n\t\t\tposition.set( event.pageX, event.pageY );\n\n\t\t}\n\n\t\tfunction getSecondPointerPosition( event ) {\n\n\t\t\tconst pointer = ( event.pointerId === pointers[ 0 ].pointerId ) ? pointers[ 1 ] : pointers[ 0 ];\n\n\t\t\treturn pointerPositions[ pointer.pointerId ];\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n\t\tscope.domElement.addEventListener( 'pointerdown', onPointerDown );\n\t\tscope.domElement.addEventListener( 'pointercancel', onPointerCancel );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t}\n\n}\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nclass MapControls extends OrbitControls {\n\n\tconstructor( object, domElement ) {\n\n\t\tsuper( object, domElement );\n\n\t\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\t\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\t\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\t\tthis.touches.ONE = TOUCH.PAN;\n\t\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n\t}\n\n}\n\nexport { OrbitControls, MapControls };\n","import { PaintedSkeleton } from \"./Entities/PaintedSkeleton\"\nimport { SkeletonAction } from \"./SkeletonAction\"\n\nconst container = document.getElementById(\"slider-container\")!\nconst slider = document.getElementById(\"slider\")!\nconst control = document.getElementById(\"slider-control\")!\n\nconst containerLeft = container.getBoundingClientRect().left\nconst containerWidth = container.offsetWidth\n\nconst offset = containerLeft;\n\nexport class AnimationSlider {\n\n  currentFrame : number;\n  maxFrame : number;\n  containerWidth : number;\n  container : HTMLElement;\n  control : HTMLElement;\n  slider : HTMLElement;\n  animatedSkeleton : PaintedSkeleton;\n  animationControl : SkeletonAction;\n  offset : number;\n\n  constructor(animatedSkeleton : PaintedSkeleton) {\n    this.currentFrame = 0;\n    this.maxFrame = animatedSkeleton.maxFrame;  \n    this.containerWidth = container.offsetWidth;\n    this.container = document.getElementById(\"slider-container\")!;\n    this.control = document.getElementById(\"slider-control\")!;\n    this.control.onmousedown = this.startDrag.bind(this);\n    this.container.onmouseenter = this.onMouseEnter.bind(this);\n    this.container.onmouseleave = this.onMouseLeave.bind(this);\n    this.container.onclick = this.onClick.bind(this);\n    this.slider = document.getElementById(\"slider\")!;\n    this.animatedSkeleton = animatedSkeleton;\n    this.offset = this.container.getBoundingClientRect().left;\n    console.log(this.container)\n\n    \n    // container.addEventListener('mousedown', onClick);\n  }\n\n  initListeners() {\n    control.addEventListener('mousedown', this.startDrag);\n    container.addEventListener('mouseenter', this.onMouseEnter);\n    container.addEventListener('mouseleave', this.onMouseLeave);\n  }\n\n\n  getPercentage() {\n    return this.slider.offsetWidth / this.containerWidth;\n  }\n\n  animateSlider(frame : number) {\n    const percentage = frame / this.maxFrame;\n    \n    const filledWith = percentage * this.containerWidth;\n\n    this.currentFrame = frame;\n    this.slider.style.width = filledWith.toString() + 'px';\n  }\n\n  getSkeletonFrame(offsetWidth : number) {\n    const percentage = this.calculatePercentage(offsetWidth);\n    return Math.floor(this.maxFrame * percentage);\n  }\n\n  calculatePercentage(offsetWidth : number) {\n    return offsetWidth / this.containerWidth;\n  }\n\n  changeControlPosition(e : any) {\n    const actualWidth = e.clientX - this.offset;\n    let result = actualWidth;\n    if (this.containerWidth < actualWidth) {\n      result = containerWidth\n    }\n\n    this.animationControl.setFrame(this.getSkeletonFrame(result));\n    this.animationControl.render()\n    this.slider.style.width = result.toString() + 'px'\n  }\n\n  onMouseEnter(e : any) {\n    this.container.style.height = \"1rem\";\n    this.slider.style.height = \"1rem\";\n    this.control.style.height = \"1rem\";\n  }\n\n  onMouseLeave(e : any) {\n    this.container.style.height = \"0.75rem\";\n    this.slider.style.height = \"0.75rem\";\n    this.control.style.height = \"0.75rem\";\n  }\n\n  onClick(e : any ) {\n    const actualWidth = e.clientX - this.offset;\n    this.slider.style.width = actualWidth.toString() + 'px';\n    const frame = this.getSkeletonFrame(actualWidth);\n    this.animationControl.setFrame(frame);\n\n  }\n\n  startDrag(e : any) {\n    this.animationControl.stop(); \n    window.onmousemove = this.changeControlPosition.bind(this);\n    window.onmouseup = this.stopDrag.bind(this);\n  }\n  \n  stopDrag(e : any) {\n    window.onmousemove = (e) => {};\n    window.onmouseup = (e) => {};\n    this.animationControl.start();\n  }\n\n}\n\n\nconst onClick = (e : any) => {\n  const actualWidth = e.clientX - offset;\n  slider.style.width = actualWidth.toString() + 'px';\n}\n\n// export const initSlider = () => {\n//   control.addEventListener('mousedown', startMoving);\n//   container.addEventListener('mouseenter', onMouseEnter);\n//   container.addEventListener('mouseleave', onMouseLeave);\n//   container.addEventListener('mousedown', onClick);\n// }\n\n\n\n\n","export const openOverlay = (e) => {\n  e.stopPropagation();\n  document.getElementById('settings-overlay')!.style.width = '40vw';\n  document.getElementById('settings-overlay')!.style.padding = '1rem'; \n  document.getElementById('canvas-container')!.addEventListener('click', closeOverlay);\n}\n\nexport const closeOverlay = (e) => {\n  e.stopPropagation();\n  document.getElementById('settings-overlay')!.style.width = '0'; \n  document.getElementById('settings-overlay')!.style.padding = '0'; \n  document.getElementById('canvas-container')!.removeEventListener('click', closeOverlay);\n} \n\nexport const initSettingsButtons = (animationControlFunctions) => {\n  document.getElementById('settings-btn')!.addEventListener('click', openOverlay);\n  document.getElementById('close-btn')!.addEventListener('click', closeOverlay);\n  const playButton = document.getElementById('play-pause-btn')!;\n  window.addEventListener('play', (e) => setPauseButton(e as CustomEvent));\n  window.addEventListener('pause', (e) => setPlayButton(e as CustomEvent));\n  window.addEventListener('animation-end', (e) => setPlayButtonStart(e as CustomEvent));\n  \n  const speedModifiers = [ 0.5, 1 ]\n  playButton.onclick = animationControlFunctions.pause;\n  \n  document.getElementById('mentor-switch')!.addEventListener('click', animationControlFunctions.switchMentor);\n  document.getElementById('mentor-switch-centered')!.addEventListener('click', animationControlFunctions.centerMentor);\n  document.getElementById('normalize-limbs-switch')!.addEventListener('click', animationControlFunctions.switchNormalizedLimbs);\n  document.getElementById('joint-select-threshold')!.addEventListener('change', animationControlFunctions.selectThresholdHandler);\n  document.getElementById('joint-select-tracking')!.addEventListener('change', animationControlFunctions.selectTrackingHandler);\n  document.getElementById('threshold-decrease')!.addEventListener('click', () => animationControlFunctions.manipulateThreshlodModifier(-0.25));\n  document.getElementById('threshold-increase')!.addEventListener('click', () => animationControlFunctions.manipulateThreshlodModifier(0.25));\n  document.getElementById('threshold-specific-decrease')!.addEventListener('click', () => animationControlFunctions.selectSpecificThreshlodHandler(-0.25));\n  document.getElementById('threshold-specific-increase')!.addEventListener('click', () => animationControlFunctions.selectSpecificThreshlodHandler(0.25));\n\n  speedModifiers.map(speed => {\n    const btn = document.getElementById(`speed-${speed.toString()}-btn`)!\n    btn.onclick = (e) => animationControlFunctions.speed(speed);\n  })\n\n\n}\nconst setPlayButtonStart = (e : CustomEvent) => {\n  const btn = document.getElementById('play-pause-btn')! as HTMLImageElement;\n  btn.src = \"/play-solid.fd55628a.svg\";\n  btn.onclick = e.detail.playFromStart;\n}\n\nconst setPauseButton = (e : CustomEvent) => {\n  const btn = document.getElementById('play-pause-btn')! as HTMLImageElement;\n  btn.src = \"/pause-solid.e0260729.svg\";\n  btn.onclick = e.detail.pause;\n}\n\nconst setPlayButton = (e : CustomEvent) => {\n  console.log(\"I activated stop\")\n  const btn = document.getElementById('play-pause-btn')! as HTMLImageElement;\n  btn.src = \"/play-solid.fd55628a.svg\";\n  btn.onclick = e.detail.play;\n}\n","export enum ApplicationState {\n    Loading,\n    Loaded,\n    Failed\n}","import { Clock, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { AnimationSlider } from \"./AnimationSlider\";\nimport { getJointFrameTracking } from \"./DTWCalculator\";\nimport { PaintedSkeleton } from \"./Entities/PaintedSkeleton\";\nimport { WarpingStep } from \"./Entities/WarpingStep\";\n\nconst clock = new Clock();\n\nclass SkeletonAction {\n\n  private camera : PerspectiveCamera;\n  private scene : Scene;\n  private renderer : WebGLRenderer;\n  private interval: number; \n  private delta: number; // time elapsed since last frame\n  private speedModifier: number;\n  private progressionBar : AnimationSlider;\n  skeletons: PaintedSkeleton[];\n  private maxFrame : number;\n  currentFrame : number;\n  boundFunctions;\n  playing : boolean;\n  trackJointMovement: boolean\n  jointFrames: number[];\n  tickFunction : Function;\n\n  constructor(camera: PerspectiveCamera, scene : Scene, renderer : WebGLRenderer, progressionBar : AnimationSlider, fps = 60) {\n    this.camera = camera;\n    this.scene = scene;\n    this.renderer = renderer;\n    this.speedModifier = 1;\n    this.interval = (1 / fps) / this.speedModifier;\n    this.delta = 0;\n    this.progressionBar = progressionBar\n    progressionBar.animationControl = this;\n    this.maxFrame = 0;\n    this.currentFrame = 0;\n    this.boundFunctions = { play: this.start.bind(this), playFromStart: this.startFromBeginning.bind(this), speed: this.setSpeed.bind(this), pause: this.stop.bind(this), setFrame: this.setFrame.bind(this)}\n    this.playing = false;\n    this.jointFrames = [];\n    this.tickFunction = this.tick.bind(this);\n\n    window.addEventListener('keydown', this.handleSpacebar.bind(this));\n  }\n\n  startFromBeginning() {\n    this.skeletons.map((skeleton) => {\n      skeleton.setToFrame(0);\n    });\n    this.currentFrame = 0;\n    this.start();\n  }\n\n  addSkeleton(skeleton : PaintedSkeleton) {\n    this.maxFrame = Math.max(skeleton.maxFrame, this.maxFrame);\n    this.skeletons.push(skeleton)\n  }\n\n  setFrame(frame : number) {\n    this.skeletons.map((skeleton) => {\n      const frameToSet = Math.min(skeleton.maxFrame, frame);\n      skeleton.setToFrame(frameToSet);\n    });\n    this.currentFrame = frame;\n  }\n\n  render() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  start() {\n    const ev = new CustomEvent(\"play\", { detail: this.boundFunctions });\n    this.playing = true;\n    dispatchEvent(ev);\n    this.renderer.setAnimationLoop(() => {\n\n      this.delta += clock.getDelta();\n      if (this.delta > this.interval) {\n        \n        if (this.tickFunction()) {\n          this.stop();\n          const ev = new CustomEvent(\"animation-end\", { detail: this.boundFunctions });\n          dispatchEvent(ev);\n          return;\n        }\n        \n        this.delta = this.delta % this.interval;\n      }\n    });\n  }\n\n  stop() {\n    const ev = new CustomEvent(\"pause\", { detail: this.boundFunctions });\n    this.playing = false;\n    dispatchEvent(ev);\n    console.log(this.currentFrame);\n    this.renderer.setAnimationLoop(() => {\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  tick() {\n    this.setFrame(this.currentFrame);\n    this.currentFrame += 1;\n    this.progressionBar?.animateSlider(this.skeletons[0].getFrame())\n\n    this.renderer.render(this.scene, this.camera);\n\n    return this.skeletons.every(skeleton => skeleton.maxFrame <= this.currentFrame);\n  }\n\n  tickJointTracker() {\n    const pupil = this.skeletons[0];\n    pupil.setToFrame(this.currentFrame);\n    this.skeletons[1].setToFrame(this.jointFrames[this.currentFrame]);\n    this.currentFrame += 1;\n\n    this.progressionBar?.animateSlider(this.skeletons[0].getFrame())\n\n    this.renderer.render(this.scene, this.camera);\n    \n    return pupil.maxFrame <= this.currentFrame;\n\n  }\n\n  setSpeed(modifier: number) {\n    this.interval = (this.interval * this.speedModifier) / modifier;\n    this.speedModifier = modifier;\n  }\n\n  setJointTracking(warpingPath: WarpingStep[]) {\n    this.jointFrames = getJointFrameTracking(warpingPath);\n    this.tickFunction = this.tickJointTracker.bind(this);\n  } \n\n  setDefaultAnimation() {\n    this.tickFunction = this.tick.bind(this);\n  }\n\n  handleSpacebar(e : any) {\n    if (e.key == \" \" ||\n        e.code == \"Space\" ||      \n        e.keyCode == 32      \n    ) {\n      if (this.playing) {\n        this.stop();\n      } else {\n        this.start();\n      }\n    }\n  }\n}\n\n\n\nexport { SkeletonAction };","import { Skeleton } from \"./Entities/Skeleton\";\nimport { Pose } from \"./Entities/Pose\";\nimport { SequenceParser } from \"./SequenceParser\";\nimport { PaintedSkeleton } from \"./Entities/PaintedSkeleton\";\n\nexport class SkeletonLoader {\n\n    static BASE_URL = \"http://disa.fi.muni.cz/mocap-demo-external/exportMocapData\"\n    parser: SequenceParser;\n    \n\n    constructor() {\n        this.parser = new SequenceParser();\n    }\n\n    loadDummyPose(dummyFile : string[]) {\n        return dummyFile.map(line => this.parser.parsePose(line))\n    }\n\n    async createPaintedSkeleton() {\n        const poses = await this.loadPoses();\n        const mentorSkeleton = new Skeleton(poses[0], false);\n        const pupilSkeleton = new Skeleton(poses[1], true);\n        pupilSkeleton.calculateDeltaFromMentor(mentorSkeleton);\n\n        const mentor = new PaintedSkeleton(mentorSkeleton);\n        const pupil = new PaintedSkeleton(pupilSkeleton);\n        return [mentor, pupil]\n    } \n\n    async loadPoses() {\n        const searchString = location.search;\n        const keys = searchString.substring(1, searchString.length);\n        const paramsMap = keys.split('&').reduce((p, c) => {\n            let components = c.split('=');\n            p[components[0]] = components[1]\n            return p;\n        }, new Map<string, string>());\n\n        const pupilQueryString = this.createQueryParams(paramsMap['qId'], paramsMap['qFrom'], paramsMap['qTo'], 'true');\n        const mentorQueryString = this.createQueryParams(paramsMap['rId'], paramsMap['rFrom'], paramsMap['rTo'], 'true');\n        const pupilResponse = fetch(SkeletonLoader.BASE_URL + pupilQueryString);\n        console.log(\"I fetched pupil\")\n        const mentorResponse = fetch(SkeletonLoader.BASE_URL + mentorQueryString);\n        console.log(\"I fetched mentor\")\n        const boundParser = this.parsePoseSequences.bind(this);\n\n        const pupilPoses = pupilResponse.then( res => res.text().then(boundParser))\n        const mentorPoses = mentorResponse.then( res => res.text().then(boundParser));\n\n        const pupilResult = await pupilPoses as unknown as Pose[];\n        const mentorResult = await mentorPoses as unknown as Pose[];\n\n        return [pupilResult, mentorResult];\n        \n    }\n\n    createQueryParams(sequenceLocator : string, frameFrom: string, frameTo: string, normalize: string) : string {\n        return `?sequenceLocator=${sequenceLocator}&from=${frameFrom}&to=${frameTo}&normalize=${normalize}`\n\n    }\n\n    parsePoseSequences(text : string) : Pose[] {\n        console.log('parsing start')\n        const bits = text.split('\\n');\n        const lines = bits.splice(1, bits.length - 3);\n        const parsed = lines.map(line => this.parser.parsePose(line));\n        console.log('parsing ends')\n        \n        return parsed;\n        \n    }\n\n}\n","\nimport { Vector3 } from \"three\";\nimport { Pose } from \"./Entities/Pose\";\n\n\nexport class SequenceParser {\n\n  parsePose(line : string) : Pose {\n    const unparsedJoints = line.split(\";\")\n    const joints = unparsedJoints.map(unparsed => \n      { \n        const coordinates = unparsed.split(\",\").map(str => parseFloat(str));\n        return new Vector3(coordinates[0], coordinates[1], coordinates[2]);\n      })\n    \n      return new Pose(joints);\n  }\n\n}\n","import { Vector3 } from \"three\";\nimport { ALL_PARTS, BodyParts } from \"./BodyParts\";\nimport * as THREE from 'three';\n\nexport class Pose {\n\n  private coordinates : Vector3[];\n  static ROOT_INDEX: number = 0;\n  static LHIPJOINT_INDEX: number = 1;\n  static LFEMUR_INDEX: number = 2;\n  static LTIBIA_INDEX: number = 3;\n  static LFOOT_INDEX: number = 4;\n  static LTOES_INDEX: number = 5;\n  static RHIPJOINT_INDEX: number = 6;\n  static RFEMUR_INDEX: number = 7;\n  static RTIBIA_INDEX: number = 8;\n  static RFOOT_INDEX: number = 9;\n  static RTOES_INDEX: number = 10;\n  static LOWERBACK_INDEX: number = 11;\n  static UPPERBACK_INDEX: number = 12;\n  static THORAX_INDEX: number = 13;\n  static LOWERNECK_INDEX: number = 14;\n  static UPPERNECK_INDEX: number = 15;\n  static HEAD_INDEX: number = 16;\n  static LCLAVICLE_INDEX: number = 17;\n  static LHUMERUS_INDEX: number = 18;\n  static LRADIUS_INDEX: number = 19;\n  static LWRIST_INDEX: number = 20;\n  static LHAND_INDEX: number = 21;\n  static LFINGERS_INDEX: number = 22;\n  static LTHUMB_INDEX: number = 23;\n  static RCLAVICLE_INDEX: number = 24;\n  static RHUMERUS_INDEX: number = 25;\n  static RRADIUS_INDEX: number = 26;\n  static RWRIST_INDEX: number = 27;\n  static RHAND_INDEX: number = 28;\n  static RFINGERS_INDEX: number = 29;\n  static RTHUMB_INDEX: number = 30;\n\n  static TORSO_JOINTS       = [Pose.ROOT_INDEX, Pose.LOWERBACK_INDEX, Pose.UPPERBACK_INDEX, Pose.THORAX_INDEX];\n  static LEFT_ARM_JOINTS    = [Pose.LCLAVICLE_INDEX, Pose.LHUMERUS_INDEX, Pose.LRADIUS_INDEX, Pose.LWRIST_INDEX, Pose.LHAND_INDEX, Pose.LFINGERS_INDEX];\n  static RIGHT_ARM_JOINTS   = [Pose.RCLAVICLE_INDEX, Pose.RHUMERUS_INDEX, Pose.RRADIUS_INDEX, Pose.RWRIST_INDEX, Pose.RHAND_INDEX, Pose.RFINGERS_INDEX];\n  static LEFT_LEG_JOINTS    = [Pose.LHIPJOINT_INDEX, Pose.LFEMUR_INDEX, Pose.LTIBIA_INDEX, Pose.LFOOT_INDEX, Pose.LTOES_INDEX];\n  static RIGHT_LEG_JOINTS   = [Pose.RHIPJOINT_INDEX, Pose.RFEMUR_INDEX, Pose.RTIBIA_INDEX, Pose.RFOOT_INDEX, Pose.RTOES_INDEX];\n  static HEAD_JOINTS        = [Pose.LOWERNECK_INDEX, Pose.UPPERNECK_INDEX, Pose.HEAD_INDEX];\n  static LEFT_THUMB_JOINTS  = [Pose.LTHUMB_INDEX];\n  static RIGHT_THUMB_JOINTS = [Pose.RTHUMB_INDEX];\n  \n  constructor(joints : Vector3[]) {\n    this.coordinates = joints;\n  }\n\n  getTorso() : Array<Vector3> {\n    return [ this.coordinates[Pose.ROOT_INDEX], this.coordinates[Pose.LOWERBACK_INDEX], this.coordinates[Pose.UPPERBACK_INDEX], this.coordinates[Pose.THORAX_INDEX] ]\n  }\n\n  getLeftArm() : Array<Vector3> {\n    return [ this.coordinates[Pose.THORAX_INDEX], this.coordinates[Pose.LCLAVICLE_INDEX], this.coordinates[Pose.LHUMERUS_INDEX], this.coordinates[Pose.LRADIUS_INDEX], this.coordinates[Pose.LWRIST_INDEX], this.coordinates[Pose.LHAND_INDEX], this.coordinates[Pose.LFINGERS_INDEX]]\n  }\n\n  getLeftLeg() : Array<Vector3> {\n    return [ this.coordinates[Pose.ROOT_INDEX], this.coordinates[Pose.LHIPJOINT_INDEX], this.coordinates[Pose.LFEMUR_INDEX], this.coordinates[Pose.LTIBIA_INDEX], this.coordinates[Pose.LFOOT_INDEX], this.coordinates[Pose.LTOES_INDEX] ]\n  }\n\n  getRightArm() : Array<Vector3> {\n    return [ this.coordinates[Pose.THORAX_INDEX], this.coordinates[Pose.RCLAVICLE_INDEX], this.coordinates[Pose.RHUMERUS_INDEX], this.coordinates[Pose.RRADIUS_INDEX], this.coordinates[Pose.RWRIST_INDEX], this.coordinates[Pose.RHAND_INDEX], this.coordinates[Pose.RFINGERS_INDEX]]\n  }\n\n  getRightLeg() : Array<Vector3> {\n    return [ this.coordinates[Pose.ROOT_INDEX], this.coordinates[Pose.RHIPJOINT_INDEX], this.coordinates[Pose.RFEMUR_INDEX], this.coordinates[Pose.RTIBIA_INDEX], this.coordinates[Pose.RFOOT_INDEX], this.coordinates[Pose.RTOES_INDEX] ]\n  }\n\n  getHead() : Array<Vector3> {\n    return [ this.coordinates[Pose.THORAX_INDEX], this.coordinates[Pose.LOWERNECK_INDEX], this.coordinates[Pose.UPPERNECK_INDEX], this.coordinates[Pose.HEAD_INDEX] ]\n  }\n\n  getRightThumb() : Array<Vector3> {\n    return [ this.coordinates[Pose.RHAND_INDEX], this.coordinates[Pose.RTHUMB_INDEX]];\n  }\n\n  getLeftThumb() : Array<Vector3> {\n    return [this.coordinates[Pose.LHAND_INDEX], this.coordinates[Pose.LTHUMB_INDEX]];\n  }\n\n  getLowestPoint() : Vector3 {\n    const coordinates = this.coordinates;\n\n    return coordinates.reduce(\n      (lowest, current) => { \n        if (lowest.y > current.y) {\n          return current; \n        }\n        return lowest;\n      }, \n      this.coordinates[Pose.ROOT_INDEX]);\n  }\n\n  getJointsIndices(bodyPart : BodyParts) : number[] {\n    switch(bodyPart) {\n      case BodyParts.Head:\n        return Pose.HEAD_JOINTS;\n\n      case BodyParts.LeftLeg:\n        return Pose.LEFT_LEG_JOINTS;\n\n      case BodyParts.LeftArm:\n        return Pose.LEFT_ARM_JOINTS;\n      \n      case BodyParts.RightLeg:\n        return Pose.RIGHT_LEG_JOINTS;\n\n      case BodyParts.RightArm:\n        return Pose.RIGHT_ARM_JOINTS;\n\n      case BodyParts.Torso:\n        return Pose.TORSO_JOINTS;\n      \n      case BodyParts.LeftThumb:\n        return Pose.LEFT_THUMB_JOINTS;\n      \n      case BodyParts.RightThumb:\n        return Pose.RIGHT_THUMB_JOINTS;\n      \n      default:\n        return [];\n    }\n  }\n\n  getJointsConnectedIndices(bodyPart : BodyParts) : number[] {\n    switch(bodyPart) {\n      case BodyParts.Head:\n        return [Pose.THORAX_INDEX].concat(Pose.HEAD_JOINTS);\n\n      case BodyParts.LeftLeg:\n        return [Pose.ROOT_INDEX].concat(Pose.LEFT_LEG_JOINTS);\n\n      case BodyParts.LeftArm:\n        return[Pose.THORAX_INDEX].concat(Pose.LEFT_ARM_JOINTS);\n      \n      case BodyParts.RightLeg:\n        return [Pose.ROOT_INDEX].concat(Pose.RIGHT_LEG_JOINTS);\n\n      case BodyParts.RightArm:\n        return [Pose.THORAX_INDEX].concat(Pose.RIGHT_ARM_JOINTS);\n      \n      case BodyParts.LeftThumb:\n        return [Pose.LHAND_INDEX].concat(Pose.LEFT_THUMB_JOINTS);\n        \n      case BodyParts.RightThumb:\n        return [Pose.RHAND_INDEX].concat(Pose.RIGHT_THUMB_JOINTS);\n\n      case BodyParts.Torso:\n        return Pose.TORSO_JOINTS;\n      \n      default:\n        return [];\n    }\n\n  }\n\n  getBodyPart(bodyPart: BodyParts) : Vector3[] {\n    switch(bodyPart) {\n      case BodyParts.Head:\n        return this.getHead();\n\n      case BodyParts.LeftLeg:\n        return this.getLeftLeg();\n\n      case BodyParts.LeftArm:\n        return this.getLeftArm();\n      \n      case BodyParts.RightLeg:\n        return this.getRightLeg();\n\n      case BodyParts.RightArm:\n        return this.getRightArm();\n\n      case BodyParts.Torso:\n        return this.getTorso();\n\n      case BodyParts.LeftThumb:\n        return this.getLeftThumb();\n      \n      case BodyParts.RightThumb:\n        return this.getRightThumb();\n      \n      default:\n        return [];\n    }\n  }\n\n  getCoordinates() : Array<Vector3> {\n    return this.coordinates;\n  }\n\n  /**\n   * Calculates list of vectors, that are necessary for shifting \n   * from current pose to next pose.\n   * \n   * @param nextCoordinates pose to shift to\n   * \n   * @returns \n   */\n  static calculateDeltaSubPose(oldCoordinates : Vector3[], nextCoordinates : Vector3[]) : Vector3[] {\n    const deltaList : Vector3[] = [];\n    for (let i = 0; i < oldCoordinates.length; i++) {\n\n      deltaList.push(Pose.calculateDelta(oldCoordinates[i], nextCoordinates[i]));\n    }\n\n    return deltaList;\n  }\n\n  convertPointsToTHREEModule(points: Vector3[]) : THREE.Vector3[] {\n    const newPoints : THREE.Vector3[] = [] \n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n      newPoints.push(new THREE.Vector3(point.x, point.y, point.z));\n    }\n\n    return newPoints;\n  }\n\n  /**\n   * Calculates vectors, that is necessary for shifting \n   * from current vec1 to vec2.\n   * @param vec1 \n   * @param vec2 \n   */\n  private static calculateDelta(vec1 : Vector3, vec2: Vector3) : Vector3 {\n    return new Vector3(vec1.x - vec2.x, vec1.y - vec2.y, vec1.z - vec2.z)\n  }\n\n  getJointByIndex(index : number) {\n    return this.coordinates[index];\n  }\n\n  /**\n   * VERY MUCH NOT PRETTY\n   * \n   * @param x \n   * @param y \n   * @param z \n   */\n  translatePose(x,y,z) {\n    this.coordinates.map(joint => joint.add(new Vector3(x,y,z)));\n  }\n\n  normalizeJoints(rootJoint: Vector3, joints: Vector3[]) {\n    return joints.map(joint => joint.addScaledVector(rootJoint, -1));\n  }\n\n  /**\n   * Normalizes limb parts in pose\n   * \n   * @returns copy of pose\n   * \n   */\n  normalizePoseToLimbParts() : Pose {\n    const cpy : Vector3[] = [];\n    const poseCopy = new Pose(cpy);\n    this.coordinates.map(coord => cpy.push(new Vector3(coord.x, coord.y, coord.z)));\n    ALL_PARTS.map(part => this.normalizeLimb(part, poseCopy));\n    return poseCopy;\n  }\n\n\n  private normalizeLimb(bodyPart : BodyParts, pose: Pose) {\n    const indices = pose.getJointsIndices(bodyPart);\n    let rootJointIndex = indices[0];\n    // switch(bodyPart) {\n\n    //   case BodyParts.LeftLeg:\n    //   case BodyParts.RightLeg:\n    //     rootJointIndex = Pose.ROOT_INDEX;\n    //     break;\n\n    //   case BodyParts.LeftArm:\n    //   case BodyParts.RightArm:\n    //   case BodyParts.Torso:\n    //   case BodyParts.Head:\n    //     rootJointIndex = Pose.THORAX_INDEX;\n    //     break;\n\n    //   case BodyParts.LeftThumb:\n    //     rootJointIndex = Pose.LHAND_INDEX;\n    //     break;\n    //   case BodyParts.RightThumb:\n    //     rootJointIndex = Pose.RHAND_INDEX;\n    //     break;\n    // }\n    const offset = pose.getJointCoordinate(rootJointIndex);\n    indices.map(index => {\n      const current = pose.getJointCoordinate(index);\n      pose.setJointCoordinate(index, new Vector3(current.x - offset.x, current.y - offset.y, current.z - offset.z));\n    })\n  }\n\n  getJointCoordinate(jointIndex: number) {\n    return this.coordinates[jointIndex];\n  }\n\n  setJointCoordinate(jointIndex: number, coord: Vector3) {\n    this.coordinates[jointIndex] = coord;\n  }\n}"],"names":["MAX_UID","MILLISECONDS_MULTIPLIER","TRANSITION_END","parseSelector","selector","window","CSS","escape","replace","match","id","toType","object","undefined","Object","prototype","toString","call","toLowerCase","getUID","prefix","Math","floor","random","document","getElementById","getTransitionDurationFromElement","element","transitionDuration","transitionDelay","getComputedStyle","floatTransitionDuration","Number","parseFloat","floatTransitionDelay","split","triggerTransitionEnd","dispatchEvent","Event","isElement","jquery","nodeType","getElement","length","querySelector","isVisible","getClientRects","elementIsVisible","getPropertyValue","closedDetails","closest","summary","parentNode","isDisabled","Node","ELEMENT_NODE","classList","contains","disabled","hasAttribute","getAttribute","findShadowRoot","documentElement","attachShadow","getRootNode","root","ShadowRoot","noop","reflow","offsetHeight","getjQuery","jQuery","body","DOMContentLoadedCallbacks","onDOMContentLoaded","callback","readyState","addEventListener","push","isRTL","dir","defineJQueryPlugin","plugin","$","name","NAME","JQUERY_NO_CONFLICT","fn","jQueryInterface","Constructor","noConflict","execute","possibleCallback","args","defaultValue","executeAfterTransition","transitionElement","waitForTransition","durationPadding","emulatedDuration","called","handler","target","removeEventListener","setTimeout","getNextActiveElement","list","activeElement","shouldGetNext","isCycleAllowed","listLength","index","indexOf","max","min","namespaceRegex","stripNameRegex","stripUidRegex","eventRegistry","uidEvent","customEvents","mouseenter","mouseleave","nativeEvents","Set","makeEventUid","uid","getElementEvents","bootstrapHandler","event","hydrateObj","delegateTarget","oneOff","EventHandler","off","type","apply","bootstrapDelegationHandler","domElements","querySelectorAll","domElement","findHandler","events","callable","delegationSelector","values","find","normalizeParameters","originalTypeEvent","delegationFunction","isDelegated","typeEvent","getTypeEvent","has","addHandler","wrapFunction","relatedTarget","handlers","previousFunction","removeHandler","Boolean","removeNamespacedHandlers","namespace","storeElementEvent","handlerKey","entries","includes","on","one","inNamespace","isNamespace","startsWith","keys","elementEvent","slice","keyHandlers","trigger","jQueryEvent","bubbles","nativeDispatch","defaultPrevented","isPropagationStopped","isImmediatePropagationStopped","isDefaultPrevented","evt","cancelable","preventDefault","obj","meta","key","value","_unused","defineProperty","configurable","get","elementMap","Map","set","instance","instanceMap","size","console","error","Array","from","remove","delete","normalizeData","JSON","parse","decodeURIComponent","normalizeDataKey","chr","Manipulator","setDataAttribute","setAttribute","removeDataAttribute","removeAttribute","getDataAttributes","attributes","bsKeys","dataset","filter","pureKey","charAt","getDataAttribute","Config","Default","DefaultType","Error","_getConfig","config","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","jsonConfig","constructor","configTypes","property","expectedTypes","valueType","RegExp","test","TypeError","toUpperCase","VERSION","BaseComponent","_element","_config","Data","DATA_KEY","dispose","EVENT_KEY","propertyName","getOwnPropertyNames","_queueCallback","isAnimated","getInstance","getOrCreateInstance","eventName","getSelector","hrefAttribute","trim","SelectorEngine","concat","Element","findOne","children","child","matches","parents","ancestor","prev","previous","previousElementSibling","next","nextElementSibling","focusableChildren","focusables","map","join","el","getSelectorFromElement","getElementFromSelector","getMultipleElementsFromSelector","enableDismissTrigger","component","method","clickEvent","tagName","EVENT_CLOSE","EVENT_CLOSED","CLASS_NAME_FADE","CLASS_NAME_SHOW","Alert","close","closeEvent","_destroyElement","each","data","DATA_API_KEY","CLASS_NAME_ACTIVE","SELECTOR_DATA_TOGGLE","EVENT_CLICK_DATA_API","Button","toggle","button","EVENT_TOUCHSTART","EVENT_TOUCHMOVE","EVENT_TOUCHEND","EVENT_POINTERDOWN","EVENT_POINTERUP","POINTER_TYPE_TOUCH","POINTER_TYPE_PEN","CLASS_NAME_POINTER_EVENT","SWIPE_THRESHOLD","endCallback","leftCallback","rightCallback","Swipe","isSupported","_deltaX","_supportPointerEvents","PointerEvent","_initEvents","_start","touches","clientX","_eventIsPointerPenTouch","_end","_handleSwipe","_move","absDeltaX","abs","direction","add","pointerType","navigator","maxTouchPoints","ARROW_LEFT_KEY","ARROW_RIGHT_KEY","TOUCHEVENT_COMPAT_WAIT","ORDER_NEXT","ORDER_PREV","DIRECTION_LEFT","DIRECTION_RIGHT","EVENT_SLIDE","EVENT_SLID","EVENT_KEYDOWN","EVENT_MOUSEENTER","EVENT_MOUSELEAVE","EVENT_DRAG_START","EVENT_LOAD_DATA_API","CLASS_NAME_CAROUSEL","CLASS_NAME_SLIDE","CLASS_NAME_END","CLASS_NAME_START","CLASS_NAME_NEXT","CLASS_NAME_PREV","SELECTOR_ACTIVE","SELECTOR_ITEM","SELECTOR_ACTIVE_ITEM","SELECTOR_ITEM_IMG","SELECTOR_INDICATORS","SELECTOR_DATA_SLIDE","SELECTOR_DATA_RIDE","KEY_TO_DIRECTION","interval","keyboard","pause","ride","touch","wrap","Carousel","_interval","_activeElement","_isSliding","touchTimeout","_swipeHelper","_indicatorsElement","_addEventListeners","cycle","_slide","nextWhenVisible","hidden","_clearInterval","_updateInterval","setInterval","_maybeEnableCycle","to","items","_getItems","activeIndex","_getItemIndex","_getActive","order","defaultInterval","_keydown","_addTouchEventListeners","img","endCallBack","clearTimeout","swipeConfig","_directionToOrder","_setActiveIndicatorElement","activeIndicator","newActiveIndicator","elementInterval","parseInt","isNext","nextElement","nextElementIndex","triggerEvent","_orderToDirection","slideEvent","isCycling","directionalClassName","orderClassName","completeCallBack","_isAnimated","clearInterval","carousel","slideIndex","carousels","EVENT_SHOW","EVENT_SHOWN","EVENT_HIDE","EVENT_HIDDEN","CLASS_NAME_COLLAPSE","CLASS_NAME_COLLAPSING","CLASS_NAME_COLLAPSED","CLASS_NAME_DEEPER_CHILDREN","CLASS_NAME_HORIZONTAL","WIDTH","HEIGHT","SELECTOR_ACTIVES","parent","Collapse","_isTransitioning","_triggerArray","toggleList","elem","filterElement","foundElement","_initializeChildren","_addAriaAndCollapsedClass","_isShown","hide","show","activeChildren","_getFirstLevelChildren","startEvent","activeInstance","dimension","_getDimension","style","complete","capitalizedDimension","scrollSize","getBoundingClientRect","selected","triggerArray","isOpen","ESCAPE_KEY","TAB_KEY","ARROW_UP_KEY","ARROW_DOWN_KEY","RIGHT_MOUSE_BUTTON","EVENT_KEYDOWN_DATA_API","EVENT_KEYUP_DATA_API","CLASS_NAME_DROPUP","CLASS_NAME_DROPEND","CLASS_NAME_DROPSTART","CLASS_NAME_DROPUP_CENTER","CLASS_NAME_DROPDOWN_CENTER","SELECTOR_DATA_TOGGLE_SHOWN","SELECTOR_MENU","SELECTOR_NAVBAR","SELECTOR_NAVBAR_NAV","SELECTOR_VISIBLE_ITEMS","PLACEMENT_TOP","PLACEMENT_TOPEND","PLACEMENT_BOTTOM","PLACEMENT_BOTTOMEND","PLACEMENT_RIGHT","PLACEMENT_LEFT","PLACEMENT_TOPCENTER","PLACEMENT_BOTTOMCENTER","autoClose","boundary","display","offset","popperConfig","reference","Dropdown","_popper","_parent","_menu","_inNavbar","_detectNavbar","showEvent","_createPopper","focus","_completeHide","destroy","update","hideEvent","Popper","referenceElement","_getPopperConfig","createPopper","_getPlacement","parentDropdown","isEnd","_getOffset","popperData","defaultBsPopperConfig","placement","modifiers","options","enabled","_selectMenuItem","clearMenus","openToggles","context","composedPath","isMenuTarget","dataApiKeydownHandler","isInput","isEscapeEvent","isUpOrDownEvent","getToggleButton","stopPropagation","SELECTOR_FIXED_CONTENT","SELECTOR_STICKY_CONTENT","PROPERTY_PADDING","PROPERTY_MARGIN","ScrollBarHelper","getWidth","documentWidth","clientWidth","innerWidth","width","_disableOverFlow","_setElementAttributes","calculatedValue","reset","_resetElementAttributes","isOverflowing","_saveInitialAttribute","overflow","styleProperty","scrollbarWidth","manipulationCallBack","setProperty","_applyManipulationCallback","actualValue","removeProperty","callBack","sel","EVENT_MOUSEDOWN","className","clickCallback","rootElement","Backdrop","_isAppended","_append","_getElement","_emulateAnimation","backdrop","createElement","append","EVENT_FOCUSIN","EVENT_KEYDOWN_TAB","TAB_NAV_FORWARD","TAB_NAV_BACKWARD","autofocus","trapElement","FocusTrap","_isActive","_lastTabNavDirection","activate","_handleFocusin","_handleKeydown","deactivate","elements","shiftKey","EVENT_HIDE_PREVENTED","EVENT_RESIZE","EVENT_CLICK_DISMISS","EVENT_MOUSEDOWN_DISMISS","EVENT_KEYDOWN_DISMISS","CLASS_NAME_OPEN","CLASS_NAME_STATIC","OPEN_SELECTOR","SELECTOR_DIALOG","SELECTOR_MODAL_BODY","Modal","_dialog","_backdrop","_initializeBackDrop","_focustrap","_initializeFocusTrap","_scrollBar","_adjustDialog","_showElement","_hideModal","htmlElement","handleUpdate","scrollTop","modalBody","transitionComplete","_triggerBackdropTransition","event2","_resetAdjustments","isModalOverflowing","scrollHeight","clientHeight","initialOverflowY","overflowY","isBodyOverflowing","paddingLeft","paddingRight","alreadyOpen","CLASS_NAME_SHOWING","CLASS_NAME_HIDING","CLASS_NAME_BACKDROP","scroll","Offcanvas","blur","completeCallback","position","uriAttributes","ARIA_ATTRIBUTE_PATTERN","SAFE_URL_PATTERN","DATA_URL_PATTERN","allowedAttribute","attribute","allowedAttributeList","attributeName","nodeName","nodeValue","attributeRegex","some","regex","DefaultAllowlist","a","area","b","br","col","code","div","em","hr","h1","h2","h3","h4","h5","h6","i","li","ol","p","pre","s","small","span","sub","sup","strong","u","ul","sanitizeHtml","unsafeHtml","allowList","sanitizeFunction","domParser","DOMParser","createdDocument","parseFromString","elementName","attributeList","allowedAttributes","innerHTML","content","extraClass","html","sanitize","sanitizeFn","template","DefaultContentType","entry","TemplateFactory","getContent","_resolvePossibleFunction","hasContent","changeContent","_checkContent","toHtml","templateWrapper","_maybeSanitize","text","_setContent","arg","templateElement","_putElementInTemplate","textContent","DISALLOWED_ATTRIBUTES","CLASS_NAME_MODAL","SELECTOR_TOOLTIP_INNER","SELECTOR_MODAL","EVENT_MODAL_HIDE","TRIGGER_HOVER","TRIGGER_FOCUS","TRIGGER_CLICK","TRIGGER_MANUAL","EVENT_INSERTED","EVENT_CLICK","EVENT_FOCUSOUT","AttachmentMap","AUTO","TOP","RIGHT","BOTTOM","LEFT","animation","container","customClass","delay","fallbackPlacements","title","Tooltip","_isEnabled","_timeout","_isHovered","_activeTrigger","_templateFactory","_newContent","tip","_setListeners","_fixTitle","enable","disable","toggleEnabled","click","_leave","_enter","_hideModalHandler","_disposePopper","_isWithContent","shadowRoot","isInTheDom","ownerDocument","_getTipElement","_isWithActiveTrigger","_getTitle","_createTipElement","_getContentForTemplate","_getTemplateFactory","tipId","setContent","_initializeOnDelegatedTarget","_getDelegateConfig","attachment","phase","state","triggers","eventIn","eventOut","_setTimeout","timeout","dataAttributes","dataAttribute","SELECTOR_TITLE","SELECTOR_CONTENT","Popover","_getContent","EVENT_ACTIVATE","CLASS_NAME_DROPDOWN_ITEM","SELECTOR_DATA_SPY","SELECTOR_TARGET_LINKS","SELECTOR_NAV_LIST_GROUP","SELECTOR_NAV_LINKS","SELECTOR_NAV_ITEMS","SELECTOR_LIST_ITEMS","SELECTOR_LINK_ITEMS","SELECTOR_DROPDOWN","SELECTOR_DROPDOWN_TOGGLE","rootMargin","smoothScroll","threshold","ScrollSpy","_targetLinks","_observableSections","_rootElement","_activeTarget","_observer","_previousScrollData","visibleEntryTop","parentScrollTop","refresh","_initializeTargetsAndObservables","_maybeEnableSmoothScroll","disconnect","_getNewObserver","section","observe","observableSection","hash","height","offsetTop","scrollTo","top","behavior","IntersectionObserver","_observerCallback","targetElement","_process","userScrollsDown","isIntersecting","_clearActiveClass","entryIsLowerThanPrevious","targetLinks","anchor","_activateParents","listGroup","item","activeNodes","node","spy","CLASS_DROPDOWN","SELECTOR_DROPDOWN_MENU","NOT_SELECTOR_DROPDOWN_TOGGLE","SELECTOR_TAB_PANEL","SELECTOR_OUTER","SELECTOR_INNER","SELECTOR_INNER_ELEM","SELECTOR_DATA_TOGGLE_ACTIVE","Tab","_setInitialAttributes","_getChildren","innerElem","_elemIsActive","active","_getActiveElem","_deactivate","_activate","relatedElem","_toggleDropDown","nextActiveElement","preventScroll","_setAttributeIfNotExists","_setInitialAttributesOnChild","_getInnerElement","isActive","outerElem","_getOuterElement","_setInitialAttributesOnTargetPanel","open","EVENT_MOUSEOVER","EVENT_MOUSEOUT","CLASS_NAME_HIDE","autohide","Toast","_hasMouseInteraction","_hasKeyboardInteraction","_clearTimeout","_maybeScheduleHide","isShown","_onInteraction","isInteracting"],"version":3,"file":"index.e82f28a0.js.map","sourceRoot":"/__parcel_source_root/"}